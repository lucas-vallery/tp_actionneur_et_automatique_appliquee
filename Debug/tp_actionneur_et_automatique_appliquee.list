
tp_actionneur_et_automatique_appliquee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0c8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800a2a8  0800a2a8  0001a2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a860  0800a860  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a860  0800a860  0001a860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a868  0800a868  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a868  0800a868  0001a868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a86c  0800a86c  0001a86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800a870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  200000d8  0800a948  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  0800a948  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b493  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e1  00000000  00000000  0003b59b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  0003ea80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  00040068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a664  00000000  00000000  000414d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac1b  00000000  00000000  0006bb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113f4c  00000000  00000000  00086757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019a6a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b3c  00000000  00000000  0019a6f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000d8 	.word	0x200000d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a290 	.word	0x0800a290

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000dc 	.word	0x200000dc
 800021c:	0800a290 	.word	0x0800a290

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	; 0x30
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2220      	movs	r2, #32
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f007 ff27 	bl	8008460 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000612:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000614:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000618:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800061a:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <MX_ADC1_Init+0xec>)
 800061c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000620:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000622:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <MX_ADC1_Init+0xec>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800062e:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063a:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <MX_ADC1_Init+0xec>)
 800063c:	2204      	movs	r2, #4
 800063e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000642:	2200      	movs	r2, #0
 8000644:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000646:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000648:	2200      	movs	r2, #0
 800064a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <MX_ADC1_Init+0xec>)
 800064e:	2201      	movs	r2, #1
 8000650:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800065a:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_ADC1_Init+0xec>)
 800065c:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000660:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000662:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000664:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <MX_ADC1_Init+0xec>)
 800066c:	2201      	movs	r2, #1
 800066e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000672:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000674:	2200      	movs	r2, #0
 8000676:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <MX_ADC1_Init+0xec>)
 800067a:	2200      	movs	r2, #0
 800067c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000680:	4817      	ldr	r0, [pc, #92]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000682:	f001 fa77 	bl	8001b74 <HAL_ADC_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800068c:	f000 fc8a 	bl	8000fa4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000698:	4619      	mov	r1, r3
 800069a:	4811      	ldr	r0, [pc, #68]	; (80006e0 <MX_ADC1_Init+0xec>)
 800069c:	f002 fa7a 	bl	8002b94 <HAL_ADCEx_MultiModeConfigChannel>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80006a6:	f000 fc7d 	bl	8000fa4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_ADC1_Init+0xf0>)
 80006ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ae:	2306      	movs	r3, #6
 80006b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80006b2:	2305      	movs	r3, #5
 80006b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006b6:	237f      	movs	r3, #127	; 0x7f
 80006b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ba:	2304      	movs	r3, #4
 80006bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	4806      	ldr	r0, [pc, #24]	; (80006e0 <MX_ADC1_Init+0xec>)
 80006c8:	f001 fd08 	bl	80020dc <HAL_ADC_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006d2:	f000 fc67 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	3730      	adds	r7, #48	; 0x30
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200000f4 	.word	0x200000f4
 80006e4:	04300002 	.word	0x04300002

080006e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b09e      	sub	sp, #120	; 0x78
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	2254      	movs	r2, #84	; 0x54
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f007 fea9 	bl	8008460 <memset>
  if(adcHandle->Instance==ADC1)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000716:	d15f      	bne.n	80007d8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000718:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800071c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800071e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000722:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4618      	mov	r0, r3
 800072a:	f003 ff23 	bl	8004574 <HAL_RCCEx_PeriphCLKConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000734:	f000 fc36 	bl	8000fa4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000738:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <HAL_ADC_MspInit+0xf8>)
 800073a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073c:	4a28      	ldr	r2, [pc, #160]	; (80007e0 <HAL_ADC_MspInit+0xf8>)
 800073e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000742:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000744:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <HAL_ADC_MspInit+0xf8>)
 8000746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <HAL_ADC_MspInit+0xf8>)
 8000752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000754:	4a22      	ldr	r2, [pc, #136]	; (80007e0 <HAL_ADC_MspInit+0xf8>)
 8000756:	f043 0301 	orr.w	r3, r3, #1
 800075a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075c:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <HAL_ADC_MspInit+0xf8>)
 800075e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000768:	2301      	movs	r3, #1
 800076a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800076c:	2303      	movs	r3, #3
 800076e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000778:	4619      	mov	r1, r3
 800077a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077e:	f002 ff53 	bl	8003628 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <HAL_ADC_MspInit+0xfc>)
 8000784:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <HAL_ADC_MspInit+0x100>)
 8000786:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <HAL_ADC_MspInit+0xfc>)
 800078a:	2205      	movs	r2, #5
 800078c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <HAL_ADC_MspInit+0xfc>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <HAL_ADC_MspInit+0xfc>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_ADC_MspInit+0xfc>)
 800079c:	2280      	movs	r2, #128	; 0x80
 800079e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <HAL_ADC_MspInit+0xfc>)
 80007a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007a8:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <HAL_ADC_MspInit+0xfc>)
 80007aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <HAL_ADC_MspInit+0xfc>)
 80007b2:	2220      	movs	r2, #32
 80007b4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <HAL_ADC_MspInit+0xfc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <HAL_ADC_MspInit+0xfc>)
 80007be:	f002 fc01 	bl	8002fc4 <HAL_DMA_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80007c8:	f000 fbec 	bl	8000fa4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <HAL_ADC_MspInit+0xfc>)
 80007d0:	655a      	str	r2, [r3, #84]	; 0x54
 80007d2:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <HAL_ADC_MspInit+0xfc>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007d8:	bf00      	nop
 80007da:	3778      	adds	r7, #120	; 0x78
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000
 80007e4:	20000160 	.word	0x20000160
 80007e8:	40020008 	.word	0x40020008

080007ec <chopper_start>:
#include "chopper.h"

void chopper_start(void){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2101      	movs	r1, #1
 80007f4:	480e      	ldr	r0, [pc, #56]	; (8000830 <chopper_start+0x44>)
 80007f6:	f003 f899 	bl	800392c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007fa:	2001      	movs	r0, #1
 80007fc:	f000 ff76 	bl	80016ec <HAL_Delay>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	2101      	movs	r1, #1
 8000804:	480a      	ldr	r0, [pc, #40]	; (8000830 <chopper_start+0x44>)
 8000806:	f003 f891 	bl	800392c <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800080a:	2100      	movs	r1, #0
 800080c:	4809      	ldr	r0, [pc, #36]	; (8000834 <chopper_start+0x48>)
 800080e:	f004 f9b7 	bl	8004b80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000812:	2104      	movs	r1, #4
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <chopper_start+0x48>)
 8000816:	f004 f9b3 	bl	8004b80 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800081a:	2100      	movs	r1, #0
 800081c:	4805      	ldr	r0, [pc, #20]	; (8000834 <chopper_start+0x48>)
 800081e:	f005 fa1b 	bl	8005c58 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000822:	2104      	movs	r1, #4
 8000824:	4803      	ldr	r0, [pc, #12]	; (8000834 <chopper_start+0x48>)
 8000826:	f005 fa17 	bl	8005c58 <HAL_TIMEx_PWMN_Start>
	//HAL_TIM_Base_Start(&htim1);
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	48000800 	.word	0x48000800
 8000834:	20000214 	.word	0x20000214

08000838 <chopper_stop>:

void chopper_stop(void){
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint16_t) NO_SPEED);
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <chopper_stop+0x3c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f240 326b 	movw	r2, #875	; 0x36b
 8000844:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint16_t) NO_SPEED);
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <chopper_stop+0x3c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f240 326b 	movw	r2, #875	; 0x36b
 800084e:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000850:	2100      	movs	r1, #0
 8000852:	4808      	ldr	r0, [pc, #32]	; (8000874 <chopper_stop+0x3c>)
 8000854:	f004 faa6 	bl	8004da4 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000858:	2100      	movs	r1, #0
 800085a:	4806      	ldr	r0, [pc, #24]	; (8000874 <chopper_stop+0x3c>)
 800085c:	f005 fabe 	bl	8005ddc <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000860:	2104      	movs	r1, #4
 8000862:	4804      	ldr	r0, [pc, #16]	; (8000874 <chopper_stop+0x3c>)
 8000864:	f004 fa9e 	bl	8004da4 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000868:	2104      	movs	r1, #4
 800086a:	4802      	ldr	r0, [pc, #8]	; (8000874 <chopper_stop+0x3c>)
 800086c:	f005 fab6 	bl	8005ddc <HAL_TIMEx_PWMN_Stop>

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000214 	.word	0x20000214

08000878 <chopper_speed>:

int chopper_speed(uint16_t targetSpeed){
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	80fb      	strh	r3, [r7, #6]
	uint16_t currentSpeed = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1);
 8000882:	4b2a      	ldr	r3, [pc, #168]	; (800092c <chopper_speed+0xb4>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000888:	81fb      	strh	r3, [r7, #14]
	uint16_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <chopper_speed+0xb4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000890:	81bb      	strh	r3, [r7, #12]
	uint16_t accelStep = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	817b      	strh	r3, [r7, #10]

	if(targetSpeed > MAX_SPEED){
 8000896:	88fb      	ldrh	r3, [r7, #6]
 8000898:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800089c:	4293      	cmp	r3, r2
 800089e:	d902      	bls.n	80008a6 <chopper_speed+0x2e>
		targetSpeed = MAX_SPEED;
 80008a0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80008a4:	80fb      	strh	r3, [r7, #6]
	}
	if(targetSpeed < NO_SPEED){
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	f240 326a 	movw	r2, #874	; 0x36a
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d802      	bhi.n	80008b6 <chopper_speed+0x3e>
		targetSpeed = NO_SPEED;
 80008b0:	f240 336b 	movw	r3, #875	; 0x36b
 80008b4:	80fb      	strh	r3, [r7, #6]
	}

	if(targetSpeed < currentSpeed){
 80008b6:	88fa      	ldrh	r2, [r7, #6]
 80008b8:	89fb      	ldrh	r3, [r7, #14]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d22a      	bcs.n	8000914 <chopper_speed+0x9c>
			while(currentSpeed - accelStep > targetSpeed){
 80008be:	e010      	b.n	80008e2 <chopper_speed+0x6a>
				currentSpeed -= accelStep;
 80008c0:	89fa      	ldrh	r2, [r7, #14]
 80008c2:	897b      	ldrh	r3, [r7, #10]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	81fb      	strh	r3, [r7, #14]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint16_t) currentSpeed);
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <chopper_speed+0xb4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	89fa      	ldrh	r2, [r7, #14]
 80008ce:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint16_t) period-currentSpeed);
 80008d0:	89ba      	ldrh	r2, [r7, #12]
 80008d2:	89fb      	ldrh	r3, [r7, #14]
 80008d4:	1ad2      	subs	r2, r2, r3
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <chopper_speed+0xb4>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(10);
 80008dc:	200a      	movs	r0, #10
 80008de:	f000 ff05 	bl	80016ec <HAL_Delay>
			while(currentSpeed - accelStep > targetSpeed){
 80008e2:	89fa      	ldrh	r2, [r7, #14]
 80008e4:	897b      	ldrh	r3, [r7, #10]
 80008e6:	1ad2      	subs	r2, r2, r3
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	dce8      	bgt.n	80008c0 <chopper_speed+0x48>
			}
			return 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e017      	b.n	8000922 <chopper_speed+0xaa>
	}else {
		while(currentSpeed + accelStep < targetSpeed){
			currentSpeed += accelStep;
 80008f2:	89fa      	ldrh	r2, [r7, #14]
 80008f4:	897b      	ldrh	r3, [r7, #10]
 80008f6:	4413      	add	r3, r2
 80008f8:	81fb      	strh	r3, [r7, #14]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint16_t) currentSpeed);
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <chopper_speed+0xb4>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	89fa      	ldrh	r2, [r7, #14]
 8000900:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint16_t) period-currentSpeed);
 8000902:	89ba      	ldrh	r2, [r7, #12]
 8000904:	89fb      	ldrh	r3, [r7, #14]
 8000906:	1ad2      	subs	r2, r2, r3
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <chopper_speed+0xb4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(10);
 800090e:	200a      	movs	r0, #10
 8000910:	f000 feec 	bl	80016ec <HAL_Delay>
		while(currentSpeed + accelStep < targetSpeed){
 8000914:	89fa      	ldrh	r2, [r7, #14]
 8000916:	897b      	ldrh	r3, [r7, #10]
 8000918:	441a      	add	r2, r3
 800091a:	88fb      	ldrh	r3, [r7, #6]
 800091c:	429a      	cmp	r2, r3
 800091e:	dbe8      	blt.n	80008f2 <chopper_speed+0x7a>
		}
		return 0;
 8000920:	2300      	movs	r3, #0
	}
}
 8000922:	4618      	mov	r0, r3
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000214 	.word	0x20000214

08000930 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_DMA_Init+0x50>)
 8000938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800093a:	4a11      	ldr	r2, [pc, #68]	; (8000980 <MX_DMA_Init+0x50>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	6493      	str	r3, [r2, #72]	; 0x48
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_DMA_Init+0x50>)
 8000944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_DMA_Init+0x50>)
 8000950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000952:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <MX_DMA_Init+0x50>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6493      	str	r3, [r2, #72]	; 0x48
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_DMA_Init+0x50>)
 800095c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	200b      	movs	r0, #11
 800096c:	f002 faf5 	bl	8002f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000970:	200b      	movs	r0, #11
 8000972:	f002 fb0c 	bl	8002f8e <HAL_NVIC_EnableIRQ>

}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 030c 	add.w	r3, r7, #12
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <MX_GPIO_Init+0xe4>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4a32      	ldr	r2, [pc, #200]	; (8000a68 <MX_GPIO_Init+0xe4>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4b30      	ldr	r3, [pc, #192]	; (8000a68 <MX_GPIO_Init+0xe4>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009b2:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <MX_GPIO_Init+0xe4>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a2c      	ldr	r2, [pc, #176]	; (8000a68 <MX_GPIO_Init+0xe4>)
 80009b8:	f043 0320 	orr.w	r3, r3, #32
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <MX_GPIO_Init+0xe4>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0320 	and.w	r3, r3, #32
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <MX_GPIO_Init+0xe4>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a26      	ldr	r2, [pc, #152]	; (8000a68 <MX_GPIO_Init+0xe4>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <MX_GPIO_Init+0xe4>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2101      	movs	r1, #1
 80009e6:	4821      	ldr	r0, [pc, #132]	; (8000a6c <MX_GPIO_Init+0xe8>)
 80009e8:	f002 ffa0 	bl	800392c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2120      	movs	r1, #32
 80009f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f4:	f002 ff9a 	bl	800392c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4817      	ldr	r0, [pc, #92]	; (8000a6c <MX_GPIO_Init+0xe8>)
 8000a10:	f002 fe0a 	bl	8003628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8000a14:	2301      	movs	r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4810      	ldr	r0, [pc, #64]	; (8000a6c <MX_GPIO_Init+0xe8>)
 8000a2c:	f002 fdfc 	bl	8003628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a30:	2320      	movs	r3, #32
 8000a32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	4619      	mov	r1, r3
 8000a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4a:	f002 fded 	bl	8003628 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2028      	movs	r0, #40	; 0x28
 8000a54:	f002 fa81 	bl	8002f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a58:	2028      	movs	r0, #40	; 0x28
 8000a5a:	f002 fa98 	bl	8002f8e <HAL_NVIC_EnableIRQ>

}
 8000a5e:	bf00      	nop
 8000a60:	3720      	adds	r7, #32
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	48000800 	.word	0x48000800

08000a70 <serial_transmit>:
 *      Author: lucas
 */

#include <hal_abstraction.h>

int serial_transmit(const uint8_t *pData, uint16_t size, uint32_t timeout){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	817b      	strh	r3, [r7, #10]
	HAL_UART_Transmit(SERIAL_PORT, pData, size, timeout);
 8000a7e:	897a      	ldrh	r2, [r7, #10]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	68f9      	ldr	r1, [r7, #12]
 8000a84:	4803      	ldr	r0, [pc, #12]	; (8000a94 <serial_transmit+0x24>)
 8000a86:	f005 fbc4 	bl	8006212 <HAL_UART_Transmit>

	return 0;
 8000a8a:	2300      	movs	r3, #0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000260 	.word	0x20000260

08000a98 <serial_receive>:

int serial_receive(uint8_t *pData, uint16_t size, uint32_t timeout){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	607a      	str	r2, [r7, #4]
 8000aa4:	817b      	strh	r3, [r7, #10]
	HAL_UART_Receive(SERIAL_PORT, pData, size, timeout);
 8000aa6:	897a      	ldrh	r2, [r7, #10]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	68f9      	ldr	r1, [r7, #12]
 8000aac:	4803      	ldr	r0, [pc, #12]	; (8000abc <serial_receive+0x24>)
 8000aae:	f005 fc46 	bl	800633e <HAL_UART_Receive>

	return 0;
 8000ab2:	2300      	movs	r3, #0
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000260 	.word	0x20000260

08000ac0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000ac8:	1d39      	adds	r1, r7, #4
 8000aca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <__io_putchar+0x20>)
 8000ad2:	f005 fb9e 	bl	8006212 <HAL_UART_Transmit>
	return ch;
 8000ad6:	687b      	ldr	r3, [r7, #4]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000260 	.word	0x20000260

08000ae4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b0a0      	sub	sp, #128	; 0x80
 8000ae8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	shell.serial.transmit = serial_transmit;
 8000aea:	4bae      	ldr	r3, [pc, #696]	; (8000da4 <main+0x2c0>)
 8000aec:	4aae      	ldr	r2, [pc, #696]	; (8000da8 <main+0x2c4>)
 8000aee:	601a      	str	r2, [r3, #0]
	shell.serial.receive = serial_receive;
 8000af0:	4bac      	ldr	r3, [pc, #688]	; (8000da4 <main+0x2c0>)
 8000af2:	4aae      	ldr	r2, [pc, #696]	; (8000dac <main+0x2c8>)
 8000af4:	605a      	str	r2, [r3, #4]


	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	67bb      	str	r3, [r7, #120]	; 0x78
	char*		token;
	int 		newCmdReady = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	673b      	str	r3, [r7, #112]	; 0x70
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000afe:	f000 fd84 	bl	800160a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b02:	f000 f9ed 	bl	8000ee0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b06:	f7ff ff3d 	bl	8000984 <MX_GPIO_Init>
	MX_DMA_Init();
 8000b0a:	f7ff ff11 	bl	8000930 <MX_DMA_Init>
	MX_TIM1_Init();
 8000b0e:	f000 fb91 	bl	8001234 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 8000b12:	f000 fca5 	bl	8001460 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8000b16:	f7ff fd6d 	bl	80005f4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	memset(argv,(int) NULL,MAX_ARGS*sizeof(char*));
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	2224      	movs	r2, #36	; 0x24
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f007 fc9c 	bl	8008460 <memset>
	memset(cmdBuffer,(int) NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000b28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b2c:	2240      	movs	r2, #64	; 0x40
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f007 fc95 	bl	8008460 <memset>
 8000b36:	4b9b      	ldr	r3, [pc, #620]	; (8000da4 <main+0x2c0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	731a      	strb	r2, [r3, #12]
	memset(shell.uartRxBuffer,(int) NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(shell.uartTxBuffer,(int) NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000b3c:	2240      	movs	r2, #64	; 0x40
 8000b3e:	2100      	movs	r1, #0
 8000b40:	489b      	ldr	r0, [pc, #620]	; (8000db0 <main+0x2cc>)
 8000b42:	f007 fc8d 	bl	8008460 <memset>

	HAL_UART_Receive_IT(&huart2, shell.uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000b46:	2201      	movs	r2, #1
 8000b48:	499a      	ldr	r1, [pc, #616]	; (8000db4 <main+0x2d0>)
 8000b4a:	489b      	ldr	r0, [pc, #620]	; (8000db8 <main+0x2d4>)
 8000b4c:	f005 fcca 	bl	80064e4 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8000b50:	200a      	movs	r0, #10
 8000b52:	f000 fdcb 	bl	80016ec <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	2266      	movs	r2, #102	; 0x66
 8000b5c:	4997      	ldr	r1, [pc, #604]	; (8000dbc <main+0x2d8>)
 8000b5e:	4896      	ldr	r0, [pc, #600]	; (8000db8 <main+0x2d4>)
 8000b60:	f005 fb57 	bl	8006212 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
 8000b68:	2218      	movs	r2, #24
 8000b6a:	4995      	ldr	r1, [pc, #596]	; (8000dc0 <main+0x2dc>)
 8000b6c:	4892      	ldr	r0, [pc, #584]	; (8000db8 <main+0x2d4>)
 8000b6e:	f005 fb50 	bl	8006212 <HAL_UART_Transmit>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&dataRaw, 1);
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	2201      	movs	r2, #1
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4892      	ldr	r0, [pc, #584]	; (8000dc4 <main+0x2e0>)
 8000b7c:	f001 f9bc 	bl	8001ef8 <HAL_ADC_Start_DMA>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{	// uartRxReceived is set to 1 when a new character is received on uart 1
		if(shell.uartRxReceived){
 8000b80:	4b88      	ldr	r3, [pc, #544]	; (8000da4 <main+0x2c0>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d056      	beq.n	8000c36 <main+0x152>
			switch(shell.uartRxBuffer[0]){
 8000b88:	4b86      	ldr	r3, [pc, #536]	; (8000da4 <main+0x2c0>)
 8000b8a:	7b1b      	ldrb	r3, [r3, #12]
 8000b8c:	2b0d      	cmp	r3, #13
 8000b8e:	d002      	beq.n	8000b96 <main+0xb2>
 8000b90:	2b7f      	cmp	r3, #127	; 0x7f
 8000b92:	d02d      	beq.n	8000bf0 <main+0x10c>
 8000b94:	e03c      	b.n	8000c10 <main+0x12c>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				shell.serial.transmit((uint8_t*) newline, sizeof(newline), HAL_MAX_DELAY);
 8000b96:	4b83      	ldr	r3, [pc, #524]	; (8000da4 <main+0x2c0>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b9e:	2103      	movs	r1, #3
 8000ba0:	4889      	ldr	r0, [pc, #548]	; (8000dc8 <main+0x2e4>)
 8000ba2:	4798      	blx	r3
				cmdBuffer[idx_cmd] = '\0';
 8000ba4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000ba8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000baa:	4413      	add	r3, r2
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
				argc = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	67bb      	str	r3, [r7, #120]	; 0x78
				token = strtok(cmdBuffer, " ");
 8000bb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bb8:	4984      	ldr	r1, [pc, #528]	; (8000dcc <main+0x2e8>)
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f007 fd02 	bl	80085c4 <strtok>
 8000bc0:	6778      	str	r0, [r7, #116]	; 0x74
				while(token!=NULL){
 8000bc2:	e00d      	b.n	8000be0 <main+0xfc>
					argv[argc++] = token;
 8000bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000bc6:	1c5a      	adds	r2, r3, #1
 8000bc8:	67ba      	str	r2, [r7, #120]	; 0x78
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	3380      	adds	r3, #128	; 0x80
 8000bce:	443b      	add	r3, r7
 8000bd0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000bd2:	f843 2c74 	str.w	r2, [r3, #-116]
					token = strtok(NULL, " ");
 8000bd6:	497d      	ldr	r1, [pc, #500]	; (8000dcc <main+0x2e8>)
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f007 fcf3 	bl	80085c4 <strtok>
 8000bde:	6778      	str	r0, [r7, #116]	; 0x74
				while(token!=NULL){
 8000be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1ee      	bne.n	8000bc4 <main+0xe0>
				}

				idx_cmd = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	67fb      	str	r3, [r7, #124]	; 0x7c
				newCmdReady = 1;
 8000bea:	2301      	movs	r3, #1
 8000bec:	673b      	str	r3, [r7, #112]	; 0x70
				break;
 8000bee:	e01f      	b.n	8000c30 <main+0x14c>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 8000bf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000bf2:	1e5a      	subs	r2, r3, #1
 8000bf4:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000bf6:	3380      	adds	r3, #128	; 0x80
 8000bf8:	443b      	add	r3, r7
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f803 2c50 	strb.w	r2, [r3, #-80]
				shell.serial.transmit(shell.uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000c00:	4b68      	ldr	r3, [pc, #416]	; (8000da4 <main+0x2c0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f04f 32ff 	mov.w	r2, #4294967295
 8000c08:	2101      	movs	r1, #1
 8000c0a:	486a      	ldr	r0, [pc, #424]	; (8000db4 <main+0x2d0>)
 8000c0c:	4798      	blx	r3
				break;
 8000c0e:	e00f      	b.n	8000c30 <main+0x14c>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = shell.uartRxBuffer[0];
 8000c10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000c16:	4a63      	ldr	r2, [pc, #396]	; (8000da4 <main+0x2c0>)
 8000c18:	7b12      	ldrb	r2, [r2, #12]
 8000c1a:	3380      	adds	r3, #128	; 0x80
 8000c1c:	443b      	add	r3, r7
 8000c1e:	f803 2c50 	strb.w	r2, [r3, #-80]
				shell.serial.transmit(shell.uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000c22:	4b60      	ldr	r3, [pc, #384]	; (8000da4 <main+0x2c0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4861      	ldr	r0, [pc, #388]	; (8000db4 <main+0x2d0>)
 8000c2e:	4798      	blx	r3
			}
			shell.uartRxReceived = 0;
 8000c30:	4b5c      	ldr	r3, [pc, #368]	; (8000da4 <main+0x2c0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
		}

		if(newCmdReady){
 8000c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0a1      	beq.n	8000b80 <main+0x9c>
			if(strcmp(argv[0],"set")==0){
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4964      	ldr	r1, [pc, #400]	; (8000dd0 <main+0x2ec>)
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff faed 	bl	8000220 <strcmp>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d12d      	bne.n	8000ca8 <main+0x1c4>
				if(strcmp(argv[1],"PA5")==0){
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	4961      	ldr	r1, [pc, #388]	; (8000dd4 <main+0x2f0>)
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fae5 	bl	8000220 <strcmp>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d11d      	bne.n	8000c98 <main+0x1b4>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f007 fbd0 	bl	8008404 <atoi>
 8000c64:	4603      	mov	r3, r0
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	461a      	mov	r2, r3
 8000c6a:	2120      	movs	r1, #32
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c70:	f002 fe5c 	bl	800392c <HAL_GPIO_WritePin>
					sprintf((char*) &(shell.uartTxBuffer),"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f007 fbc4 	bl	8008404 <atoi>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4955      	ldr	r1, [pc, #340]	; (8000dd8 <main+0x2f4>)
 8000c82:	484b      	ldr	r0, [pc, #300]	; (8000db0 <main+0x2cc>)
 8000c84:	f007 fc0c 	bl	80084a0 <siprintf>
					shell.serial.transmit(shell.uartTxBuffer, 32, HAL_MAX_DELAY);
 8000c88:	4b46      	ldr	r3, [pc, #280]	; (8000da4 <main+0x2c0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c90:	2120      	movs	r1, #32
 8000c92:	4847      	ldr	r0, [pc, #284]	; (8000db0 <main+0x2cc>)
 8000c94:	4798      	blx	r3
 8000c96:	e104      	b.n	8000ea2 <main+0x3be>
				}
				else{
					shell.serial.transmit((uint8_t*)cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000c98:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <main+0x2c0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	2114      	movs	r1, #20
 8000ca2:	484e      	ldr	r0, [pc, #312]	; (8000ddc <main+0x2f8>)
 8000ca4:	4798      	blx	r3
 8000ca6:	e0fc      	b.n	8000ea2 <main+0x3be>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	494d      	ldr	r1, [pc, #308]	; (8000de0 <main+0x2fc>)
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fab7 	bl	8000220 <strcmp>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d107      	bne.n	8000cc8 <main+0x1e4>
			{
				shell.serial.transmit((uint8_t*)cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000cb8:	4b3a      	ldr	r3, [pc, #232]	; (8000da4 <main+0x2c0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc0:	2114      	movs	r1, #20
 8000cc2:	4846      	ldr	r0, [pc, #280]	; (8000ddc <main+0x2f8>)
 8000cc4:	4798      	blx	r3
 8000cc6:	e0ec      	b.n	8000ea2 <main+0x3be>
			}
			else if(strcmp(argv[0],"start")==0) {
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4946      	ldr	r1, [pc, #280]	; (8000de4 <main+0x300>)
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff faa7 	bl	8000220 <strcmp>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d109      	bne.n	8000cec <main+0x208>
				chopper_start();
 8000cd8:	f7ff fd88 	bl	80007ec <chopper_start>

				shell.serial.transmit((uint8_t*)startmsg, sizeof(startmsg), HAL_MAX_DELAY);
 8000cdc:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <main+0x2c0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	210b      	movs	r1, #11
 8000ce6:	4840      	ldr	r0, [pc, #256]	; (8000de8 <main+0x304>)
 8000ce8:	4798      	blx	r3
 8000cea:	e0da      	b.n	8000ea2 <main+0x3be>
			}
			else if(strcmp(argv[0],"stop")==0) {
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	493f      	ldr	r1, [pc, #252]	; (8000dec <main+0x308>)
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fa95 	bl	8000220 <strcmp>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d109      	bne.n	8000d10 <main+0x22c>
				chopper_stop();
 8000cfc:	f7ff fd9c 	bl	8000838 <chopper_stop>

				shell.serial.transmit((uint8_t*)stopmsg, sizeof(stopmsg), HAL_MAX_DELAY);
 8000d00:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <main+0x2c0>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	210c      	movs	r1, #12
 8000d0a:	4839      	ldr	r0, [pc, #228]	; (8000df0 <main+0x30c>)
 8000d0c:	4798      	blx	r3
 8000d0e:	e0c8      	b.n	8000ea2 <main+0x3be>
			}
			else if(strcmp(argv[0],"help")==0)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4938      	ldr	r1, [pc, #224]	; (8000df4 <main+0x310>)
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fa83 	bl	8000220 <strcmp>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f040 808b 	bne.w	8000e38 <main+0x354>
			{
				if(strcmp(argv[1], "set")==0){
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	492a      	ldr	r1, [pc, #168]	; (8000dd0 <main+0x2ec>)
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fa7a 	bl	8000220 <strcmp>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d107      	bne.n	8000d42 <main+0x25e>
					shell.serial.transmit((uint8_t*)&help[0], sizeof(help[0]), HAL_MAX_DELAY);
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <main+0x2c0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3a:	2120      	movs	r1, #32
 8000d3c:	482e      	ldr	r0, [pc, #184]	; (8000df8 <main+0x314>)
 8000d3e:	4798      	blx	r3
 8000d40:	e0af      	b.n	8000ea2 <main+0x3be>
				}
				else if(strcmp(argv[1], "get")==0){
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	4926      	ldr	r1, [pc, #152]	; (8000de0 <main+0x2fc>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fa6a 	bl	8000220 <strcmp>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d107      	bne.n	8000d62 <main+0x27e>
					shell.serial.transmit((uint8_t*)&help[1], sizeof(help[1]), HAL_MAX_DELAY);
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <main+0x2c0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5a:	2120      	movs	r1, #32
 8000d5c:	4827      	ldr	r0, [pc, #156]	; (8000dfc <main+0x318>)
 8000d5e:	4798      	blx	r3
 8000d60:	e09f      	b.n	8000ea2 <main+0x3be>
				}
				else if(strcmp(argv[1], "start")==0){
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	491f      	ldr	r1, [pc, #124]	; (8000de4 <main+0x300>)
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fa5a 	bl	8000220 <strcmp>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d107      	bne.n	8000d82 <main+0x29e>
					shell.serial.transmit((uint8_t*)&help[2], sizeof(help[2]), HAL_MAX_DELAY);
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <main+0x2c0>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	4820      	ldr	r0, [pc, #128]	; (8000e00 <main+0x31c>)
 8000d7e:	4798      	blx	r3
 8000d80:	e08f      	b.n	8000ea2 <main+0x3be>
				}
				else if(strcmp(argv[1], "stop")==0){
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	4919      	ldr	r1, [pc, #100]	; (8000dec <main+0x308>)
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fa4a 	bl	8000220 <strcmp>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d13a      	bne.n	8000e08 <main+0x324>
					shell.serial.transmit((uint8_t*)&help[3], sizeof(help[3]), HAL_MAX_DELAY);
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <main+0x2c0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9a:	2120      	movs	r1, #32
 8000d9c:	4819      	ldr	r0, [pc, #100]	; (8000e04 <main+0x320>)
 8000d9e:	4798      	blx	r3
 8000da0:	e07f      	b.n	8000ea2 <main+0x3be>
 8000da2:	bf00      	nop
 8000da4:	200001c0 	.word	0x200001c0
 8000da8:	08000a71 	.word	0x08000a71
 8000dac:	08000a99 	.word	0x08000a99
 8000db0:	200001cd 	.word	0x200001cd
 8000db4:	200001cc 	.word	0x200001cc
 8000db8:	20000260 	.word	0x20000260
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	0800a310 	.word	0x0800a310
 8000dc4:	200000f4 	.word	0x200000f4
 8000dc8:	0800a328 	.word	0x0800a328
 8000dcc:	0800a2a8 	.word	0x0800a2a8
 8000dd0:	0800a2ac 	.word	0x0800a2ac
 8000dd4:	0800a2b0 	.word	0x0800a2b0
 8000dd8:	0800a2b4 	.word	0x0800a2b4
 8000ddc:	0800a32c 	.word	0x0800a32c
 8000de0:	0800a2d0 	.word	0x0800a2d0
 8000de4:	0800a2d4 	.word	0x0800a2d4
 8000de8:	0800a340 	.word	0x0800a340
 8000dec:	0800a2dc 	.word	0x0800a2dc
 8000df0:	0800a34c 	.word	0x0800a34c
 8000df4:	0800a2e4 	.word	0x0800a2e4
 8000df8:	0800a358 	.word	0x0800a358
 8000dfc:	0800a378 	.word	0x0800a378
 8000e00:	0800a398 	.word	0x0800a398
 8000e04:	0800a3b8 	.word	0x0800a3b8
				}
				else if(strcmp(argv[1], "pinout")==0){
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	492b      	ldr	r1, [pc, #172]	; (8000eb8 <main+0x3d4>)
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fa07 	bl	8000220 <strcmp>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d107      	bne.n	8000e28 <main+0x344>

					shell.serial.transmit((uint8_t*)&help[4], sizeof(help[4]), HAL_MAX_DELAY);
 8000e18:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <main+0x3d8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e20:	2120      	movs	r1, #32
 8000e22:	4827      	ldr	r0, [pc, #156]	; (8000ec0 <main+0x3dc>)
 8000e24:	4798      	blx	r3
 8000e26:	e03c      	b.n	8000ea2 <main+0x3be>
				}
				else{
					shell.serial.transmit((uint8_t*)&help, sizeof(help), HAL_MAX_DELAY);
 8000e28:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <main+0x3d8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e30:	21a0      	movs	r1, #160	; 0xa0
 8000e32:	4824      	ldr	r0, [pc, #144]	; (8000ec4 <main+0x3e0>)
 8000e34:	4798      	blx	r3
 8000e36:	e034      	b.n	8000ea2 <main+0x3be>
				}
			}
			else if(strcmp(argv[0],"pinout")==0) {
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	491f      	ldr	r1, [pc, #124]	; (8000eb8 <main+0x3d4>)
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff f9ef 	bl	8000220 <strcmp>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d108      	bne.n	8000e5a <main+0x376>
				shell.serial.transmit((uint8_t*)&pinoutmsg, sizeof(pinoutmsg), HAL_MAX_DELAY);
 8000e48:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <main+0x3d8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e50:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000e54:	481c      	ldr	r0, [pc, #112]	; (8000ec8 <main+0x3e4>)
 8000e56:	4798      	blx	r3
 8000e58:	e023      	b.n	8000ea2 <main+0x3be>
			}
			else if(strcmp(argv[0],"speed")==0) {
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	491b      	ldr	r1, [pc, #108]	; (8000ecc <main+0x3e8>)
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff f9de 	bl	8000220 <strcmp>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d114      	bne.n	8000e94 <main+0x3b0>
				if(argv[1] != NULL){
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d00a      	beq.n	8000e86 <main+0x3a2>
					uint16_t speed;
					sscanf(argv[1], "%hd", &speed);
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1dba      	adds	r2, r7, #6
 8000e74:	4916      	ldr	r1, [pc, #88]	; (8000ed0 <main+0x3ec>)
 8000e76:	4618      	mov	r0, r3
 8000e78:	f007 fb32 	bl	80084e0 <siscanf>
					chopper_speed(speed);
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fcfa 	bl	8000878 <chopper_speed>
 8000e84:	e00d      	b.n	8000ea2 <main+0x3be>
				}
				else{
					printf("%hn", dataRaw);
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4811      	ldr	r0, [pc, #68]	; (8000ed4 <main+0x3f0>)
 8000e8e:	f007 faef 	bl	8008470 <iprintf>
 8000e92:	e006      	b.n	8000ea2 <main+0x3be>
				}
			}
			else{
				shell.serial.transmit((uint8_t*)cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <main+0x3d8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	2114      	movs	r1, #20
 8000e9e:	480e      	ldr	r0, [pc, #56]	; (8000ed8 <main+0x3f4>)
 8000ea0:	4798      	blx	r3
			}
			shell.serial.transmit((uint8_t*)prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <main+0x3d8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eaa:	2118      	movs	r1, #24
 8000eac:	480b      	ldr	r0, [pc, #44]	; (8000edc <main+0x3f8>)
 8000eae:	4798      	blx	r3
			newCmdReady = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	673b      	str	r3, [r7, #112]	; 0x70
		if(shell.uartRxReceived){
 8000eb4:	e664      	b.n	8000b80 <main+0x9c>
 8000eb6:	bf00      	nop
 8000eb8:	0800a2ec 	.word	0x0800a2ec
 8000ebc:	200001c0 	.word	0x200001c0
 8000ec0:	0800a3d8 	.word	0x0800a3d8
 8000ec4:	0800a358 	.word	0x0800a358
 8000ec8:	0800a3f8 	.word	0x0800a3f8
 8000ecc:	0800a2f4 	.word	0x0800a2f4
 8000ed0:	0800a2fc 	.word	0x0800a2fc
 8000ed4:	0800a300 	.word	0x0800a300
 8000ed8:	0800a32c 	.word	0x0800a32c
 8000edc:	0800a310 	.word	0x0800a310

08000ee0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b094      	sub	sp, #80	; 0x50
 8000ee4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 0318 	add.w	r3, r7, #24
 8000eea:	2238      	movs	r2, #56	; 0x38
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f007 fab6 	bl	8008460 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f002 fd4e 	bl	80039a4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f12:	2340      	movs	r3, #64	; 0x40
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f16:	2302      	movs	r3, #2
 8000f18:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f1e:	2304      	movs	r3, #4
 8000f20:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000f22:	2355      	movs	r3, #85	; 0x55
 8000f24:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f26:	2302      	movs	r3, #2
 8000f28:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f32:	f107 0318 	add.w	r3, r7, #24
 8000f36:	4618      	mov	r0, r3
 8000f38:	f002 fde8 	bl	8003b0c <HAL_RCC_OscConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000f42:	f000 f82f 	bl	8000fa4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f46:	230f      	movs	r3, #15
 8000f48:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f003 f8ec 	bl	800413c <HAL_RCC_ClockConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8000f6a:	f000 f81b 	bl	8000fa4 <Error_Handler>
	}
}
 8000f6e:	bf00      	nop
 8000f70:	3750      	adds	r7, #80	; 0x50
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	shell.uartRxReceived = 1;
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_UART_RxCpltCallback+0x20>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	609a      	str	r2, [r3, #8]
	HAL_UART_Receive_IT(&huart2, shell.uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000f86:	2201      	movs	r2, #1
 8000f88:	4904      	ldr	r1, [pc, #16]	; (8000f9c <HAL_UART_RxCpltCallback+0x24>)
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <HAL_UART_RxCpltCallback+0x28>)
 8000f8c:	f005 faaa 	bl	80064e4 <HAL_UART_Receive_IT>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200001c0 	.word	0x200001c0
 8000f9c:	200001cc 	.word	0x200001cc
 8000fa0:	20000260 	.word	0x20000260

08000fa4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000fac:	e7fe      	b.n	8000fac <Error_Handler+0x8>
	...

08000fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fba:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fe6:	f002 fd81 	bl	8003aec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <NMI_Handler+0x4>

08000ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <MemManage_Handler+0x4>

0800100a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <BusFault_Handler+0x4>

08001010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <UsageFault_Handler+0x4>

08001016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001044:	f000 fb34 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <DMA1_Channel1_IRQHandler+0x10>)
 8001052:	f002 f99a 	bl	800338a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000160 	.word	0x20000160

08001060 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <USART2_IRQHandler+0x10>)
 8001066:	f005 fa93 	bl	8006590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000260 	.word	0x20000260

08001074 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001078:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800107c:	f002 fc6e 	bl	800395c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
	return 1;
 8001088:	2301      	movs	r3, #1
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <_kill>:

int _kill(int pid, int sig)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800109e:	f007 f9b5 	bl	800840c <__errno>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2216      	movs	r2, #22
 80010a6:	601a      	str	r2, [r3, #0]
	return -1;
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_exit>:

void _exit (int status)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ffe7 	bl	8001094 <_kill>
	while (1) {}		/* Make sure we hang here */
 80010c6:	e7fe      	b.n	80010c6 <_exit+0x12>

080010c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	e00a      	b.n	80010f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010da:	f3af 8000 	nop.w
 80010de:	4601      	mov	r1, r0
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	60ba      	str	r2, [r7, #8]
 80010e6:	b2ca      	uxtb	r2, r1
 80010e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3301      	adds	r3, #1
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	dbf0      	blt.n	80010da <_read+0x12>
	}

return len;
 80010f8:	687b      	ldr	r3, [r7, #4]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	e009      	b.n	8001128 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	60ba      	str	r2, [r7, #8]
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fccf 	bl	8000ac0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	dbf1      	blt.n	8001114 <_write+0x12>
	}
	return len;
 8001130:	687b      	ldr	r3, [r7, #4]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <_close>:

int _close(int file)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
	return -1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001162:	605a      	str	r2, [r3, #4]
	return 0;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <_isatty>:

int _isatty(int file)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
	return 1;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
	return 0;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ac:	4a14      	ldr	r2, [pc, #80]	; (8001200 <_sbrk+0x5c>)
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <_sbrk+0x60>)
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <_sbrk+0x64>)
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <_sbrk+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d207      	bcs.n	80011e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d4:	f007 f91a 	bl	800840c <__errno>
 80011d8:	4603      	mov	r3, r0
 80011da:	220c      	movs	r2, #12
 80011dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	e009      	b.n	80011f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <_sbrk+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <_sbrk+0x64>)
 80011f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f6:	68fb      	ldr	r3, [r7, #12]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20020000 	.word	0x20020000
 8001204:	00000400 	.word	0x00000400
 8001208:	20000210 	.word	0x20000210
 800120c:	20000308 	.word	0x20000308

08001210 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <SystemInit+0x20>)
 8001216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <SystemInit+0x20>)
 800121c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001220:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b09c      	sub	sp, #112	; 0x70
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001248:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001254:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
 8001264:	615a      	str	r2, [r3, #20]
 8001266:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2234      	movs	r2, #52	; 0x34
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f007 f8f6 	bl	8008460 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001274:	4b4c      	ldr	r3, [pc, #304]	; (80013a8 <MX_TIM1_Init+0x174>)
 8001276:	4a4d      	ldr	r2, [pc, #308]	; (80013ac <MX_TIM1_Init+0x178>)
 8001278:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3-1;
 800127a:	4b4b      	ldr	r3, [pc, #300]	; (80013a8 <MX_TIM1_Init+0x174>)
 800127c:	2202      	movs	r2, #2
 800127e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001280:	4b49      	ldr	r3, [pc, #292]	; (80013a8 <MX_TIM1_Init+0x174>)
 8001282:	2220      	movs	r2, #32
 8001284:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1749;
 8001286:	4b48      	ldr	r3, [pc, #288]	; (80013a8 <MX_TIM1_Init+0x174>)
 8001288:	f240 62d5 	movw	r2, #1749	; 0x6d5
 800128c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128e:	4b46      	ldr	r3, [pc, #280]	; (80013a8 <MX_TIM1_Init+0x174>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001294:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <MX_TIM1_Init+0x174>)
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129a:	4b43      	ldr	r3, [pc, #268]	; (80013a8 <MX_TIM1_Init+0x174>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012a0:	4841      	ldr	r0, [pc, #260]	; (80013a8 <MX_TIM1_Init+0x174>)
 80012a2:	f003 fbb5 	bl	8004a10 <HAL_TIM_Base_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012ac:	f7ff fe7a 	bl	8000fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012ba:	4619      	mov	r1, r3
 80012bc:	483a      	ldr	r0, [pc, #232]	; (80013a8 <MX_TIM1_Init+0x174>)
 80012be:	f003 ff21 	bl	8005104 <HAL_TIM_ConfigClockSource>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80012c8:	f7ff fe6c 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012cc:	4836      	ldr	r0, [pc, #216]	; (80013a8 <MX_TIM1_Init+0x174>)
 80012ce:	f003 fbf6 	bl	8004abe <HAL_TIM_PWM_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012d8:	f7ff fe64 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012dc:	2320      	movs	r3, #32
 80012de:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012ec:	4619      	mov	r1, r3
 80012ee:	482e      	ldr	r0, [pc, #184]	; (80013a8 <MX_TIM1_Init+0x174>)
 80012f0:	f004 fdd2 	bl	8005e98 <HAL_TIMEx_MasterConfigSynchronization>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80012fa:	f7ff fe53 	bl	8000fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012fe:	2360      	movs	r3, #96	; 0x60
 8001300:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 875;
 8001302:	f240 336b 	movw	r3, #875	; 0x36b
 8001306:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001308:	2300      	movs	r3, #0
 800130a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800130c:	2300      	movs	r3, #0
 800130e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001314:	2300      	movs	r3, #0
 8001316:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800131c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001320:	2200      	movs	r2, #0
 8001322:	4619      	mov	r1, r3
 8001324:	4820      	ldr	r0, [pc, #128]	; (80013a8 <MX_TIM1_Init+0x174>)
 8001326:	f003 fdd9 	bl	8004edc <HAL_TIM_PWM_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001330:	f7ff fe38 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001334:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001338:	2204      	movs	r2, #4
 800133a:	4619      	mov	r1, r3
 800133c:	481a      	ldr	r0, [pc, #104]	; (80013a8 <MX_TIM1_Init+0x174>)
 800133e:	f003 fdcd 	bl	8004edc <HAL_TIM_PWM_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001348:	f7ff fe2c 	bl	8000fa4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 203;
 8001358:	23cb      	movs	r3, #203	; 0xcb
 800135a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001364:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001372:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800137c:	2300      	movs	r3, #0
 800137e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	4619      	mov	r1, r3
 8001388:	4807      	ldr	r0, [pc, #28]	; (80013a8 <MX_TIM1_Init+0x174>)
 800138a:	f004 fe1b 	bl	8005fc4 <HAL_TIMEx_ConfigBreakDeadTime>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8001394:	f7ff fe06 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001398:	4803      	ldr	r0, [pc, #12]	; (80013a8 <MX_TIM1_Init+0x174>)
 800139a:	f000 f829 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 800139e:	bf00      	nop
 80013a0:	3770      	adds	r7, #112	; 0x70
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000214 	.word	0x20000214
 80013ac:	40012c00 	.word	0x40012c00

080013b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <HAL_TIM_Base_MspInit+0x38>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d10b      	bne.n	80013da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_TIM_Base_MspInit+0x3c>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	4a09      	ldr	r2, [pc, #36]	; (80013ec <HAL_TIM_Base_MspInit+0x3c>)
 80013c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013cc:	6613      	str	r3, [r2, #96]	; 0x60
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <HAL_TIM_Base_MspInit+0x3c>)
 80013d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40012c00 	.word	0x40012c00
 80013ec:	40021000 	.word	0x40021000

080013f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a12      	ldr	r2, [pc, #72]	; (8001458 <HAL_TIM_MspPostInit+0x68>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d11d      	bne.n	800144e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_TIM_MspPostInit+0x6c>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	4a11      	ldr	r2, [pc, #68]	; (800145c <HAL_TIM_MspPostInit+0x6c>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <HAL_TIM_MspPostInit+0x6c>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 800142a:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 800142e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800143c:	2306      	movs	r3, #6
 800143e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	4619      	mov	r1, r3
 8001446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144a:	f002 f8ed 	bl	8003628 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800144e:	bf00      	nop
 8001450:	3720      	adds	r7, #32
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40012c00 	.word	0x40012c00
 800145c:	40021000 	.word	0x40021000

08001460 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001464:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <MX_USART2_UART_Init+0x90>)
 8001466:	4a23      	ldr	r2, [pc, #140]	; (80014f4 <MX_USART2_UART_Init+0x94>)
 8001468:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800146a:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <MX_USART2_UART_Init+0x90>)
 800146c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001470:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001472:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <MX_USART2_UART_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001478:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <MX_USART2_UART_Init+0x90>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800147e:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <MX_USART2_UART_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001484:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <MX_USART2_UART_Init+0x90>)
 8001486:	220c      	movs	r2, #12
 8001488:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <MX_USART2_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001490:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <MX_USART2_UART_Init+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <MX_USART2_UART_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <MX_USART2_UART_Init+0x90>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <MX_USART2_UART_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014a8:	4811      	ldr	r0, [pc, #68]	; (80014f0 <MX_USART2_UART_Init+0x90>)
 80014aa:	f004 fe62 	bl	8006172 <HAL_UART_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80014b4:	f7ff fd76 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014b8:	2100      	movs	r1, #0
 80014ba:	480d      	ldr	r0, [pc, #52]	; (80014f0 <MX_USART2_UART_Init+0x90>)
 80014bc:	f006 fed7 	bl	800826e <HAL_UARTEx_SetTxFifoThreshold>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80014c6:	f7ff fd6d 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ca:	2100      	movs	r1, #0
 80014cc:	4808      	ldr	r0, [pc, #32]	; (80014f0 <MX_USART2_UART_Init+0x90>)
 80014ce:	f006 ff0c 	bl	80082ea <HAL_UARTEx_SetRxFifoThreshold>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80014d8:	f7ff fd64 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80014dc:	4804      	ldr	r0, [pc, #16]	; (80014f0 <MX_USART2_UART_Init+0x90>)
 80014de:	f006 fe8d 	bl	80081fc <HAL_UARTEx_DisableFifoMode>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80014e8:	f7ff fd5c 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000260 	.word	0x20000260
 80014f4:	40004400 	.word	0x40004400

080014f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b09e      	sub	sp, #120	; 0x78
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	2254      	movs	r2, #84	; 0x54
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f006 ffa1 	bl	8008460 <memset>
  if(uartHandle->Instance==USART2)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a23      	ldr	r2, [pc, #140]	; (80015b0 <HAL_UART_MspInit+0xb8>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d13e      	bne.n	80015a6 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001528:	2302      	movs	r3, #2
 800152a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	4618      	mov	r0, r3
 8001536:	f003 f81d 	bl	8004574 <HAL_RCCEx_PeriphCLKConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001540:	f7ff fd30 	bl	8000fa4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_UART_MspInit+0xbc>)
 8001546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001548:	4a1a      	ldr	r2, [pc, #104]	; (80015b4 <HAL_UART_MspInit+0xbc>)
 800154a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154e:	6593      	str	r3, [r2, #88]	; 0x58
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <HAL_UART_MspInit+0xbc>)
 8001552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_UART_MspInit+0xbc>)
 800155e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001560:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <HAL_UART_MspInit+0xbc>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_UART_MspInit+0xbc>)
 800156a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001574:	230c      	movs	r3, #12
 8001576:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001584:	2307      	movs	r3, #7
 8001586:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800158c:	4619      	mov	r1, r3
 800158e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001592:	f002 f849 	bl	8003628 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	2026      	movs	r0, #38	; 0x26
 800159c:	f001 fcdd 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015a0:	2026      	movs	r0, #38	; 0x26
 80015a2:	f001 fcf4 	bl	8002f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015a6:	bf00      	nop
 80015a8:	3778      	adds	r7, #120	; 0x78
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40004400 	.word	0x40004400
 80015b4:	40021000 	.word	0x40021000

080015b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015b8:	480d      	ldr	r0, [pc, #52]	; (80015f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015bc:	480d      	ldr	r0, [pc, #52]	; (80015f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80015be:	490e      	ldr	r1, [pc, #56]	; (80015f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015c0:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <LoopForever+0xe>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015c4:	e002      	b.n	80015cc <LoopCopyDataInit>

080015c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ca:	3304      	adds	r3, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d0:	d3f9      	bcc.n	80015c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015d4:	4c0b      	ldr	r4, [pc, #44]	; (8001604 <LoopForever+0x16>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d8:	e001      	b.n	80015de <LoopFillZerobss>

080015da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015dc:	3204      	adds	r2, #4

080015de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e0:	d3fb      	bcc.n	80015da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015e2:	f7ff fe15 	bl	8001210 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015e6:	f006 ff17 	bl	8008418 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ea:	f7ff fa7b 	bl	8000ae4 <main>

080015ee <LoopForever>:

LoopForever:
    b LoopForever
 80015ee:	e7fe      	b.n	80015ee <LoopForever>
  ldr   r0, =_estack
 80015f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f8:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 80015fc:	0800a870 	.word	0x0800a870
  ldr r2, =_sbss
 8001600:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001604:	20000304 	.word	0x20000304

08001608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC1_2_IRQHandler>

0800160a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001614:	2003      	movs	r0, #3
 8001616:	f001 fc95 	bl	8002f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800161a:	2000      	movs	r0, #0
 800161c:	f000 f80e 	bl	800163c <HAL_InitTick>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	71fb      	strb	r3, [r7, #7]
 800162a:	e001      	b.n	8001630 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800162c:	f7ff fcc0 	bl	8000fb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001630:	79fb      	ldrb	r3, [r7, #7]

}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <HAL_InitTick+0x68>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d022      	beq.n	8001696 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001650:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_InitTick+0x6c>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <HAL_InitTick+0x68>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800165c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001660:	fbb2 f3f3 	udiv	r3, r2, r3
 8001664:	4618      	mov	r0, r3
 8001666:	f001 fca0 	bl	8002faa <HAL_SYSTICK_Config>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10f      	bne.n	8001690 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b0f      	cmp	r3, #15
 8001674:	d809      	bhi.n	800168a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001676:	2200      	movs	r2, #0
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	f04f 30ff 	mov.w	r0, #4294967295
 800167e:	f001 fc6c 	bl	8002f5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <HAL_InitTick+0x70>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	e007      	b.n	800169a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
 800168e:	e004      	b.n	800169a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	e001      	b.n	800169a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800169a:	7bfb      	ldrb	r3, [r7, #15]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000070 	.word	0x20000070
 80016a8:	20000068 	.word	0x20000068
 80016ac:	2000006c 	.word	0x2000006c

080016b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_IncTick+0x1c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_IncTick+0x20>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4413      	add	r3, r2
 80016be:	4a03      	ldr	r2, [pc, #12]	; (80016cc <HAL_IncTick+0x1c>)
 80016c0:	6013      	str	r3, [r2, #0]
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	200002f0 	.word	0x200002f0
 80016d0:	20000070 	.word	0x20000070

080016d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return uwTick;
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <HAL_GetTick+0x14>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	200002f0 	.word	0x200002f0

080016ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f4:	f7ff ffee 	bl	80016d4 <HAL_GetTick>
 80016f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001704:	d004      	beq.n	8001710 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_Delay+0x40>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4413      	add	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001710:	bf00      	nop
 8001712:	f7ff ffdf 	bl	80016d4 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	429a      	cmp	r2, r3
 8001720:	d8f7      	bhi.n	8001712 <HAL_Delay+0x26>
  {
  }
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000070 	.word	0x20000070

08001730 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	609a      	str	r2, [r3, #8]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	609a      	str	r2, [r3, #8]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
 80017a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	3360      	adds	r3, #96	; 0x60
 80017aa:	461a      	mov	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <LL_ADC_SetOffset+0x44>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	4313      	orrs	r3, r2
 80017c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017d0:	bf00      	nop
 80017d2:	371c      	adds	r7, #28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	03fff000 	.word	0x03fff000

080017e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3360      	adds	r3, #96	; 0x60
 80017ee:	461a      	mov	r2, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001800:	4618      	mov	r0, r3
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800180c:	b480      	push	{r7}
 800180e:	b087      	sub	sp, #28
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	3360      	adds	r3, #96	; 0x60
 800181c:	461a      	mov	r2, r3
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	431a      	orrs	r2, r3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001836:	bf00      	nop
 8001838:	371c      	adds	r7, #28
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001842:	b480      	push	{r7}
 8001844:	b087      	sub	sp, #28
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3360      	adds	r3, #96	; 0x60
 8001852:	461a      	mov	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	431a      	orrs	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800186c:	bf00      	nop
 800186e:	371c      	adds	r7, #28
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3360      	adds	r3, #96	; 0x60
 8001888:	461a      	mov	r2, r3
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	431a      	orrs	r2, r3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80018a2:	bf00      	nop
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	615a      	str	r2, [r3, #20]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b087      	sub	sp, #28
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3330      	adds	r3, #48	; 0x30
 800190a:	461a      	mov	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	0a1b      	lsrs	r3, r3, #8
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	4413      	add	r3, r2
 8001918:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	f003 031f 	and.w	r3, r3, #31
 8001924:	211f      	movs	r1, #31
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	401a      	ands	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	0e9b      	lsrs	r3, r3, #26
 8001932:	f003 011f 	and.w	r1, r3, #31
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	431a      	orrs	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001946:	bf00      	nop
 8001948:	371c      	adds	r7, #28
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001952:	b480      	push	{r7}
 8001954:	b087      	sub	sp, #28
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3314      	adds	r3, #20
 8001962:	461a      	mov	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	0e5b      	lsrs	r3, r3, #25
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	4413      	add	r3, r2
 8001970:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	0d1b      	lsrs	r3, r3, #20
 800197a:	f003 031f 	and.w	r3, r3, #31
 800197e:	2107      	movs	r1, #7
 8001980:	fa01 f303 	lsl.w	r3, r1, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	401a      	ands	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	0d1b      	lsrs	r3, r3, #20
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	431a      	orrs	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800199c:	bf00      	nop
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d10a      	bne.n	80019d2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c8:	431a      	orrs	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80019d0:	e00a      	b.n	80019e8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019de:	43db      	mvns	r3, r3
 80019e0:	401a      	ands	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	407f0000 	.word	0x407f0000

080019f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 031f 	and.w	r3, r3, #31
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6093      	str	r3, [r2, #8]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a4c:	d101      	bne.n	8001a52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a9c:	d101      	bne.n	8001aa2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ac0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ac4:	f043 0201 	orr.w	r2, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d101      	bne.n	8001af0 <LL_ADC_IsEnabled+0x18>
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <LL_ADC_IsEnabled+0x1a>
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b12:	f043 0204 	orr.w	r2, r3, #4
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d101      	bne.n	8001b3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d101      	bne.n	8001b64 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e1af      	b.n	8001eee <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d109      	bne.n	8001bb0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7fe fda3 	bl	80006e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff3f 	bl	8001a38 <LL_ADC_IsDeepPowerDownEnabled>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff25 	bl	8001a14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff ff5a 	bl	8001a88 <LL_ADC_IsInternalRegulatorEnabled>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d115      	bne.n	8001c06 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ff3e 	bl	8001a60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001be4:	4b9f      	ldr	r3, [pc, #636]	; (8001e64 <HAL_ADC_Init+0x2f0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	099b      	lsrs	r3, r3, #6
 8001bea:	4a9f      	ldr	r2, [pc, #636]	; (8001e68 <HAL_ADC_Init+0x2f4>)
 8001bec:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf0:	099b      	lsrs	r3, r3, #6
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bf8:	e002      	b.n	8001c00 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f9      	bne.n	8001bfa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ff3c 	bl	8001a88 <LL_ADC_IsInternalRegulatorEnabled>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10d      	bne.n	8001c32 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1a:	f043 0210 	orr.w	r2, r3, #16
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c26:	f043 0201 	orr.w	r2, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff75 	bl	8001b26 <LL_ADC_REG_IsConversionOngoing>
 8001c3c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f040 8148 	bne.w	8001edc <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f040 8144 	bne.w	8001edc <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c58:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c5c:	f043 0202 	orr.w	r2, r3, #2
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff35 	bl	8001ad8 <LL_ADC_IsEnabled>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d141      	bne.n	8001cf8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c7c:	d004      	beq.n	8001c88 <HAL_ADC_Init+0x114>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a7a      	ldr	r2, [pc, #488]	; (8001e6c <HAL_ADC_Init+0x2f8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d10f      	bne.n	8001ca8 <HAL_ADC_Init+0x134>
 8001c88:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c8c:	f7ff ff24 	bl	8001ad8 <LL_ADC_IsEnabled>
 8001c90:	4604      	mov	r4, r0
 8001c92:	4876      	ldr	r0, [pc, #472]	; (8001e6c <HAL_ADC_Init+0x2f8>)
 8001c94:	f7ff ff20 	bl	8001ad8 <LL_ADC_IsEnabled>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4323      	orrs	r3, r4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	bf0c      	ite	eq
 8001ca0:	2301      	moveq	r3, #1
 8001ca2:	2300      	movne	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	e012      	b.n	8001cce <HAL_ADC_Init+0x15a>
 8001ca8:	4871      	ldr	r0, [pc, #452]	; (8001e70 <HAL_ADC_Init+0x2fc>)
 8001caa:	f7ff ff15 	bl	8001ad8 <LL_ADC_IsEnabled>
 8001cae:	4604      	mov	r4, r0
 8001cb0:	4870      	ldr	r0, [pc, #448]	; (8001e74 <HAL_ADC_Init+0x300>)
 8001cb2:	f7ff ff11 	bl	8001ad8 <LL_ADC_IsEnabled>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	431c      	orrs	r4, r3
 8001cba:	486f      	ldr	r0, [pc, #444]	; (8001e78 <HAL_ADC_Init+0x304>)
 8001cbc:	f7ff ff0c 	bl	8001ad8 <LL_ADC_IsEnabled>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	4323      	orrs	r3, r4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bf0c      	ite	eq
 8001cc8:	2301      	moveq	r3, #1
 8001cca:	2300      	movne	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d012      	beq.n	8001cf8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cda:	d004      	beq.n	8001ce6 <HAL_ADC_Init+0x172>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a62      	ldr	r2, [pc, #392]	; (8001e6c <HAL_ADC_Init+0x2f8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d101      	bne.n	8001cea <HAL_ADC_Init+0x176>
 8001ce6:	4a65      	ldr	r2, [pc, #404]	; (8001e7c <HAL_ADC_Init+0x308>)
 8001ce8:	e000      	b.n	8001cec <HAL_ADC_Init+0x178>
 8001cea:	4a65      	ldr	r2, [pc, #404]	; (8001e80 <HAL_ADC_Init+0x30c>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	f7ff fd1c 	bl	8001730 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7f5b      	ldrb	r3, [r3, #29]
 8001cfc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d02:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001d08:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d0e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d16:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d106      	bne.n	8001d34 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	045b      	lsls	r3, r3, #17
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d009      	beq.n	8001d50 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d40:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	4b4b      	ldr	r3, [pc, #300]	; (8001e84 <HAL_ADC_Init+0x310>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	69b9      	ldr	r1, [r7, #24]
 8001d60:	430b      	orrs	r3, r1
 8001d62:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fed1 	bl	8001b26 <LL_ADC_REG_IsConversionOngoing>
 8001d84:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fede 	bl	8001b4c <LL_ADC_INJ_IsConversionOngoing>
 8001d90:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d17f      	bne.n	8001e98 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d17c      	bne.n	8001e98 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001da2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001daa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dba:	f023 0302 	bic.w	r3, r3, #2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	69b9      	ldr	r1, [r7, #24]
 8001dc4:	430b      	orrs	r3, r1
 8001dc6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d017      	beq.n	8001e00 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001dde:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001de8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001dec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6911      	ldr	r1, [r2, #16]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001dfe:	e013      	b.n	8001e28 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691a      	ldr	r2, [r3, #16]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e24:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d12a      	bne.n	8001e88 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e3c:	f023 0304 	bic.w	r3, r3, #4
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e48:	4311      	orrs	r1, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e4e:	4311      	orrs	r1, r2
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e54:	430a      	orrs	r2, r1
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 0201 	orr.w	r2, r2, #1
 8001e60:	611a      	str	r2, [r3, #16]
 8001e62:	e019      	b.n	8001e98 <HAL_ADC_Init+0x324>
 8001e64:	20000068 	.word	0x20000068
 8001e68:	053e2d63 	.word	0x053e2d63
 8001e6c:	50000100 	.word	0x50000100
 8001e70:	50000400 	.word	0x50000400
 8001e74:	50000500 	.word	0x50000500
 8001e78:	50000600 	.word	0x50000600
 8001e7c:	50000300 	.word	0x50000300
 8001e80:	50000700 	.word	0x50000700
 8001e84:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0201 	bic.w	r2, r2, #1
 8001e96:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d10c      	bne.n	8001eba <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f023 010f 	bic.w	r1, r3, #15
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	1e5a      	subs	r2, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
 8001eb8:	e007      	b.n	8001eca <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 020f 	bic.w	r2, r2, #15
 8001ec8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ece:	f023 0303 	bic.w	r3, r3, #3
 8001ed2:	f043 0201 	orr.w	r2, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001eda:	e007      	b.n	8001eec <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee0:	f043 0210 	orr.w	r2, r3, #16
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001eec:	7ffb      	ldrb	r3, [r7, #31]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	; 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd90      	pop	{r4, r7, pc}
 8001ef6:	bf00      	nop

08001ef8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f0c:	d004      	beq.n	8001f18 <HAL_ADC_Start_DMA+0x20>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a5a      	ldr	r2, [pc, #360]	; (800207c <HAL_ADC_Start_DMA+0x184>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d101      	bne.n	8001f1c <HAL_ADC_Start_DMA+0x24>
 8001f18:	4b59      	ldr	r3, [pc, #356]	; (8002080 <HAL_ADC_Start_DMA+0x188>)
 8001f1a:	e000      	b.n	8001f1e <HAL_ADC_Start_DMA+0x26>
 8001f1c:	4b59      	ldr	r3, [pc, #356]	; (8002084 <HAL_ADC_Start_DMA+0x18c>)
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fd6a 	bl	80019f8 <LL_ADC_GetMultimode>
 8001f24:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fdfb 	bl	8001b26 <LL_ADC_REG_IsConversionOngoing>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 809b 	bne.w	800206e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_ADC_Start_DMA+0x4e>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e096      	b.n	8002074 <HAL_ADC_Start_DMA+0x17c>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a4d      	ldr	r2, [pc, #308]	; (8002088 <HAL_ADC_Start_DMA+0x190>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d008      	beq.n	8001f6a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b05      	cmp	r3, #5
 8001f62:	d002      	beq.n	8001f6a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	2b09      	cmp	r3, #9
 8001f68:	d17a      	bne.n	8002060 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 fcf6 	bl	800295c <ADC_Enable>
 8001f70:	4603      	mov	r3, r0
 8001f72:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d16d      	bne.n	8002056 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a3a      	ldr	r2, [pc, #232]	; (800207c <HAL_ADC_Start_DMA+0x184>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d009      	beq.n	8001fac <HAL_ADC_Start_DMA+0xb4>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a3b      	ldr	r2, [pc, #236]	; (800208c <HAL_ADC_Start_DMA+0x194>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d002      	beq.n	8001fa8 <HAL_ADC_Start_DMA+0xb0>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	e003      	b.n	8001fb0 <HAL_ADC_Start_DMA+0xb8>
 8001fa8:	4b39      	ldr	r3, [pc, #228]	; (8002090 <HAL_ADC_Start_DMA+0x198>)
 8001faa:	e001      	b.n	8001fb0 <HAL_ADC_Start_DMA+0xb8>
 8001fac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d002      	beq.n	8001fbe <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d105      	bne.n	8001fca <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fda:	f023 0206 	bic.w	r2, r3, #6
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	661a      	str	r2, [r3, #96]	; 0x60
 8001fe2:	e002      	b.n	8001fea <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	4a29      	ldr	r2, [pc, #164]	; (8002094 <HAL_ADC_Start_DMA+0x19c>)
 8001ff0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff6:	4a28      	ldr	r2, [pc, #160]	; (8002098 <HAL_ADC_Start_DMA+0x1a0>)
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	4a27      	ldr	r2, [pc, #156]	; (800209c <HAL_ADC_Start_DMA+0x1a4>)
 8002000:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	221c      	movs	r2, #28
 8002008:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f042 0210 	orr.w	r2, r2, #16
 8002020:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 0201 	orr.w	r2, r2, #1
 8002030:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	3340      	adds	r3, #64	; 0x40
 800203c:	4619      	mov	r1, r3
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f001 f867 	bl	8003114 <HAL_DMA_Start_IT>
 8002046:	4603      	mov	r3, r0
 8002048:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fd55 	bl	8001afe <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002054:	e00d      	b.n	8002072 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800205e:	e008      	b.n	8002072 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800206c:	e001      	b.n	8002072 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800206e:	2302      	movs	r3, #2
 8002070:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002072:	7dfb      	ldrb	r3, [r7, #23]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	50000100 	.word	0x50000100
 8002080:	50000300 	.word	0x50000300
 8002084:	50000700 	.word	0x50000700
 8002088:	50000600 	.word	0x50000600
 800208c:	50000500 	.word	0x50000500
 8002090:	50000400 	.word	0x50000400
 8002094:	08002a21 	.word	0x08002a21
 8002098:	08002af9 	.word	0x08002af9
 800209c:	08002b15 	.word	0x08002b15

080020a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b0b6      	sub	sp, #216	; 0xd8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d102      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x24>
 80020fa:	2302      	movs	r3, #2
 80020fc:	f000 bc13 	b.w	8002926 <HAL_ADC_ConfigChannel+0x84a>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fd0a 	bl	8001b26 <LL_ADC_REG_IsConversionOngoing>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	f040 83f3 	bne.w	8002900 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6859      	ldr	r1, [r3, #4]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	f7ff fbe7 	bl	80018fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fcf8 	bl	8001b26 <LL_ADC_REG_IsConversionOngoing>
 8002136:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fd04 	bl	8001b4c <LL_ADC_INJ_IsConversionOngoing>
 8002144:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002148:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800214c:	2b00      	cmp	r3, #0
 800214e:	f040 81d9 	bne.w	8002504 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002152:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002156:	2b00      	cmp	r3, #0
 8002158:	f040 81d4 	bne.w	8002504 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002164:	d10f      	bne.n	8002186 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	4619      	mov	r1, r3
 8002172:	f7ff fbee 	bl	8001952 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fb95 	bl	80018ae <LL_ADC_SetSamplingTimeCommonConfig>
 8002184:	e00e      	b.n	80021a4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6819      	ldr	r1, [r3, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	461a      	mov	r2, r3
 8002194:	f7ff fbdd 	bl	8001952 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fb85 	bl	80018ae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	08db      	lsrs	r3, r3, #3
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d022      	beq.n	800220c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6919      	ldr	r1, [r3, #16]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021d6:	f7ff fadf 	bl	8001798 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	6919      	ldr	r1, [r3, #16]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	461a      	mov	r2, r3
 80021e8:	f7ff fb2b 	bl	8001842 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6919      	ldr	r1, [r3, #16]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	7f1b      	ldrb	r3, [r3, #28]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d102      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x126>
 80021fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002200:	e000      	b.n	8002204 <HAL_ADC_ConfigChannel+0x128>
 8002202:	2300      	movs	r3, #0
 8002204:	461a      	mov	r2, r3
 8002206:	f7ff fb37 	bl	8001878 <LL_ADC_SetOffsetSaturation>
 800220a:	e17b      	b.n	8002504 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fae4 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 8002218:	4603      	mov	r3, r0
 800221a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10a      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x15c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fad9 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	0e9b      	lsrs	r3, r3, #26
 8002232:	f003 021f 	and.w	r2, r3, #31
 8002236:	e01e      	b.n	8002276 <HAL_ADC_ConfigChannel+0x19a>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff face 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 8002244:	4603      	mov	r3, r0
 8002246:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002256:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800225a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800225e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002266:	2320      	movs	r3, #32
 8002268:	e004      	b.n	8002274 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800226a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227e:	2b00      	cmp	r3, #0
 8002280:	d105      	bne.n	800228e <HAL_ADC_ConfigChannel+0x1b2>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	0e9b      	lsrs	r3, r3, #26
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	e018      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x1e4>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80022a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80022aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80022b2:	2320      	movs	r3, #32
 80022b4:	e004      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80022b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d106      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2200      	movs	r2, #0
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fa9d 	bl	800180c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2101      	movs	r1, #1
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fa81 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 80022de:	4603      	mov	r3, r0
 80022e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10a      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x222>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2101      	movs	r1, #1
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fa76 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 80022f4:	4603      	mov	r3, r0
 80022f6:	0e9b      	lsrs	r3, r3, #26
 80022f8:	f003 021f 	and.w	r2, r3, #31
 80022fc:	e01e      	b.n	800233c <HAL_ADC_ConfigChannel+0x260>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2101      	movs	r1, #1
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fa6b 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 800230a:	4603      	mov	r3, r0
 800230c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800231c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002320:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002324:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800232c:	2320      	movs	r3, #32
 800232e:	e004      	b.n	800233a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002330:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002344:	2b00      	cmp	r3, #0
 8002346:	d105      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x278>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	0e9b      	lsrs	r3, r3, #26
 800234e:	f003 031f 	and.w	r3, r3, #31
 8002352:	e018      	b.n	8002386 <HAL_ADC_ConfigChannel+0x2aa>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002368:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800236c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002370:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002378:	2320      	movs	r3, #32
 800237a:	e004      	b.n	8002386 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800237c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002386:	429a      	cmp	r2, r3
 8002388:	d106      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2200      	movs	r2, #0
 8002390:	2101      	movs	r1, #1
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fa3a 	bl	800180c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2102      	movs	r1, #2
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fa1e 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10a      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x2e8>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2102      	movs	r1, #2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fa13 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	f003 021f 	and.w	r2, r3, #31
 80023c2:	e01e      	b.n	8002402 <HAL_ADC_ConfigChannel+0x326>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2102      	movs	r1, #2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fa08 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80023e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80023ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80023f2:	2320      	movs	r3, #32
 80023f4:	e004      	b.n	8002400 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80023f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <HAL_ADC_ConfigChannel+0x33e>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0e9b      	lsrs	r3, r3, #26
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	e016      	b.n	8002448 <HAL_ADC_ConfigChannel+0x36c>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800242c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800242e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002432:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800243a:	2320      	movs	r3, #32
 800243c:	e004      	b.n	8002448 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800243e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002448:	429a      	cmp	r2, r3
 800244a:	d106      	bne.n	800245a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2200      	movs	r2, #0
 8002452:	2102      	movs	r1, #2
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff f9d9 	bl	800180c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2103      	movs	r1, #3
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff f9bd 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 8002466:	4603      	mov	r3, r0
 8002468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10a      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x3aa>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2103      	movs	r1, #3
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff f9b2 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 800247c:	4603      	mov	r3, r0
 800247e:	0e9b      	lsrs	r3, r3, #26
 8002480:	f003 021f 	and.w	r2, r3, #31
 8002484:	e017      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x3da>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2103      	movs	r1, #3
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff f9a7 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 8002492:	4603      	mov	r3, r0
 8002494:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800249e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024a0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80024a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80024a8:	2320      	movs	r3, #32
 80024aa:	e003      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80024ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d105      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x3f2>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0e9b      	lsrs	r3, r3, #26
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	e011      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x416>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80024dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024de:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80024e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80024e6:	2320      	movs	r3, #32
 80024e8:	e003      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80024ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d106      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2200      	movs	r2, #0
 80024fc:	2103      	movs	r1, #3
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f984 	bl	800180c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fae5 	bl	8001ad8 <LL_ADC_IsEnabled>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	f040 813d 	bne.w	8002790 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6819      	ldr	r1, [r3, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	461a      	mov	r2, r3
 8002524:	f7ff fa40 	bl	80019a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4aa2      	ldr	r2, [pc, #648]	; (80027b8 <HAL_ADC_ConfigChannel+0x6dc>)
 800252e:	4293      	cmp	r3, r2
 8002530:	f040 812e 	bne.w	8002790 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10b      	bne.n	800255c <HAL_ADC_ConfigChannel+0x480>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0e9b      	lsrs	r3, r3, #26
 800254a:	3301      	adds	r3, #1
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	2b09      	cmp	r3, #9
 8002552:	bf94      	ite	ls
 8002554:	2301      	movls	r3, #1
 8002556:	2300      	movhi	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	e019      	b.n	8002590 <HAL_ADC_ConfigChannel+0x4b4>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800256a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800256c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800256e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002574:	2320      	movs	r3, #32
 8002576:	e003      	b.n	8002580 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	3301      	adds	r3, #1
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	2b09      	cmp	r3, #9
 8002588:	bf94      	ite	ls
 800258a:	2301      	movls	r3, #1
 800258c:	2300      	movhi	r3, #0
 800258e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002590:	2b00      	cmp	r3, #0
 8002592:	d079      	beq.n	8002688 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259c:	2b00      	cmp	r3, #0
 800259e:	d107      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x4d4>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	0e9b      	lsrs	r3, r3, #26
 80025a6:	3301      	adds	r3, #1
 80025a8:	069b      	lsls	r3, r3, #26
 80025aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025ae:	e015      	b.n	80025dc <HAL_ADC_ConfigChannel+0x500>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b8:	fa93 f3a3 	rbit	r3, r3
 80025bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80025c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80025c8:	2320      	movs	r3, #32
 80025ca:	e003      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80025cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	3301      	adds	r3, #1
 80025d6:	069b      	lsls	r3, r3, #26
 80025d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d109      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x520>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0e9b      	lsrs	r3, r3, #26
 80025ee:	3301      	adds	r3, #1
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	2101      	movs	r1, #1
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	e017      	b.n	800262c <HAL_ADC_ConfigChannel+0x550>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800260a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800260c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800260e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002614:	2320      	movs	r3, #32
 8002616:	e003      	b.n	8002620 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	3301      	adds	r3, #1
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	2101      	movs	r1, #1
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	ea42 0103 	orr.w	r1, r2, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10a      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x576>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	0e9b      	lsrs	r3, r3, #26
 8002642:	3301      	adds	r3, #1
 8002644:	f003 021f 	and.w	r2, r3, #31
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	051b      	lsls	r3, r3, #20
 8002650:	e018      	b.n	8002684 <HAL_ADC_ConfigChannel+0x5a8>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002662:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800266a:	2320      	movs	r3, #32
 800266c:	e003      	b.n	8002676 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800266e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	3301      	adds	r3, #1
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	4613      	mov	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4413      	add	r3, r2
 8002682:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002684:	430b      	orrs	r3, r1
 8002686:	e07e      	b.n	8002786 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002690:	2b00      	cmp	r3, #0
 8002692:	d107      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x5c8>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	0e9b      	lsrs	r3, r3, #26
 800269a:	3301      	adds	r3, #1
 800269c:	069b      	lsls	r3, r3, #26
 800269e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026a2:	e015      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x5f4>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80026b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80026bc:	2320      	movs	r3, #32
 80026be:	e003      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80026c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	3301      	adds	r3, #1
 80026ca:	069b      	lsls	r3, r3, #26
 80026cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d109      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x614>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	0e9b      	lsrs	r3, r3, #26
 80026e2:	3301      	adds	r3, #1
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	e017      	b.n	8002720 <HAL_ADC_ConfigChannel+0x644>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	61fb      	str	r3, [r7, #28]
  return result;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002708:	2320      	movs	r3, #32
 800270a:	e003      	b.n	8002714 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	3301      	adds	r3, #1
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f303 	lsl.w	r3, r1, r3
 8002720:	ea42 0103 	orr.w	r1, r2, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10d      	bne.n	800274c <HAL_ADC_ConfigChannel+0x670>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	0e9b      	lsrs	r3, r3, #26
 8002736:	3301      	adds	r3, #1
 8002738:	f003 021f 	and.w	r2, r3, #31
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	3b1e      	subs	r3, #30
 8002744:	051b      	lsls	r3, r3, #20
 8002746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800274a:	e01b      	b.n	8002784 <HAL_ADC_ConfigChannel+0x6a8>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	613b      	str	r3, [r7, #16]
  return result;
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002764:	2320      	movs	r3, #32
 8002766:	e003      	b.n	8002770 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	fab3 f383 	clz	r3, r3
 800276e:	b2db      	uxtb	r3, r3
 8002770:	3301      	adds	r3, #1
 8002772:	f003 021f 	and.w	r2, r3, #31
 8002776:	4613      	mov	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4413      	add	r3, r2
 800277c:	3b1e      	subs	r3, #30
 800277e:	051b      	lsls	r3, r3, #20
 8002780:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002784:	430b      	orrs	r3, r1
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	6892      	ldr	r2, [r2, #8]
 800278a:	4619      	mov	r1, r3
 800278c:	f7ff f8e1 	bl	8001952 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_ADC_ConfigChannel+0x6e0>)
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80be 	beq.w	800291a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027a6:	d004      	beq.n	80027b2 <HAL_ADC_ConfigChannel+0x6d6>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <HAL_ADC_ConfigChannel+0x6e4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d10a      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x6ec>
 80027b2:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <HAL_ADC_ConfigChannel+0x6e8>)
 80027b4:	e009      	b.n	80027ca <HAL_ADC_ConfigChannel+0x6ee>
 80027b6:	bf00      	nop
 80027b8:	407f0000 	.word	0x407f0000
 80027bc:	80080000 	.word	0x80080000
 80027c0:	50000100 	.word	0x50000100
 80027c4:	50000300 	.word	0x50000300
 80027c8:	4b59      	ldr	r3, [pc, #356]	; (8002930 <HAL_ADC_ConfigChannel+0x854>)
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe ffd6 	bl	800177c <LL_ADC_GetCommonPathInternalCh>
 80027d0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a56      	ldr	r2, [pc, #344]	; (8002934 <HAL_ADC_ConfigChannel+0x858>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d004      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x70c>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a55      	ldr	r2, [pc, #340]	; (8002938 <HAL_ADC_ConfigChannel+0x85c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d13a      	bne.n	800285e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d134      	bne.n	800285e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027fc:	d005      	beq.n	800280a <HAL_ADC_ConfigChannel+0x72e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a4e      	ldr	r2, [pc, #312]	; (800293c <HAL_ADC_ConfigChannel+0x860>)
 8002804:	4293      	cmp	r3, r2
 8002806:	f040 8085 	bne.w	8002914 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002812:	d004      	beq.n	800281e <HAL_ADC_ConfigChannel+0x742>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a49      	ldr	r2, [pc, #292]	; (8002940 <HAL_ADC_ConfigChannel+0x864>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d101      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x746>
 800281e:	4a49      	ldr	r2, [pc, #292]	; (8002944 <HAL_ADC_ConfigChannel+0x868>)
 8002820:	e000      	b.n	8002824 <HAL_ADC_ConfigChannel+0x748>
 8002822:	4a43      	ldr	r2, [pc, #268]	; (8002930 <HAL_ADC_ConfigChannel+0x854>)
 8002824:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002828:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800282c:	4619      	mov	r1, r3
 800282e:	4610      	mov	r0, r2
 8002830:	f7fe ff91 	bl	8001756 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002834:	4b44      	ldr	r3, [pc, #272]	; (8002948 <HAL_ADC_ConfigChannel+0x86c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	099b      	lsrs	r3, r3, #6
 800283a:	4a44      	ldr	r2, [pc, #272]	; (800294c <HAL_ADC_ConfigChannel+0x870>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	099b      	lsrs	r3, r3, #6
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	4613      	mov	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800284e:	e002      	b.n	8002856 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3b01      	subs	r3, #1
 8002854:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f9      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800285c:	e05a      	b.n	8002914 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a3b      	ldr	r2, [pc, #236]	; (8002950 <HAL_ADC_ConfigChannel+0x874>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d125      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x7d8>
 8002868:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800286c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d11f      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a31      	ldr	r2, [pc, #196]	; (8002940 <HAL_ADC_ConfigChannel+0x864>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d104      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x7ac>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a34      	ldr	r2, [pc, #208]	; (8002954 <HAL_ADC_ConfigChannel+0x878>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d047      	beq.n	8002918 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002890:	d004      	beq.n	800289c <HAL_ADC_ConfigChannel+0x7c0>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a2a      	ldr	r2, [pc, #168]	; (8002940 <HAL_ADC_ConfigChannel+0x864>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d101      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x7c4>
 800289c:	4a29      	ldr	r2, [pc, #164]	; (8002944 <HAL_ADC_ConfigChannel+0x868>)
 800289e:	e000      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x7c6>
 80028a0:	4a23      	ldr	r2, [pc, #140]	; (8002930 <HAL_ADC_ConfigChannel+0x854>)
 80028a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028aa:	4619      	mov	r1, r3
 80028ac:	4610      	mov	r0, r2
 80028ae:	f7fe ff52 	bl	8001756 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028b2:	e031      	b.n	8002918 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a27      	ldr	r2, [pc, #156]	; (8002958 <HAL_ADC_ConfigChannel+0x87c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d12d      	bne.n	800291a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d127      	bne.n	800291a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <HAL_ADC_ConfigChannel+0x864>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d022      	beq.n	800291a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028dc:	d004      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x80c>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a17      	ldr	r2, [pc, #92]	; (8002940 <HAL_ADC_ConfigChannel+0x864>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x810>
 80028e8:	4a16      	ldr	r2, [pc, #88]	; (8002944 <HAL_ADC_ConfigChannel+0x868>)
 80028ea:	e000      	b.n	80028ee <HAL_ADC_ConfigChannel+0x812>
 80028ec:	4a10      	ldr	r2, [pc, #64]	; (8002930 <HAL_ADC_ConfigChannel+0x854>)
 80028ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028f6:	4619      	mov	r1, r3
 80028f8:	4610      	mov	r0, r2
 80028fa:	f7fe ff2c 	bl	8001756 <LL_ADC_SetCommonPathInternalCh>
 80028fe:	e00c      	b.n	800291a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	f043 0220 	orr.w	r2, r3, #32
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002912:	e002      	b.n	800291a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002914:	bf00      	nop
 8002916:	e000      	b.n	800291a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002918:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002922:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002926:	4618      	mov	r0, r3
 8002928:	37d8      	adds	r7, #216	; 0xd8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	50000700 	.word	0x50000700
 8002934:	c3210000 	.word	0xc3210000
 8002938:	90c00010 	.word	0x90c00010
 800293c:	50000600 	.word	0x50000600
 8002940:	50000100 	.word	0x50000100
 8002944:	50000300 	.word	0x50000300
 8002948:	20000068 	.word	0x20000068
 800294c:	053e2d63 	.word	0x053e2d63
 8002950:	c7520000 	.word	0xc7520000
 8002954:	50000500 	.word	0x50000500
 8002958:	cb840000 	.word	0xcb840000

0800295c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff f8b5 	bl	8001ad8 <LL_ADC_IsEnabled>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d14d      	bne.n	8002a10 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	4b28      	ldr	r3, [pc, #160]	; (8002a1c <ADC_Enable+0xc0>)
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00d      	beq.n	800299e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	f043 0210 	orr.w	r2, r3, #16
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002992:	f043 0201 	orr.w	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e039      	b.n	8002a12 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff f884 	bl	8001ab0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029a8:	f7fe fe94 	bl	80016d4 <HAL_GetTick>
 80029ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ae:	e028      	b.n	8002a02 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff f88f 	bl	8001ad8 <LL_ADC_IsEnabled>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d104      	bne.n	80029ca <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff f873 	bl	8001ab0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029ca:	f7fe fe83 	bl	80016d4 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d914      	bls.n	8002a02 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d00d      	beq.n	8002a02 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ea:	f043 0210 	orr.w	r2, r3, #16
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e007      	b.n	8002a12 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d1cf      	bne.n	80029b0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	8000003f 	.word	0x8000003f

08002a20 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a32:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d14b      	bne.n	8002ad2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d021      	beq.n	8002a98 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe ff3b 	bl	80018d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d032      	beq.n	8002aca <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d12b      	bne.n	8002aca <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d11f      	bne.n	8002aca <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8e:	f043 0201 	orr.w	r2, r3, #1
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a96:	e018      	b.n	8002aca <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d111      	bne.n	8002aca <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d105      	bne.n	8002aca <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f7ff fae8 	bl	80020a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ad0:	e00e      	b.n	8002af0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f7ff faf2 	bl	80020c8 <HAL_ADC_ErrorCallback>
}
 8002ae4:	e004      	b.n	8002af0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	4798      	blx	r3
}
 8002af0:	bf00      	nop
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f7ff fad4 	bl	80020b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b32:	f043 0204 	orr.w	r2, r3, #4
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f7ff fac4 	bl	80020c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <LL_ADC_IsEnabled>:
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <LL_ADC_IsEnabled+0x18>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <LL_ADC_IsEnabled+0x1a>
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <LL_ADC_REG_IsConversionOngoing>:
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d101      	bne.n	8002b86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b0a1      	sub	sp, #132	; 0x84
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e0e7      	b.n	8002d82 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bca:	d102      	bne.n	8002bd2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002bcc:	4b6f      	ldr	r3, [pc, #444]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	e009      	b.n	8002be6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a6e      	ldr	r2, [pc, #440]	; (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d102      	bne.n	8002be2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002bdc:	4b6d      	ldr	r3, [pc, #436]	; (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	e001      	b.n	8002be6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10b      	bne.n	8002c04 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf0:	f043 0220 	orr.w	r2, r3, #32
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0be      	b.n	8002d82 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff ffb1 	bl	8002b6e <LL_ADC_REG_IsConversionOngoing>
 8002c0c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ffab 	bl	8002b6e <LL_ADC_REG_IsConversionOngoing>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f040 80a0 	bne.w	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f040 809c 	bne.w	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c30:	d004      	beq.n	8002c3c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a55      	ldr	r2, [pc, #340]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d101      	bne.n	8002c40 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002c3c:	4b56      	ldr	r3, [pc, #344]	; (8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002c3e:	e000      	b.n	8002c42 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002c40:	4b56      	ldr	r3, [pc, #344]	; (8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002c42:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d04b      	beq.n	8002ce4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c5e:	035b      	lsls	r3, r3, #13
 8002c60:	430b      	orrs	r3, r1
 8002c62:	431a      	orrs	r2, r3
 8002c64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c66:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c70:	d004      	beq.n	8002c7c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a45      	ldr	r2, [pc, #276]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d10f      	bne.n	8002c9c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002c7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c80:	f7ff ff62 	bl	8002b48 <LL_ADC_IsEnabled>
 8002c84:	4604      	mov	r4, r0
 8002c86:	4841      	ldr	r0, [pc, #260]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c88:	f7ff ff5e 	bl	8002b48 <LL_ADC_IsEnabled>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4323      	orrs	r3, r4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e012      	b.n	8002cc2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002c9c:	483c      	ldr	r0, [pc, #240]	; (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c9e:	f7ff ff53 	bl	8002b48 <LL_ADC_IsEnabled>
 8002ca2:	4604      	mov	r4, r0
 8002ca4:	483b      	ldr	r0, [pc, #236]	; (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002ca6:	f7ff ff4f 	bl	8002b48 <LL_ADC_IsEnabled>
 8002caa:	4603      	mov	r3, r0
 8002cac:	431c      	orrs	r4, r3
 8002cae:	483c      	ldr	r0, [pc, #240]	; (8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002cb0:	f7ff ff4a 	bl	8002b48 <LL_ADC_IsEnabled>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4323      	orrs	r3, r4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d056      	beq.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cce:	f023 030f 	bic.w	r3, r3, #15
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	6811      	ldr	r1, [r2, #0]
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	6892      	ldr	r2, [r2, #8]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ce2:	e047      	b.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ce4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf8:	d004      	beq.n	8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a23      	ldr	r2, [pc, #140]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d10f      	bne.n	8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002d04:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d08:	f7ff ff1e 	bl	8002b48 <LL_ADC_IsEnabled>
 8002d0c:	4604      	mov	r4, r0
 8002d0e:	481f      	ldr	r0, [pc, #124]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d10:	f7ff ff1a 	bl	8002b48 <LL_ADC_IsEnabled>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4323      	orrs	r3, r4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2301      	moveq	r3, #1
 8002d1e:	2300      	movne	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	e012      	b.n	8002d4a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002d24:	481a      	ldr	r0, [pc, #104]	; (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002d26:	f7ff ff0f 	bl	8002b48 <LL_ADC_IsEnabled>
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	4819      	ldr	r0, [pc, #100]	; (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d2e:	f7ff ff0b 	bl	8002b48 <LL_ADC_IsEnabled>
 8002d32:	4603      	mov	r3, r0
 8002d34:	431c      	orrs	r4, r3
 8002d36:	481a      	ldr	r0, [pc, #104]	; (8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002d38:	f7ff ff06 	bl	8002b48 <LL_ADC_IsEnabled>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4323      	orrs	r3, r4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bf0c      	ite	eq
 8002d44:	2301      	moveq	r3, #1
 8002d46:	2300      	movne	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d012      	beq.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d56:	f023 030f 	bic.w	r3, r3, #15
 8002d5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d5c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d5e:	e009      	b.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002d72:	e000      	b.n	8002d76 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3784      	adds	r7, #132	; 0x84
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd90      	pop	{r4, r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	50000100 	.word	0x50000100
 8002d90:	50000400 	.word	0x50000400
 8002d94:	50000500 	.word	0x50000500
 8002d98:	50000300 	.word	0x50000300
 8002d9c:	50000700 	.word	0x50000700
 8002da0:	50000600 	.word	0x50000600

08002da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <__NVIC_SetPriorityGrouping+0x44>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dd6:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	60d3      	str	r3, [r2, #12]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <__NVIC_GetPriorityGrouping+0x18>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	f003 0307 	and.w	r3, r3, #7
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	db0b      	blt.n	8002e32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	f003 021f 	and.w	r2, r3, #31
 8002e20:	4907      	ldr	r1, [pc, #28]	; (8002e40 <__NVIC_EnableIRQ+0x38>)
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2001      	movs	r0, #1
 8002e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000e100 	.word	0xe000e100

08002e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	6039      	str	r1, [r7, #0]
 8002e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	db0a      	blt.n	8002e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	490c      	ldr	r1, [pc, #48]	; (8002e90 <__NVIC_SetPriority+0x4c>)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	0112      	lsls	r2, r2, #4
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	440b      	add	r3, r1
 8002e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e6c:	e00a      	b.n	8002e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4908      	ldr	r1, [pc, #32]	; (8002e94 <__NVIC_SetPriority+0x50>)
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	3b04      	subs	r3, #4
 8002e7c:	0112      	lsls	r2, r2, #4
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	440b      	add	r3, r1
 8002e82:	761a      	strb	r2, [r3, #24]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000e100 	.word	0xe000e100
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b089      	sub	sp, #36	; 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f1c3 0307 	rsb	r3, r3, #7
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	bf28      	it	cs
 8002eb6:	2304      	movcs	r3, #4
 8002eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2b06      	cmp	r3, #6
 8002ec0:	d902      	bls.n	8002ec8 <NVIC_EncodePriority+0x30>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3b03      	subs	r3, #3
 8002ec6:	e000      	b.n	8002eca <NVIC_EncodePriority+0x32>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	401a      	ands	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43d9      	mvns	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	4313      	orrs	r3, r2
         );
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3724      	adds	r7, #36	; 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f10:	d301      	bcc.n	8002f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f12:	2301      	movs	r3, #1
 8002f14:	e00f      	b.n	8002f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f16:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <SysTick_Config+0x40>)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f1e:	210f      	movs	r1, #15
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	f7ff ff8e 	bl	8002e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <SysTick_Config+0x40>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f2e:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <SysTick_Config+0x40>)
 8002f30:	2207      	movs	r2, #7
 8002f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	e000e010 	.word	0xe000e010

08002f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff ff29 	bl	8002da4 <__NVIC_SetPriorityGrouping>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f68:	f7ff ff40 	bl	8002dec <__NVIC_GetPriorityGrouping>
 8002f6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	6978      	ldr	r0, [r7, #20]
 8002f74:	f7ff ff90 	bl	8002e98 <NVIC_EncodePriority>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff5f 	bl	8002e44 <__NVIC_SetPriority>
}
 8002f86:	bf00      	nop
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	4603      	mov	r3, r0
 8002f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff33 	bl	8002e08 <__NVIC_EnableIRQ>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ffa4 	bl	8002f00 <SysTick_Config>
 8002fb8:	4603      	mov	r3, r0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e08d      	b.n	80030f2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b47      	ldr	r3, [pc, #284]	; (80030fc <HAL_DMA_Init+0x138>)
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d80f      	bhi.n	8003002 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b45      	ldr	r3, [pc, #276]	; (8003100 <HAL_DMA_Init+0x13c>)
 8002fea:	4413      	add	r3, r2
 8002fec:	4a45      	ldr	r2, [pc, #276]	; (8003104 <HAL_DMA_Init+0x140>)
 8002fee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff2:	091b      	lsrs	r3, r3, #4
 8002ff4:	009a      	lsls	r2, r3, #2
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a42      	ldr	r2, [pc, #264]	; (8003108 <HAL_DMA_Init+0x144>)
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40
 8003000:	e00e      	b.n	8003020 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	4b40      	ldr	r3, [pc, #256]	; (800310c <HAL_DMA_Init+0x148>)
 800300a:	4413      	add	r3, r2
 800300c:	4a3d      	ldr	r2, [pc, #244]	; (8003104 <HAL_DMA_Init+0x140>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	009a      	lsls	r2, r3, #2
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a3c      	ldr	r2, [pc, #240]	; (8003110 <HAL_DMA_Init+0x14c>)
 800301e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003044:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003050:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fa76 	bl	8003564 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003080:	d102      	bne.n	8003088 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800309c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d010      	beq.n	80030c8 <HAL_DMA_Init+0x104>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d80c      	bhi.n	80030c8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fa96 	bl	80035e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	e008      	b.n	80030da <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40020407 	.word	0x40020407
 8003100:	bffdfff8 	.word	0xbffdfff8
 8003104:	cccccccd 	.word	0xcccccccd
 8003108:	40020000 	.word	0x40020000
 800310c:	bffdfbf8 	.word	0xbffdfbf8
 8003110:	40020400 	.word	0x40020400

08003114 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_DMA_Start_IT+0x20>
 8003130:	2302      	movs	r3, #2
 8003132:	e066      	b.n	8003202 <HAL_DMA_Start_IT+0xee>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b01      	cmp	r3, #1
 8003146:	d155      	bne.n	80031f4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0201 	bic.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f9bb 	bl	80034e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 020e 	orr.w	r2, r2, #14
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	e00f      	b.n	80031ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0204 	bic.w	r2, r2, #4
 800319a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 020a 	orr.w	r2, r2, #10
 80031aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0201 	orr.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e005      	b.n	8003200 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
 80031fe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003200:	7dfb      	ldrb	r3, [r7, #23]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800320a:	b480      	push	{r7}
 800320c:	b085      	sub	sp, #20
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d005      	beq.n	800322e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2204      	movs	r2, #4
 8003226:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
 800322c:	e037      	b.n	800329e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 020e 	bic.w	r2, r2, #14
 800323c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003248:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800324c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0201 	bic.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	f003 021f 	and.w	r2, r3, #31
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	2101      	movs	r1, #1
 800326c:	fa01 f202 	lsl.w	r2, r1, r2
 8003270:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800327a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00c      	beq.n	800329e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003292:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800329c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d00d      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2204      	movs	r2, #4
 80032d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	73fb      	strb	r3, [r7, #15]
 80032ee:	e047      	b.n	8003380 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 020e 	bic.w	r2, r2, #14
 80032fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800331a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800331e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003324:	f003 021f 	and.w	r2, r3, #31
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	2101      	movs	r1, #1
 800332e:	fa01 f202 	lsl.w	r2, r1, r2
 8003332:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800333c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00c      	beq.n	8003360 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003350:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003354:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800335e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4798      	blx	r3
    }
  }
  return status;
 8003380:	7bfb      	ldrb	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	2204      	movs	r2, #4
 80033ac:	409a      	lsls	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d026      	beq.n	8003404 <HAL_DMA_IRQHandler+0x7a>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d021      	beq.n	8003404 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d107      	bne.n	80033de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0204 	bic.w	r2, r2, #4
 80033dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	f003 021f 	and.w	r2, r3, #31
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	2104      	movs	r1, #4
 80033ec:	fa01 f202 	lsl.w	r2, r1, r2
 80033f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d071      	beq.n	80034de <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003402:	e06c      	b.n	80034de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	2202      	movs	r2, #2
 800340e:	409a      	lsls	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d02e      	beq.n	8003476 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d029      	beq.n	8003476 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10b      	bne.n	8003448 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 020a 	bic.w	r2, r2, #10
 800343e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	f003 021f 	and.w	r2, r3, #31
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	2102      	movs	r1, #2
 8003456:	fa01 f202 	lsl.w	r2, r1, r2
 800345a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d038      	beq.n	80034de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003474:	e033      	b.n	80034de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	2208      	movs	r2, #8
 8003480:	409a      	lsls	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d02a      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d025      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 020e 	bic.w	r2, r2, #14
 80034a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	f003 021f 	and.w	r2, r3, #31
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	2101      	movs	r1, #1
 80034b2:	fa01 f202 	lsl.w	r2, r1, r2
 80034b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d004      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80034de:	bf00      	nop
 80034e0:	bf00      	nop
}
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034fe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	2b00      	cmp	r3, #0
 8003506:	d004      	beq.n	8003512 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003510:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f003 021f 	and.w	r2, r3, #31
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	2101      	movs	r1, #1
 8003520:	fa01 f202 	lsl.w	r2, r1, r2
 8003524:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b10      	cmp	r3, #16
 8003534:	d108      	bne.n	8003548 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003546:	e007      	b.n	8003558 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	60da      	str	r2, [r3, #12]
}
 8003558:	bf00      	nop
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	4b16      	ldr	r3, [pc, #88]	; (80035cc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003574:	429a      	cmp	r2, r3
 8003576:	d802      	bhi.n	800357e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003578:	4b15      	ldr	r3, [pc, #84]	; (80035d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	e001      	b.n	8003582 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800357e:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003580:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	3b08      	subs	r3, #8
 800358e:	4a12      	ldr	r2, [pc, #72]	; (80035d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003590:	fba2 2303 	umull	r2, r3, r2, r3
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359c:	089b      	lsrs	r3, r3, #2
 800359e:	009a      	lsls	r2, r3, #2
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4413      	add	r3, r2
 80035a4:	461a      	mov	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a0b      	ldr	r2, [pc, #44]	; (80035dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80035ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 031f 	and.w	r3, r3, #31
 80035b6:	2201      	movs	r2, #1
 80035b8:	409a      	lsls	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40020407 	.word	0x40020407
 80035d0:	40020800 	.word	0x40020800
 80035d4:	40020820 	.word	0x40020820
 80035d8:	cccccccd 	.word	0xcccccccd
 80035dc:	40020880 	.word	0x40020880

080035e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	461a      	mov	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a08      	ldr	r2, [pc, #32]	; (8003624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003602:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	3b01      	subs	r3, #1
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	2201      	movs	r2, #1
 800360e:	409a      	lsls	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	1000823f 	.word	0x1000823f
 8003624:	40020940 	.word	0x40020940

08003628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003636:	e15a      	b.n	80038ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	2101      	movs	r1, #1
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	fa01 f303 	lsl.w	r3, r1, r3
 8003644:	4013      	ands	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 814c 	beq.w	80038e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d005      	beq.n	8003668 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003664:	2b02      	cmp	r3, #2
 8003666:	d130      	bne.n	80036ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	2203      	movs	r2, #3
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4013      	ands	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800369e:	2201      	movs	r2, #1
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	f003 0201 	and.w	r2, r3, #1
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d017      	beq.n	8003706 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	2203      	movs	r2, #3
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d123      	bne.n	800375a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	08da      	lsrs	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3208      	adds	r2, #8
 800371a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800371e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	220f      	movs	r2, #15
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	08da      	lsrs	r2, r3, #3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3208      	adds	r2, #8
 8003754:	6939      	ldr	r1, [r7, #16]
 8003756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	2203      	movs	r2, #3
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43db      	mvns	r3, r3
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4013      	ands	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 0203 	and.w	r2, r3, #3
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 80a6 	beq.w	80038e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800379c:	4b5b      	ldr	r3, [pc, #364]	; (800390c <HAL_GPIO_Init+0x2e4>)
 800379e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a0:	4a5a      	ldr	r2, [pc, #360]	; (800390c <HAL_GPIO_Init+0x2e4>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6613      	str	r3, [r2, #96]	; 0x60
 80037a8:	4b58      	ldr	r3, [pc, #352]	; (800390c <HAL_GPIO_Init+0x2e4>)
 80037aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037b4:	4a56      	ldr	r2, [pc, #344]	; (8003910 <HAL_GPIO_Init+0x2e8>)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	089b      	lsrs	r3, r3, #2
 80037ba:	3302      	adds	r3, #2
 80037bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	220f      	movs	r2, #15
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4013      	ands	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037de:	d01f      	beq.n	8003820 <HAL_GPIO_Init+0x1f8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a4c      	ldr	r2, [pc, #304]	; (8003914 <HAL_GPIO_Init+0x2ec>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d019      	beq.n	800381c <HAL_GPIO_Init+0x1f4>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a4b      	ldr	r2, [pc, #300]	; (8003918 <HAL_GPIO_Init+0x2f0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d013      	beq.n	8003818 <HAL_GPIO_Init+0x1f0>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a4a      	ldr	r2, [pc, #296]	; (800391c <HAL_GPIO_Init+0x2f4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00d      	beq.n	8003814 <HAL_GPIO_Init+0x1ec>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a49      	ldr	r2, [pc, #292]	; (8003920 <HAL_GPIO_Init+0x2f8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d007      	beq.n	8003810 <HAL_GPIO_Init+0x1e8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a48      	ldr	r2, [pc, #288]	; (8003924 <HAL_GPIO_Init+0x2fc>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d101      	bne.n	800380c <HAL_GPIO_Init+0x1e4>
 8003808:	2305      	movs	r3, #5
 800380a:	e00a      	b.n	8003822 <HAL_GPIO_Init+0x1fa>
 800380c:	2306      	movs	r3, #6
 800380e:	e008      	b.n	8003822 <HAL_GPIO_Init+0x1fa>
 8003810:	2304      	movs	r3, #4
 8003812:	e006      	b.n	8003822 <HAL_GPIO_Init+0x1fa>
 8003814:	2303      	movs	r3, #3
 8003816:	e004      	b.n	8003822 <HAL_GPIO_Init+0x1fa>
 8003818:	2302      	movs	r3, #2
 800381a:	e002      	b.n	8003822 <HAL_GPIO_Init+0x1fa>
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <HAL_GPIO_Init+0x1fa>
 8003820:	2300      	movs	r3, #0
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	f002 0203 	and.w	r2, r2, #3
 8003828:	0092      	lsls	r2, r2, #2
 800382a:	4093      	lsls	r3, r2
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003832:	4937      	ldr	r1, [pc, #220]	; (8003910 <HAL_GPIO_Init+0x2e8>)
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	089b      	lsrs	r3, r3, #2
 8003838:	3302      	adds	r3, #2
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003840:	4b39      	ldr	r3, [pc, #228]	; (8003928 <HAL_GPIO_Init+0x300>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	43db      	mvns	r3, r3
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4013      	ands	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003864:	4a30      	ldr	r2, [pc, #192]	; (8003928 <HAL_GPIO_Init+0x300>)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800386a:	4b2f      	ldr	r3, [pc, #188]	; (8003928 <HAL_GPIO_Init+0x300>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	43db      	mvns	r3, r3
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4013      	ands	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4313      	orrs	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800388e:	4a26      	ldr	r2, [pc, #152]	; (8003928 <HAL_GPIO_Init+0x300>)
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003894:	4b24      	ldr	r3, [pc, #144]	; (8003928 <HAL_GPIO_Init+0x300>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	43db      	mvns	r3, r3
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	4013      	ands	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038b8:	4a1b      	ldr	r2, [pc, #108]	; (8003928 <HAL_GPIO_Init+0x300>)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038be:	4b1a      	ldr	r3, [pc, #104]	; (8003928 <HAL_GPIO_Init+0x300>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	43db      	mvns	r3, r3
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4013      	ands	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038e2:	4a11      	ldr	r2, [pc, #68]	; (8003928 <HAL_GPIO_Init+0x300>)
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	3301      	adds	r3, #1
 80038ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f47f ae9d 	bne.w	8003638 <HAL_GPIO_Init+0x10>
  }
}
 80038fe:	bf00      	nop
 8003900:	bf00      	nop
 8003902:	371c      	adds	r7, #28
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	40021000 	.word	0x40021000
 8003910:	40010000 	.word	0x40010000
 8003914:	48000400 	.word	0x48000400
 8003918:	48000800 	.word	0x48000800
 800391c:	48000c00 	.word	0x48000c00
 8003920:	48001000 	.word	0x48001000
 8003924:	48001400 	.word	0x48001400
 8003928:	40010400 	.word	0x40010400

0800392c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	807b      	strh	r3, [r7, #2]
 8003938:	4613      	mov	r3, r2
 800393a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800393c:	787b      	ldrb	r3, [r7, #1]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003942:	887a      	ldrh	r2, [r7, #2]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003948:	e002      	b.n	8003950 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800394a:	887a      	ldrh	r2, [r7, #2]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003966:	4b08      	ldr	r3, [pc, #32]	; (8003988 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	4013      	ands	r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d006      	beq.n	8003980 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003972:	4a05      	ldr	r2, [pc, #20]	; (8003988 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003978:	88fb      	ldrh	r3, [r7, #6]
 800397a:	4618      	mov	r0, r3
 800397c:	f000 f806 	bl	800398c <HAL_GPIO_EXTI_Callback>
  }
}
 8003980:	bf00      	nop
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40010400 	.word	0x40010400

0800398c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d141      	bne.n	8003a36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039b2:	4b4b      	ldr	r3, [pc, #300]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039be:	d131      	bne.n	8003a24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039c0:	4b47      	ldr	r3, [pc, #284]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039c6:	4a46      	ldr	r2, [pc, #280]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039d0:	4b43      	ldr	r3, [pc, #268]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039d8:	4a41      	ldr	r2, [pc, #260]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039e0:	4b40      	ldr	r3, [pc, #256]	; (8003ae4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2232      	movs	r2, #50	; 0x32
 80039e6:	fb02 f303 	mul.w	r3, r2, r3
 80039ea:	4a3f      	ldr	r2, [pc, #252]	; (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039ec:	fba2 2303 	umull	r2, r3, r2, r3
 80039f0:	0c9b      	lsrs	r3, r3, #18
 80039f2:	3301      	adds	r3, #1
 80039f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039f6:	e002      	b.n	80039fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039fe:	4b38      	ldr	r3, [pc, #224]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a0a:	d102      	bne.n	8003a12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f2      	bne.n	80039f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a12:	4b33      	ldr	r3, [pc, #204]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1e:	d158      	bne.n	8003ad2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e057      	b.n	8003ad4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a24:	4b2e      	ldr	r3, [pc, #184]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a2a:	4a2d      	ldr	r2, [pc, #180]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003a34:	e04d      	b.n	8003ad2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a3c:	d141      	bne.n	8003ac2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a3e:	4b28      	ldr	r3, [pc, #160]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4a:	d131      	bne.n	8003ab0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a4c:	4b24      	ldr	r3, [pc, #144]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a52:	4a23      	ldr	r2, [pc, #140]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a5c:	4b20      	ldr	r3, [pc, #128]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a64:	4a1e      	ldr	r2, [pc, #120]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2232      	movs	r2, #50	; 0x32
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	4a1c      	ldr	r2, [pc, #112]	; (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a78:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7c:	0c9b      	lsrs	r3, r3, #18
 8003a7e:	3301      	adds	r3, #1
 8003a80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a82:	e002      	b.n	8003a8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a8a:	4b15      	ldr	r3, [pc, #84]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a96:	d102      	bne.n	8003a9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f2      	bne.n	8003a84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a9e:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aaa:	d112      	bne.n	8003ad2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e011      	b.n	8003ad4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ab6:	4a0a      	ldr	r2, [pc, #40]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003abc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ac0:	e007      	b.n	8003ad2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ac2:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003aca:	4a05      	ldr	r2, [pc, #20]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003acc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ad0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	40007000 	.word	0x40007000
 8003ae4:	20000068 	.word	0x20000068
 8003ae8:	431bde83 	.word	0x431bde83

08003aec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003af0:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	4a04      	ldr	r2, [pc, #16]	; (8003b08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003afa:	6093      	str	r3, [r2, #8]
}
 8003afc:	bf00      	nop
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40007000 	.word	0x40007000

08003b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e306      	b.n	800412c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d075      	beq.n	8003c16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b2a:	4b97      	ldr	r3, [pc, #604]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
 8003b32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b34:	4b94      	ldr	r3, [pc, #592]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	2b0c      	cmp	r3, #12
 8003b42:	d102      	bne.n	8003b4a <HAL_RCC_OscConfig+0x3e>
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d002      	beq.n	8003b50 <HAL_RCC_OscConfig+0x44>
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d10b      	bne.n	8003b68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b50:	4b8d      	ldr	r3, [pc, #564]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d05b      	beq.n	8003c14 <HAL_RCC_OscConfig+0x108>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d157      	bne.n	8003c14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e2e1      	b.n	800412c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b70:	d106      	bne.n	8003b80 <HAL_RCC_OscConfig+0x74>
 8003b72:	4b85      	ldr	r3, [pc, #532]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a84      	ldr	r2, [pc, #528]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	e01d      	b.n	8003bbc <HAL_RCC_OscConfig+0xb0>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x98>
 8003b8a:	4b7f      	ldr	r3, [pc, #508]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a7e      	ldr	r2, [pc, #504]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4b7c      	ldr	r3, [pc, #496]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a7b      	ldr	r2, [pc, #492]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e00b      	b.n	8003bbc <HAL_RCC_OscConfig+0xb0>
 8003ba4:	4b78      	ldr	r3, [pc, #480]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a77      	ldr	r2, [pc, #476]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	4b75      	ldr	r3, [pc, #468]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a74      	ldr	r2, [pc, #464]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d013      	beq.n	8003bec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fd fd86 	bl	80016d4 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bcc:	f7fd fd82 	bl	80016d4 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	; 0x64
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e2a6      	b.n	800412c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bde:	4b6a      	ldr	r3, [pc, #424]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0xc0>
 8003bea:	e014      	b.n	8003c16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7fd fd72 	bl	80016d4 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf4:	f7fd fd6e 	bl	80016d4 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	; 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e292      	b.n	800412c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c06:	4b60      	ldr	r3, [pc, #384]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0xe8>
 8003c12:	e000      	b.n	8003c16 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d075      	beq.n	8003d0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c22:	4b59      	ldr	r3, [pc, #356]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c2c:	4b56      	ldr	r3, [pc, #344]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	2b0c      	cmp	r3, #12
 8003c3a:	d102      	bne.n	8003c42 <HAL_RCC_OscConfig+0x136>
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d002      	beq.n	8003c48 <HAL_RCC_OscConfig+0x13c>
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d11f      	bne.n	8003c88 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c48:	4b4f      	ldr	r3, [pc, #316]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d005      	beq.n	8003c60 <HAL_RCC_OscConfig+0x154>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e265      	b.n	800412c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c60:	4b49      	ldr	r3, [pc, #292]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	061b      	lsls	r3, r3, #24
 8003c6e:	4946      	ldr	r1, [pc, #280]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c74:	4b45      	ldr	r3, [pc, #276]	; (8003d8c <HAL_RCC_OscConfig+0x280>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fd fcdf 	bl	800163c <HAL_InitTick>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d043      	beq.n	8003d0c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e251      	b.n	800412c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d023      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c90:	4b3d      	ldr	r3, [pc, #244]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a3c      	ldr	r2, [pc, #240]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9c:	f7fd fd1a 	bl	80016d4 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca4:	f7fd fd16 	bl	80016d4 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e23a      	b.n	800412c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cb6:	4b34      	ldr	r3, [pc, #208]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc2:	4b31      	ldr	r3, [pc, #196]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	061b      	lsls	r3, r3, #24
 8003cd0:	492d      	ldr	r1, [pc, #180]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	604b      	str	r3, [r1, #4]
 8003cd6:	e01a      	b.n	8003d0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cd8:	4b2b      	ldr	r3, [pc, #172]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a2a      	ldr	r2, [pc, #168]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003cde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fd fcf6 	bl	80016d4 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cec:	f7fd fcf2 	bl	80016d4 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e216      	b.n	800412c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cfe:	4b22      	ldr	r3, [pc, #136]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x1e0>
 8003d0a:	e000      	b.n	8003d0e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d041      	beq.n	8003d9e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01c      	beq.n	8003d5c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d22:	4b19      	ldr	r3, [pc, #100]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d28:	4a17      	ldr	r2, [pc, #92]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d32:	f7fd fccf 	bl	80016d4 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d3a:	f7fd fccb 	bl	80016d4 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e1ef      	b.n	800412c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d4c:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0ef      	beq.n	8003d3a <HAL_RCC_OscConfig+0x22e>
 8003d5a:	e020      	b.n	8003d9e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d5c:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d62:	4a09      	ldr	r2, [pc, #36]	; (8003d88 <HAL_RCC_OscConfig+0x27c>)
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6c:	f7fd fcb2 	bl	80016d4 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d72:	e00d      	b.n	8003d90 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d74:	f7fd fcae 	bl	80016d4 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d906      	bls.n	8003d90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e1d2      	b.n	800412c <HAL_RCC_OscConfig+0x620>
 8003d86:	bf00      	nop
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	2000006c 	.word	0x2000006c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d90:	4b8c      	ldr	r3, [pc, #560]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1ea      	bne.n	8003d74 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 80a6 	beq.w	8003ef8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dac:	2300      	movs	r3, #0
 8003dae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003db0:	4b84      	ldr	r3, [pc, #528]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x2b4>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <HAL_RCC_OscConfig+0x2b6>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00d      	beq.n	8003de2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc6:	4b7f      	ldr	r3, [pc, #508]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dca:	4a7e      	ldr	r2, [pc, #504]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	6593      	str	r3, [r2, #88]	; 0x58
 8003dd2:	4b7c      	ldr	r3, [pc, #496]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003dde:	2301      	movs	r3, #1
 8003de0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de2:	4b79      	ldr	r3, [pc, #484]	; (8003fc8 <HAL_RCC_OscConfig+0x4bc>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d118      	bne.n	8003e20 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dee:	4b76      	ldr	r3, [pc, #472]	; (8003fc8 <HAL_RCC_OscConfig+0x4bc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a75      	ldr	r2, [pc, #468]	; (8003fc8 <HAL_RCC_OscConfig+0x4bc>)
 8003df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dfa:	f7fd fc6b 	bl	80016d4 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e02:	f7fd fc67 	bl	80016d4 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e18b      	b.n	800412c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e14:	4b6c      	ldr	r3, [pc, #432]	; (8003fc8 <HAL_RCC_OscConfig+0x4bc>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d108      	bne.n	8003e3a <HAL_RCC_OscConfig+0x32e>
 8003e28:	4b66      	ldr	r3, [pc, #408]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	4a65      	ldr	r2, [pc, #404]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e38:	e024      	b.n	8003e84 <HAL_RCC_OscConfig+0x378>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	2b05      	cmp	r3, #5
 8003e40:	d110      	bne.n	8003e64 <HAL_RCC_OscConfig+0x358>
 8003e42:	4b60      	ldr	r3, [pc, #384]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e48:	4a5e      	ldr	r2, [pc, #376]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003e4a:	f043 0304 	orr.w	r3, r3, #4
 8003e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e52:	4b5c      	ldr	r3, [pc, #368]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e58:	4a5a      	ldr	r2, [pc, #360]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e62:	e00f      	b.n	8003e84 <HAL_RCC_OscConfig+0x378>
 8003e64:	4b57      	ldr	r3, [pc, #348]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6a:	4a56      	ldr	r2, [pc, #344]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e74:	4b53      	ldr	r3, [pc, #332]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7a:	4a52      	ldr	r2, [pc, #328]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003e7c:	f023 0304 	bic.w	r3, r3, #4
 8003e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d016      	beq.n	8003eba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8c:	f7fd fc22 	bl	80016d4 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e92:	e00a      	b.n	8003eaa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e94:	f7fd fc1e 	bl	80016d4 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e140      	b.n	800412c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eaa:	4b46      	ldr	r3, [pc, #280]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0ed      	beq.n	8003e94 <HAL_RCC_OscConfig+0x388>
 8003eb8:	e015      	b.n	8003ee6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eba:	f7fd fc0b 	bl	80016d4 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ec0:	e00a      	b.n	8003ed8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec2:	f7fd fc07 	bl	80016d4 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e129      	b.n	800412c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ed8:	4b3a      	ldr	r3, [pc, #232]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1ed      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ee6:	7ffb      	ldrb	r3, [r7, #31]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d105      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eec:	4b35      	ldr	r3, [pc, #212]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef0:	4a34      	ldr	r2, [pc, #208]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0320 	and.w	r3, r3, #32
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d03c      	beq.n	8003f7e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d01c      	beq.n	8003f46 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f0c:	4b2d      	ldr	r3, [pc, #180]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003f0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f12:	4a2c      	ldr	r2, [pc, #176]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1c:	f7fd fbda 	bl	80016d4 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f24:	f7fd fbd6 	bl	80016d4 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e0fa      	b.n	800412c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f36:	4b23      	ldr	r3, [pc, #140]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0ef      	beq.n	8003f24 <HAL_RCC_OscConfig+0x418>
 8003f44:	e01b      	b.n	8003f7e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f46:	4b1f      	ldr	r3, [pc, #124]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003f48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f4c:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003f4e:	f023 0301 	bic.w	r3, r3, #1
 8003f52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f56:	f7fd fbbd 	bl	80016d4 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f5e:	f7fd fbb9 	bl	80016d4 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e0dd      	b.n	800412c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f70:	4b14      	ldr	r3, [pc, #80]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003f72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1ef      	bne.n	8003f5e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 80d1 	beq.w	800412a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f88:	4b0e      	ldr	r3, [pc, #56]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	2b0c      	cmp	r3, #12
 8003f92:	f000 808b 	beq.w	80040ac <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d15e      	bne.n	800405c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9e:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a08      	ldr	r2, [pc, #32]	; (8003fc4 <HAL_RCC_OscConfig+0x4b8>)
 8003fa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003faa:	f7fd fb93 	bl	80016d4 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb0:	e00c      	b.n	8003fcc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb2:	f7fd fb8f 	bl	80016d4 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d905      	bls.n	8003fcc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e0b3      	b.n	800412c <HAL_RCC_OscConfig+0x620>
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fcc:	4b59      	ldr	r3, [pc, #356]	; (8004134 <HAL_RCC_OscConfig+0x628>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1ec      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fd8:	4b56      	ldr	r3, [pc, #344]	; (8004134 <HAL_RCC_OscConfig+0x628>)
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	4b56      	ldr	r3, [pc, #344]	; (8004138 <HAL_RCC_OscConfig+0x62c>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6a11      	ldr	r1, [r2, #32]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fe8:	3a01      	subs	r2, #1
 8003fea:	0112      	lsls	r2, r2, #4
 8003fec:	4311      	orrs	r1, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ff2:	0212      	lsls	r2, r2, #8
 8003ff4:	4311      	orrs	r1, r2
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ffa:	0852      	lsrs	r2, r2, #1
 8003ffc:	3a01      	subs	r2, #1
 8003ffe:	0552      	lsls	r2, r2, #21
 8004000:	4311      	orrs	r1, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004006:	0852      	lsrs	r2, r2, #1
 8004008:	3a01      	subs	r2, #1
 800400a:	0652      	lsls	r2, r2, #25
 800400c:	4311      	orrs	r1, r2
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004012:	06d2      	lsls	r2, r2, #27
 8004014:	430a      	orrs	r2, r1
 8004016:	4947      	ldr	r1, [pc, #284]	; (8004134 <HAL_RCC_OscConfig+0x628>)
 8004018:	4313      	orrs	r3, r2
 800401a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800401c:	4b45      	ldr	r3, [pc, #276]	; (8004134 <HAL_RCC_OscConfig+0x628>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a44      	ldr	r2, [pc, #272]	; (8004134 <HAL_RCC_OscConfig+0x628>)
 8004022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004026:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004028:	4b42      	ldr	r3, [pc, #264]	; (8004134 <HAL_RCC_OscConfig+0x628>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	4a41      	ldr	r2, [pc, #260]	; (8004134 <HAL_RCC_OscConfig+0x628>)
 800402e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004032:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fd fb4e 	bl	80016d4 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403c:	f7fd fb4a 	bl	80016d4 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e06e      	b.n	800412c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800404e:	4b39      	ldr	r3, [pc, #228]	; (8004134 <HAL_RCC_OscConfig+0x628>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f0      	beq.n	800403c <HAL_RCC_OscConfig+0x530>
 800405a:	e066      	b.n	800412a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405c:	4b35      	ldr	r3, [pc, #212]	; (8004134 <HAL_RCC_OscConfig+0x628>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a34      	ldr	r2, [pc, #208]	; (8004134 <HAL_RCC_OscConfig+0x628>)
 8004062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004066:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004068:	4b32      	ldr	r3, [pc, #200]	; (8004134 <HAL_RCC_OscConfig+0x628>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4a31      	ldr	r2, [pc, #196]	; (8004134 <HAL_RCC_OscConfig+0x628>)
 800406e:	f023 0303 	bic.w	r3, r3, #3
 8004072:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004074:	4b2f      	ldr	r3, [pc, #188]	; (8004134 <HAL_RCC_OscConfig+0x628>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	4a2e      	ldr	r2, [pc, #184]	; (8004134 <HAL_RCC_OscConfig+0x628>)
 800407a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800407e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004082:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fd fb26 	bl	80016d4 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408c:	f7fd fb22 	bl	80016d4 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e046      	b.n	800412c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800409e:	4b25      	ldr	r3, [pc, #148]	; (8004134 <HAL_RCC_OscConfig+0x628>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x580>
 80040aa:	e03e      	b.n	800412a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e039      	b.n	800412c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80040b8:	4b1e      	ldr	r3, [pc, #120]	; (8004134 <HAL_RCC_OscConfig+0x628>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f003 0203 	and.w	r2, r3, #3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d12c      	bne.n	8004126 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	3b01      	subs	r3, #1
 80040d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040da:	429a      	cmp	r2, r3
 80040dc:	d123      	bne.n	8004126 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d11b      	bne.n	8004126 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d113      	bne.n	8004126 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	085b      	lsrs	r3, r3, #1
 800410a:	3b01      	subs	r3, #1
 800410c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800410e:	429a      	cmp	r2, r3
 8004110:	d109      	bne.n	8004126 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411c:	085b      	lsrs	r3, r3, #1
 800411e:	3b01      	subs	r3, #1
 8004120:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004122:	429a      	cmp	r2, r3
 8004124:	d001      	beq.n	800412a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3720      	adds	r7, #32
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40021000 	.word	0x40021000
 8004138:	019f800c 	.word	0x019f800c

0800413c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e11e      	b.n	8004392 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004154:	4b91      	ldr	r3, [pc, #580]	; (800439c <HAL_RCC_ClockConfig+0x260>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d910      	bls.n	8004184 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004162:	4b8e      	ldr	r3, [pc, #568]	; (800439c <HAL_RCC_ClockConfig+0x260>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f023 020f 	bic.w	r2, r3, #15
 800416a:	498c      	ldr	r1, [pc, #560]	; (800439c <HAL_RCC_ClockConfig+0x260>)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	4313      	orrs	r3, r2
 8004170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004172:	4b8a      	ldr	r3, [pc, #552]	; (800439c <HAL_RCC_ClockConfig+0x260>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d001      	beq.n	8004184 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e106      	b.n	8004392 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d073      	beq.n	8004278 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b03      	cmp	r3, #3
 8004196:	d129      	bne.n	80041ec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004198:	4b81      	ldr	r3, [pc, #516]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0f4      	b.n	8004392 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80041a8:	f000 f99e 	bl	80044e8 <RCC_GetSysClockFreqFromPLLSource>
 80041ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4a7c      	ldr	r2, [pc, #496]	; (80043a4 <HAL_RCC_ClockConfig+0x268>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d93f      	bls.n	8004236 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80041b6:	4b7a      	ldr	r3, [pc, #488]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d009      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d033      	beq.n	8004236 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d12f      	bne.n	8004236 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041d6:	4b72      	ldr	r3, [pc, #456]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041de:	4a70      	ldr	r2, [pc, #448]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 80041e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80041e6:	2380      	movs	r3, #128	; 0x80
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	e024      	b.n	8004236 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d107      	bne.n	8004204 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041f4:	4b6a      	ldr	r3, [pc, #424]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d109      	bne.n	8004214 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e0c6      	b.n	8004392 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004204:	4b66      	ldr	r3, [pc, #408]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0be      	b.n	8004392 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004214:	f000 f8ce 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 8004218:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	4a61      	ldr	r2, [pc, #388]	; (80043a4 <HAL_RCC_ClockConfig+0x268>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d909      	bls.n	8004236 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004222:	4b5f      	ldr	r3, [pc, #380]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800422a:	4a5d      	ldr	r2, [pc, #372]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 800422c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004230:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004232:	2380      	movs	r3, #128	; 0x80
 8004234:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004236:	4b5a      	ldr	r3, [pc, #360]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f023 0203 	bic.w	r2, r3, #3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	4957      	ldr	r1, [pc, #348]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 8004244:	4313      	orrs	r3, r2
 8004246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004248:	f7fd fa44 	bl	80016d4 <HAL_GetTick>
 800424c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800424e:	e00a      	b.n	8004266 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004250:	f7fd fa40 	bl	80016d4 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	f241 3288 	movw	r2, #5000	; 0x1388
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e095      	b.n	8004392 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004266:	4b4e      	ldr	r3, [pc, #312]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 020c 	and.w	r2, r3, #12
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	429a      	cmp	r2, r3
 8004276:	d1eb      	bne.n	8004250 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d023      	beq.n	80042cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004290:	4b43      	ldr	r3, [pc, #268]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	4a42      	ldr	r2, [pc, #264]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 8004296:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800429a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d007      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80042a8:	4b3d      	ldr	r3, [pc, #244]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80042b0:	4a3b      	ldr	r2, [pc, #236]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 80042b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b8:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	4936      	ldr	r1, [pc, #216]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
 80042ca:	e008      	b.n	80042de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2b80      	cmp	r3, #128	; 0x80
 80042d0:	d105      	bne.n	80042de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80042d2:	4b33      	ldr	r3, [pc, #204]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	4a32      	ldr	r2, [pc, #200]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 80042d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042de:	4b2f      	ldr	r3, [pc, #188]	; (800439c <HAL_RCC_ClockConfig+0x260>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d21d      	bcs.n	8004328 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ec:	4b2b      	ldr	r3, [pc, #172]	; (800439c <HAL_RCC_ClockConfig+0x260>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f023 020f 	bic.w	r2, r3, #15
 80042f4:	4929      	ldr	r1, [pc, #164]	; (800439c <HAL_RCC_ClockConfig+0x260>)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042fc:	f7fd f9ea 	bl	80016d4 <HAL_GetTick>
 8004300:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	e00a      	b.n	800431a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004304:	f7fd f9e6 	bl	80016d4 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e03b      	b.n	8004392 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b20      	ldr	r3, [pc, #128]	; (800439c <HAL_RCC_ClockConfig+0x260>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d1ed      	bne.n	8004304 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004334:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	4917      	ldr	r1, [pc, #92]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 8004342:	4313      	orrs	r3, r2
 8004344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004352:	4b13      	ldr	r3, [pc, #76]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	490f      	ldr	r1, [pc, #60]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 8004362:	4313      	orrs	r3, r2
 8004364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004366:	f000 f825 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 800436a:	4602      	mov	r2, r0
 800436c:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <HAL_RCC_ClockConfig+0x264>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	091b      	lsrs	r3, r3, #4
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	490c      	ldr	r1, [pc, #48]	; (80043a8 <HAL_RCC_ClockConfig+0x26c>)
 8004378:	5ccb      	ldrb	r3, [r1, r3]
 800437a:	f003 031f 	and.w	r3, r3, #31
 800437e:	fa22 f303 	lsr.w	r3, r2, r3
 8004382:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <HAL_RCC_ClockConfig+0x270>)
 8004384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004386:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <HAL_RCC_ClockConfig+0x274>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7fd f956 	bl	800163c <HAL_InitTick>
 8004390:	4603      	mov	r3, r0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40022000 	.word	0x40022000
 80043a0:	40021000 	.word	0x40021000
 80043a4:	04c4b400 	.word	0x04c4b400
 80043a8:	0800a5b8 	.word	0x0800a5b8
 80043ac:	20000068 	.word	0x20000068
 80043b0:	2000006c 	.word	0x2000006c

080043b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80043ba:	4b2c      	ldr	r3, [pc, #176]	; (800446c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 030c 	and.w	r3, r3, #12
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d102      	bne.n	80043cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043c6:	4b2a      	ldr	r3, [pc, #168]	; (8004470 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	e047      	b.n	800445c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80043cc:	4b27      	ldr	r3, [pc, #156]	; (800446c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 030c 	and.w	r3, r3, #12
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d102      	bne.n	80043de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043d8:	4b26      	ldr	r3, [pc, #152]	; (8004474 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	e03e      	b.n	800445c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80043de:	4b23      	ldr	r3, [pc, #140]	; (800446c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	2b0c      	cmp	r3, #12
 80043e8:	d136      	bne.n	8004458 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043ea:	4b20      	ldr	r3, [pc, #128]	; (800446c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043f4:	4b1d      	ldr	r3, [pc, #116]	; (800446c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	091b      	lsrs	r3, r3, #4
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	3301      	adds	r3, #1
 8004400:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b03      	cmp	r3, #3
 8004406:	d10c      	bne.n	8004422 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004408:	4a1a      	ldr	r2, [pc, #104]	; (8004474 <HAL_RCC_GetSysClockFreq+0xc0>)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	4a16      	ldr	r2, [pc, #88]	; (800446c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004412:	68d2      	ldr	r2, [r2, #12]
 8004414:	0a12      	lsrs	r2, r2, #8
 8004416:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800441a:	fb02 f303 	mul.w	r3, r2, r3
 800441e:	617b      	str	r3, [r7, #20]
      break;
 8004420:	e00c      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004422:	4a13      	ldr	r2, [pc, #76]	; (8004470 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	fbb2 f3f3 	udiv	r3, r2, r3
 800442a:	4a10      	ldr	r2, [pc, #64]	; (800446c <HAL_RCC_GetSysClockFreq+0xb8>)
 800442c:	68d2      	ldr	r2, [r2, #12]
 800442e:	0a12      	lsrs	r2, r2, #8
 8004430:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004434:	fb02 f303 	mul.w	r3, r2, r3
 8004438:	617b      	str	r3, [r7, #20]
      break;
 800443a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <HAL_RCC_GetSysClockFreq+0xb8>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	0e5b      	lsrs	r3, r3, #25
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	3301      	adds	r3, #1
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	fbb2 f3f3 	udiv	r3, r2, r3
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	e001      	b.n	800445c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800445c:	693b      	ldr	r3, [r7, #16]
}
 800445e:	4618      	mov	r0, r3
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40021000 	.word	0x40021000
 8004470:	00f42400 	.word	0x00f42400
 8004474:	016e3600 	.word	0x016e3600

08004478 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800447c:	4b03      	ldr	r3, [pc, #12]	; (800448c <HAL_RCC_GetHCLKFreq+0x14>)
 800447e:	681b      	ldr	r3, [r3, #0]
}
 8004480:	4618      	mov	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20000068 	.word	0x20000068

08004490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004494:	f7ff fff0 	bl	8004478 <HAL_RCC_GetHCLKFreq>
 8004498:	4602      	mov	r2, r0
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	0a1b      	lsrs	r3, r3, #8
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	4904      	ldr	r1, [pc, #16]	; (80044b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044a6:	5ccb      	ldrb	r3, [r1, r3]
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40021000 	.word	0x40021000
 80044b8:	0800a5c8 	.word	0x0800a5c8

080044bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044c0:	f7ff ffda 	bl	8004478 <HAL_RCC_GetHCLKFreq>
 80044c4:	4602      	mov	r2, r0
 80044c6:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	0adb      	lsrs	r3, r3, #11
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	4904      	ldr	r1, [pc, #16]	; (80044e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044d2:	5ccb      	ldrb	r3, [r1, r3]
 80044d4:	f003 031f 	and.w	r3, r3, #31
 80044d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044dc:	4618      	mov	r0, r3
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40021000 	.word	0x40021000
 80044e4:	0800a5c8 	.word	0x0800a5c8

080044e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044ee:	4b1e      	ldr	r3, [pc, #120]	; (8004568 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044f8:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	3301      	adds	r3, #1
 8004504:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b03      	cmp	r3, #3
 800450a:	d10c      	bne.n	8004526 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800450c:	4a17      	ldr	r2, [pc, #92]	; (800456c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	fbb2 f3f3 	udiv	r3, r2, r3
 8004514:	4a14      	ldr	r2, [pc, #80]	; (8004568 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004516:	68d2      	ldr	r2, [r2, #12]
 8004518:	0a12      	lsrs	r2, r2, #8
 800451a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800451e:	fb02 f303 	mul.w	r3, r2, r3
 8004522:	617b      	str	r3, [r7, #20]
    break;
 8004524:	e00c      	b.n	8004540 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004526:	4a12      	ldr	r2, [pc, #72]	; (8004570 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	fbb2 f3f3 	udiv	r3, r2, r3
 800452e:	4a0e      	ldr	r2, [pc, #56]	; (8004568 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004530:	68d2      	ldr	r2, [r2, #12]
 8004532:	0a12      	lsrs	r2, r2, #8
 8004534:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004538:	fb02 f303 	mul.w	r3, r2, r3
 800453c:	617b      	str	r3, [r7, #20]
    break;
 800453e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004540:	4b09      	ldr	r3, [pc, #36]	; (8004568 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	0e5b      	lsrs	r3, r3, #25
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	3301      	adds	r3, #1
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	fbb2 f3f3 	udiv	r3, r2, r3
 8004558:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800455a:	687b      	ldr	r3, [r7, #4]
}
 800455c:	4618      	mov	r0, r3
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	40021000 	.word	0x40021000
 800456c:	016e3600 	.word	0x016e3600
 8004570:	00f42400 	.word	0x00f42400

08004574 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800457c:	2300      	movs	r3, #0
 800457e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004580:	2300      	movs	r3, #0
 8004582:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8098 	beq.w	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004592:	2300      	movs	r3, #0
 8004594:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004596:	4b43      	ldr	r3, [pc, #268]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10d      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a2:	4b40      	ldr	r3, [pc, #256]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a6:	4a3f      	ldr	r2, [pc, #252]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ac:	6593      	str	r3, [r2, #88]	; 0x58
 80045ae:	4b3d      	ldr	r3, [pc, #244]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b6:	60bb      	str	r3, [r7, #8]
 80045b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ba:	2301      	movs	r3, #1
 80045bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045be:	4b3a      	ldr	r3, [pc, #232]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a39      	ldr	r2, [pc, #228]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045ca:	f7fd f883 	bl	80016d4 <HAL_GetTick>
 80045ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045d0:	e009      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d2:	f7fd f87f 	bl	80016d4 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d902      	bls.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	74fb      	strb	r3, [r7, #19]
        break;
 80045e4:	e005      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045e6:	4b30      	ldr	r3, [pc, #192]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0ef      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80045f2:	7cfb      	ldrb	r3, [r7, #19]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d159      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045f8:	4b2a      	ldr	r3, [pc, #168]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004602:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d01e      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	429a      	cmp	r2, r3
 8004612:	d019      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004614:	4b23      	ldr	r3, [pc, #140]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004620:	4b20      	ldr	r3, [pc, #128]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	4a1f      	ldr	r2, [pc, #124]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800462c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004630:	4b1c      	ldr	r3, [pc, #112]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004636:	4a1b      	ldr	r2, [pc, #108]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004640:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d016      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004652:	f7fd f83f 	bl	80016d4 <HAL_GetTick>
 8004656:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004658:	e00b      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800465a:	f7fd f83b 	bl	80016d4 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	f241 3288 	movw	r2, #5000	; 0x1388
 8004668:	4293      	cmp	r3, r2
 800466a:	d902      	bls.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	74fb      	strb	r3, [r7, #19]
            break;
 8004670:	e006      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004672:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0ec      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004680:	7cfb      	ldrb	r3, [r7, #19]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10b      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004686:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004694:	4903      	ldr	r1, [pc, #12]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800469c:	e008      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800469e:	7cfb      	ldrb	r3, [r7, #19]
 80046a0:	74bb      	strb	r3, [r7, #18]
 80046a2:	e005      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046a4:	40021000 	.word	0x40021000
 80046a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ac:	7cfb      	ldrb	r3, [r7, #19]
 80046ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046b0:	7c7b      	ldrb	r3, [r7, #17]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d105      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b6:	4ba7      	ldr	r3, [pc, #668]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ba:	4aa6      	ldr	r2, [pc, #664]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046ce:	4ba1      	ldr	r3, [pc, #644]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d4:	f023 0203 	bic.w	r2, r3, #3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	499d      	ldr	r1, [pc, #628]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046f0:	4b98      	ldr	r3, [pc, #608]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f6:	f023 020c 	bic.w	r2, r3, #12
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	4995      	ldr	r1, [pc, #596]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004712:	4b90      	ldr	r3, [pc, #576]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004718:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	498c      	ldr	r1, [pc, #560]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004734:	4b87      	ldr	r3, [pc, #540]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	4984      	ldr	r1, [pc, #528]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004756:	4b7f      	ldr	r3, [pc, #508]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	497b      	ldr	r1, [pc, #492]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004778:	4b76      	ldr	r3, [pc, #472]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	4973      	ldr	r1, [pc, #460]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800479a:	4b6e      	ldr	r3, [pc, #440]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	496a      	ldr	r1, [pc, #424]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047bc:	4b65      	ldr	r3, [pc, #404]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	4962      	ldr	r1, [pc, #392]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047de:	4b5d      	ldr	r3, [pc, #372]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	4959      	ldr	r1, [pc, #356]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004800:	4b54      	ldr	r3, [pc, #336]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004802:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004806:	f023 0203 	bic.w	r2, r3, #3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	4951      	ldr	r1, [pc, #324]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004822:	4b4c      	ldr	r3, [pc, #304]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004828:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	4948      	ldr	r1, [pc, #288]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004840:	2b00      	cmp	r3, #0
 8004842:	d015      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004844:	4b43      	ldr	r3, [pc, #268]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	4940      	ldr	r1, [pc, #256]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004862:	d105      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004864:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4a3a      	ldr	r2, [pc, #232]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800486a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800486e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004878:	2b00      	cmp	r3, #0
 800487a:	d015      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800487c:	4b35      	ldr	r3, [pc, #212]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004882:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488a:	4932      	ldr	r1, [pc, #200]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004896:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800489a:	d105      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800489c:	4b2d      	ldr	r3, [pc, #180]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	4a2c      	ldr	r2, [pc, #176]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048a6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d015      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048b4:	4b27      	ldr	r3, [pc, #156]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	4924      	ldr	r1, [pc, #144]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048d2:	d105      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048d4:	4b1f      	ldr	r3, [pc, #124]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	4a1e      	ldr	r2, [pc, #120]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d015      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048ec:	4b19      	ldr	r3, [pc, #100]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fa:	4916      	ldr	r1, [pc, #88]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004906:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800490a:	d105      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800490c:	4b11      	ldr	r3, [pc, #68]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4a10      	ldr	r2, [pc, #64]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004916:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d019      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	4908      	ldr	r1, [pc, #32]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004942:	d109      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004944:	4b03      	ldr	r3, [pc, #12]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	4a02      	ldr	r2, [pc, #8]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800494a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800494e:	60d3      	str	r3, [r2, #12]
 8004950:	e002      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004952:	bf00      	nop
 8004954:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d015      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004964:	4b29      	ldr	r3, [pc, #164]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004972:	4926      	ldr	r1, [pc, #152]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004982:	d105      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004984:	4b21      	ldr	r3, [pc, #132]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	4a20      	ldr	r2, [pc, #128]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800498a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800498e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d015      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800499c:	4b1b      	ldr	r3, [pc, #108]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049aa:	4918      	ldr	r1, [pc, #96]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ba:	d105      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80049bc:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	4a12      	ldr	r2, [pc, #72]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d015      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80049d4:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e2:	490a      	ldr	r1, [pc, #40]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049f2:	d105      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049f4:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	4a04      	ldr	r2, [pc, #16]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a00:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40021000 	.word	0x40021000

08004a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e049      	b.n	8004ab6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d106      	bne.n	8004a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fc fcba 	bl	80013b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	f000 fc6e 	bl	8005330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e049      	b.n	8004b64 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d106      	bne.n	8004aea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f841 	bl	8004b6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2202      	movs	r2, #2
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3304      	adds	r3, #4
 8004afa:	4619      	mov	r1, r3
 8004afc:	4610      	mov	r0, r2
 8004afe:	f000 fc17 	bl	8005330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d109      	bne.n	8004ba4 <HAL_TIM_PWM_Start+0x24>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	bf14      	ite	ne
 8004b9c:	2301      	movne	r3, #1
 8004b9e:	2300      	moveq	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	e03c      	b.n	8004c1e <HAL_TIM_PWM_Start+0x9e>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d109      	bne.n	8004bbe <HAL_TIM_PWM_Start+0x3e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	bf14      	ite	ne
 8004bb6:	2301      	movne	r3, #1
 8004bb8:	2300      	moveq	r3, #0
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	e02f      	b.n	8004c1e <HAL_TIM_PWM_Start+0x9e>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d109      	bne.n	8004bd8 <HAL_TIM_PWM_Start+0x58>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	bf14      	ite	ne
 8004bd0:	2301      	movne	r3, #1
 8004bd2:	2300      	moveq	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	e022      	b.n	8004c1e <HAL_TIM_PWM_Start+0x9e>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2b0c      	cmp	r3, #12
 8004bdc:	d109      	bne.n	8004bf2 <HAL_TIM_PWM_Start+0x72>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	bf14      	ite	ne
 8004bea:	2301      	movne	r3, #1
 8004bec:	2300      	moveq	r3, #0
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	e015      	b.n	8004c1e <HAL_TIM_PWM_Start+0x9e>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	d109      	bne.n	8004c0c <HAL_TIM_PWM_Start+0x8c>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	bf14      	ite	ne
 8004c04:	2301      	movne	r3, #1
 8004c06:	2300      	moveq	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	e008      	b.n	8004c1e <HAL_TIM_PWM_Start+0x9e>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	bf14      	ite	ne
 8004c18:	2301      	movne	r3, #1
 8004c1a:	2300      	moveq	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e0a6      	b.n	8004d74 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d104      	bne.n	8004c36 <HAL_TIM_PWM_Start+0xb6>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c34:	e023      	b.n	8004c7e <HAL_TIM_PWM_Start+0xfe>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d104      	bne.n	8004c46 <HAL_TIM_PWM_Start+0xc6>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c44:	e01b      	b.n	8004c7e <HAL_TIM_PWM_Start+0xfe>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d104      	bne.n	8004c56 <HAL_TIM_PWM_Start+0xd6>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c54:	e013      	b.n	8004c7e <HAL_TIM_PWM_Start+0xfe>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b0c      	cmp	r3, #12
 8004c5a:	d104      	bne.n	8004c66 <HAL_TIM_PWM_Start+0xe6>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c64:	e00b      	b.n	8004c7e <HAL_TIM_PWM_Start+0xfe>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b10      	cmp	r3, #16
 8004c6a:	d104      	bne.n	8004c76 <HAL_TIM_PWM_Start+0xf6>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c74:	e003      	b.n	8004c7e <HAL_TIM_PWM_Start+0xfe>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2202      	movs	r2, #2
 8004c7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2201      	movs	r2, #1
 8004c84:	6839      	ldr	r1, [r7, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 ffc0 	bl	8005c0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a3a      	ldr	r2, [pc, #232]	; (8004d7c <HAL_TIM_PWM_Start+0x1fc>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d018      	beq.n	8004cc8 <HAL_TIM_PWM_Start+0x148>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a39      	ldr	r2, [pc, #228]	; (8004d80 <HAL_TIM_PWM_Start+0x200>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d013      	beq.n	8004cc8 <HAL_TIM_PWM_Start+0x148>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a37      	ldr	r2, [pc, #220]	; (8004d84 <HAL_TIM_PWM_Start+0x204>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00e      	beq.n	8004cc8 <HAL_TIM_PWM_Start+0x148>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a36      	ldr	r2, [pc, #216]	; (8004d88 <HAL_TIM_PWM_Start+0x208>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d009      	beq.n	8004cc8 <HAL_TIM_PWM_Start+0x148>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a34      	ldr	r2, [pc, #208]	; (8004d8c <HAL_TIM_PWM_Start+0x20c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d004      	beq.n	8004cc8 <HAL_TIM_PWM_Start+0x148>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a33      	ldr	r2, [pc, #204]	; (8004d90 <HAL_TIM_PWM_Start+0x210>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d101      	bne.n	8004ccc <HAL_TIM_PWM_Start+0x14c>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <HAL_TIM_PWM_Start+0x14e>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d007      	beq.n	8004ce2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ce0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a25      	ldr	r2, [pc, #148]	; (8004d7c <HAL_TIM_PWM_Start+0x1fc>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d022      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x1b2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf4:	d01d      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x1b2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a26      	ldr	r2, [pc, #152]	; (8004d94 <HAL_TIM_PWM_Start+0x214>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d018      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x1b2>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a24      	ldr	r2, [pc, #144]	; (8004d98 <HAL_TIM_PWM_Start+0x218>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d013      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x1b2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a23      	ldr	r2, [pc, #140]	; (8004d9c <HAL_TIM_PWM_Start+0x21c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00e      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x1b2>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a19      	ldr	r2, [pc, #100]	; (8004d80 <HAL_TIM_PWM_Start+0x200>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d009      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x1b2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a18      	ldr	r2, [pc, #96]	; (8004d84 <HAL_TIM_PWM_Start+0x204>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d004      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x1b2>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a18      	ldr	r2, [pc, #96]	; (8004d90 <HAL_TIM_PWM_Start+0x210>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d115      	bne.n	8004d5e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	4b19      	ldr	r3, [pc, #100]	; (8004da0 <HAL_TIM_PWM_Start+0x220>)
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b06      	cmp	r3, #6
 8004d42:	d015      	beq.n	8004d70 <HAL_TIM_PWM_Start+0x1f0>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4a:	d011      	beq.n	8004d70 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0201 	orr.w	r2, r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d5c:	e008      	b.n	8004d70 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f042 0201 	orr.w	r2, r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	e000      	b.n	8004d72 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40012c00 	.word	0x40012c00
 8004d80:	40013400 	.word	0x40013400
 8004d84:	40014000 	.word	0x40014000
 8004d88:	40014400 	.word	0x40014400
 8004d8c:	40014800 	.word	0x40014800
 8004d90:	40015000 	.word	0x40015000
 8004d94:	40000400 	.word	0x40000400
 8004d98:	40000800 	.word	0x40000800
 8004d9c:	40000c00 	.word	0x40000c00
 8004da0:	00010007 	.word	0x00010007

08004da4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2200      	movs	r2, #0
 8004db4:	6839      	ldr	r1, [r7, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 ff28 	bl	8005c0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a40      	ldr	r2, [pc, #256]	; (8004ec4 <HAL_TIM_PWM_Stop+0x120>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d018      	beq.n	8004df8 <HAL_TIM_PWM_Stop+0x54>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a3f      	ldr	r2, [pc, #252]	; (8004ec8 <HAL_TIM_PWM_Stop+0x124>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d013      	beq.n	8004df8 <HAL_TIM_PWM_Stop+0x54>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a3d      	ldr	r2, [pc, #244]	; (8004ecc <HAL_TIM_PWM_Stop+0x128>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00e      	beq.n	8004df8 <HAL_TIM_PWM_Stop+0x54>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a3c      	ldr	r2, [pc, #240]	; (8004ed0 <HAL_TIM_PWM_Stop+0x12c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d009      	beq.n	8004df8 <HAL_TIM_PWM_Stop+0x54>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a3a      	ldr	r2, [pc, #232]	; (8004ed4 <HAL_TIM_PWM_Stop+0x130>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d004      	beq.n	8004df8 <HAL_TIM_PWM_Stop+0x54>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a39      	ldr	r2, [pc, #228]	; (8004ed8 <HAL_TIM_PWM_Stop+0x134>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d101      	bne.n	8004dfc <HAL_TIM_PWM_Stop+0x58>
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e000      	b.n	8004dfe <HAL_TIM_PWM_Stop+0x5a>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d017      	beq.n	8004e32 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6a1a      	ldr	r2, [r3, #32]
 8004e08:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10f      	bne.n	8004e32 <HAL_TIM_PWM_Stop+0x8e>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6a1a      	ldr	r2, [r3, #32]
 8004e18:	f244 4344 	movw	r3, #17476	; 0x4444
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d107      	bne.n	8004e32 <HAL_TIM_PWM_Stop+0x8e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6a1a      	ldr	r2, [r3, #32]
 8004e38:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10f      	bne.n	8004e62 <HAL_TIM_PWM_Stop+0xbe>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6a1a      	ldr	r2, [r3, #32]
 8004e48:	f244 4344 	movw	r3, #17476	; 0x4444
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d107      	bne.n	8004e62 <HAL_TIM_PWM_Stop+0xbe>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0201 	bic.w	r2, r2, #1
 8004e60:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d104      	bne.n	8004e72 <HAL_TIM_PWM_Stop+0xce>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e70:	e023      	b.n	8004eba <HAL_TIM_PWM_Stop+0x116>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d104      	bne.n	8004e82 <HAL_TIM_PWM_Stop+0xde>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e80:	e01b      	b.n	8004eba <HAL_TIM_PWM_Stop+0x116>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d104      	bne.n	8004e92 <HAL_TIM_PWM_Stop+0xee>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e90:	e013      	b.n	8004eba <HAL_TIM_PWM_Stop+0x116>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b0c      	cmp	r3, #12
 8004e96:	d104      	bne.n	8004ea2 <HAL_TIM_PWM_Stop+0xfe>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ea0:	e00b      	b.n	8004eba <HAL_TIM_PWM_Stop+0x116>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b10      	cmp	r3, #16
 8004ea6:	d104      	bne.n	8004eb2 <HAL_TIM_PWM_Stop+0x10e>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eb0:	e003      	b.n	8004eba <HAL_TIM_PWM_Stop+0x116>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40012c00 	.word	0x40012c00
 8004ec8:	40013400 	.word	0x40013400
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40014400 	.word	0x40014400
 8004ed4:	40014800 	.word	0x40014800
 8004ed8:	40015000 	.word	0x40015000

08004edc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e0ff      	b.n	80050fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b14      	cmp	r3, #20
 8004f06:	f200 80f0 	bhi.w	80050ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f0a:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f10:	08004f65 	.word	0x08004f65
 8004f14:	080050eb 	.word	0x080050eb
 8004f18:	080050eb 	.word	0x080050eb
 8004f1c:	080050eb 	.word	0x080050eb
 8004f20:	08004fa5 	.word	0x08004fa5
 8004f24:	080050eb 	.word	0x080050eb
 8004f28:	080050eb 	.word	0x080050eb
 8004f2c:	080050eb 	.word	0x080050eb
 8004f30:	08004fe7 	.word	0x08004fe7
 8004f34:	080050eb 	.word	0x080050eb
 8004f38:	080050eb 	.word	0x080050eb
 8004f3c:	080050eb 	.word	0x080050eb
 8004f40:	08005027 	.word	0x08005027
 8004f44:	080050eb 	.word	0x080050eb
 8004f48:	080050eb 	.word	0x080050eb
 8004f4c:	080050eb 	.word	0x080050eb
 8004f50:	08005069 	.word	0x08005069
 8004f54:	080050eb 	.word	0x080050eb
 8004f58:	080050eb 	.word	0x080050eb
 8004f5c:	080050eb 	.word	0x080050eb
 8004f60:	080050a9 	.word	0x080050a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fa88 	bl	8005480 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0208 	orr.w	r2, r2, #8
 8004f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0204 	bic.w	r2, r2, #4
 8004f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6999      	ldr	r1, [r3, #24]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	619a      	str	r2, [r3, #24]
      break;
 8004fa2:	e0a5      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fb02 	bl	80055b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6999      	ldr	r1, [r3, #24]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	021a      	lsls	r2, r3, #8
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	619a      	str	r2, [r3, #24]
      break;
 8004fe4:	e084      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68b9      	ldr	r1, [r7, #8]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fb75 	bl	80056dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0208 	orr.w	r2, r2, #8
 8005000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0204 	bic.w	r2, r2, #4
 8005010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69d9      	ldr	r1, [r3, #28]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	61da      	str	r2, [r3, #28]
      break;
 8005024:	e064      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	4618      	mov	r0, r3
 800502e:	f000 fbe7 	bl	8005800 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69da      	ldr	r2, [r3, #28]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69d9      	ldr	r1, [r3, #28]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	021a      	lsls	r2, r3, #8
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	61da      	str	r2, [r3, #28]
      break;
 8005066:	e043      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68b9      	ldr	r1, [r7, #8]
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fc5a 	bl	8005928 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0208 	orr.w	r2, r2, #8
 8005082:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0204 	bic.w	r2, r2, #4
 8005092:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	691a      	ldr	r2, [r3, #16]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80050a6:	e023      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68b9      	ldr	r1, [r7, #8]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fca4 	bl	80059fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	021a      	lsls	r2, r3, #8
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80050e8:	e002      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	75fb      	strb	r3, [r7, #23]
      break;
 80050ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop

08005104 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_TIM_ConfigClockSource+0x1c>
 800511c:	2302      	movs	r3, #2
 800511e:	e0f6      	b.n	800530e <HAL_TIM_ConfigClockSource+0x20a>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800513e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800514a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a6f      	ldr	r2, [pc, #444]	; (8005318 <HAL_TIM_ConfigClockSource+0x214>)
 800515a:	4293      	cmp	r3, r2
 800515c:	f000 80c1 	beq.w	80052e2 <HAL_TIM_ConfigClockSource+0x1de>
 8005160:	4a6d      	ldr	r2, [pc, #436]	; (8005318 <HAL_TIM_ConfigClockSource+0x214>)
 8005162:	4293      	cmp	r3, r2
 8005164:	f200 80c6 	bhi.w	80052f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005168:	4a6c      	ldr	r2, [pc, #432]	; (800531c <HAL_TIM_ConfigClockSource+0x218>)
 800516a:	4293      	cmp	r3, r2
 800516c:	f000 80b9 	beq.w	80052e2 <HAL_TIM_ConfigClockSource+0x1de>
 8005170:	4a6a      	ldr	r2, [pc, #424]	; (800531c <HAL_TIM_ConfigClockSource+0x218>)
 8005172:	4293      	cmp	r3, r2
 8005174:	f200 80be 	bhi.w	80052f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005178:	4a69      	ldr	r2, [pc, #420]	; (8005320 <HAL_TIM_ConfigClockSource+0x21c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	f000 80b1 	beq.w	80052e2 <HAL_TIM_ConfigClockSource+0x1de>
 8005180:	4a67      	ldr	r2, [pc, #412]	; (8005320 <HAL_TIM_ConfigClockSource+0x21c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	f200 80b6 	bhi.w	80052f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005188:	4a66      	ldr	r2, [pc, #408]	; (8005324 <HAL_TIM_ConfigClockSource+0x220>)
 800518a:	4293      	cmp	r3, r2
 800518c:	f000 80a9 	beq.w	80052e2 <HAL_TIM_ConfigClockSource+0x1de>
 8005190:	4a64      	ldr	r2, [pc, #400]	; (8005324 <HAL_TIM_ConfigClockSource+0x220>)
 8005192:	4293      	cmp	r3, r2
 8005194:	f200 80ae 	bhi.w	80052f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005198:	4a63      	ldr	r2, [pc, #396]	; (8005328 <HAL_TIM_ConfigClockSource+0x224>)
 800519a:	4293      	cmp	r3, r2
 800519c:	f000 80a1 	beq.w	80052e2 <HAL_TIM_ConfigClockSource+0x1de>
 80051a0:	4a61      	ldr	r2, [pc, #388]	; (8005328 <HAL_TIM_ConfigClockSource+0x224>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	f200 80a6 	bhi.w	80052f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80051a8:	4a60      	ldr	r2, [pc, #384]	; (800532c <HAL_TIM_ConfigClockSource+0x228>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	f000 8099 	beq.w	80052e2 <HAL_TIM_ConfigClockSource+0x1de>
 80051b0:	4a5e      	ldr	r2, [pc, #376]	; (800532c <HAL_TIM_ConfigClockSource+0x228>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	f200 809e 	bhi.w	80052f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80051b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80051bc:	f000 8091 	beq.w	80052e2 <HAL_TIM_ConfigClockSource+0x1de>
 80051c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80051c4:	f200 8096 	bhi.w	80052f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80051c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051cc:	f000 8089 	beq.w	80052e2 <HAL_TIM_ConfigClockSource+0x1de>
 80051d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051d4:	f200 808e 	bhi.w	80052f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80051d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051dc:	d03e      	beq.n	800525c <HAL_TIM_ConfigClockSource+0x158>
 80051de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051e2:	f200 8087 	bhi.w	80052f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80051e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ea:	f000 8086 	beq.w	80052fa <HAL_TIM_ConfigClockSource+0x1f6>
 80051ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f2:	d87f      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80051f4:	2b70      	cmp	r3, #112	; 0x70
 80051f6:	d01a      	beq.n	800522e <HAL_TIM_ConfigClockSource+0x12a>
 80051f8:	2b70      	cmp	r3, #112	; 0x70
 80051fa:	d87b      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80051fc:	2b60      	cmp	r3, #96	; 0x60
 80051fe:	d050      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0x19e>
 8005200:	2b60      	cmp	r3, #96	; 0x60
 8005202:	d877      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005204:	2b50      	cmp	r3, #80	; 0x50
 8005206:	d03c      	beq.n	8005282 <HAL_TIM_ConfigClockSource+0x17e>
 8005208:	2b50      	cmp	r3, #80	; 0x50
 800520a:	d873      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x1f0>
 800520c:	2b40      	cmp	r3, #64	; 0x40
 800520e:	d058      	beq.n	80052c2 <HAL_TIM_ConfigClockSource+0x1be>
 8005210:	2b40      	cmp	r3, #64	; 0x40
 8005212:	d86f      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005214:	2b30      	cmp	r3, #48	; 0x30
 8005216:	d064      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x1de>
 8005218:	2b30      	cmp	r3, #48	; 0x30
 800521a:	d86b      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x1f0>
 800521c:	2b20      	cmp	r3, #32
 800521e:	d060      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x1de>
 8005220:	2b20      	cmp	r3, #32
 8005222:	d867      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d05c      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x1de>
 8005228:	2b10      	cmp	r3, #16
 800522a:	d05a      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x1de>
 800522c:	e062      	b.n	80052f4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6899      	ldr	r1, [r3, #8]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f000 fcc5 	bl	8005bcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	609a      	str	r2, [r3, #8]
      break;
 800525a:	e04f      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6818      	ldr	r0, [r3, #0]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	6899      	ldr	r1, [r3, #8]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f000 fcae 	bl	8005bcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800527e:	609a      	str	r2, [r3, #8]
      break;
 8005280:	e03c      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6859      	ldr	r1, [r3, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	461a      	mov	r2, r3
 8005290:	f000 fc20 	bl	8005ad4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2150      	movs	r1, #80	; 0x50
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fc79 	bl	8005b92 <TIM_ITRx_SetConfig>
      break;
 80052a0:	e02c      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6859      	ldr	r1, [r3, #4]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	461a      	mov	r2, r3
 80052b0:	f000 fc3f 	bl	8005b32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2160      	movs	r1, #96	; 0x60
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fc69 	bl	8005b92 <TIM_ITRx_SetConfig>
      break;
 80052c0:	e01c      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6859      	ldr	r1, [r3, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	461a      	mov	r2, r3
 80052d0:	f000 fc00 	bl	8005ad4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2140      	movs	r1, #64	; 0x40
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fc59 	bl	8005b92 <TIM_ITRx_SetConfig>
      break;
 80052e0:	e00c      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4619      	mov	r1, r3
 80052ec:	4610      	mov	r0, r2
 80052ee:	f000 fc50 	bl	8005b92 <TIM_ITRx_SetConfig>
      break;
 80052f2:	e003      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
      break;
 80052f8:	e000      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80052fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	00100070 	.word	0x00100070
 800531c:	00100060 	.word	0x00100060
 8005320:	00100050 	.word	0x00100050
 8005324:	00100040 	.word	0x00100040
 8005328:	00100030 	.word	0x00100030
 800532c:	00100020 	.word	0x00100020

08005330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a46      	ldr	r2, [pc, #280]	; (800545c <TIM_Base_SetConfig+0x12c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d017      	beq.n	8005378 <TIM_Base_SetConfig+0x48>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534e:	d013      	beq.n	8005378 <TIM_Base_SetConfig+0x48>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a43      	ldr	r2, [pc, #268]	; (8005460 <TIM_Base_SetConfig+0x130>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00f      	beq.n	8005378 <TIM_Base_SetConfig+0x48>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a42      	ldr	r2, [pc, #264]	; (8005464 <TIM_Base_SetConfig+0x134>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00b      	beq.n	8005378 <TIM_Base_SetConfig+0x48>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a41      	ldr	r2, [pc, #260]	; (8005468 <TIM_Base_SetConfig+0x138>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d007      	beq.n	8005378 <TIM_Base_SetConfig+0x48>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a40      	ldr	r2, [pc, #256]	; (800546c <TIM_Base_SetConfig+0x13c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_Base_SetConfig+0x48>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a3f      	ldr	r2, [pc, #252]	; (8005470 <TIM_Base_SetConfig+0x140>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d108      	bne.n	800538a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a33      	ldr	r2, [pc, #204]	; (800545c <TIM_Base_SetConfig+0x12c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d023      	beq.n	80053da <TIM_Base_SetConfig+0xaa>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005398:	d01f      	beq.n	80053da <TIM_Base_SetConfig+0xaa>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a30      	ldr	r2, [pc, #192]	; (8005460 <TIM_Base_SetConfig+0x130>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d01b      	beq.n	80053da <TIM_Base_SetConfig+0xaa>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2f      	ldr	r2, [pc, #188]	; (8005464 <TIM_Base_SetConfig+0x134>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d017      	beq.n	80053da <TIM_Base_SetConfig+0xaa>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2e      	ldr	r2, [pc, #184]	; (8005468 <TIM_Base_SetConfig+0x138>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d013      	beq.n	80053da <TIM_Base_SetConfig+0xaa>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2d      	ldr	r2, [pc, #180]	; (800546c <TIM_Base_SetConfig+0x13c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00f      	beq.n	80053da <TIM_Base_SetConfig+0xaa>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a2d      	ldr	r2, [pc, #180]	; (8005474 <TIM_Base_SetConfig+0x144>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00b      	beq.n	80053da <TIM_Base_SetConfig+0xaa>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a2c      	ldr	r2, [pc, #176]	; (8005478 <TIM_Base_SetConfig+0x148>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d007      	beq.n	80053da <TIM_Base_SetConfig+0xaa>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a2b      	ldr	r2, [pc, #172]	; (800547c <TIM_Base_SetConfig+0x14c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d003      	beq.n	80053da <TIM_Base_SetConfig+0xaa>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a26      	ldr	r2, [pc, #152]	; (8005470 <TIM_Base_SetConfig+0x140>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d108      	bne.n	80053ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a12      	ldr	r2, [pc, #72]	; (800545c <TIM_Base_SetConfig+0x12c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d013      	beq.n	8005440 <TIM_Base_SetConfig+0x110>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a14      	ldr	r2, [pc, #80]	; (800546c <TIM_Base_SetConfig+0x13c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00f      	beq.n	8005440 <TIM_Base_SetConfig+0x110>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a14      	ldr	r2, [pc, #80]	; (8005474 <TIM_Base_SetConfig+0x144>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00b      	beq.n	8005440 <TIM_Base_SetConfig+0x110>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a13      	ldr	r2, [pc, #76]	; (8005478 <TIM_Base_SetConfig+0x148>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d007      	beq.n	8005440 <TIM_Base_SetConfig+0x110>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a12      	ldr	r2, [pc, #72]	; (800547c <TIM_Base_SetConfig+0x14c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d003      	beq.n	8005440 <TIM_Base_SetConfig+0x110>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a0d      	ldr	r2, [pc, #52]	; (8005470 <TIM_Base_SetConfig+0x140>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d103      	bne.n	8005448 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	615a      	str	r2, [r3, #20]
}
 800544e:	bf00      	nop
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40012c00 	.word	0x40012c00
 8005460:	40000400 	.word	0x40000400
 8005464:	40000800 	.word	0x40000800
 8005468:	40000c00 	.word	0x40000c00
 800546c:	40013400 	.word	0x40013400
 8005470:	40015000 	.word	0x40015000
 8005474:	40014000 	.word	0x40014000
 8005478:	40014400 	.word	0x40014400
 800547c:	40014800 	.word	0x40014800

08005480 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	f023 0201 	bic.w	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0303 	bic.w	r3, r3, #3
 80054ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f023 0302 	bic.w	r3, r3, #2
 80054cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a30      	ldr	r2, [pc, #192]	; (800559c <TIM_OC1_SetConfig+0x11c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d013      	beq.n	8005508 <TIM_OC1_SetConfig+0x88>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a2f      	ldr	r2, [pc, #188]	; (80055a0 <TIM_OC1_SetConfig+0x120>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00f      	beq.n	8005508 <TIM_OC1_SetConfig+0x88>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a2e      	ldr	r2, [pc, #184]	; (80055a4 <TIM_OC1_SetConfig+0x124>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00b      	beq.n	8005508 <TIM_OC1_SetConfig+0x88>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a2d      	ldr	r2, [pc, #180]	; (80055a8 <TIM_OC1_SetConfig+0x128>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d007      	beq.n	8005508 <TIM_OC1_SetConfig+0x88>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a2c      	ldr	r2, [pc, #176]	; (80055ac <TIM_OC1_SetConfig+0x12c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_OC1_SetConfig+0x88>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a2b      	ldr	r2, [pc, #172]	; (80055b0 <TIM_OC1_SetConfig+0x130>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d10c      	bne.n	8005522 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f023 0308 	bic.w	r3, r3, #8
 800550e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f023 0304 	bic.w	r3, r3, #4
 8005520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a1d      	ldr	r2, [pc, #116]	; (800559c <TIM_OC1_SetConfig+0x11c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d013      	beq.n	8005552 <TIM_OC1_SetConfig+0xd2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a1c      	ldr	r2, [pc, #112]	; (80055a0 <TIM_OC1_SetConfig+0x120>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00f      	beq.n	8005552 <TIM_OC1_SetConfig+0xd2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a1b      	ldr	r2, [pc, #108]	; (80055a4 <TIM_OC1_SetConfig+0x124>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d00b      	beq.n	8005552 <TIM_OC1_SetConfig+0xd2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a1a      	ldr	r2, [pc, #104]	; (80055a8 <TIM_OC1_SetConfig+0x128>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d007      	beq.n	8005552 <TIM_OC1_SetConfig+0xd2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a19      	ldr	r2, [pc, #100]	; (80055ac <TIM_OC1_SetConfig+0x12c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d003      	beq.n	8005552 <TIM_OC1_SetConfig+0xd2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a18      	ldr	r2, [pc, #96]	; (80055b0 <TIM_OC1_SetConfig+0x130>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d111      	bne.n	8005576 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	621a      	str	r2, [r3, #32]
}
 8005590:	bf00      	nop
 8005592:	371c      	adds	r7, #28
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	40012c00 	.word	0x40012c00
 80055a0:	40013400 	.word	0x40013400
 80055a4:	40014000 	.word	0x40014000
 80055a8:	40014400 	.word	0x40014400
 80055ac:	40014800 	.word	0x40014800
 80055b0:	40015000 	.word	0x40015000

080055b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	f023 0210 	bic.w	r2, r3, #16
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	021b      	lsls	r3, r3, #8
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f023 0320 	bic.w	r3, r3, #32
 8005602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	4313      	orrs	r3, r2
 800560e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a2c      	ldr	r2, [pc, #176]	; (80056c4 <TIM_OC2_SetConfig+0x110>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d007      	beq.n	8005628 <TIM_OC2_SetConfig+0x74>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a2b      	ldr	r2, [pc, #172]	; (80056c8 <TIM_OC2_SetConfig+0x114>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d003      	beq.n	8005628 <TIM_OC2_SetConfig+0x74>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a2a      	ldr	r2, [pc, #168]	; (80056cc <TIM_OC2_SetConfig+0x118>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d10d      	bne.n	8005644 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800562e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005642:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a1f      	ldr	r2, [pc, #124]	; (80056c4 <TIM_OC2_SetConfig+0x110>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d013      	beq.n	8005674 <TIM_OC2_SetConfig+0xc0>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a1e      	ldr	r2, [pc, #120]	; (80056c8 <TIM_OC2_SetConfig+0x114>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00f      	beq.n	8005674 <TIM_OC2_SetConfig+0xc0>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a1e      	ldr	r2, [pc, #120]	; (80056d0 <TIM_OC2_SetConfig+0x11c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00b      	beq.n	8005674 <TIM_OC2_SetConfig+0xc0>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a1d      	ldr	r2, [pc, #116]	; (80056d4 <TIM_OC2_SetConfig+0x120>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d007      	beq.n	8005674 <TIM_OC2_SetConfig+0xc0>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a1c      	ldr	r2, [pc, #112]	; (80056d8 <TIM_OC2_SetConfig+0x124>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_OC2_SetConfig+0xc0>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a17      	ldr	r2, [pc, #92]	; (80056cc <TIM_OC2_SetConfig+0x118>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d113      	bne.n	800569c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800567a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005682:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40012c00 	.word	0x40012c00
 80056c8:	40013400 	.word	0x40013400
 80056cc:	40015000 	.word	0x40015000
 80056d0:	40014000 	.word	0x40014000
 80056d4:	40014400 	.word	0x40014400
 80056d8:	40014800 	.word	0x40014800

080056dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800570a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0303 	bic.w	r3, r3, #3
 8005716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	021b      	lsls	r3, r3, #8
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2b      	ldr	r2, [pc, #172]	; (80057e8 <TIM_OC3_SetConfig+0x10c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d007      	beq.n	800574e <TIM_OC3_SetConfig+0x72>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a2a      	ldr	r2, [pc, #168]	; (80057ec <TIM_OC3_SetConfig+0x110>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d003      	beq.n	800574e <TIM_OC3_SetConfig+0x72>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a29      	ldr	r2, [pc, #164]	; (80057f0 <TIM_OC3_SetConfig+0x114>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d10d      	bne.n	800576a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	021b      	lsls	r3, r3, #8
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a1e      	ldr	r2, [pc, #120]	; (80057e8 <TIM_OC3_SetConfig+0x10c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d013      	beq.n	800579a <TIM_OC3_SetConfig+0xbe>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a1d      	ldr	r2, [pc, #116]	; (80057ec <TIM_OC3_SetConfig+0x110>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00f      	beq.n	800579a <TIM_OC3_SetConfig+0xbe>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a1d      	ldr	r2, [pc, #116]	; (80057f4 <TIM_OC3_SetConfig+0x118>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00b      	beq.n	800579a <TIM_OC3_SetConfig+0xbe>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a1c      	ldr	r2, [pc, #112]	; (80057f8 <TIM_OC3_SetConfig+0x11c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d007      	beq.n	800579a <TIM_OC3_SetConfig+0xbe>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a1b      	ldr	r2, [pc, #108]	; (80057fc <TIM_OC3_SetConfig+0x120>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d003      	beq.n	800579a <TIM_OC3_SetConfig+0xbe>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a16      	ldr	r2, [pc, #88]	; (80057f0 <TIM_OC3_SetConfig+0x114>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d113      	bne.n	80057c2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	621a      	str	r2, [r3, #32]
}
 80057dc:	bf00      	nop
 80057de:	371c      	adds	r7, #28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	40012c00 	.word	0x40012c00
 80057ec:	40013400 	.word	0x40013400
 80057f0:	40015000 	.word	0x40015000
 80057f4:	40014000 	.word	0x40014000
 80057f8:	40014400 	.word	0x40014400
 80057fc:	40014800 	.word	0x40014800

08005800 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800582e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800583a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	021b      	lsls	r3, r3, #8
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800584e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	031b      	lsls	r3, r3, #12
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4313      	orrs	r3, r2
 800585a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a2c      	ldr	r2, [pc, #176]	; (8005910 <TIM_OC4_SetConfig+0x110>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d007      	beq.n	8005874 <TIM_OC4_SetConfig+0x74>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a2b      	ldr	r2, [pc, #172]	; (8005914 <TIM_OC4_SetConfig+0x114>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d003      	beq.n	8005874 <TIM_OC4_SetConfig+0x74>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a2a      	ldr	r2, [pc, #168]	; (8005918 <TIM_OC4_SetConfig+0x118>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d10d      	bne.n	8005890 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800587a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	031b      	lsls	r3, r3, #12
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800588e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a1f      	ldr	r2, [pc, #124]	; (8005910 <TIM_OC4_SetConfig+0x110>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d013      	beq.n	80058c0 <TIM_OC4_SetConfig+0xc0>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a1e      	ldr	r2, [pc, #120]	; (8005914 <TIM_OC4_SetConfig+0x114>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00f      	beq.n	80058c0 <TIM_OC4_SetConfig+0xc0>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a1e      	ldr	r2, [pc, #120]	; (800591c <TIM_OC4_SetConfig+0x11c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d00b      	beq.n	80058c0 <TIM_OC4_SetConfig+0xc0>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a1d      	ldr	r2, [pc, #116]	; (8005920 <TIM_OC4_SetConfig+0x120>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d007      	beq.n	80058c0 <TIM_OC4_SetConfig+0xc0>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a1c      	ldr	r2, [pc, #112]	; (8005924 <TIM_OC4_SetConfig+0x124>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d003      	beq.n	80058c0 <TIM_OC4_SetConfig+0xc0>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a17      	ldr	r2, [pc, #92]	; (8005918 <TIM_OC4_SetConfig+0x118>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d113      	bne.n	80058e8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058c6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058ce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	019b      	lsls	r3, r3, #6
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	019b      	lsls	r3, r3, #6
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	621a      	str	r2, [r3, #32]
}
 8005902:	bf00      	nop
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40012c00 	.word	0x40012c00
 8005914:	40013400 	.word	0x40013400
 8005918:	40015000 	.word	0x40015000
 800591c:	40014000 	.word	0x40014000
 8005920:	40014400 	.word	0x40014400
 8005924:	40014800 	.word	0x40014800

08005928 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800596c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	041b      	lsls	r3, r3, #16
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	4313      	orrs	r3, r2
 8005978:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a19      	ldr	r2, [pc, #100]	; (80059e4 <TIM_OC5_SetConfig+0xbc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d013      	beq.n	80059aa <TIM_OC5_SetConfig+0x82>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a18      	ldr	r2, [pc, #96]	; (80059e8 <TIM_OC5_SetConfig+0xc0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00f      	beq.n	80059aa <TIM_OC5_SetConfig+0x82>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a17      	ldr	r2, [pc, #92]	; (80059ec <TIM_OC5_SetConfig+0xc4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00b      	beq.n	80059aa <TIM_OC5_SetConfig+0x82>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a16      	ldr	r2, [pc, #88]	; (80059f0 <TIM_OC5_SetConfig+0xc8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d007      	beq.n	80059aa <TIM_OC5_SetConfig+0x82>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a15      	ldr	r2, [pc, #84]	; (80059f4 <TIM_OC5_SetConfig+0xcc>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d003      	beq.n	80059aa <TIM_OC5_SetConfig+0x82>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a14      	ldr	r2, [pc, #80]	; (80059f8 <TIM_OC5_SetConfig+0xd0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d109      	bne.n	80059be <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	621a      	str	r2, [r3, #32]
}
 80059d8:	bf00      	nop
 80059da:	371c      	adds	r7, #28
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	40012c00 	.word	0x40012c00
 80059e8:	40013400 	.word	0x40013400
 80059ec:	40014000 	.word	0x40014000
 80059f0:	40014400 	.word	0x40014400
 80059f4:	40014800 	.word	0x40014800
 80059f8:	40015000 	.word	0x40015000

080059fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	021b      	lsls	r3, r3, #8
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	051b      	lsls	r3, r3, #20
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a1a      	ldr	r2, [pc, #104]	; (8005abc <TIM_OC6_SetConfig+0xc0>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d013      	beq.n	8005a80 <TIM_OC6_SetConfig+0x84>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a19      	ldr	r2, [pc, #100]	; (8005ac0 <TIM_OC6_SetConfig+0xc4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00f      	beq.n	8005a80 <TIM_OC6_SetConfig+0x84>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a18      	ldr	r2, [pc, #96]	; (8005ac4 <TIM_OC6_SetConfig+0xc8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00b      	beq.n	8005a80 <TIM_OC6_SetConfig+0x84>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a17      	ldr	r2, [pc, #92]	; (8005ac8 <TIM_OC6_SetConfig+0xcc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d007      	beq.n	8005a80 <TIM_OC6_SetConfig+0x84>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a16      	ldr	r2, [pc, #88]	; (8005acc <TIM_OC6_SetConfig+0xd0>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d003      	beq.n	8005a80 <TIM_OC6_SetConfig+0x84>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a15      	ldr	r2, [pc, #84]	; (8005ad0 <TIM_OC6_SetConfig+0xd4>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d109      	bne.n	8005a94 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	029b      	lsls	r3, r3, #10
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	621a      	str	r2, [r3, #32]
}
 8005aae:	bf00      	nop
 8005ab0:	371c      	adds	r7, #28
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	40012c00 	.word	0x40012c00
 8005ac0:	40013400 	.word	0x40013400
 8005ac4:	40014000 	.word	0x40014000
 8005ac8:	40014400 	.word	0x40014400
 8005acc:	40014800 	.word	0x40014800
 8005ad0:	40015000 	.word	0x40015000

08005ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	f023 0201 	bic.w	r2, r3, #1
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f023 030a 	bic.w	r3, r3, #10
 8005b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	621a      	str	r2, [r3, #32]
}
 8005b26:	bf00      	nop
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b087      	sub	sp, #28
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	f023 0210 	bic.w	r2, r3, #16
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	031b      	lsls	r3, r3, #12
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	011b      	lsls	r3, r3, #4
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	621a      	str	r2, [r3, #32]
}
 8005b86:	bf00      	nop
 8005b88:	371c      	adds	r7, #28
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	f043 0307 	orr.w	r3, r3, #7
 8005bb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	609a      	str	r2, [r3, #8]
}
 8005bc0:	bf00      	nop
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
 8005bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005be6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	021a      	lsls	r2, r3, #8
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	609a      	str	r2, [r3, #8]
}
 8005c00:	bf00      	nop
 8005c02:	371c      	adds	r7, #28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f003 031f 	and.w	r3, r3, #31
 8005c1e:	2201      	movs	r2, #1
 8005c20:	fa02 f303 	lsl.w	r3, r2, r3
 8005c24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a1a      	ldr	r2, [r3, #32]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	43db      	mvns	r3, r3
 8005c2e:	401a      	ands	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6a1a      	ldr	r2, [r3, #32]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f003 031f 	and.w	r3, r3, #31
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	fa01 f303 	lsl.w	r3, r1, r3
 8005c44:	431a      	orrs	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	621a      	str	r2, [r3, #32]
}
 8005c4a:	bf00      	nop
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
	...

08005c58 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d109      	bne.n	8005c7c <HAL_TIMEx_PWMN_Start+0x24>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	bf14      	ite	ne
 8005c74:	2301      	movne	r3, #1
 8005c76:	2300      	moveq	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	e022      	b.n	8005cc2 <HAL_TIMEx_PWMN_Start+0x6a>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d109      	bne.n	8005c96 <HAL_TIMEx_PWMN_Start+0x3e>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	bf14      	ite	ne
 8005c8e:	2301      	movne	r3, #1
 8005c90:	2300      	moveq	r3, #0
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	e015      	b.n	8005cc2 <HAL_TIMEx_PWMN_Start+0x6a>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d109      	bne.n	8005cb0 <HAL_TIMEx_PWMN_Start+0x58>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	bf14      	ite	ne
 8005ca8:	2301      	movne	r3, #1
 8005caa:	2300      	moveq	r3, #0
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	e008      	b.n	8005cc2 <HAL_TIMEx_PWMN_Start+0x6a>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	bf14      	ite	ne
 8005cbc:	2301      	movne	r3, #1
 8005cbe:	2300      	moveq	r3, #0
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e073      	b.n	8005db2 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d104      	bne.n	8005cda <HAL_TIMEx_PWMN_Start+0x82>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cd8:	e013      	b.n	8005d02 <HAL_TIMEx_PWMN_Start+0xaa>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d104      	bne.n	8005cea <HAL_TIMEx_PWMN_Start+0x92>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ce8:	e00b      	b.n	8005d02 <HAL_TIMEx_PWMN_Start+0xaa>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d104      	bne.n	8005cfa <HAL_TIMEx_PWMN_Start+0xa2>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cf8:	e003      	b.n	8005d02 <HAL_TIMEx_PWMN_Start+0xaa>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2204      	movs	r2, #4
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fa0c 	bl	8006128 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a25      	ldr	r2, [pc, #148]	; (8005dbc <HAL_TIMEx_PWMN_Start+0x164>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d022      	beq.n	8005d70 <HAL_TIMEx_PWMN_Start+0x118>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d32:	d01d      	beq.n	8005d70 <HAL_TIMEx_PWMN_Start+0x118>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a21      	ldr	r2, [pc, #132]	; (8005dc0 <HAL_TIMEx_PWMN_Start+0x168>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d018      	beq.n	8005d70 <HAL_TIMEx_PWMN_Start+0x118>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a20      	ldr	r2, [pc, #128]	; (8005dc4 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d013      	beq.n	8005d70 <HAL_TIMEx_PWMN_Start+0x118>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a1e      	ldr	r2, [pc, #120]	; (8005dc8 <HAL_TIMEx_PWMN_Start+0x170>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00e      	beq.n	8005d70 <HAL_TIMEx_PWMN_Start+0x118>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a1d      	ldr	r2, [pc, #116]	; (8005dcc <HAL_TIMEx_PWMN_Start+0x174>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d009      	beq.n	8005d70 <HAL_TIMEx_PWMN_Start+0x118>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a1b      	ldr	r2, [pc, #108]	; (8005dd0 <HAL_TIMEx_PWMN_Start+0x178>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d004      	beq.n	8005d70 <HAL_TIMEx_PWMN_Start+0x118>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a1a      	ldr	r2, [pc, #104]	; (8005dd4 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d115      	bne.n	8005d9c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	4b18      	ldr	r3, [pc, #96]	; (8005dd8 <HAL_TIMEx_PWMN_Start+0x180>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b06      	cmp	r3, #6
 8005d80:	d015      	beq.n	8005dae <HAL_TIMEx_PWMN_Start+0x156>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d88:	d011      	beq.n	8005dae <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 0201 	orr.w	r2, r2, #1
 8005d98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9a:	e008      	b.n	8005dae <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0201 	orr.w	r2, r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	e000      	b.n	8005db0 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	40012c00 	.word	0x40012c00
 8005dc0:	40000400 	.word	0x40000400
 8005dc4:	40000800 	.word	0x40000800
 8005dc8:	40000c00 	.word	0x40000c00
 8005dcc:	40013400 	.word	0x40013400
 8005dd0:	40014000 	.word	0x40014000
 8005dd4:	40015000 	.word	0x40015000
 8005dd8:	00010007 	.word	0x00010007

08005ddc <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2200      	movs	r2, #0
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 f99a 	bl	8006128 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6a1a      	ldr	r2, [r3, #32]
 8005dfa:	f241 1311 	movw	r3, #4369	; 0x1111
 8005dfe:	4013      	ands	r3, r2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10f      	bne.n	8005e24 <HAL_TIMEx_PWMN_Stop+0x48>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6a1a      	ldr	r2, [r3, #32]
 8005e0a:	f244 4344 	movw	r3, #17476	; 0x4444
 8005e0e:	4013      	ands	r3, r2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d107      	bne.n	8005e24 <HAL_TIMEx_PWMN_Stop+0x48>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6a1a      	ldr	r2, [r3, #32]
 8005e2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e2e:	4013      	ands	r3, r2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10f      	bne.n	8005e54 <HAL_TIMEx_PWMN_Stop+0x78>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6a1a      	ldr	r2, [r3, #32]
 8005e3a:	f244 4344 	movw	r3, #17476	; 0x4444
 8005e3e:	4013      	ands	r3, r2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d107      	bne.n	8005e54 <HAL_TIMEx_PWMN_Stop+0x78>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 0201 	bic.w	r2, r2, #1
 8005e52:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d104      	bne.n	8005e64 <HAL_TIMEx_PWMN_Stop+0x88>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e62:	e013      	b.n	8005e8c <HAL_TIMEx_PWMN_Stop+0xb0>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d104      	bne.n	8005e74 <HAL_TIMEx_PWMN_Stop+0x98>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e72:	e00b      	b.n	8005e8c <HAL_TIMEx_PWMN_Stop+0xb0>
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2b08      	cmp	r3, #8
 8005e78:	d104      	bne.n	8005e84 <HAL_TIMEx_PWMN_Stop+0xa8>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e82:	e003      	b.n	8005e8c <HAL_TIMEx_PWMN_Stop+0xb0>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d101      	bne.n	8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005eac:	2302      	movs	r3, #2
 8005eae:	e074      	b.n	8005f9a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a34      	ldr	r2, [pc, #208]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d009      	beq.n	8005eee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a33      	ldr	r2, [pc, #204]	; (8005fac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d004      	beq.n	8005eee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a31      	ldr	r2, [pc, #196]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d108      	bne.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ef4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a21      	ldr	r2, [pc, #132]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d022      	beq.n	8005f6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f30:	d01d      	beq.n	8005f6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a1f      	ldr	r2, [pc, #124]	; (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d018      	beq.n	8005f6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a1d      	ldr	r2, [pc, #116]	; (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d013      	beq.n	8005f6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a1c      	ldr	r2, [pc, #112]	; (8005fbc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d00e      	beq.n	8005f6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a15      	ldr	r2, [pc, #84]	; (8005fac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d009      	beq.n	8005f6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a18      	ldr	r2, [pc, #96]	; (8005fc0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d004      	beq.n	8005f6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a11      	ldr	r2, [pc, #68]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d10c      	bne.n	8005f88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	40012c00 	.word	0x40012c00
 8005fac:	40013400 	.word	0x40013400
 8005fb0:	40015000 	.word	0x40015000
 8005fb4:	40000400 	.word	0x40000400
 8005fb8:	40000800 	.word	0x40000800
 8005fbc:	40000c00 	.word	0x40000c00
 8005fc0:	40014000 	.word	0x40014000

08005fc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d101      	bne.n	8005fe0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	e096      	b.n	800610e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	4313      	orrs	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4313      	orrs	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	4313      	orrs	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	041b      	lsls	r3, r3, #16
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a2f      	ldr	r2, [pc, #188]	; (800611c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d009      	beq.n	8006078 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a2d      	ldr	r2, [pc, #180]	; (8006120 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d004      	beq.n	8006078 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a2c      	ldr	r2, [pc, #176]	; (8006124 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d106      	bne.n	8006086 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a24      	ldr	r2, [pc, #144]	; (800611c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d009      	beq.n	80060a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a22      	ldr	r2, [pc, #136]	; (8006120 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d004      	beq.n	80060a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a21      	ldr	r2, [pc, #132]	; (8006124 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d12b      	bne.n	80060fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ae:	051b      	lsls	r3, r3, #20
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a11      	ldr	r2, [pc, #68]	; (800611c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d009      	beq.n	80060ee <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a10      	ldr	r2, [pc, #64]	; (8006120 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d004      	beq.n	80060ee <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a0e      	ldr	r2, [pc, #56]	; (8006124 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d106      	bne.n	80060fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	4313      	orrs	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	40012c00 	.word	0x40012c00
 8006120:	40013400 	.word	0x40013400
 8006124:	40015000 	.word	0x40015000

08006128 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f003 031f 	and.w	r3, r3, #31
 800613a:	2204      	movs	r2, #4
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a1a      	ldr	r2, [r3, #32]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	43db      	mvns	r3, r3
 800614a:	401a      	ands	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a1a      	ldr	r2, [r3, #32]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f003 031f 	and.w	r3, r3, #31
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	fa01 f303 	lsl.w	r3, r1, r3
 8006160:	431a      	orrs	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	621a      	str	r2, [r3, #32]
}
 8006166:	bf00      	nop
 8006168:	371c      	adds	r7, #28
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b082      	sub	sp, #8
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e042      	b.n	800620a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800618a:	2b00      	cmp	r3, #0
 800618c:	d106      	bne.n	800619c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7fb f9ae 	bl	80014f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2224      	movs	r2, #36	; 0x24
 80061a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0201 	bic.w	r2, r2, #1
 80061b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fd23 	bl	8006c00 <UART_SetConfig>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d101      	bne.n	80061c4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e022      	b.n	800620a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f001 f813 	bl	80071f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f042 0201 	orr.w	r2, r2, #1
 8006200:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f001 f89a 	bl	800733c <UART_CheckIdleState>
 8006208:	4603      	mov	r3, r0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b08a      	sub	sp, #40	; 0x28
 8006216:	af02      	add	r7, sp, #8
 8006218:	60f8      	str	r0, [r7, #12]
 800621a:	60b9      	str	r1, [r7, #8]
 800621c:	603b      	str	r3, [r7, #0]
 800621e:	4613      	mov	r3, r2
 8006220:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006228:	2b20      	cmp	r3, #32
 800622a:	f040 8083 	bne.w	8006334 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <HAL_UART_Transmit+0x28>
 8006234:	88fb      	ldrh	r3, [r7, #6]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e07b      	b.n	8006336 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006244:	2b01      	cmp	r3, #1
 8006246:	d101      	bne.n	800624c <HAL_UART_Transmit+0x3a>
 8006248:	2302      	movs	r3, #2
 800624a:	e074      	b.n	8006336 <HAL_UART_Transmit+0x124>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2221      	movs	r2, #33	; 0x21
 8006260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006264:	f7fb fa36 	bl	80016d4 <HAL_GetTick>
 8006268:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	88fa      	ldrh	r2, [r7, #6]
 800626e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	88fa      	ldrh	r2, [r7, #6]
 8006276:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006282:	d108      	bne.n	8006296 <HAL_UART_Transmit+0x84>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d104      	bne.n	8006296 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800628c:	2300      	movs	r3, #0
 800628e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	61bb      	str	r3, [r7, #24]
 8006294:	e003      	b.n	800629e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800629a:	2300      	movs	r3, #0
 800629c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80062a6:	e02c      	b.n	8006302 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2200      	movs	r2, #0
 80062b0:	2180      	movs	r1, #128	; 0x80
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f001 f88d 	bl	80073d2 <UART_WaitOnFlagUntilTimeout>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e039      	b.n	8006336 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10b      	bne.n	80062e0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	461a      	mov	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	3302      	adds	r3, #2
 80062dc:	61bb      	str	r3, [r7, #24]
 80062de:	e007      	b.n	80062f0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	781a      	ldrb	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	3301      	adds	r3, #1
 80062ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1cc      	bne.n	80062a8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2200      	movs	r2, #0
 8006316:	2140      	movs	r1, #64	; 0x40
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f001 f85a 	bl	80073d2 <UART_WaitOnFlagUntilTimeout>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d001      	beq.n	8006328 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e006      	b.n	8006336 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2220      	movs	r2, #32
 800632c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006330:	2300      	movs	r3, #0
 8006332:	e000      	b.n	8006336 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006334:	2302      	movs	r3, #2
  }
}
 8006336:	4618      	mov	r0, r3
 8006338:	3720      	adds	r7, #32
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b08a      	sub	sp, #40	; 0x28
 8006342:	af02      	add	r7, sp, #8
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	603b      	str	r3, [r7, #0]
 800634a:	4613      	mov	r3, r2
 800634c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006354:	2b20      	cmp	r3, #32
 8006356:	f040 80c0 	bne.w	80064da <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <HAL_UART_Receive+0x28>
 8006360:	88fb      	ldrh	r3, [r7, #6]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e0b8      	b.n	80064dc <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_UART_Receive+0x3a>
 8006374:	2302      	movs	r3, #2
 8006376:	e0b1      	b.n	80064dc <HAL_UART_Receive+0x19e>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2222      	movs	r2, #34	; 0x22
 800638c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006396:	f7fb f99d 	bl	80016d4 <HAL_GetTick>
 800639a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	88fa      	ldrh	r2, [r7, #6]
 80063a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	88fa      	ldrh	r2, [r7, #6]
 80063a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b4:	d10e      	bne.n	80063d4 <HAL_UART_Receive+0x96>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d105      	bne.n	80063ca <HAL_UART_Receive+0x8c>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80063c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063c8:	e02d      	b.n	8006426 <HAL_UART_Receive+0xe8>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	22ff      	movs	r2, #255	; 0xff
 80063ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063d2:	e028      	b.n	8006426 <HAL_UART_Receive+0xe8>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10d      	bne.n	80063f8 <HAL_UART_Receive+0xba>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d104      	bne.n	80063ee <HAL_UART_Receive+0xb0>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	22ff      	movs	r2, #255	; 0xff
 80063e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063ec:	e01b      	b.n	8006426 <HAL_UART_Receive+0xe8>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	227f      	movs	r2, #127	; 0x7f
 80063f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063f6:	e016      	b.n	8006426 <HAL_UART_Receive+0xe8>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006400:	d10d      	bne.n	800641e <HAL_UART_Receive+0xe0>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d104      	bne.n	8006414 <HAL_UART_Receive+0xd6>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	227f      	movs	r2, #127	; 0x7f
 800640e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006412:	e008      	b.n	8006426 <HAL_UART_Receive+0xe8>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	223f      	movs	r2, #63	; 0x3f
 8006418:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800641c:	e003      	b.n	8006426 <HAL_UART_Receive+0xe8>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800642c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006436:	d108      	bne.n	800644a <HAL_UART_Receive+0x10c>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d104      	bne.n	800644a <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8006440:	2300      	movs	r3, #0
 8006442:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	61bb      	str	r3, [r7, #24]
 8006448:	e003      	b.n	8006452 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800644e:	2300      	movs	r3, #0
 8006450:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800645a:	e032      	b.n	80064c2 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2200      	movs	r2, #0
 8006464:	2120      	movs	r1, #32
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 ffb3 	bl	80073d2 <UART_WaitOnFlagUntilTimeout>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e032      	b.n	80064dc <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10c      	bne.n	8006496 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	b29a      	uxth	r2, r3
 8006484:	8a7b      	ldrh	r3, [r7, #18]
 8006486:	4013      	ands	r3, r2
 8006488:	b29a      	uxth	r2, r3
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	3302      	adds	r3, #2
 8006492:	61bb      	str	r3, [r7, #24]
 8006494:	e00c      	b.n	80064b0 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	b2da      	uxtb	r2, r3
 800649e:	8a7b      	ldrh	r3, [r7, #18]
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	4013      	ands	r3, r2
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	3301      	adds	r3, #1
 80064ae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1c6      	bne.n	800645c <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2220      	movs	r2, #32
 80064d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	e000      	b.n	80064dc <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80064da:	2302      	movs	r3, #2
  }
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3720      	adds	r7, #32
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08a      	sub	sp, #40	; 0x28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	4613      	mov	r3, r2
 80064f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f8:	2b20      	cmp	r3, #32
 80064fa:	d142      	bne.n	8006582 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <HAL_UART_Receive_IT+0x24>
 8006502:	88fb      	ldrh	r3, [r7, #6]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e03b      	b.n	8006584 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006512:	2b01      	cmp	r3, #1
 8006514:	d101      	bne.n	800651a <HAL_UART_Receive_IT+0x36>
 8006516:	2302      	movs	r3, #2
 8006518:	e034      	b.n	8006584 <HAL_UART_Receive_IT+0xa0>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a17      	ldr	r2, [pc, #92]	; (800658c <HAL_UART_Receive_IT+0xa8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d01f      	beq.n	8006572 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d018      	beq.n	8006572 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	e853 3f00 	ldrex	r3, [r3]
 800654c:	613b      	str	r3, [r7, #16]
   return(result);
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006554:	627b      	str	r3, [r7, #36]	; 0x24
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	461a      	mov	r2, r3
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	623b      	str	r3, [r7, #32]
 8006560:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006562:	69f9      	ldr	r1, [r7, #28]
 8006564:	6a3a      	ldr	r2, [r7, #32]
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	61bb      	str	r3, [r7, #24]
   return(result);
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1e6      	bne.n	8006540 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006572:	88fb      	ldrh	r3, [r7, #6]
 8006574:	461a      	mov	r2, r3
 8006576:	68b9      	ldr	r1, [r7, #8]
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 fff3 	bl	8007564 <UART_Start_Receive_IT>
 800657e:	4603      	mov	r3, r0
 8006580:	e000      	b.n	8006584 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006582:	2302      	movs	r3, #2
  }
}
 8006584:	4618      	mov	r0, r3
 8006586:	3728      	adds	r7, #40	; 0x28
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	40008000 	.word	0x40008000

08006590 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b0ba      	sub	sp, #232	; 0xe8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80065ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80065be:	4013      	ands	r3, r2
 80065c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80065c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d11b      	bne.n	8006604 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d0:	f003 0320 	and.w	r3, r3, #32
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d015      	beq.n	8006604 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065dc:	f003 0320 	and.w	r3, r3, #32
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d105      	bne.n	80065f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d009      	beq.n	8006604 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 82d6 	beq.w	8006ba6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	4798      	blx	r3
      }
      return;
 8006602:	e2d0      	b.n	8006ba6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006604:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 811f 	beq.w	800684c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800660e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006612:	4b8b      	ldr	r3, [pc, #556]	; (8006840 <HAL_UART_IRQHandler+0x2b0>)
 8006614:	4013      	ands	r3, r2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d106      	bne.n	8006628 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800661a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800661e:	4b89      	ldr	r3, [pc, #548]	; (8006844 <HAL_UART_IRQHandler+0x2b4>)
 8006620:	4013      	ands	r3, r2
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 8112 	beq.w	800684c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d011      	beq.n	8006658 <HAL_UART_IRQHandler+0xc8>
 8006634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00b      	beq.n	8006658 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2201      	movs	r2, #1
 8006646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800664e:	f043 0201 	orr.w	r2, r3, #1
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d011      	beq.n	8006688 <HAL_UART_IRQHandler+0xf8>
 8006664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00b      	beq.n	8006688 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2202      	movs	r2, #2
 8006676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800667e:	f043 0204 	orr.w	r2, r3, #4
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b00      	cmp	r3, #0
 8006692:	d011      	beq.n	80066b8 <HAL_UART_IRQHandler+0x128>
 8006694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00b      	beq.n	80066b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2204      	movs	r2, #4
 80066a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066ae:	f043 0202 	orr.w	r2, r3, #2
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d017      	beq.n	80066f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c8:	f003 0320 	and.w	r3, r3, #32
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d105      	bne.n	80066dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80066d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80066d4:	4b5a      	ldr	r3, [pc, #360]	; (8006840 <HAL_UART_IRQHandler+0x2b0>)
 80066d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00b      	beq.n	80066f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2208      	movs	r2, #8
 80066e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066ea:	f043 0208 	orr.w	r2, r3, #8
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d012      	beq.n	8006726 <HAL_UART_IRQHandler+0x196>
 8006700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006704:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00c      	beq.n	8006726 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006714:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800671c:	f043 0220 	orr.w	r2, r3, #32
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 823c 	beq.w	8006baa <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006736:	f003 0320 	and.w	r3, r3, #32
 800673a:	2b00      	cmp	r3, #0
 800673c:	d013      	beq.n	8006766 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800673e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b00      	cmp	r3, #0
 8006748:	d105      	bne.n	8006756 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800674a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800674e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d007      	beq.n	8006766 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800676c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677a:	2b40      	cmp	r3, #64	; 0x40
 800677c:	d005      	beq.n	800678a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800677e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006782:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006786:	2b00      	cmp	r3, #0
 8006788:	d04f      	beq.n	800682a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f001 f814 	bl	80077b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679a:	2b40      	cmp	r3, #64	; 0x40
 800679c:	d141      	bne.n	8006822 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3308      	adds	r3, #8
 80067a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067ac:	e853 3f00 	ldrex	r3, [r3]
 80067b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3308      	adds	r3, #8
 80067c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067da:	e841 2300 	strex	r3, r2, [r1]
 80067de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1d9      	bne.n	800679e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d013      	beq.n	800681a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067f6:	4a14      	ldr	r2, [pc, #80]	; (8006848 <HAL_UART_IRQHandler+0x2b8>)
 80067f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fc fd5c 	bl	80032bc <HAL_DMA_Abort_IT>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d017      	beq.n	800683a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800680e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006814:	4610      	mov	r0, r2
 8006816:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006818:	e00f      	b.n	800683a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f9da 	bl	8006bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006820:	e00b      	b.n	800683a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f9d6 	bl	8006bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006828:	e007      	b.n	800683a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f9d2 	bl	8006bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006838:	e1b7      	b.n	8006baa <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800683a:	bf00      	nop
    return;
 800683c:	e1b5      	b.n	8006baa <HAL_UART_IRQHandler+0x61a>
 800683e:	bf00      	nop
 8006840:	10000001 	.word	0x10000001
 8006844:	04000120 	.word	0x04000120
 8006848:	08007885 	.word	0x08007885

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006850:	2b01      	cmp	r3, #1
 8006852:	f040 814a 	bne.w	8006aea <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800685a:	f003 0310 	and.w	r3, r3, #16
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 8143 	beq.w	8006aea <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006868:	f003 0310 	and.w	r3, r3, #16
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 813c 	beq.w	8006aea <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2210      	movs	r2, #16
 8006878:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006884:	2b40      	cmp	r3, #64	; 0x40
 8006886:	f040 80b5 	bne.w	80069f4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006896:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 8187 	beq.w	8006bae <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068aa:	429a      	cmp	r2, r3
 80068ac:	f080 817f 	bcs.w	8006bae <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f040 8086 	bne.w	80069d8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068d8:	e853 3f00 	ldrex	r3, [r3]
 80068dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	461a      	mov	r2, r3
 80068f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80068fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006902:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800690e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1da      	bne.n	80068cc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3308      	adds	r3, #8
 800691c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006920:	e853 3f00 	ldrex	r3, [r3]
 8006924:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006928:	f023 0301 	bic.w	r3, r3, #1
 800692c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3308      	adds	r3, #8
 8006936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800693a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800693e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006940:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006942:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800694c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1e1      	bne.n	8006916 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3308      	adds	r3, #8
 8006958:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006968:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3308      	adds	r3, #8
 8006972:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006976:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006978:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800697c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e3      	bne.n	8006952 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2220      	movs	r2, #32
 800698e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069a8:	f023 0310 	bic.w	r3, r3, #16
 80069ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	461a      	mov	r2, r3
 80069b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80069bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e4      	bne.n	8006998 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fc fc19 	bl	800320a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	4619      	mov	r1, r3
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f8fb 	bl	8006be8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069f2:	e0dc      	b.n	8006bae <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 80ce 	beq.w	8006bb2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006a16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 80c9 	beq.w	8006bb2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a28:	e853 3f00 	ldrex	r3, [r3]
 8006a2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a42:	647b      	str	r3, [r7, #68]	; 0x44
 8006a44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e4      	bne.n	8006a20 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3308      	adds	r3, #8
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	623b      	str	r3, [r7, #32]
   return(result);
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a6c:	f023 0301 	bic.w	r3, r3, #1
 8006a70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	3308      	adds	r3, #8
 8006a7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a7e:	633a      	str	r2, [r7, #48]	; 0x30
 8006a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a86:	e841 2300 	strex	r3, r2, [r1]
 8006a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1e1      	bne.n	8006a56 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0310 	bic.w	r3, r3, #16
 8006aba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ac8:	61fb      	str	r3, [r7, #28]
 8006aca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	69b9      	ldr	r1, [r7, #24]
 8006ace:	69fa      	ldr	r2, [r7, #28]
 8006ad0:	e841 2300 	strex	r3, r2, [r1]
 8006ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e4      	bne.n	8006aa6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f880 	bl	8006be8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ae8:	e063      	b.n	8006bb2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00e      	beq.n	8006b14 <HAL_UART_IRQHandler+0x584>
 8006af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d008      	beq.n	8006b14 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f001 fb57 	bl	80081c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b12:	e051      	b.n	8006bb8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d014      	beq.n	8006b4a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d105      	bne.n	8006b38 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d008      	beq.n	8006b4a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d03a      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	4798      	blx	r3
    }
    return;
 8006b48:	e035      	b.n	8006bb6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d009      	beq.n	8006b6a <HAL_UART_IRQHandler+0x5da>
 8006b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fea4 	bl	80078b0 <UART_EndTransmit_IT>
    return;
 8006b68:	e026      	b.n	8006bb8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d009      	beq.n	8006b8a <HAL_UART_IRQHandler+0x5fa>
 8006b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f001 fb30 	bl	80081e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b88:	e016      	b.n	8006bb8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d010      	beq.n	8006bb8 <HAL_UART_IRQHandler+0x628>
 8006b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	da0c      	bge.n	8006bb8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f001 fb18 	bl	80081d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ba4:	e008      	b.n	8006bb8 <HAL_UART_IRQHandler+0x628>
      return;
 8006ba6:	bf00      	nop
 8006ba8:	e006      	b.n	8006bb8 <HAL_UART_IRQHandler+0x628>
    return;
 8006baa:	bf00      	nop
 8006bac:	e004      	b.n	8006bb8 <HAL_UART_IRQHandler+0x628>
      return;
 8006bae:	bf00      	nop
 8006bb0:	e002      	b.n	8006bb8 <HAL_UART_IRQHandler+0x628>
      return;
 8006bb2:	bf00      	nop
 8006bb4:	e000      	b.n	8006bb8 <HAL_UART_IRQHandler+0x628>
    return;
 8006bb6:	bf00      	nop
  }
}
 8006bb8:	37e8      	adds	r7, #232	; 0xe8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop

08006bc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c04:	b08c      	sub	sp, #48	; 0x30
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	4baa      	ldr	r3, [pc, #680]	; (8006ed8 <UART_SetConfig+0x2d8>)
 8006c30:	4013      	ands	r3, r2
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	6812      	ldr	r2, [r2, #0]
 8006c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c38:	430b      	orrs	r3, r1
 8006c3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	68da      	ldr	r2, [r3, #12]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a9f      	ldr	r2, [pc, #636]	; (8006edc <UART_SetConfig+0x2dc>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d004      	beq.n	8006c6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006c76:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	6812      	ldr	r2, [r2, #0]
 8006c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c80:	430b      	orrs	r3, r1
 8006c82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8a:	f023 010f 	bic.w	r1, r3, #15
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a90      	ldr	r2, [pc, #576]	; (8006ee0 <UART_SetConfig+0x2e0>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d125      	bne.n	8006cf0 <UART_SetConfig+0xf0>
 8006ca4:	4b8f      	ldr	r3, [pc, #572]	; (8006ee4 <UART_SetConfig+0x2e4>)
 8006ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d81a      	bhi.n	8006ce8 <UART_SetConfig+0xe8>
 8006cb2:	a201      	add	r2, pc, #4	; (adr r2, 8006cb8 <UART_SetConfig+0xb8>)
 8006cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb8:	08006cc9 	.word	0x08006cc9
 8006cbc:	08006cd9 	.word	0x08006cd9
 8006cc0:	08006cd1 	.word	0x08006cd1
 8006cc4:	08006ce1 	.word	0x08006ce1
 8006cc8:	2301      	movs	r3, #1
 8006cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cce:	e116      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cd6:	e112      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006cd8:	2304      	movs	r3, #4
 8006cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cde:	e10e      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006ce0:	2308      	movs	r3, #8
 8006ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ce6:	e10a      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006ce8:	2310      	movs	r3, #16
 8006cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cee:	e106      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a7c      	ldr	r2, [pc, #496]	; (8006ee8 <UART_SetConfig+0x2e8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d138      	bne.n	8006d6c <UART_SetConfig+0x16c>
 8006cfa:	4b7a      	ldr	r3, [pc, #488]	; (8006ee4 <UART_SetConfig+0x2e4>)
 8006cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d00:	f003 030c 	and.w	r3, r3, #12
 8006d04:	2b0c      	cmp	r3, #12
 8006d06:	d82d      	bhi.n	8006d64 <UART_SetConfig+0x164>
 8006d08:	a201      	add	r2, pc, #4	; (adr r2, 8006d10 <UART_SetConfig+0x110>)
 8006d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0e:	bf00      	nop
 8006d10:	08006d45 	.word	0x08006d45
 8006d14:	08006d65 	.word	0x08006d65
 8006d18:	08006d65 	.word	0x08006d65
 8006d1c:	08006d65 	.word	0x08006d65
 8006d20:	08006d55 	.word	0x08006d55
 8006d24:	08006d65 	.word	0x08006d65
 8006d28:	08006d65 	.word	0x08006d65
 8006d2c:	08006d65 	.word	0x08006d65
 8006d30:	08006d4d 	.word	0x08006d4d
 8006d34:	08006d65 	.word	0x08006d65
 8006d38:	08006d65 	.word	0x08006d65
 8006d3c:	08006d65 	.word	0x08006d65
 8006d40:	08006d5d 	.word	0x08006d5d
 8006d44:	2300      	movs	r3, #0
 8006d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d4a:	e0d8      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d52:	e0d4      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006d54:	2304      	movs	r3, #4
 8006d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d5a:	e0d0      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006d5c:	2308      	movs	r3, #8
 8006d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d62:	e0cc      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006d64:	2310      	movs	r3, #16
 8006d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d6a:	e0c8      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a5e      	ldr	r2, [pc, #376]	; (8006eec <UART_SetConfig+0x2ec>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d125      	bne.n	8006dc2 <UART_SetConfig+0x1c2>
 8006d76:	4b5b      	ldr	r3, [pc, #364]	; (8006ee4 <UART_SetConfig+0x2e4>)
 8006d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d80:	2b30      	cmp	r3, #48	; 0x30
 8006d82:	d016      	beq.n	8006db2 <UART_SetConfig+0x1b2>
 8006d84:	2b30      	cmp	r3, #48	; 0x30
 8006d86:	d818      	bhi.n	8006dba <UART_SetConfig+0x1ba>
 8006d88:	2b20      	cmp	r3, #32
 8006d8a:	d00a      	beq.n	8006da2 <UART_SetConfig+0x1a2>
 8006d8c:	2b20      	cmp	r3, #32
 8006d8e:	d814      	bhi.n	8006dba <UART_SetConfig+0x1ba>
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <UART_SetConfig+0x19a>
 8006d94:	2b10      	cmp	r3, #16
 8006d96:	d008      	beq.n	8006daa <UART_SetConfig+0x1aa>
 8006d98:	e00f      	b.n	8006dba <UART_SetConfig+0x1ba>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006da0:	e0ad      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006da2:	2302      	movs	r3, #2
 8006da4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006da8:	e0a9      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006daa:	2304      	movs	r3, #4
 8006dac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006db0:	e0a5      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006db2:	2308      	movs	r3, #8
 8006db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006db8:	e0a1      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006dba:	2310      	movs	r3, #16
 8006dbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dc0:	e09d      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a4a      	ldr	r2, [pc, #296]	; (8006ef0 <UART_SetConfig+0x2f0>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d125      	bne.n	8006e18 <UART_SetConfig+0x218>
 8006dcc:	4b45      	ldr	r3, [pc, #276]	; (8006ee4 <UART_SetConfig+0x2e4>)
 8006dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006dd6:	2bc0      	cmp	r3, #192	; 0xc0
 8006dd8:	d016      	beq.n	8006e08 <UART_SetConfig+0x208>
 8006dda:	2bc0      	cmp	r3, #192	; 0xc0
 8006ddc:	d818      	bhi.n	8006e10 <UART_SetConfig+0x210>
 8006dde:	2b80      	cmp	r3, #128	; 0x80
 8006de0:	d00a      	beq.n	8006df8 <UART_SetConfig+0x1f8>
 8006de2:	2b80      	cmp	r3, #128	; 0x80
 8006de4:	d814      	bhi.n	8006e10 <UART_SetConfig+0x210>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <UART_SetConfig+0x1f0>
 8006dea:	2b40      	cmp	r3, #64	; 0x40
 8006dec:	d008      	beq.n	8006e00 <UART_SetConfig+0x200>
 8006dee:	e00f      	b.n	8006e10 <UART_SetConfig+0x210>
 8006df0:	2300      	movs	r3, #0
 8006df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006df6:	e082      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006df8:	2302      	movs	r3, #2
 8006dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dfe:	e07e      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006e00:	2304      	movs	r3, #4
 8006e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e06:	e07a      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006e08:	2308      	movs	r3, #8
 8006e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e0e:	e076      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006e10:	2310      	movs	r3, #16
 8006e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e16:	e072      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a35      	ldr	r2, [pc, #212]	; (8006ef4 <UART_SetConfig+0x2f4>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d12a      	bne.n	8006e78 <UART_SetConfig+0x278>
 8006e22:	4b30      	ldr	r3, [pc, #192]	; (8006ee4 <UART_SetConfig+0x2e4>)
 8006e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e30:	d01a      	beq.n	8006e68 <UART_SetConfig+0x268>
 8006e32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e36:	d81b      	bhi.n	8006e70 <UART_SetConfig+0x270>
 8006e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e3c:	d00c      	beq.n	8006e58 <UART_SetConfig+0x258>
 8006e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e42:	d815      	bhi.n	8006e70 <UART_SetConfig+0x270>
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d003      	beq.n	8006e50 <UART_SetConfig+0x250>
 8006e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e4c:	d008      	beq.n	8006e60 <UART_SetConfig+0x260>
 8006e4e:	e00f      	b.n	8006e70 <UART_SetConfig+0x270>
 8006e50:	2300      	movs	r3, #0
 8006e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e56:	e052      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006e58:	2302      	movs	r3, #2
 8006e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e5e:	e04e      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006e60:	2304      	movs	r3, #4
 8006e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e66:	e04a      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006e68:	2308      	movs	r3, #8
 8006e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e6e:	e046      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006e70:	2310      	movs	r3, #16
 8006e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e76:	e042      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a17      	ldr	r2, [pc, #92]	; (8006edc <UART_SetConfig+0x2dc>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d13a      	bne.n	8006ef8 <UART_SetConfig+0x2f8>
 8006e82:	4b18      	ldr	r3, [pc, #96]	; (8006ee4 <UART_SetConfig+0x2e4>)
 8006e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e90:	d01a      	beq.n	8006ec8 <UART_SetConfig+0x2c8>
 8006e92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e96:	d81b      	bhi.n	8006ed0 <UART_SetConfig+0x2d0>
 8006e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e9c:	d00c      	beq.n	8006eb8 <UART_SetConfig+0x2b8>
 8006e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ea2:	d815      	bhi.n	8006ed0 <UART_SetConfig+0x2d0>
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <UART_SetConfig+0x2b0>
 8006ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eac:	d008      	beq.n	8006ec0 <UART_SetConfig+0x2c0>
 8006eae:	e00f      	b.n	8006ed0 <UART_SetConfig+0x2d0>
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eb6:	e022      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006eb8:	2302      	movs	r3, #2
 8006eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ebe:	e01e      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006ec0:	2304      	movs	r3, #4
 8006ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ec6:	e01a      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006ec8:	2308      	movs	r3, #8
 8006eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ece:	e016      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ed6:	e012      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006ed8:	cfff69f3 	.word	0xcfff69f3
 8006edc:	40008000 	.word	0x40008000
 8006ee0:	40013800 	.word	0x40013800
 8006ee4:	40021000 	.word	0x40021000
 8006ee8:	40004400 	.word	0x40004400
 8006eec:	40004800 	.word	0x40004800
 8006ef0:	40004c00 	.word	0x40004c00
 8006ef4:	40005000 	.word	0x40005000
 8006ef8:	2310      	movs	r3, #16
 8006efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4aae      	ldr	r2, [pc, #696]	; (80071bc <UART_SetConfig+0x5bc>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	f040 8097 	bne.w	8007038 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f0e:	2b08      	cmp	r3, #8
 8006f10:	d823      	bhi.n	8006f5a <UART_SetConfig+0x35a>
 8006f12:	a201      	add	r2, pc, #4	; (adr r2, 8006f18 <UART_SetConfig+0x318>)
 8006f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f18:	08006f3d 	.word	0x08006f3d
 8006f1c:	08006f5b 	.word	0x08006f5b
 8006f20:	08006f45 	.word	0x08006f45
 8006f24:	08006f5b 	.word	0x08006f5b
 8006f28:	08006f4b 	.word	0x08006f4b
 8006f2c:	08006f5b 	.word	0x08006f5b
 8006f30:	08006f5b 	.word	0x08006f5b
 8006f34:	08006f5b 	.word	0x08006f5b
 8006f38:	08006f53 	.word	0x08006f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f3c:	f7fd faa8 	bl	8004490 <HAL_RCC_GetPCLK1Freq>
 8006f40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f42:	e010      	b.n	8006f66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f44:	4b9e      	ldr	r3, [pc, #632]	; (80071c0 <UART_SetConfig+0x5c0>)
 8006f46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f48:	e00d      	b.n	8006f66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f4a:	f7fd fa33 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 8006f4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f50:	e009      	b.n	8006f66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f58:	e005      	b.n	8006f66 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 8130 	beq.w	80071ce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	4a94      	ldr	r2, [pc, #592]	; (80071c4 <UART_SetConfig+0x5c4>)
 8006f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f80:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	4613      	mov	r3, r2
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	4413      	add	r3, r2
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d305      	bcc.n	8006f9e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f98:	69ba      	ldr	r2, [r7, #24]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d903      	bls.n	8006fa6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006fa4:	e113      	b.n	80071ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	2200      	movs	r2, #0
 8006faa:	60bb      	str	r3, [r7, #8]
 8006fac:	60fa      	str	r2, [r7, #12]
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	4a84      	ldr	r2, [pc, #528]	; (80071c4 <UART_SetConfig+0x5c4>)
 8006fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	2200      	movs	r2, #0
 8006fbc:	603b      	str	r3, [r7, #0]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fc8:	f7f9 f992 	bl	80002f0 <__aeabi_uldivmod>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	f04f 0200 	mov.w	r2, #0
 8006fd8:	f04f 0300 	mov.w	r3, #0
 8006fdc:	020b      	lsls	r3, r1, #8
 8006fde:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fe2:	0202      	lsls	r2, r0, #8
 8006fe4:	6979      	ldr	r1, [r7, #20]
 8006fe6:	6849      	ldr	r1, [r1, #4]
 8006fe8:	0849      	lsrs	r1, r1, #1
 8006fea:	2000      	movs	r0, #0
 8006fec:	460c      	mov	r4, r1
 8006fee:	4605      	mov	r5, r0
 8006ff0:	eb12 0804 	adds.w	r8, r2, r4
 8006ff4:	eb43 0905 	adc.w	r9, r3, r5
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	469a      	mov	sl, r3
 8007000:	4693      	mov	fp, r2
 8007002:	4652      	mov	r2, sl
 8007004:	465b      	mov	r3, fp
 8007006:	4640      	mov	r0, r8
 8007008:	4649      	mov	r1, r9
 800700a:	f7f9 f971 	bl	80002f0 <__aeabi_uldivmod>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	4613      	mov	r3, r2
 8007014:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800701c:	d308      	bcc.n	8007030 <UART_SetConfig+0x430>
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007024:	d204      	bcs.n	8007030 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6a3a      	ldr	r2, [r7, #32]
 800702c:	60da      	str	r2, [r3, #12]
 800702e:	e0ce      	b.n	80071ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007036:	e0ca      	b.n	80071ce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007040:	d166      	bne.n	8007110 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007042:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007046:	2b08      	cmp	r3, #8
 8007048:	d827      	bhi.n	800709a <UART_SetConfig+0x49a>
 800704a:	a201      	add	r2, pc, #4	; (adr r2, 8007050 <UART_SetConfig+0x450>)
 800704c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007050:	08007075 	.word	0x08007075
 8007054:	0800707d 	.word	0x0800707d
 8007058:	08007085 	.word	0x08007085
 800705c:	0800709b 	.word	0x0800709b
 8007060:	0800708b 	.word	0x0800708b
 8007064:	0800709b 	.word	0x0800709b
 8007068:	0800709b 	.word	0x0800709b
 800706c:	0800709b 	.word	0x0800709b
 8007070:	08007093 	.word	0x08007093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007074:	f7fd fa0c 	bl	8004490 <HAL_RCC_GetPCLK1Freq>
 8007078:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800707a:	e014      	b.n	80070a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800707c:	f7fd fa1e 	bl	80044bc <HAL_RCC_GetPCLK2Freq>
 8007080:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007082:	e010      	b.n	80070a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007084:	4b4e      	ldr	r3, [pc, #312]	; (80071c0 <UART_SetConfig+0x5c0>)
 8007086:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007088:	e00d      	b.n	80070a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800708a:	f7fd f993 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 800708e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007090:	e009      	b.n	80070a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007096:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007098:	e005      	b.n	80070a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80070a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 8090 	beq.w	80071ce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	4a44      	ldr	r2, [pc, #272]	; (80071c4 <UART_SetConfig+0x5c4>)
 80070b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070b8:	461a      	mov	r2, r3
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80070c0:	005a      	lsls	r2, r3, #1
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	085b      	lsrs	r3, r3, #1
 80070c8:	441a      	add	r2, r3
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	2b0f      	cmp	r3, #15
 80070d8:	d916      	bls.n	8007108 <UART_SetConfig+0x508>
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070e0:	d212      	bcs.n	8007108 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	f023 030f 	bic.w	r3, r3, #15
 80070ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	085b      	lsrs	r3, r3, #1
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	8bfb      	ldrh	r3, [r7, #30]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	8bfa      	ldrh	r2, [r7, #30]
 8007104:	60da      	str	r2, [r3, #12]
 8007106:	e062      	b.n	80071ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800710e:	e05e      	b.n	80071ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007110:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007114:	2b08      	cmp	r3, #8
 8007116:	d828      	bhi.n	800716a <UART_SetConfig+0x56a>
 8007118:	a201      	add	r2, pc, #4	; (adr r2, 8007120 <UART_SetConfig+0x520>)
 800711a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711e:	bf00      	nop
 8007120:	08007145 	.word	0x08007145
 8007124:	0800714d 	.word	0x0800714d
 8007128:	08007155 	.word	0x08007155
 800712c:	0800716b 	.word	0x0800716b
 8007130:	0800715b 	.word	0x0800715b
 8007134:	0800716b 	.word	0x0800716b
 8007138:	0800716b 	.word	0x0800716b
 800713c:	0800716b 	.word	0x0800716b
 8007140:	08007163 	.word	0x08007163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007144:	f7fd f9a4 	bl	8004490 <HAL_RCC_GetPCLK1Freq>
 8007148:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800714a:	e014      	b.n	8007176 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800714c:	f7fd f9b6 	bl	80044bc <HAL_RCC_GetPCLK2Freq>
 8007150:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007152:	e010      	b.n	8007176 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007154:	4b1a      	ldr	r3, [pc, #104]	; (80071c0 <UART_SetConfig+0x5c0>)
 8007156:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007158:	e00d      	b.n	8007176 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800715a:	f7fd f92b 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 800715e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007160:	e009      	b.n	8007176 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007166:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007168:	e005      	b.n	8007176 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800716a:	2300      	movs	r3, #0
 800716c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007174:	bf00      	nop
    }

    if (pclk != 0U)
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	2b00      	cmp	r3, #0
 800717a:	d028      	beq.n	80071ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	4a10      	ldr	r2, [pc, #64]	; (80071c4 <UART_SetConfig+0x5c4>)
 8007182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007186:	461a      	mov	r2, r3
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	fbb3 f2f2 	udiv	r2, r3, r2
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	085b      	lsrs	r3, r3, #1
 8007194:	441a      	add	r2, r3
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	fbb2 f3f3 	udiv	r3, r2, r3
 800719e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	2b0f      	cmp	r3, #15
 80071a4:	d910      	bls.n	80071c8 <UART_SetConfig+0x5c8>
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ac:	d20c      	bcs.n	80071c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	60da      	str	r2, [r3, #12]
 80071b8:	e009      	b.n	80071ce <UART_SetConfig+0x5ce>
 80071ba:	bf00      	nop
 80071bc:	40008000 	.word	0x40008000
 80071c0:	00f42400 	.word	0x00f42400
 80071c4:	0800a5d0 	.word	0x0800a5d0
      }
      else
      {
        ret = HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2201      	movs	r2, #1
 80071da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2200      	movs	r2, #0
 80071e2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	2200      	movs	r2, #0
 80071e8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80071ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3730      	adds	r7, #48	; 0x30
 80071f2:	46bd      	mov	sp, r7
 80071f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080071f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00a      	beq.n	8007222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00a      	beq.n	8007244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007248:	f003 0304 	and.w	r3, r3, #4
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00a      	beq.n	8007266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726a:	f003 0308 	and.w	r3, r3, #8
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728c:	f003 0310 	and.w	r3, r3, #16
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00a      	beq.n	80072aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	430a      	orrs	r2, r1
 80072ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d01a      	beq.n	800730e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072f6:	d10a      	bne.n	800730e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	605a      	str	r2, [r3, #4]
  }
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af02      	add	r7, sp, #8
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800734c:	f7fa f9c2 	bl	80016d4 <HAL_GetTick>
 8007350:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0308 	and.w	r3, r3, #8
 800735c:	2b08      	cmp	r3, #8
 800735e:	d10e      	bne.n	800737e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007360:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f82f 	bl	80073d2 <UART_WaitOnFlagUntilTimeout>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e025      	b.n	80073ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b04      	cmp	r3, #4
 800738a:	d10e      	bne.n	80073aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800738c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f819 	bl	80073d2 <UART_WaitOnFlagUntilTimeout>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e00f      	b.n	80073ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2220      	movs	r2, #32
 80073ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2220      	movs	r2, #32
 80073b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b09c      	sub	sp, #112	; 0x70
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	60f8      	str	r0, [r7, #12]
 80073da:	60b9      	str	r1, [r7, #8]
 80073dc:	603b      	str	r3, [r7, #0]
 80073de:	4613      	mov	r3, r2
 80073e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073e2:	e0a9      	b.n	8007538 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ea:	f000 80a5 	beq.w	8007538 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ee:	f7fa f971 	bl	80016d4 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d302      	bcc.n	8007404 <UART_WaitOnFlagUntilTimeout+0x32>
 80073fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007400:	2b00      	cmp	r3, #0
 8007402:	d140      	bne.n	8007486 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800740c:	e853 3f00 	ldrex	r3, [r3]
 8007410:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007414:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007418:	667b      	str	r3, [r7, #100]	; 0x64
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	461a      	mov	r2, r3
 8007420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007422:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007424:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007428:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800742a:	e841 2300 	strex	r3, r2, [r1]
 800742e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1e6      	bne.n	8007404 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3308      	adds	r3, #8
 800743c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007440:	e853 3f00 	ldrex	r3, [r3]
 8007444:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007448:	f023 0301 	bic.w	r3, r3, #1
 800744c:	663b      	str	r3, [r7, #96]	; 0x60
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3308      	adds	r3, #8
 8007454:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007456:	64ba      	str	r2, [r7, #72]	; 0x48
 8007458:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800745c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e5      	bne.n	8007436 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2220      	movs	r2, #32
 800746e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2220      	movs	r2, #32
 8007476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e069      	b.n	800755a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0304 	and.w	r3, r3, #4
 8007490:	2b00      	cmp	r3, #0
 8007492:	d051      	beq.n	8007538 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800749e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074a2:	d149      	bne.n	8007538 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	e853 3f00 	ldrex	r3, [r3]
 80074ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	461a      	mov	r2, r3
 80074ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074cc:	637b      	str	r3, [r7, #52]	; 0x34
 80074ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074d4:	e841 2300 	strex	r3, r2, [r1]
 80074d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e6      	bne.n	80074ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3308      	adds	r3, #8
 80074e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	e853 3f00 	ldrex	r3, [r3]
 80074ee:	613b      	str	r3, [r7, #16]
   return(result);
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f023 0301 	bic.w	r3, r3, #1
 80074f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3308      	adds	r3, #8
 80074fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007500:	623a      	str	r2, [r7, #32]
 8007502:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007504:	69f9      	ldr	r1, [r7, #28]
 8007506:	6a3a      	ldr	r2, [r7, #32]
 8007508:	e841 2300 	strex	r3, r2, [r1]
 800750c:	61bb      	str	r3, [r7, #24]
   return(result);
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1e5      	bne.n	80074e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2220      	movs	r2, #32
 8007518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2220      	movs	r2, #32
 8007520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2220      	movs	r2, #32
 8007528:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e010      	b.n	800755a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	69da      	ldr	r2, [r3, #28]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	4013      	ands	r3, r2
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	429a      	cmp	r2, r3
 8007546:	bf0c      	ite	eq
 8007548:	2301      	moveq	r3, #1
 800754a:	2300      	movne	r3, #0
 800754c:	b2db      	uxtb	r3, r3
 800754e:	461a      	mov	r2, r3
 8007550:	79fb      	ldrb	r3, [r7, #7]
 8007552:	429a      	cmp	r2, r3
 8007554:	f43f af46 	beq.w	80073e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3770      	adds	r7, #112	; 0x70
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
	...

08007564 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007564:	b480      	push	{r7}
 8007566:	b0a3      	sub	sp, #140	; 0x8c
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	4613      	mov	r3, r2
 8007570:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	88fa      	ldrh	r2, [r7, #6]
 800757c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	88fa      	ldrh	r2, [r7, #6]
 8007584:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007596:	d10e      	bne.n	80075b6 <UART_Start_Receive_IT+0x52>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d105      	bne.n	80075ac <UART_Start_Receive_IT+0x48>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80075a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075aa:	e02d      	b.n	8007608 <UART_Start_Receive_IT+0xa4>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	22ff      	movs	r2, #255	; 0xff
 80075b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075b4:	e028      	b.n	8007608 <UART_Start_Receive_IT+0xa4>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10d      	bne.n	80075da <UART_Start_Receive_IT+0x76>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d104      	bne.n	80075d0 <UART_Start_Receive_IT+0x6c>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	22ff      	movs	r2, #255	; 0xff
 80075ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075ce:	e01b      	b.n	8007608 <UART_Start_Receive_IT+0xa4>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	227f      	movs	r2, #127	; 0x7f
 80075d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075d8:	e016      	b.n	8007608 <UART_Start_Receive_IT+0xa4>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075e2:	d10d      	bne.n	8007600 <UART_Start_Receive_IT+0x9c>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d104      	bne.n	80075f6 <UART_Start_Receive_IT+0x92>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	227f      	movs	r2, #127	; 0x7f
 80075f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075f4:	e008      	b.n	8007608 <UART_Start_Receive_IT+0xa4>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	223f      	movs	r2, #63	; 0x3f
 80075fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075fe:	e003      	b.n	8007608 <UART_Start_Receive_IT+0xa4>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2222      	movs	r2, #34	; 0x22
 8007614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3308      	adds	r3, #8
 800761e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007622:	e853 3f00 	ldrex	r3, [r3]
 8007626:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007628:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800762a:	f043 0301 	orr.w	r3, r3, #1
 800762e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3308      	adds	r3, #8
 8007638:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800763c:	673a      	str	r2, [r7, #112]	; 0x70
 800763e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007642:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800764a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e3      	bne.n	8007618 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007658:	d153      	bne.n	8007702 <UART_Start_Receive_IT+0x19e>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007660:	88fa      	ldrh	r2, [r7, #6]
 8007662:	429a      	cmp	r2, r3
 8007664:	d34d      	bcc.n	8007702 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800766e:	d107      	bne.n	8007680 <UART_Start_Receive_IT+0x11c>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d103      	bne.n	8007680 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4a4b      	ldr	r2, [pc, #300]	; (80077a8 <UART_Start_Receive_IT+0x244>)
 800767c:	671a      	str	r2, [r3, #112]	; 0x70
 800767e:	e002      	b.n	8007686 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4a4a      	ldr	r2, [pc, #296]	; (80077ac <UART_Start_Receive_IT+0x248>)
 8007684:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d01a      	beq.n	80076cc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800769e:	e853 3f00 	ldrex	r3, [r3]
 80076a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076ba:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076c0:	e841 2300 	strex	r3, r2, [r1]
 80076c4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80076c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1e4      	bne.n	8007696 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3308      	adds	r3, #8
 80076d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d6:	e853 3f00 	ldrex	r3, [r3]
 80076da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3308      	adds	r3, #8
 80076ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80076ec:	64ba      	str	r2, [r7, #72]	; 0x48
 80076ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076f4:	e841 2300 	strex	r3, r2, [r1]
 80076f8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1e5      	bne.n	80076cc <UART_Start_Receive_IT+0x168>
 8007700:	e04a      	b.n	8007798 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800770a:	d107      	bne.n	800771c <UART_Start_Receive_IT+0x1b8>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d103      	bne.n	800771c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	4a26      	ldr	r2, [pc, #152]	; (80077b0 <UART_Start_Receive_IT+0x24c>)
 8007718:	671a      	str	r2, [r3, #112]	; 0x70
 800771a:	e002      	b.n	8007722 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4a25      	ldr	r2, [pc, #148]	; (80077b4 <UART_Start_Receive_IT+0x250>)
 8007720:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d019      	beq.n	8007766 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773a:	e853 3f00 	ldrex	r3, [r3]
 800773e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007746:	677b      	str	r3, [r7, #116]	; 0x74
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	461a      	mov	r2, r3
 800774e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007750:	637b      	str	r3, [r7, #52]	; 0x34
 8007752:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007758:	e841 2300 	strex	r3, r2, [r1]
 800775c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800775e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e6      	bne.n	8007732 <UART_Start_Receive_IT+0x1ce>
 8007764:	e018      	b.n	8007798 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	e853 3f00 	ldrex	r3, [r3]
 8007772:	613b      	str	r3, [r7, #16]
   return(result);
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	f043 0320 	orr.w	r3, r3, #32
 800777a:	67bb      	str	r3, [r7, #120]	; 0x78
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	461a      	mov	r2, r3
 8007782:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007784:	623b      	str	r3, [r7, #32]
 8007786:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	69f9      	ldr	r1, [r7, #28]
 800778a:	6a3a      	ldr	r2, [r7, #32]
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	61bb      	str	r3, [r7, #24]
   return(result);
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e6      	bne.n	8007766 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	378c      	adds	r7, #140	; 0x8c
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	08007ec1 	.word	0x08007ec1
 80077ac:	08007bc9 	.word	0x08007bc9
 80077b0:	08007a67 	.word	0x08007a67
 80077b4:	08007907 	.word	0x08007907

080077b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b095      	sub	sp, #84	; 0x54
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c8:	e853 3f00 	ldrex	r3, [r3]
 80077cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077de:	643b      	str	r3, [r7, #64]	; 0x40
 80077e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077e6:	e841 2300 	strex	r3, r2, [r1]
 80077ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1e6      	bne.n	80077c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3308      	adds	r3, #8
 80077f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	61fb      	str	r3, [r7, #28]
   return(result);
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007808:	f023 0301 	bic.w	r3, r3, #1
 800780c:	64bb      	str	r3, [r7, #72]	; 0x48
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3308      	adds	r3, #8
 8007814:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007816:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007818:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800781c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800781e:	e841 2300 	strex	r3, r2, [r1]
 8007822:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1e3      	bne.n	80077f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800782e:	2b01      	cmp	r3, #1
 8007830:	d118      	bne.n	8007864 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	f023 0310 	bic.w	r3, r3, #16
 8007846:	647b      	str	r3, [r7, #68]	; 0x44
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007850:	61bb      	str	r3, [r7, #24]
 8007852:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	6979      	ldr	r1, [r7, #20]
 8007856:	69ba      	ldr	r2, [r7, #24]
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	613b      	str	r3, [r7, #16]
   return(result);
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e6      	bne.n	8007832 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2220      	movs	r2, #32
 8007868:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007878:	bf00      	nop
 800787a:	3754      	adds	r7, #84	; 0x54
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007890:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f7ff f996 	bl	8006bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078a8:	bf00      	nop
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	e853 3f00 	ldrex	r3, [r3]
 80078c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078cc:	61fb      	str	r3, [r7, #28]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	61bb      	str	r3, [r7, #24]
 80078d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078da:	6979      	ldr	r1, [r7, #20]
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	e841 2300 	strex	r3, r2, [r1]
 80078e2:	613b      	str	r3, [r7, #16]
   return(result);
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1e6      	bne.n	80078b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2220      	movs	r2, #32
 80078ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7ff f961 	bl	8006bc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078fe:	bf00      	nop
 8007900:	3720      	adds	r7, #32
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b096      	sub	sp, #88	; 0x58
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007914:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800791e:	2b22      	cmp	r3, #34	; 0x22
 8007920:	f040 8095 	bne.w	8007a4e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800792e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007932:	b2d9      	uxtb	r1, r3
 8007934:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007938:	b2da      	uxtb	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800793e:	400a      	ands	r2, r1
 8007940:	b2d2      	uxtb	r2, r2
 8007942:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007954:	b29b      	uxth	r3, r3
 8007956:	3b01      	subs	r3, #1
 8007958:	b29a      	uxth	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007966:	b29b      	uxth	r3, r3
 8007968:	2b00      	cmp	r3, #0
 800796a:	d178      	bne.n	8007a5e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800797a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007980:	653b      	str	r3, [r7, #80]	; 0x50
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	461a      	mov	r2, r3
 8007988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800798a:	647b      	str	r3, [r7, #68]	; 0x44
 800798c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007990:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e6      	bne.n	800796c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3308      	adds	r3, #8
 80079a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	e853 3f00 	ldrex	r3, [r3]
 80079ac:	623b      	str	r3, [r7, #32]
   return(result);
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	f023 0301 	bic.w	r3, r3, #1
 80079b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3308      	adds	r3, #8
 80079bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079be:	633a      	str	r2, [r7, #48]	; 0x30
 80079c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079c6:	e841 2300 	strex	r3, r2, [r1]
 80079ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1e5      	bne.n	800799e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2220      	movs	r2, #32
 80079d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d12e      	bne.n	8007a46 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	e853 3f00 	ldrex	r3, [r3]
 80079fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f023 0310 	bic.w	r3, r3, #16
 8007a02:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a0c:	61fb      	str	r3, [r7, #28]
 8007a0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a10:	69b9      	ldr	r1, [r7, #24]
 8007a12:	69fa      	ldr	r2, [r7, #28]
 8007a14:	e841 2300 	strex	r3, r2, [r1]
 8007a18:	617b      	str	r3, [r7, #20]
   return(result);
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1e6      	bne.n	80079ee <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	f003 0310 	and.w	r3, r3, #16
 8007a2a:	2b10      	cmp	r3, #16
 8007a2c:	d103      	bne.n	8007a36 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2210      	movs	r2, #16
 8007a34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7ff f8d2 	bl	8006be8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a44:	e00b      	b.n	8007a5e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7f9 fa96 	bl	8000f78 <HAL_UART_RxCpltCallback>
}
 8007a4c:	e007      	b.n	8007a5e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	699a      	ldr	r2, [r3, #24]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f042 0208 	orr.w	r2, r2, #8
 8007a5c:	619a      	str	r2, [r3, #24]
}
 8007a5e:	bf00      	nop
 8007a60:	3758      	adds	r7, #88	; 0x58
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b096      	sub	sp, #88	; 0x58
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007a74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a7e:	2b22      	cmp	r3, #34	; 0x22
 8007a80:	f040 8095 	bne.w	8007bae <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a92:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a94:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007a98:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aa2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa8:	1c9a      	adds	r2, r3, #2
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d178      	bne.n	8007bbe <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007adc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aea:	643b      	str	r3, [r7, #64]	; 0x40
 8007aec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007af0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1e6      	bne.n	8007acc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3308      	adds	r3, #8
 8007b04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	e853 3f00 	ldrex	r3, [r3]
 8007b0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	f023 0301 	bic.w	r3, r3, #1
 8007b14:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b26:	e841 2300 	strex	r3, r2, [r1]
 8007b2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1e5      	bne.n	8007afe <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2220      	movs	r2, #32
 8007b36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d12e      	bne.n	8007ba6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	e853 3f00 	ldrex	r3, [r3]
 8007b5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	f023 0310 	bic.w	r3, r3, #16
 8007b62:	647b      	str	r3, [r7, #68]	; 0x44
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	461a      	mov	r2, r3
 8007b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b6c:	61bb      	str	r3, [r7, #24]
 8007b6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b70:	6979      	ldr	r1, [r7, #20]
 8007b72:	69ba      	ldr	r2, [r7, #24]
 8007b74:	e841 2300 	strex	r3, r2, [r1]
 8007b78:	613b      	str	r3, [r7, #16]
   return(result);
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1e6      	bne.n	8007b4e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	f003 0310 	and.w	r3, r3, #16
 8007b8a:	2b10      	cmp	r3, #16
 8007b8c:	d103      	bne.n	8007b96 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2210      	movs	r2, #16
 8007b94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7ff f822 	bl	8006be8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ba4:	e00b      	b.n	8007bbe <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7f9 f9e6 	bl	8000f78 <HAL_UART_RxCpltCallback>
}
 8007bac:	e007      	b.n	8007bbe <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	699a      	ldr	r2, [r3, #24]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f042 0208 	orr.w	r2, r2, #8
 8007bbc:	619a      	str	r2, [r3, #24]
}
 8007bbe:	bf00      	nop
 8007bc0:	3758      	adds	r7, #88	; 0x58
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
	...

08007bc8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b0a6      	sub	sp, #152	; 0x98
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007bd6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bfe:	2b22      	cmp	r3, #34	; 0x22
 8007c00:	f040 814f 	bne.w	8007ea2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c0a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c0e:	e0f6      	b.n	8007dfe <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c16:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c1a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007c1e:	b2d9      	uxtb	r1, r3
 8007c20:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c2a:	400a      	ands	r2, r1
 8007c2c:	b2d2      	uxtb	r2, r2
 8007c2e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c34:	1c5a      	adds	r2, r3, #1
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	3b01      	subs	r3, #1
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007c56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c5a:	f003 0307 	and.w	r3, r3, #7
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d053      	beq.n	8007d0a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d011      	beq.n	8007c92 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00b      	beq.n	8007c92 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c88:	f043 0201 	orr.w	r2, r3, #1
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d011      	beq.n	8007cc2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007c9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00b      	beq.n	8007cc2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2202      	movs	r2, #2
 8007cb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cb8:	f043 0204 	orr.w	r2, r3, #4
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007cc6:	f003 0304 	and.w	r3, r3, #4
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d011      	beq.n	8007cf2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007cce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00b      	beq.n	8007cf2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2204      	movs	r2, #4
 8007ce0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ce8:	f043 0202 	orr.w	r2, r3, #2
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d006      	beq.n	8007d0a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7fe ff69 	bl	8006bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d173      	bne.n	8007dfe <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d1e:	e853 3f00 	ldrex	r3, [r3]
 8007d22:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d38:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d3a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007d3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d40:	e841 2300 	strex	r3, r2, [r1]
 8007d44:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1e4      	bne.n	8007d16 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	3308      	adds	r3, #8
 8007d52:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d56:	e853 3f00 	ldrex	r3, [r3]
 8007d5a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d62:	f023 0301 	bic.w	r3, r3, #1
 8007d66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	3308      	adds	r3, #8
 8007d6e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007d70:	657a      	str	r2, [r7, #84]	; 0x54
 8007d72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d78:	e841 2300 	strex	r3, r2, [r1]
 8007d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1e3      	bne.n	8007d4c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2220      	movs	r2, #32
 8007d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d12e      	bne.n	8007df8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da8:	e853 3f00 	ldrex	r3, [r3]
 8007dac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db0:	f023 0310 	bic.w	r3, r3, #16
 8007db4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dbe:	643b      	str	r3, [r7, #64]	; 0x40
 8007dc0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dc6:	e841 2300 	strex	r3, r2, [r1]
 8007dca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1e6      	bne.n	8007da0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	69db      	ldr	r3, [r3, #28]
 8007dd8:	f003 0310 	and.w	r3, r3, #16
 8007ddc:	2b10      	cmp	r3, #16
 8007dde:	d103      	bne.n	8007de8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2210      	movs	r2, #16
 8007de6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7fe fef9 	bl	8006be8 <HAL_UARTEx_RxEventCallback>
 8007df6:	e002      	b.n	8007dfe <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7f9 f8bd 	bl	8000f78 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007dfe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d006      	beq.n	8007e14 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007e06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f47f aefe 	bne.w	8007c10 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e1a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007e1e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d045      	beq.n	8007eb2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007e2c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d23e      	bcs.n	8007eb2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3308      	adds	r3, #8
 8007e3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	e853 3f00 	ldrex	r3, [r3]
 8007e42:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e4a:	673b      	str	r3, [r7, #112]	; 0x70
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3308      	adds	r3, #8
 8007e52:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e5c:	e841 2300 	strex	r3, r2, [r1]
 8007e60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e5      	bne.n	8007e34 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a14      	ldr	r2, [pc, #80]	; (8007ebc <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007e6c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	e853 3f00 	ldrex	r3, [r3]
 8007e7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	f043 0320 	orr.w	r3, r3, #32
 8007e82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e8c:	61bb      	str	r3, [r7, #24]
 8007e8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e90:	6979      	ldr	r1, [r7, #20]
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	e841 2300 	strex	r3, r2, [r1]
 8007e98:	613b      	str	r3, [r7, #16]
   return(result);
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1e6      	bne.n	8007e6e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ea0:	e007      	b.n	8007eb2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	699a      	ldr	r2, [r3, #24]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f042 0208 	orr.w	r2, r2, #8
 8007eb0:	619a      	str	r2, [r3, #24]
}
 8007eb2:	bf00      	nop
 8007eb4:	3798      	adds	r7, #152	; 0x98
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	08007907 	.word	0x08007907

08007ec0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b0a8      	sub	sp, #160	; 0xa0
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ece:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	69db      	ldr	r3, [r3, #28]
 8007ed8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ef6:	2b22      	cmp	r3, #34	; 0x22
 8007ef8:	f040 8153 	bne.w	80081a2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f02:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f06:	e0fa      	b.n	80080fe <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007f1a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007f1e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007f22:	4013      	ands	r3, r2
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f30:	1c9a      	adds	r2, r3, #2
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	69db      	ldr	r3, [r3, #28]
 8007f4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007f52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f56:	f003 0307 	and.w	r3, r3, #7
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d053      	beq.n	8008006 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d011      	beq.n	8007f8e <UART_RxISR_16BIT_FIFOEN+0xce>
 8007f6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00b      	beq.n	8007f8e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f84:	f043 0201 	orr.w	r2, r3, #1
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d011      	beq.n	8007fbe <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007f9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f9e:	f003 0301 	and.w	r3, r3, #1
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00b      	beq.n	8007fbe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2202      	movs	r2, #2
 8007fac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fb4:	f043 0204 	orr.w	r2, r3, #4
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fc2:	f003 0304 	and.w	r3, r3, #4
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d011      	beq.n	8007fee <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007fca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00b      	beq.n	8007fee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2204      	movs	r2, #4
 8007fdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fe4:	f043 0202 	orr.w	r2, r3, #2
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d006      	beq.n	8008006 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7fe fdeb 	bl	8006bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800800c:	b29b      	uxth	r3, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	d175      	bne.n	80080fe <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800801a:	e853 3f00 	ldrex	r3, [r3]
 800801e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008022:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008026:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008034:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008036:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008038:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800803a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800803c:	e841 2300 	strex	r3, r2, [r1]
 8008040:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008042:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e4      	bne.n	8008012 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3308      	adds	r3, #8
 800804e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008052:	e853 3f00 	ldrex	r3, [r3]
 8008056:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800805a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800805e:	f023 0301 	bic.w	r3, r3, #1
 8008062:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3308      	adds	r3, #8
 800806c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008070:	65ba      	str	r2, [r7, #88]	; 0x58
 8008072:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008076:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800807e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e1      	bne.n	8008048 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2220      	movs	r2, #32
 8008088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008096:	2b01      	cmp	r3, #1
 8008098:	d12e      	bne.n	80080f8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a8:	e853 3f00 	ldrex	r3, [r3]
 80080ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b0:	f023 0310 	bic.w	r3, r3, #16
 80080b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080be:	647b      	str	r3, [r7, #68]	; 0x44
 80080c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080c6:	e841 2300 	strex	r3, r2, [r1]
 80080ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1e6      	bne.n	80080a0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	69db      	ldr	r3, [r3, #28]
 80080d8:	f003 0310 	and.w	r3, r3, #16
 80080dc:	2b10      	cmp	r3, #16
 80080de:	d103      	bne.n	80080e8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2210      	movs	r2, #16
 80080e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7fe fd79 	bl	8006be8 <HAL_UARTEx_RxEventCallback>
 80080f6:	e002      	b.n	80080fe <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7f8 ff3d 	bl	8000f78 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008102:	2b00      	cmp	r3, #0
 8008104:	d006      	beq.n	8008114 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008106:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800810a:	f003 0320 	and.w	r3, r3, #32
 800810e:	2b00      	cmp	r3, #0
 8008110:	f47f aefa 	bne.w	8007f08 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800811a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800811e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008122:	2b00      	cmp	r3, #0
 8008124:	d045      	beq.n	80081b2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800812c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008130:	429a      	cmp	r2, r3
 8008132:	d23e      	bcs.n	80081b2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	3308      	adds	r3, #8
 800813a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813e:	e853 3f00 	ldrex	r3, [r3]
 8008142:	623b      	str	r3, [r7, #32]
   return(result);
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800814a:	677b      	str	r3, [r7, #116]	; 0x74
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3308      	adds	r3, #8
 8008152:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008154:	633a      	str	r2, [r7, #48]	; 0x30
 8008156:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008158:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800815a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800815c:	e841 2300 	strex	r3, r2, [r1]
 8008160:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e5      	bne.n	8008134 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a14      	ldr	r2, [pc, #80]	; (80081bc <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800816c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	e853 3f00 	ldrex	r3, [r3]
 800817a:	60fb      	str	r3, [r7, #12]
   return(result);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f043 0320 	orr.w	r3, r3, #32
 8008182:	673b      	str	r3, [r7, #112]	; 0x70
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	461a      	mov	r2, r3
 800818a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800818c:	61fb      	str	r3, [r7, #28]
 800818e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008190:	69b9      	ldr	r1, [r7, #24]
 8008192:	69fa      	ldr	r2, [r7, #28]
 8008194:	e841 2300 	strex	r3, r2, [r1]
 8008198:	617b      	str	r3, [r7, #20]
   return(result);
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1e6      	bne.n	800816e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081a0:	e007      	b.n	80081b2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	699a      	ldr	r2, [r3, #24]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f042 0208 	orr.w	r2, r2, #8
 80081b0:	619a      	str	r2, [r3, #24]
}
 80081b2:	bf00      	nop
 80081b4:	37a0      	adds	r7, #160	; 0xa0
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	08007a67 	.word	0x08007a67

080081c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800820a:	2b01      	cmp	r3, #1
 800820c:	d101      	bne.n	8008212 <HAL_UARTEx_DisableFifoMode+0x16>
 800820e:	2302      	movs	r3, #2
 8008210:	e027      	b.n	8008262 <HAL_UARTEx_DisableFifoMode+0x66>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2224      	movs	r2, #36	; 0x24
 800821e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f022 0201 	bic.w	r2, r2, #1
 8008238:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008240:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2220      	movs	r2, #32
 8008254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800827e:	2b01      	cmp	r3, #1
 8008280:	d101      	bne.n	8008286 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008282:	2302      	movs	r3, #2
 8008284:	e02d      	b.n	80082e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2224      	movs	r2, #36	; 0x24
 8008292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f022 0201 	bic.w	r2, r2, #1
 80082ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	430a      	orrs	r2, r1
 80082c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f850 	bl	8008368 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2220      	movs	r2, #32
 80082d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d101      	bne.n	8008302 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082fe:	2302      	movs	r3, #2
 8008300:	e02d      	b.n	800835e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2224      	movs	r2, #36	; 0x24
 800830e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f022 0201 	bic.w	r2, r2, #1
 8008328:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	430a      	orrs	r2, r1
 800833c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f812 	bl	8008368 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2220      	movs	r2, #32
 8008350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008374:	2b00      	cmp	r3, #0
 8008376:	d108      	bne.n	800838a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008388:	e031      	b.n	80083ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800838a:	2308      	movs	r3, #8
 800838c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800838e:	2308      	movs	r3, #8
 8008390:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	0e5b      	lsrs	r3, r3, #25
 800839a:	b2db      	uxtb	r3, r3
 800839c:	f003 0307 	and.w	r3, r3, #7
 80083a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	0f5b      	lsrs	r3, r3, #29
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	f003 0307 	and.w	r3, r3, #7
 80083b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083b2:	7bbb      	ldrb	r3, [r7, #14]
 80083b4:	7b3a      	ldrb	r2, [r7, #12]
 80083b6:	4911      	ldr	r1, [pc, #68]	; (80083fc <UARTEx_SetNbDataToProcess+0x94>)
 80083b8:	5c8a      	ldrb	r2, [r1, r2]
 80083ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80083be:	7b3a      	ldrb	r2, [r7, #12]
 80083c0:	490f      	ldr	r1, [pc, #60]	; (8008400 <UARTEx_SetNbDataToProcess+0x98>)
 80083c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	7b7a      	ldrb	r2, [r7, #13]
 80083d4:	4909      	ldr	r1, [pc, #36]	; (80083fc <UARTEx_SetNbDataToProcess+0x94>)
 80083d6:	5c8a      	ldrb	r2, [r1, r2]
 80083d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80083dc:	7b7a      	ldrb	r2, [r7, #13]
 80083de:	4908      	ldr	r1, [pc, #32]	; (8008400 <UARTEx_SetNbDataToProcess+0x98>)
 80083e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80083ee:	bf00      	nop
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	0800a5e8 	.word	0x0800a5e8
 8008400:	0800a5f0 	.word	0x0800a5f0

08008404 <atoi>:
 8008404:	220a      	movs	r2, #10
 8008406:	2100      	movs	r1, #0
 8008408:	f000 b9bc 	b.w	8008784 <strtol>

0800840c <__errno>:
 800840c:	4b01      	ldr	r3, [pc, #4]	; (8008414 <__errno+0x8>)
 800840e:	6818      	ldr	r0, [r3, #0]
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	20000074 	.word	0x20000074

08008418 <__libc_init_array>:
 8008418:	b570      	push	{r4, r5, r6, lr}
 800841a:	4d0d      	ldr	r5, [pc, #52]	; (8008450 <__libc_init_array+0x38>)
 800841c:	4c0d      	ldr	r4, [pc, #52]	; (8008454 <__libc_init_array+0x3c>)
 800841e:	1b64      	subs	r4, r4, r5
 8008420:	10a4      	asrs	r4, r4, #2
 8008422:	2600      	movs	r6, #0
 8008424:	42a6      	cmp	r6, r4
 8008426:	d109      	bne.n	800843c <__libc_init_array+0x24>
 8008428:	4d0b      	ldr	r5, [pc, #44]	; (8008458 <__libc_init_array+0x40>)
 800842a:	4c0c      	ldr	r4, [pc, #48]	; (800845c <__libc_init_array+0x44>)
 800842c:	f001 ff30 	bl	800a290 <_init>
 8008430:	1b64      	subs	r4, r4, r5
 8008432:	10a4      	asrs	r4, r4, #2
 8008434:	2600      	movs	r6, #0
 8008436:	42a6      	cmp	r6, r4
 8008438:	d105      	bne.n	8008446 <__libc_init_array+0x2e>
 800843a:	bd70      	pop	{r4, r5, r6, pc}
 800843c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008440:	4798      	blx	r3
 8008442:	3601      	adds	r6, #1
 8008444:	e7ee      	b.n	8008424 <__libc_init_array+0xc>
 8008446:	f855 3b04 	ldr.w	r3, [r5], #4
 800844a:	4798      	blx	r3
 800844c:	3601      	adds	r6, #1
 800844e:	e7f2      	b.n	8008436 <__libc_init_array+0x1e>
 8008450:	0800a868 	.word	0x0800a868
 8008454:	0800a868 	.word	0x0800a868
 8008458:	0800a868 	.word	0x0800a868
 800845c:	0800a86c 	.word	0x0800a86c

08008460 <memset>:
 8008460:	4402      	add	r2, r0
 8008462:	4603      	mov	r3, r0
 8008464:	4293      	cmp	r3, r2
 8008466:	d100      	bne.n	800846a <memset+0xa>
 8008468:	4770      	bx	lr
 800846a:	f803 1b01 	strb.w	r1, [r3], #1
 800846e:	e7f9      	b.n	8008464 <memset+0x4>

08008470 <iprintf>:
 8008470:	b40f      	push	{r0, r1, r2, r3}
 8008472:	4b0a      	ldr	r3, [pc, #40]	; (800849c <iprintf+0x2c>)
 8008474:	b513      	push	{r0, r1, r4, lr}
 8008476:	681c      	ldr	r4, [r3, #0]
 8008478:	b124      	cbz	r4, 8008484 <iprintf+0x14>
 800847a:	69a3      	ldr	r3, [r4, #24]
 800847c:	b913      	cbnz	r3, 8008484 <iprintf+0x14>
 800847e:	4620      	mov	r0, r4
 8008480:	f000 fa22 	bl	80088c8 <__sinit>
 8008484:	ab05      	add	r3, sp, #20
 8008486:	9a04      	ldr	r2, [sp, #16]
 8008488:	68a1      	ldr	r1, [r4, #8]
 800848a:	9301      	str	r3, [sp, #4]
 800848c:	4620      	mov	r0, r4
 800848e:	f000 ff1f 	bl	80092d0 <_vfiprintf_r>
 8008492:	b002      	add	sp, #8
 8008494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008498:	b004      	add	sp, #16
 800849a:	4770      	bx	lr
 800849c:	20000074 	.word	0x20000074

080084a0 <siprintf>:
 80084a0:	b40e      	push	{r1, r2, r3}
 80084a2:	b500      	push	{lr}
 80084a4:	b09c      	sub	sp, #112	; 0x70
 80084a6:	ab1d      	add	r3, sp, #116	; 0x74
 80084a8:	9002      	str	r0, [sp, #8]
 80084aa:	9006      	str	r0, [sp, #24]
 80084ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084b0:	4809      	ldr	r0, [pc, #36]	; (80084d8 <siprintf+0x38>)
 80084b2:	9107      	str	r1, [sp, #28]
 80084b4:	9104      	str	r1, [sp, #16]
 80084b6:	4909      	ldr	r1, [pc, #36]	; (80084dc <siprintf+0x3c>)
 80084b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80084bc:	9105      	str	r1, [sp, #20]
 80084be:	6800      	ldr	r0, [r0, #0]
 80084c0:	9301      	str	r3, [sp, #4]
 80084c2:	a902      	add	r1, sp, #8
 80084c4:	f000 fc08 	bl	8008cd8 <_svfiprintf_r>
 80084c8:	9b02      	ldr	r3, [sp, #8]
 80084ca:	2200      	movs	r2, #0
 80084cc:	701a      	strb	r2, [r3, #0]
 80084ce:	b01c      	add	sp, #112	; 0x70
 80084d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80084d4:	b003      	add	sp, #12
 80084d6:	4770      	bx	lr
 80084d8:	20000074 	.word	0x20000074
 80084dc:	ffff0208 	.word	0xffff0208

080084e0 <siscanf>:
 80084e0:	b40e      	push	{r1, r2, r3}
 80084e2:	b510      	push	{r4, lr}
 80084e4:	b09f      	sub	sp, #124	; 0x7c
 80084e6:	ac21      	add	r4, sp, #132	; 0x84
 80084e8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80084ec:	f854 2b04 	ldr.w	r2, [r4], #4
 80084f0:	9201      	str	r2, [sp, #4]
 80084f2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80084f6:	9004      	str	r0, [sp, #16]
 80084f8:	9008      	str	r0, [sp, #32]
 80084fa:	f7f7 fe9b 	bl	8000234 <strlen>
 80084fe:	4b0c      	ldr	r3, [pc, #48]	; (8008530 <siscanf+0x50>)
 8008500:	9005      	str	r0, [sp, #20]
 8008502:	9009      	str	r0, [sp, #36]	; 0x24
 8008504:	930d      	str	r3, [sp, #52]	; 0x34
 8008506:	480b      	ldr	r0, [pc, #44]	; (8008534 <siscanf+0x54>)
 8008508:	9a01      	ldr	r2, [sp, #4]
 800850a:	6800      	ldr	r0, [r0, #0]
 800850c:	9403      	str	r4, [sp, #12]
 800850e:	2300      	movs	r3, #0
 8008510:	9311      	str	r3, [sp, #68]	; 0x44
 8008512:	9316      	str	r3, [sp, #88]	; 0x58
 8008514:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008518:	f8ad 301e 	strh.w	r3, [sp, #30]
 800851c:	a904      	add	r1, sp, #16
 800851e:	4623      	mov	r3, r4
 8008520:	f000 fd34 	bl	8008f8c <__ssvfiscanf_r>
 8008524:	b01f      	add	sp, #124	; 0x7c
 8008526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800852a:	b003      	add	sp, #12
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	0800855b 	.word	0x0800855b
 8008534:	20000074 	.word	0x20000074

08008538 <__sread>:
 8008538:	b510      	push	{r4, lr}
 800853a:	460c      	mov	r4, r1
 800853c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008540:	f001 fadc 	bl	8009afc <_read_r>
 8008544:	2800      	cmp	r0, #0
 8008546:	bfab      	itete	ge
 8008548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800854a:	89a3      	ldrhlt	r3, [r4, #12]
 800854c:	181b      	addge	r3, r3, r0
 800854e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008552:	bfac      	ite	ge
 8008554:	6563      	strge	r3, [r4, #84]	; 0x54
 8008556:	81a3      	strhlt	r3, [r4, #12]
 8008558:	bd10      	pop	{r4, pc}

0800855a <__seofread>:
 800855a:	2000      	movs	r0, #0
 800855c:	4770      	bx	lr

0800855e <__swrite>:
 800855e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008562:	461f      	mov	r7, r3
 8008564:	898b      	ldrh	r3, [r1, #12]
 8008566:	05db      	lsls	r3, r3, #23
 8008568:	4605      	mov	r5, r0
 800856a:	460c      	mov	r4, r1
 800856c:	4616      	mov	r6, r2
 800856e:	d505      	bpl.n	800857c <__swrite+0x1e>
 8008570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008574:	2302      	movs	r3, #2
 8008576:	2200      	movs	r2, #0
 8008578:	f000 fa58 	bl	8008a2c <_lseek_r>
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008586:	81a3      	strh	r3, [r4, #12]
 8008588:	4632      	mov	r2, r6
 800858a:	463b      	mov	r3, r7
 800858c:	4628      	mov	r0, r5
 800858e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008592:	f000 b901 	b.w	8008798 <_write_r>

08008596 <__sseek>:
 8008596:	b510      	push	{r4, lr}
 8008598:	460c      	mov	r4, r1
 800859a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800859e:	f000 fa45 	bl	8008a2c <_lseek_r>
 80085a2:	1c43      	adds	r3, r0, #1
 80085a4:	89a3      	ldrh	r3, [r4, #12]
 80085a6:	bf15      	itete	ne
 80085a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80085aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085b2:	81a3      	strheq	r3, [r4, #12]
 80085b4:	bf18      	it	ne
 80085b6:	81a3      	strhne	r3, [r4, #12]
 80085b8:	bd10      	pop	{r4, pc}

080085ba <__sclose>:
 80085ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085be:	f000 b91b 	b.w	80087f8 <_close_r>
	...

080085c4 <strtok>:
 80085c4:	4b16      	ldr	r3, [pc, #88]	; (8008620 <strtok+0x5c>)
 80085c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085c8:	681e      	ldr	r6, [r3, #0]
 80085ca:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80085cc:	4605      	mov	r5, r0
 80085ce:	b9fc      	cbnz	r4, 8008610 <strtok+0x4c>
 80085d0:	2050      	movs	r0, #80	; 0x50
 80085d2:	9101      	str	r1, [sp, #4]
 80085d4:	f000 fa3c 	bl	8008a50 <malloc>
 80085d8:	9901      	ldr	r1, [sp, #4]
 80085da:	65b0      	str	r0, [r6, #88]	; 0x58
 80085dc:	4602      	mov	r2, r0
 80085de:	b920      	cbnz	r0, 80085ea <strtok+0x26>
 80085e0:	4b10      	ldr	r3, [pc, #64]	; (8008624 <strtok+0x60>)
 80085e2:	4811      	ldr	r0, [pc, #68]	; (8008628 <strtok+0x64>)
 80085e4:	2157      	movs	r1, #87	; 0x57
 80085e6:	f000 f8e9 	bl	80087bc <__assert_func>
 80085ea:	e9c0 4400 	strd	r4, r4, [r0]
 80085ee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80085f2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80085f6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80085fa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80085fe:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008602:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008606:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800860a:	6184      	str	r4, [r0, #24]
 800860c:	7704      	strb	r4, [r0, #28]
 800860e:	6244      	str	r4, [r0, #36]	; 0x24
 8008610:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8008612:	2301      	movs	r3, #1
 8008614:	4628      	mov	r0, r5
 8008616:	b002      	add	sp, #8
 8008618:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800861c:	f000 b806 	b.w	800862c <__strtok_r>
 8008620:	20000074 	.word	0x20000074
 8008624:	0800a5fc 	.word	0x0800a5fc
 8008628:	0800a613 	.word	0x0800a613

0800862c <__strtok_r>:
 800862c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800862e:	b908      	cbnz	r0, 8008634 <__strtok_r+0x8>
 8008630:	6810      	ldr	r0, [r2, #0]
 8008632:	b188      	cbz	r0, 8008658 <__strtok_r+0x2c>
 8008634:	4604      	mov	r4, r0
 8008636:	4620      	mov	r0, r4
 8008638:	f814 5b01 	ldrb.w	r5, [r4], #1
 800863c:	460f      	mov	r7, r1
 800863e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008642:	b91e      	cbnz	r6, 800864c <__strtok_r+0x20>
 8008644:	b965      	cbnz	r5, 8008660 <__strtok_r+0x34>
 8008646:	6015      	str	r5, [r2, #0]
 8008648:	4628      	mov	r0, r5
 800864a:	e005      	b.n	8008658 <__strtok_r+0x2c>
 800864c:	42b5      	cmp	r5, r6
 800864e:	d1f6      	bne.n	800863e <__strtok_r+0x12>
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1f0      	bne.n	8008636 <__strtok_r+0xa>
 8008654:	6014      	str	r4, [r2, #0]
 8008656:	7003      	strb	r3, [r0, #0]
 8008658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800865a:	461c      	mov	r4, r3
 800865c:	e00c      	b.n	8008678 <__strtok_r+0x4c>
 800865e:	b915      	cbnz	r5, 8008666 <__strtok_r+0x3a>
 8008660:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008664:	460e      	mov	r6, r1
 8008666:	f816 5b01 	ldrb.w	r5, [r6], #1
 800866a:	42ab      	cmp	r3, r5
 800866c:	d1f7      	bne.n	800865e <__strtok_r+0x32>
 800866e:	2b00      	cmp	r3, #0
 8008670:	d0f3      	beq.n	800865a <__strtok_r+0x2e>
 8008672:	2300      	movs	r3, #0
 8008674:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008678:	6014      	str	r4, [r2, #0]
 800867a:	e7ed      	b.n	8008658 <__strtok_r+0x2c>

0800867c <_strtol_l.constprop.0>:
 800867c:	2b01      	cmp	r3, #1
 800867e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008682:	d001      	beq.n	8008688 <_strtol_l.constprop.0+0xc>
 8008684:	2b24      	cmp	r3, #36	; 0x24
 8008686:	d906      	bls.n	8008696 <_strtol_l.constprop.0+0x1a>
 8008688:	f7ff fec0 	bl	800840c <__errno>
 800868c:	2316      	movs	r3, #22
 800868e:	6003      	str	r3, [r0, #0]
 8008690:	2000      	movs	r0, #0
 8008692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008696:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800877c <_strtol_l.constprop.0+0x100>
 800869a:	460d      	mov	r5, r1
 800869c:	462e      	mov	r6, r5
 800869e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086a2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80086a6:	f017 0708 	ands.w	r7, r7, #8
 80086aa:	d1f7      	bne.n	800869c <_strtol_l.constprop.0+0x20>
 80086ac:	2c2d      	cmp	r4, #45	; 0x2d
 80086ae:	d132      	bne.n	8008716 <_strtol_l.constprop.0+0x9a>
 80086b0:	782c      	ldrb	r4, [r5, #0]
 80086b2:	2701      	movs	r7, #1
 80086b4:	1cb5      	adds	r5, r6, #2
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d05b      	beq.n	8008772 <_strtol_l.constprop.0+0xf6>
 80086ba:	2b10      	cmp	r3, #16
 80086bc:	d109      	bne.n	80086d2 <_strtol_l.constprop.0+0x56>
 80086be:	2c30      	cmp	r4, #48	; 0x30
 80086c0:	d107      	bne.n	80086d2 <_strtol_l.constprop.0+0x56>
 80086c2:	782c      	ldrb	r4, [r5, #0]
 80086c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80086c8:	2c58      	cmp	r4, #88	; 0x58
 80086ca:	d14d      	bne.n	8008768 <_strtol_l.constprop.0+0xec>
 80086cc:	786c      	ldrb	r4, [r5, #1]
 80086ce:	2310      	movs	r3, #16
 80086d0:	3502      	adds	r5, #2
 80086d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80086d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80086da:	f04f 0c00 	mov.w	ip, #0
 80086de:	fbb8 f9f3 	udiv	r9, r8, r3
 80086e2:	4666      	mov	r6, ip
 80086e4:	fb03 8a19 	mls	sl, r3, r9, r8
 80086e8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80086ec:	f1be 0f09 	cmp.w	lr, #9
 80086f0:	d816      	bhi.n	8008720 <_strtol_l.constprop.0+0xa4>
 80086f2:	4674      	mov	r4, lr
 80086f4:	42a3      	cmp	r3, r4
 80086f6:	dd24      	ble.n	8008742 <_strtol_l.constprop.0+0xc6>
 80086f8:	f1bc 0f00 	cmp.w	ip, #0
 80086fc:	db1e      	blt.n	800873c <_strtol_l.constprop.0+0xc0>
 80086fe:	45b1      	cmp	r9, r6
 8008700:	d31c      	bcc.n	800873c <_strtol_l.constprop.0+0xc0>
 8008702:	d101      	bne.n	8008708 <_strtol_l.constprop.0+0x8c>
 8008704:	45a2      	cmp	sl, r4
 8008706:	db19      	blt.n	800873c <_strtol_l.constprop.0+0xc0>
 8008708:	fb06 4603 	mla	r6, r6, r3, r4
 800870c:	f04f 0c01 	mov.w	ip, #1
 8008710:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008714:	e7e8      	b.n	80086e8 <_strtol_l.constprop.0+0x6c>
 8008716:	2c2b      	cmp	r4, #43	; 0x2b
 8008718:	bf04      	itt	eq
 800871a:	782c      	ldrbeq	r4, [r5, #0]
 800871c:	1cb5      	addeq	r5, r6, #2
 800871e:	e7ca      	b.n	80086b6 <_strtol_l.constprop.0+0x3a>
 8008720:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008724:	f1be 0f19 	cmp.w	lr, #25
 8008728:	d801      	bhi.n	800872e <_strtol_l.constprop.0+0xb2>
 800872a:	3c37      	subs	r4, #55	; 0x37
 800872c:	e7e2      	b.n	80086f4 <_strtol_l.constprop.0+0x78>
 800872e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008732:	f1be 0f19 	cmp.w	lr, #25
 8008736:	d804      	bhi.n	8008742 <_strtol_l.constprop.0+0xc6>
 8008738:	3c57      	subs	r4, #87	; 0x57
 800873a:	e7db      	b.n	80086f4 <_strtol_l.constprop.0+0x78>
 800873c:	f04f 3cff 	mov.w	ip, #4294967295
 8008740:	e7e6      	b.n	8008710 <_strtol_l.constprop.0+0x94>
 8008742:	f1bc 0f00 	cmp.w	ip, #0
 8008746:	da05      	bge.n	8008754 <_strtol_l.constprop.0+0xd8>
 8008748:	2322      	movs	r3, #34	; 0x22
 800874a:	6003      	str	r3, [r0, #0]
 800874c:	4646      	mov	r6, r8
 800874e:	b942      	cbnz	r2, 8008762 <_strtol_l.constprop.0+0xe6>
 8008750:	4630      	mov	r0, r6
 8008752:	e79e      	b.n	8008692 <_strtol_l.constprop.0+0x16>
 8008754:	b107      	cbz	r7, 8008758 <_strtol_l.constprop.0+0xdc>
 8008756:	4276      	negs	r6, r6
 8008758:	2a00      	cmp	r2, #0
 800875a:	d0f9      	beq.n	8008750 <_strtol_l.constprop.0+0xd4>
 800875c:	f1bc 0f00 	cmp.w	ip, #0
 8008760:	d000      	beq.n	8008764 <_strtol_l.constprop.0+0xe8>
 8008762:	1e69      	subs	r1, r5, #1
 8008764:	6011      	str	r1, [r2, #0]
 8008766:	e7f3      	b.n	8008750 <_strtol_l.constprop.0+0xd4>
 8008768:	2430      	movs	r4, #48	; 0x30
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1b1      	bne.n	80086d2 <_strtol_l.constprop.0+0x56>
 800876e:	2308      	movs	r3, #8
 8008770:	e7af      	b.n	80086d2 <_strtol_l.constprop.0+0x56>
 8008772:	2c30      	cmp	r4, #48	; 0x30
 8008774:	d0a5      	beq.n	80086c2 <_strtol_l.constprop.0+0x46>
 8008776:	230a      	movs	r3, #10
 8008778:	e7ab      	b.n	80086d2 <_strtol_l.constprop.0+0x56>
 800877a:	bf00      	nop
 800877c:	0800a6ad 	.word	0x0800a6ad

08008780 <_strtol_r>:
 8008780:	f7ff bf7c 	b.w	800867c <_strtol_l.constprop.0>

08008784 <strtol>:
 8008784:	4613      	mov	r3, r2
 8008786:	460a      	mov	r2, r1
 8008788:	4601      	mov	r1, r0
 800878a:	4802      	ldr	r0, [pc, #8]	; (8008794 <strtol+0x10>)
 800878c:	6800      	ldr	r0, [r0, #0]
 800878e:	f7ff bf75 	b.w	800867c <_strtol_l.constprop.0>
 8008792:	bf00      	nop
 8008794:	20000074 	.word	0x20000074

08008798 <_write_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4d07      	ldr	r5, [pc, #28]	; (80087b8 <_write_r+0x20>)
 800879c:	4604      	mov	r4, r0
 800879e:	4608      	mov	r0, r1
 80087a0:	4611      	mov	r1, r2
 80087a2:	2200      	movs	r2, #0
 80087a4:	602a      	str	r2, [r5, #0]
 80087a6:	461a      	mov	r2, r3
 80087a8:	f7f8 fcab 	bl	8001102 <_write>
 80087ac:	1c43      	adds	r3, r0, #1
 80087ae:	d102      	bne.n	80087b6 <_write_r+0x1e>
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	b103      	cbz	r3, 80087b6 <_write_r+0x1e>
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	bd38      	pop	{r3, r4, r5, pc}
 80087b8:	20000300 	.word	0x20000300

080087bc <__assert_func>:
 80087bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087be:	4614      	mov	r4, r2
 80087c0:	461a      	mov	r2, r3
 80087c2:	4b09      	ldr	r3, [pc, #36]	; (80087e8 <__assert_func+0x2c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4605      	mov	r5, r0
 80087c8:	68d8      	ldr	r0, [r3, #12]
 80087ca:	b14c      	cbz	r4, 80087e0 <__assert_func+0x24>
 80087cc:	4b07      	ldr	r3, [pc, #28]	; (80087ec <__assert_func+0x30>)
 80087ce:	9100      	str	r1, [sp, #0]
 80087d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087d4:	4906      	ldr	r1, [pc, #24]	; (80087f0 <__assert_func+0x34>)
 80087d6:	462b      	mov	r3, r5
 80087d8:	f000 f8f4 	bl	80089c4 <fiprintf>
 80087dc:	f001 fb56 	bl	8009e8c <abort>
 80087e0:	4b04      	ldr	r3, [pc, #16]	; (80087f4 <__assert_func+0x38>)
 80087e2:	461c      	mov	r4, r3
 80087e4:	e7f3      	b.n	80087ce <__assert_func+0x12>
 80087e6:	bf00      	nop
 80087e8:	20000074 	.word	0x20000074
 80087ec:	0800a670 	.word	0x0800a670
 80087f0:	0800a67d 	.word	0x0800a67d
 80087f4:	0800a6ab 	.word	0x0800a6ab

080087f8 <_close_r>:
 80087f8:	b538      	push	{r3, r4, r5, lr}
 80087fa:	4d06      	ldr	r5, [pc, #24]	; (8008814 <_close_r+0x1c>)
 80087fc:	2300      	movs	r3, #0
 80087fe:	4604      	mov	r4, r0
 8008800:	4608      	mov	r0, r1
 8008802:	602b      	str	r3, [r5, #0]
 8008804:	f7f8 fc99 	bl	800113a <_close>
 8008808:	1c43      	adds	r3, r0, #1
 800880a:	d102      	bne.n	8008812 <_close_r+0x1a>
 800880c:	682b      	ldr	r3, [r5, #0]
 800880e:	b103      	cbz	r3, 8008812 <_close_r+0x1a>
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	bd38      	pop	{r3, r4, r5, pc}
 8008814:	20000300 	.word	0x20000300

08008818 <std>:
 8008818:	2300      	movs	r3, #0
 800881a:	b510      	push	{r4, lr}
 800881c:	4604      	mov	r4, r0
 800881e:	e9c0 3300 	strd	r3, r3, [r0]
 8008822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008826:	6083      	str	r3, [r0, #8]
 8008828:	8181      	strh	r1, [r0, #12]
 800882a:	6643      	str	r3, [r0, #100]	; 0x64
 800882c:	81c2      	strh	r2, [r0, #14]
 800882e:	6183      	str	r3, [r0, #24]
 8008830:	4619      	mov	r1, r3
 8008832:	2208      	movs	r2, #8
 8008834:	305c      	adds	r0, #92	; 0x5c
 8008836:	f7ff fe13 	bl	8008460 <memset>
 800883a:	4b05      	ldr	r3, [pc, #20]	; (8008850 <std+0x38>)
 800883c:	6263      	str	r3, [r4, #36]	; 0x24
 800883e:	4b05      	ldr	r3, [pc, #20]	; (8008854 <std+0x3c>)
 8008840:	62a3      	str	r3, [r4, #40]	; 0x28
 8008842:	4b05      	ldr	r3, [pc, #20]	; (8008858 <std+0x40>)
 8008844:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008846:	4b05      	ldr	r3, [pc, #20]	; (800885c <std+0x44>)
 8008848:	6224      	str	r4, [r4, #32]
 800884a:	6323      	str	r3, [r4, #48]	; 0x30
 800884c:	bd10      	pop	{r4, pc}
 800884e:	bf00      	nop
 8008850:	08008539 	.word	0x08008539
 8008854:	0800855f 	.word	0x0800855f
 8008858:	08008597 	.word	0x08008597
 800885c:	080085bb 	.word	0x080085bb

08008860 <_cleanup_r>:
 8008860:	4901      	ldr	r1, [pc, #4]	; (8008868 <_cleanup_r+0x8>)
 8008862:	f000 b8c1 	b.w	80089e8 <_fwalk_reent>
 8008866:	bf00      	nop
 8008868:	08009fa9 	.word	0x08009fa9

0800886c <__sfmoreglue>:
 800886c:	b570      	push	{r4, r5, r6, lr}
 800886e:	2268      	movs	r2, #104	; 0x68
 8008870:	1e4d      	subs	r5, r1, #1
 8008872:	4355      	muls	r5, r2
 8008874:	460e      	mov	r6, r1
 8008876:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800887a:	f000 f95d 	bl	8008b38 <_malloc_r>
 800887e:	4604      	mov	r4, r0
 8008880:	b140      	cbz	r0, 8008894 <__sfmoreglue+0x28>
 8008882:	2100      	movs	r1, #0
 8008884:	e9c0 1600 	strd	r1, r6, [r0]
 8008888:	300c      	adds	r0, #12
 800888a:	60a0      	str	r0, [r4, #8]
 800888c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008890:	f7ff fde6 	bl	8008460 <memset>
 8008894:	4620      	mov	r0, r4
 8008896:	bd70      	pop	{r4, r5, r6, pc}

08008898 <__sfp_lock_acquire>:
 8008898:	4801      	ldr	r0, [pc, #4]	; (80088a0 <__sfp_lock_acquire+0x8>)
 800889a:	f000 b8c5 	b.w	8008a28 <__retarget_lock_acquire_recursive>
 800889e:	bf00      	nop
 80088a0:	200002f5 	.word	0x200002f5

080088a4 <__sfp_lock_release>:
 80088a4:	4801      	ldr	r0, [pc, #4]	; (80088ac <__sfp_lock_release+0x8>)
 80088a6:	f000 b8c0 	b.w	8008a2a <__retarget_lock_release_recursive>
 80088aa:	bf00      	nop
 80088ac:	200002f5 	.word	0x200002f5

080088b0 <__sinit_lock_acquire>:
 80088b0:	4801      	ldr	r0, [pc, #4]	; (80088b8 <__sinit_lock_acquire+0x8>)
 80088b2:	f000 b8b9 	b.w	8008a28 <__retarget_lock_acquire_recursive>
 80088b6:	bf00      	nop
 80088b8:	200002f6 	.word	0x200002f6

080088bc <__sinit_lock_release>:
 80088bc:	4801      	ldr	r0, [pc, #4]	; (80088c4 <__sinit_lock_release+0x8>)
 80088be:	f000 b8b4 	b.w	8008a2a <__retarget_lock_release_recursive>
 80088c2:	bf00      	nop
 80088c4:	200002f6 	.word	0x200002f6

080088c8 <__sinit>:
 80088c8:	b510      	push	{r4, lr}
 80088ca:	4604      	mov	r4, r0
 80088cc:	f7ff fff0 	bl	80088b0 <__sinit_lock_acquire>
 80088d0:	69a3      	ldr	r3, [r4, #24]
 80088d2:	b11b      	cbz	r3, 80088dc <__sinit+0x14>
 80088d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088d8:	f7ff bff0 	b.w	80088bc <__sinit_lock_release>
 80088dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80088e0:	6523      	str	r3, [r4, #80]	; 0x50
 80088e2:	4b13      	ldr	r3, [pc, #76]	; (8008930 <__sinit+0x68>)
 80088e4:	4a13      	ldr	r2, [pc, #76]	; (8008934 <__sinit+0x6c>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80088ea:	42a3      	cmp	r3, r4
 80088ec:	bf04      	itt	eq
 80088ee:	2301      	moveq	r3, #1
 80088f0:	61a3      	streq	r3, [r4, #24]
 80088f2:	4620      	mov	r0, r4
 80088f4:	f000 f820 	bl	8008938 <__sfp>
 80088f8:	6060      	str	r0, [r4, #4]
 80088fa:	4620      	mov	r0, r4
 80088fc:	f000 f81c 	bl	8008938 <__sfp>
 8008900:	60a0      	str	r0, [r4, #8]
 8008902:	4620      	mov	r0, r4
 8008904:	f000 f818 	bl	8008938 <__sfp>
 8008908:	2200      	movs	r2, #0
 800890a:	60e0      	str	r0, [r4, #12]
 800890c:	2104      	movs	r1, #4
 800890e:	6860      	ldr	r0, [r4, #4]
 8008910:	f7ff ff82 	bl	8008818 <std>
 8008914:	68a0      	ldr	r0, [r4, #8]
 8008916:	2201      	movs	r2, #1
 8008918:	2109      	movs	r1, #9
 800891a:	f7ff ff7d 	bl	8008818 <std>
 800891e:	68e0      	ldr	r0, [r4, #12]
 8008920:	2202      	movs	r2, #2
 8008922:	2112      	movs	r1, #18
 8008924:	f7ff ff78 	bl	8008818 <std>
 8008928:	2301      	movs	r3, #1
 800892a:	61a3      	str	r3, [r4, #24]
 800892c:	e7d2      	b.n	80088d4 <__sinit+0xc>
 800892e:	bf00      	nop
 8008930:	0800a5f8 	.word	0x0800a5f8
 8008934:	08008861 	.word	0x08008861

08008938 <__sfp>:
 8008938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800893a:	4607      	mov	r7, r0
 800893c:	f7ff ffac 	bl	8008898 <__sfp_lock_acquire>
 8008940:	4b1e      	ldr	r3, [pc, #120]	; (80089bc <__sfp+0x84>)
 8008942:	681e      	ldr	r6, [r3, #0]
 8008944:	69b3      	ldr	r3, [r6, #24]
 8008946:	b913      	cbnz	r3, 800894e <__sfp+0x16>
 8008948:	4630      	mov	r0, r6
 800894a:	f7ff ffbd 	bl	80088c8 <__sinit>
 800894e:	3648      	adds	r6, #72	; 0x48
 8008950:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008954:	3b01      	subs	r3, #1
 8008956:	d503      	bpl.n	8008960 <__sfp+0x28>
 8008958:	6833      	ldr	r3, [r6, #0]
 800895a:	b30b      	cbz	r3, 80089a0 <__sfp+0x68>
 800895c:	6836      	ldr	r6, [r6, #0]
 800895e:	e7f7      	b.n	8008950 <__sfp+0x18>
 8008960:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008964:	b9d5      	cbnz	r5, 800899c <__sfp+0x64>
 8008966:	4b16      	ldr	r3, [pc, #88]	; (80089c0 <__sfp+0x88>)
 8008968:	60e3      	str	r3, [r4, #12]
 800896a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800896e:	6665      	str	r5, [r4, #100]	; 0x64
 8008970:	f000 f859 	bl	8008a26 <__retarget_lock_init_recursive>
 8008974:	f7ff ff96 	bl	80088a4 <__sfp_lock_release>
 8008978:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800897c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008980:	6025      	str	r5, [r4, #0]
 8008982:	61a5      	str	r5, [r4, #24]
 8008984:	2208      	movs	r2, #8
 8008986:	4629      	mov	r1, r5
 8008988:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800898c:	f7ff fd68 	bl	8008460 <memset>
 8008990:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008994:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008998:	4620      	mov	r0, r4
 800899a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800899c:	3468      	adds	r4, #104	; 0x68
 800899e:	e7d9      	b.n	8008954 <__sfp+0x1c>
 80089a0:	2104      	movs	r1, #4
 80089a2:	4638      	mov	r0, r7
 80089a4:	f7ff ff62 	bl	800886c <__sfmoreglue>
 80089a8:	4604      	mov	r4, r0
 80089aa:	6030      	str	r0, [r6, #0]
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d1d5      	bne.n	800895c <__sfp+0x24>
 80089b0:	f7ff ff78 	bl	80088a4 <__sfp_lock_release>
 80089b4:	230c      	movs	r3, #12
 80089b6:	603b      	str	r3, [r7, #0]
 80089b8:	e7ee      	b.n	8008998 <__sfp+0x60>
 80089ba:	bf00      	nop
 80089bc:	0800a5f8 	.word	0x0800a5f8
 80089c0:	ffff0001 	.word	0xffff0001

080089c4 <fiprintf>:
 80089c4:	b40e      	push	{r1, r2, r3}
 80089c6:	b503      	push	{r0, r1, lr}
 80089c8:	4601      	mov	r1, r0
 80089ca:	ab03      	add	r3, sp, #12
 80089cc:	4805      	ldr	r0, [pc, #20]	; (80089e4 <fiprintf+0x20>)
 80089ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80089d2:	6800      	ldr	r0, [r0, #0]
 80089d4:	9301      	str	r3, [sp, #4]
 80089d6:	f000 fc7b 	bl	80092d0 <_vfiprintf_r>
 80089da:	b002      	add	sp, #8
 80089dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80089e0:	b003      	add	sp, #12
 80089e2:	4770      	bx	lr
 80089e4:	20000074 	.word	0x20000074

080089e8 <_fwalk_reent>:
 80089e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089ec:	4606      	mov	r6, r0
 80089ee:	4688      	mov	r8, r1
 80089f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80089f4:	2700      	movs	r7, #0
 80089f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089fa:	f1b9 0901 	subs.w	r9, r9, #1
 80089fe:	d505      	bpl.n	8008a0c <_fwalk_reent+0x24>
 8008a00:	6824      	ldr	r4, [r4, #0]
 8008a02:	2c00      	cmp	r4, #0
 8008a04:	d1f7      	bne.n	80089f6 <_fwalk_reent+0xe>
 8008a06:	4638      	mov	r0, r7
 8008a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a0c:	89ab      	ldrh	r3, [r5, #12]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d907      	bls.n	8008a22 <_fwalk_reent+0x3a>
 8008a12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a16:	3301      	adds	r3, #1
 8008a18:	d003      	beq.n	8008a22 <_fwalk_reent+0x3a>
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	47c0      	blx	r8
 8008a20:	4307      	orrs	r7, r0
 8008a22:	3568      	adds	r5, #104	; 0x68
 8008a24:	e7e9      	b.n	80089fa <_fwalk_reent+0x12>

08008a26 <__retarget_lock_init_recursive>:
 8008a26:	4770      	bx	lr

08008a28 <__retarget_lock_acquire_recursive>:
 8008a28:	4770      	bx	lr

08008a2a <__retarget_lock_release_recursive>:
 8008a2a:	4770      	bx	lr

08008a2c <_lseek_r>:
 8008a2c:	b538      	push	{r3, r4, r5, lr}
 8008a2e:	4d07      	ldr	r5, [pc, #28]	; (8008a4c <_lseek_r+0x20>)
 8008a30:	4604      	mov	r4, r0
 8008a32:	4608      	mov	r0, r1
 8008a34:	4611      	mov	r1, r2
 8008a36:	2200      	movs	r2, #0
 8008a38:	602a      	str	r2, [r5, #0]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f7f8 fba4 	bl	8001188 <_lseek>
 8008a40:	1c43      	adds	r3, r0, #1
 8008a42:	d102      	bne.n	8008a4a <_lseek_r+0x1e>
 8008a44:	682b      	ldr	r3, [r5, #0]
 8008a46:	b103      	cbz	r3, 8008a4a <_lseek_r+0x1e>
 8008a48:	6023      	str	r3, [r4, #0]
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}
 8008a4c:	20000300 	.word	0x20000300

08008a50 <malloc>:
 8008a50:	4b02      	ldr	r3, [pc, #8]	; (8008a5c <malloc+0xc>)
 8008a52:	4601      	mov	r1, r0
 8008a54:	6818      	ldr	r0, [r3, #0]
 8008a56:	f000 b86f 	b.w	8008b38 <_malloc_r>
 8008a5a:	bf00      	nop
 8008a5c:	20000074 	.word	0x20000074

08008a60 <_free_r>:
 8008a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a62:	2900      	cmp	r1, #0
 8008a64:	d044      	beq.n	8008af0 <_free_r+0x90>
 8008a66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a6a:	9001      	str	r0, [sp, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a72:	bfb8      	it	lt
 8008a74:	18e4      	addlt	r4, r4, r3
 8008a76:	f001 fb61 	bl	800a13c <__malloc_lock>
 8008a7a:	4a1e      	ldr	r2, [pc, #120]	; (8008af4 <_free_r+0x94>)
 8008a7c:	9801      	ldr	r0, [sp, #4]
 8008a7e:	6813      	ldr	r3, [r2, #0]
 8008a80:	b933      	cbnz	r3, 8008a90 <_free_r+0x30>
 8008a82:	6063      	str	r3, [r4, #4]
 8008a84:	6014      	str	r4, [r2, #0]
 8008a86:	b003      	add	sp, #12
 8008a88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a8c:	f001 bb5c 	b.w	800a148 <__malloc_unlock>
 8008a90:	42a3      	cmp	r3, r4
 8008a92:	d908      	bls.n	8008aa6 <_free_r+0x46>
 8008a94:	6825      	ldr	r5, [r4, #0]
 8008a96:	1961      	adds	r1, r4, r5
 8008a98:	428b      	cmp	r3, r1
 8008a9a:	bf01      	itttt	eq
 8008a9c:	6819      	ldreq	r1, [r3, #0]
 8008a9e:	685b      	ldreq	r3, [r3, #4]
 8008aa0:	1949      	addeq	r1, r1, r5
 8008aa2:	6021      	streq	r1, [r4, #0]
 8008aa4:	e7ed      	b.n	8008a82 <_free_r+0x22>
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	b10b      	cbz	r3, 8008ab0 <_free_r+0x50>
 8008aac:	42a3      	cmp	r3, r4
 8008aae:	d9fa      	bls.n	8008aa6 <_free_r+0x46>
 8008ab0:	6811      	ldr	r1, [r2, #0]
 8008ab2:	1855      	adds	r5, r2, r1
 8008ab4:	42a5      	cmp	r5, r4
 8008ab6:	d10b      	bne.n	8008ad0 <_free_r+0x70>
 8008ab8:	6824      	ldr	r4, [r4, #0]
 8008aba:	4421      	add	r1, r4
 8008abc:	1854      	adds	r4, r2, r1
 8008abe:	42a3      	cmp	r3, r4
 8008ac0:	6011      	str	r1, [r2, #0]
 8008ac2:	d1e0      	bne.n	8008a86 <_free_r+0x26>
 8008ac4:	681c      	ldr	r4, [r3, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	6053      	str	r3, [r2, #4]
 8008aca:	4421      	add	r1, r4
 8008acc:	6011      	str	r1, [r2, #0]
 8008ace:	e7da      	b.n	8008a86 <_free_r+0x26>
 8008ad0:	d902      	bls.n	8008ad8 <_free_r+0x78>
 8008ad2:	230c      	movs	r3, #12
 8008ad4:	6003      	str	r3, [r0, #0]
 8008ad6:	e7d6      	b.n	8008a86 <_free_r+0x26>
 8008ad8:	6825      	ldr	r5, [r4, #0]
 8008ada:	1961      	adds	r1, r4, r5
 8008adc:	428b      	cmp	r3, r1
 8008ade:	bf04      	itt	eq
 8008ae0:	6819      	ldreq	r1, [r3, #0]
 8008ae2:	685b      	ldreq	r3, [r3, #4]
 8008ae4:	6063      	str	r3, [r4, #4]
 8008ae6:	bf04      	itt	eq
 8008ae8:	1949      	addeq	r1, r1, r5
 8008aea:	6021      	streq	r1, [r4, #0]
 8008aec:	6054      	str	r4, [r2, #4]
 8008aee:	e7ca      	b.n	8008a86 <_free_r+0x26>
 8008af0:	b003      	add	sp, #12
 8008af2:	bd30      	pop	{r4, r5, pc}
 8008af4:	200002f8 	.word	0x200002f8

08008af8 <sbrk_aligned>:
 8008af8:	b570      	push	{r4, r5, r6, lr}
 8008afa:	4e0e      	ldr	r6, [pc, #56]	; (8008b34 <sbrk_aligned+0x3c>)
 8008afc:	460c      	mov	r4, r1
 8008afe:	6831      	ldr	r1, [r6, #0]
 8008b00:	4605      	mov	r5, r0
 8008b02:	b911      	cbnz	r1, 8008b0a <sbrk_aligned+0x12>
 8008b04:	f001 f80c 	bl	8009b20 <_sbrk_r>
 8008b08:	6030      	str	r0, [r6, #0]
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	f001 f807 	bl	8009b20 <_sbrk_r>
 8008b12:	1c43      	adds	r3, r0, #1
 8008b14:	d00a      	beq.n	8008b2c <sbrk_aligned+0x34>
 8008b16:	1cc4      	adds	r4, r0, #3
 8008b18:	f024 0403 	bic.w	r4, r4, #3
 8008b1c:	42a0      	cmp	r0, r4
 8008b1e:	d007      	beq.n	8008b30 <sbrk_aligned+0x38>
 8008b20:	1a21      	subs	r1, r4, r0
 8008b22:	4628      	mov	r0, r5
 8008b24:	f000 fffc 	bl	8009b20 <_sbrk_r>
 8008b28:	3001      	adds	r0, #1
 8008b2a:	d101      	bne.n	8008b30 <sbrk_aligned+0x38>
 8008b2c:	f04f 34ff 	mov.w	r4, #4294967295
 8008b30:	4620      	mov	r0, r4
 8008b32:	bd70      	pop	{r4, r5, r6, pc}
 8008b34:	200002fc 	.word	0x200002fc

08008b38 <_malloc_r>:
 8008b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b3c:	1ccd      	adds	r5, r1, #3
 8008b3e:	f025 0503 	bic.w	r5, r5, #3
 8008b42:	3508      	adds	r5, #8
 8008b44:	2d0c      	cmp	r5, #12
 8008b46:	bf38      	it	cc
 8008b48:	250c      	movcc	r5, #12
 8008b4a:	2d00      	cmp	r5, #0
 8008b4c:	4607      	mov	r7, r0
 8008b4e:	db01      	blt.n	8008b54 <_malloc_r+0x1c>
 8008b50:	42a9      	cmp	r1, r5
 8008b52:	d905      	bls.n	8008b60 <_malloc_r+0x28>
 8008b54:	230c      	movs	r3, #12
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	2600      	movs	r6, #0
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b60:	4e2e      	ldr	r6, [pc, #184]	; (8008c1c <_malloc_r+0xe4>)
 8008b62:	f001 faeb 	bl	800a13c <__malloc_lock>
 8008b66:	6833      	ldr	r3, [r6, #0]
 8008b68:	461c      	mov	r4, r3
 8008b6a:	bb34      	cbnz	r4, 8008bba <_malloc_r+0x82>
 8008b6c:	4629      	mov	r1, r5
 8008b6e:	4638      	mov	r0, r7
 8008b70:	f7ff ffc2 	bl	8008af8 <sbrk_aligned>
 8008b74:	1c43      	adds	r3, r0, #1
 8008b76:	4604      	mov	r4, r0
 8008b78:	d14d      	bne.n	8008c16 <_malloc_r+0xde>
 8008b7a:	6834      	ldr	r4, [r6, #0]
 8008b7c:	4626      	mov	r6, r4
 8008b7e:	2e00      	cmp	r6, #0
 8008b80:	d140      	bne.n	8008c04 <_malloc_r+0xcc>
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	4631      	mov	r1, r6
 8008b86:	4638      	mov	r0, r7
 8008b88:	eb04 0803 	add.w	r8, r4, r3
 8008b8c:	f000 ffc8 	bl	8009b20 <_sbrk_r>
 8008b90:	4580      	cmp	r8, r0
 8008b92:	d13a      	bne.n	8008c0a <_malloc_r+0xd2>
 8008b94:	6821      	ldr	r1, [r4, #0]
 8008b96:	3503      	adds	r5, #3
 8008b98:	1a6d      	subs	r5, r5, r1
 8008b9a:	f025 0503 	bic.w	r5, r5, #3
 8008b9e:	3508      	adds	r5, #8
 8008ba0:	2d0c      	cmp	r5, #12
 8008ba2:	bf38      	it	cc
 8008ba4:	250c      	movcc	r5, #12
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	4638      	mov	r0, r7
 8008baa:	f7ff ffa5 	bl	8008af8 <sbrk_aligned>
 8008bae:	3001      	adds	r0, #1
 8008bb0:	d02b      	beq.n	8008c0a <_malloc_r+0xd2>
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	442b      	add	r3, r5
 8008bb6:	6023      	str	r3, [r4, #0]
 8008bb8:	e00e      	b.n	8008bd8 <_malloc_r+0xa0>
 8008bba:	6822      	ldr	r2, [r4, #0]
 8008bbc:	1b52      	subs	r2, r2, r5
 8008bbe:	d41e      	bmi.n	8008bfe <_malloc_r+0xc6>
 8008bc0:	2a0b      	cmp	r2, #11
 8008bc2:	d916      	bls.n	8008bf2 <_malloc_r+0xba>
 8008bc4:	1961      	adds	r1, r4, r5
 8008bc6:	42a3      	cmp	r3, r4
 8008bc8:	6025      	str	r5, [r4, #0]
 8008bca:	bf18      	it	ne
 8008bcc:	6059      	strne	r1, [r3, #4]
 8008bce:	6863      	ldr	r3, [r4, #4]
 8008bd0:	bf08      	it	eq
 8008bd2:	6031      	streq	r1, [r6, #0]
 8008bd4:	5162      	str	r2, [r4, r5]
 8008bd6:	604b      	str	r3, [r1, #4]
 8008bd8:	4638      	mov	r0, r7
 8008bda:	f104 060b 	add.w	r6, r4, #11
 8008bde:	f001 fab3 	bl	800a148 <__malloc_unlock>
 8008be2:	f026 0607 	bic.w	r6, r6, #7
 8008be6:	1d23      	adds	r3, r4, #4
 8008be8:	1af2      	subs	r2, r6, r3
 8008bea:	d0b6      	beq.n	8008b5a <_malloc_r+0x22>
 8008bec:	1b9b      	subs	r3, r3, r6
 8008bee:	50a3      	str	r3, [r4, r2]
 8008bf0:	e7b3      	b.n	8008b5a <_malloc_r+0x22>
 8008bf2:	6862      	ldr	r2, [r4, #4]
 8008bf4:	42a3      	cmp	r3, r4
 8008bf6:	bf0c      	ite	eq
 8008bf8:	6032      	streq	r2, [r6, #0]
 8008bfa:	605a      	strne	r2, [r3, #4]
 8008bfc:	e7ec      	b.n	8008bd8 <_malloc_r+0xa0>
 8008bfe:	4623      	mov	r3, r4
 8008c00:	6864      	ldr	r4, [r4, #4]
 8008c02:	e7b2      	b.n	8008b6a <_malloc_r+0x32>
 8008c04:	4634      	mov	r4, r6
 8008c06:	6876      	ldr	r6, [r6, #4]
 8008c08:	e7b9      	b.n	8008b7e <_malloc_r+0x46>
 8008c0a:	230c      	movs	r3, #12
 8008c0c:	603b      	str	r3, [r7, #0]
 8008c0e:	4638      	mov	r0, r7
 8008c10:	f001 fa9a 	bl	800a148 <__malloc_unlock>
 8008c14:	e7a1      	b.n	8008b5a <_malloc_r+0x22>
 8008c16:	6025      	str	r5, [r4, #0]
 8008c18:	e7de      	b.n	8008bd8 <_malloc_r+0xa0>
 8008c1a:	bf00      	nop
 8008c1c:	200002f8 	.word	0x200002f8

08008c20 <__ssputs_r>:
 8008c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c24:	688e      	ldr	r6, [r1, #8]
 8008c26:	429e      	cmp	r6, r3
 8008c28:	4682      	mov	sl, r0
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	4690      	mov	r8, r2
 8008c2e:	461f      	mov	r7, r3
 8008c30:	d838      	bhi.n	8008ca4 <__ssputs_r+0x84>
 8008c32:	898a      	ldrh	r2, [r1, #12]
 8008c34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c38:	d032      	beq.n	8008ca0 <__ssputs_r+0x80>
 8008c3a:	6825      	ldr	r5, [r4, #0]
 8008c3c:	6909      	ldr	r1, [r1, #16]
 8008c3e:	eba5 0901 	sub.w	r9, r5, r1
 8008c42:	6965      	ldr	r5, [r4, #20]
 8008c44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	444b      	add	r3, r9
 8008c50:	106d      	asrs	r5, r5, #1
 8008c52:	429d      	cmp	r5, r3
 8008c54:	bf38      	it	cc
 8008c56:	461d      	movcc	r5, r3
 8008c58:	0553      	lsls	r3, r2, #21
 8008c5a:	d531      	bpl.n	8008cc0 <__ssputs_r+0xa0>
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	f7ff ff6b 	bl	8008b38 <_malloc_r>
 8008c62:	4606      	mov	r6, r0
 8008c64:	b950      	cbnz	r0, 8008c7c <__ssputs_r+0x5c>
 8008c66:	230c      	movs	r3, #12
 8008c68:	f8ca 3000 	str.w	r3, [sl]
 8008c6c:	89a3      	ldrh	r3, [r4, #12]
 8008c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c72:	81a3      	strh	r3, [r4, #12]
 8008c74:	f04f 30ff 	mov.w	r0, #4294967295
 8008c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c7c:	6921      	ldr	r1, [r4, #16]
 8008c7e:	464a      	mov	r2, r9
 8008c80:	f001 fa34 	bl	800a0ec <memcpy>
 8008c84:	89a3      	ldrh	r3, [r4, #12]
 8008c86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c8e:	81a3      	strh	r3, [r4, #12]
 8008c90:	6126      	str	r6, [r4, #16]
 8008c92:	6165      	str	r5, [r4, #20]
 8008c94:	444e      	add	r6, r9
 8008c96:	eba5 0509 	sub.w	r5, r5, r9
 8008c9a:	6026      	str	r6, [r4, #0]
 8008c9c:	60a5      	str	r5, [r4, #8]
 8008c9e:	463e      	mov	r6, r7
 8008ca0:	42be      	cmp	r6, r7
 8008ca2:	d900      	bls.n	8008ca6 <__ssputs_r+0x86>
 8008ca4:	463e      	mov	r6, r7
 8008ca6:	6820      	ldr	r0, [r4, #0]
 8008ca8:	4632      	mov	r2, r6
 8008caa:	4641      	mov	r1, r8
 8008cac:	f001 fa2c 	bl	800a108 <memmove>
 8008cb0:	68a3      	ldr	r3, [r4, #8]
 8008cb2:	1b9b      	subs	r3, r3, r6
 8008cb4:	60a3      	str	r3, [r4, #8]
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	4433      	add	r3, r6
 8008cba:	6023      	str	r3, [r4, #0]
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	e7db      	b.n	8008c78 <__ssputs_r+0x58>
 8008cc0:	462a      	mov	r2, r5
 8008cc2:	f001 fa47 	bl	800a154 <_realloc_r>
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	d1e1      	bne.n	8008c90 <__ssputs_r+0x70>
 8008ccc:	6921      	ldr	r1, [r4, #16]
 8008cce:	4650      	mov	r0, sl
 8008cd0:	f7ff fec6 	bl	8008a60 <_free_r>
 8008cd4:	e7c7      	b.n	8008c66 <__ssputs_r+0x46>
	...

08008cd8 <_svfiprintf_r>:
 8008cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cdc:	4698      	mov	r8, r3
 8008cde:	898b      	ldrh	r3, [r1, #12]
 8008ce0:	061b      	lsls	r3, r3, #24
 8008ce2:	b09d      	sub	sp, #116	; 0x74
 8008ce4:	4607      	mov	r7, r0
 8008ce6:	460d      	mov	r5, r1
 8008ce8:	4614      	mov	r4, r2
 8008cea:	d50e      	bpl.n	8008d0a <_svfiprintf_r+0x32>
 8008cec:	690b      	ldr	r3, [r1, #16]
 8008cee:	b963      	cbnz	r3, 8008d0a <_svfiprintf_r+0x32>
 8008cf0:	2140      	movs	r1, #64	; 0x40
 8008cf2:	f7ff ff21 	bl	8008b38 <_malloc_r>
 8008cf6:	6028      	str	r0, [r5, #0]
 8008cf8:	6128      	str	r0, [r5, #16]
 8008cfa:	b920      	cbnz	r0, 8008d06 <_svfiprintf_r+0x2e>
 8008cfc:	230c      	movs	r3, #12
 8008cfe:	603b      	str	r3, [r7, #0]
 8008d00:	f04f 30ff 	mov.w	r0, #4294967295
 8008d04:	e0d1      	b.n	8008eaa <_svfiprintf_r+0x1d2>
 8008d06:	2340      	movs	r3, #64	; 0x40
 8008d08:	616b      	str	r3, [r5, #20]
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d0e:	2320      	movs	r3, #32
 8008d10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d14:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d18:	2330      	movs	r3, #48	; 0x30
 8008d1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ec4 <_svfiprintf_r+0x1ec>
 8008d1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d22:	f04f 0901 	mov.w	r9, #1
 8008d26:	4623      	mov	r3, r4
 8008d28:	469a      	mov	sl, r3
 8008d2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d2e:	b10a      	cbz	r2, 8008d34 <_svfiprintf_r+0x5c>
 8008d30:	2a25      	cmp	r2, #37	; 0x25
 8008d32:	d1f9      	bne.n	8008d28 <_svfiprintf_r+0x50>
 8008d34:	ebba 0b04 	subs.w	fp, sl, r4
 8008d38:	d00b      	beq.n	8008d52 <_svfiprintf_r+0x7a>
 8008d3a:	465b      	mov	r3, fp
 8008d3c:	4622      	mov	r2, r4
 8008d3e:	4629      	mov	r1, r5
 8008d40:	4638      	mov	r0, r7
 8008d42:	f7ff ff6d 	bl	8008c20 <__ssputs_r>
 8008d46:	3001      	adds	r0, #1
 8008d48:	f000 80aa 	beq.w	8008ea0 <_svfiprintf_r+0x1c8>
 8008d4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d4e:	445a      	add	r2, fp
 8008d50:	9209      	str	r2, [sp, #36]	; 0x24
 8008d52:	f89a 3000 	ldrb.w	r3, [sl]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f000 80a2 	beq.w	8008ea0 <_svfiprintf_r+0x1c8>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d66:	f10a 0a01 	add.w	sl, sl, #1
 8008d6a:	9304      	str	r3, [sp, #16]
 8008d6c:	9307      	str	r3, [sp, #28]
 8008d6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d72:	931a      	str	r3, [sp, #104]	; 0x68
 8008d74:	4654      	mov	r4, sl
 8008d76:	2205      	movs	r2, #5
 8008d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d7c:	4851      	ldr	r0, [pc, #324]	; (8008ec4 <_svfiprintf_r+0x1ec>)
 8008d7e:	f7f7 fa67 	bl	8000250 <memchr>
 8008d82:	9a04      	ldr	r2, [sp, #16]
 8008d84:	b9d8      	cbnz	r0, 8008dbe <_svfiprintf_r+0xe6>
 8008d86:	06d0      	lsls	r0, r2, #27
 8008d88:	bf44      	itt	mi
 8008d8a:	2320      	movmi	r3, #32
 8008d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d90:	0711      	lsls	r1, r2, #28
 8008d92:	bf44      	itt	mi
 8008d94:	232b      	movmi	r3, #43	; 0x2b
 8008d96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d9a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d9e:	2b2a      	cmp	r3, #42	; 0x2a
 8008da0:	d015      	beq.n	8008dce <_svfiprintf_r+0xf6>
 8008da2:	9a07      	ldr	r2, [sp, #28]
 8008da4:	4654      	mov	r4, sl
 8008da6:	2000      	movs	r0, #0
 8008da8:	f04f 0c0a 	mov.w	ip, #10
 8008dac:	4621      	mov	r1, r4
 8008dae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008db2:	3b30      	subs	r3, #48	; 0x30
 8008db4:	2b09      	cmp	r3, #9
 8008db6:	d94e      	bls.n	8008e56 <_svfiprintf_r+0x17e>
 8008db8:	b1b0      	cbz	r0, 8008de8 <_svfiprintf_r+0x110>
 8008dba:	9207      	str	r2, [sp, #28]
 8008dbc:	e014      	b.n	8008de8 <_svfiprintf_r+0x110>
 8008dbe:	eba0 0308 	sub.w	r3, r0, r8
 8008dc2:	fa09 f303 	lsl.w	r3, r9, r3
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	9304      	str	r3, [sp, #16]
 8008dca:	46a2      	mov	sl, r4
 8008dcc:	e7d2      	b.n	8008d74 <_svfiprintf_r+0x9c>
 8008dce:	9b03      	ldr	r3, [sp, #12]
 8008dd0:	1d19      	adds	r1, r3, #4
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	9103      	str	r1, [sp, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	bfbb      	ittet	lt
 8008dda:	425b      	neglt	r3, r3
 8008ddc:	f042 0202 	orrlt.w	r2, r2, #2
 8008de0:	9307      	strge	r3, [sp, #28]
 8008de2:	9307      	strlt	r3, [sp, #28]
 8008de4:	bfb8      	it	lt
 8008de6:	9204      	strlt	r2, [sp, #16]
 8008de8:	7823      	ldrb	r3, [r4, #0]
 8008dea:	2b2e      	cmp	r3, #46	; 0x2e
 8008dec:	d10c      	bne.n	8008e08 <_svfiprintf_r+0x130>
 8008dee:	7863      	ldrb	r3, [r4, #1]
 8008df0:	2b2a      	cmp	r3, #42	; 0x2a
 8008df2:	d135      	bne.n	8008e60 <_svfiprintf_r+0x188>
 8008df4:	9b03      	ldr	r3, [sp, #12]
 8008df6:	1d1a      	adds	r2, r3, #4
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	9203      	str	r2, [sp, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	bfb8      	it	lt
 8008e00:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e04:	3402      	adds	r4, #2
 8008e06:	9305      	str	r3, [sp, #20]
 8008e08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ed4 <_svfiprintf_r+0x1fc>
 8008e0c:	7821      	ldrb	r1, [r4, #0]
 8008e0e:	2203      	movs	r2, #3
 8008e10:	4650      	mov	r0, sl
 8008e12:	f7f7 fa1d 	bl	8000250 <memchr>
 8008e16:	b140      	cbz	r0, 8008e2a <_svfiprintf_r+0x152>
 8008e18:	2340      	movs	r3, #64	; 0x40
 8008e1a:	eba0 000a 	sub.w	r0, r0, sl
 8008e1e:	fa03 f000 	lsl.w	r0, r3, r0
 8008e22:	9b04      	ldr	r3, [sp, #16]
 8008e24:	4303      	orrs	r3, r0
 8008e26:	3401      	adds	r4, #1
 8008e28:	9304      	str	r3, [sp, #16]
 8008e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e2e:	4826      	ldr	r0, [pc, #152]	; (8008ec8 <_svfiprintf_r+0x1f0>)
 8008e30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e34:	2206      	movs	r2, #6
 8008e36:	f7f7 fa0b 	bl	8000250 <memchr>
 8008e3a:	2800      	cmp	r0, #0
 8008e3c:	d038      	beq.n	8008eb0 <_svfiprintf_r+0x1d8>
 8008e3e:	4b23      	ldr	r3, [pc, #140]	; (8008ecc <_svfiprintf_r+0x1f4>)
 8008e40:	bb1b      	cbnz	r3, 8008e8a <_svfiprintf_r+0x1b2>
 8008e42:	9b03      	ldr	r3, [sp, #12]
 8008e44:	3307      	adds	r3, #7
 8008e46:	f023 0307 	bic.w	r3, r3, #7
 8008e4a:	3308      	adds	r3, #8
 8008e4c:	9303      	str	r3, [sp, #12]
 8008e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e50:	4433      	add	r3, r6
 8008e52:	9309      	str	r3, [sp, #36]	; 0x24
 8008e54:	e767      	b.n	8008d26 <_svfiprintf_r+0x4e>
 8008e56:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	2001      	movs	r0, #1
 8008e5e:	e7a5      	b.n	8008dac <_svfiprintf_r+0xd4>
 8008e60:	2300      	movs	r3, #0
 8008e62:	3401      	adds	r4, #1
 8008e64:	9305      	str	r3, [sp, #20]
 8008e66:	4619      	mov	r1, r3
 8008e68:	f04f 0c0a 	mov.w	ip, #10
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e72:	3a30      	subs	r2, #48	; 0x30
 8008e74:	2a09      	cmp	r2, #9
 8008e76:	d903      	bls.n	8008e80 <_svfiprintf_r+0x1a8>
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d0c5      	beq.n	8008e08 <_svfiprintf_r+0x130>
 8008e7c:	9105      	str	r1, [sp, #20]
 8008e7e:	e7c3      	b.n	8008e08 <_svfiprintf_r+0x130>
 8008e80:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e84:	4604      	mov	r4, r0
 8008e86:	2301      	movs	r3, #1
 8008e88:	e7f0      	b.n	8008e6c <_svfiprintf_r+0x194>
 8008e8a:	ab03      	add	r3, sp, #12
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	462a      	mov	r2, r5
 8008e90:	4b0f      	ldr	r3, [pc, #60]	; (8008ed0 <_svfiprintf_r+0x1f8>)
 8008e92:	a904      	add	r1, sp, #16
 8008e94:	4638      	mov	r0, r7
 8008e96:	f3af 8000 	nop.w
 8008e9a:	1c42      	adds	r2, r0, #1
 8008e9c:	4606      	mov	r6, r0
 8008e9e:	d1d6      	bne.n	8008e4e <_svfiprintf_r+0x176>
 8008ea0:	89ab      	ldrh	r3, [r5, #12]
 8008ea2:	065b      	lsls	r3, r3, #25
 8008ea4:	f53f af2c 	bmi.w	8008d00 <_svfiprintf_r+0x28>
 8008ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008eaa:	b01d      	add	sp, #116	; 0x74
 8008eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb0:	ab03      	add	r3, sp, #12
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	462a      	mov	r2, r5
 8008eb6:	4b06      	ldr	r3, [pc, #24]	; (8008ed0 <_svfiprintf_r+0x1f8>)
 8008eb8:	a904      	add	r1, sp, #16
 8008eba:	4638      	mov	r0, r7
 8008ebc:	f000 fba6 	bl	800960c <_printf_i>
 8008ec0:	e7eb      	b.n	8008e9a <_svfiprintf_r+0x1c2>
 8008ec2:	bf00      	nop
 8008ec4:	0800a810 	.word	0x0800a810
 8008ec8:	0800a81a 	.word	0x0800a81a
 8008ecc:	00000000 	.word	0x00000000
 8008ed0:	08008c21 	.word	0x08008c21
 8008ed4:	0800a816 	.word	0x0800a816

08008ed8 <_sungetc_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	1c4b      	adds	r3, r1, #1
 8008edc:	4614      	mov	r4, r2
 8008ede:	d103      	bne.n	8008ee8 <_sungetc_r+0x10>
 8008ee0:	f04f 35ff 	mov.w	r5, #4294967295
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	bd38      	pop	{r3, r4, r5, pc}
 8008ee8:	8993      	ldrh	r3, [r2, #12]
 8008eea:	f023 0320 	bic.w	r3, r3, #32
 8008eee:	8193      	strh	r3, [r2, #12]
 8008ef0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ef2:	6852      	ldr	r2, [r2, #4]
 8008ef4:	b2cd      	uxtb	r5, r1
 8008ef6:	b18b      	cbz	r3, 8008f1c <_sungetc_r+0x44>
 8008ef8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008efa:	4293      	cmp	r3, r2
 8008efc:	dd08      	ble.n	8008f10 <_sungetc_r+0x38>
 8008efe:	6823      	ldr	r3, [r4, #0]
 8008f00:	1e5a      	subs	r2, r3, #1
 8008f02:	6022      	str	r2, [r4, #0]
 8008f04:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008f08:	6863      	ldr	r3, [r4, #4]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	6063      	str	r3, [r4, #4]
 8008f0e:	e7e9      	b.n	8008ee4 <_sungetc_r+0xc>
 8008f10:	4621      	mov	r1, r4
 8008f12:	f000 fec1 	bl	8009c98 <__submore>
 8008f16:	2800      	cmp	r0, #0
 8008f18:	d0f1      	beq.n	8008efe <_sungetc_r+0x26>
 8008f1a:	e7e1      	b.n	8008ee0 <_sungetc_r+0x8>
 8008f1c:	6921      	ldr	r1, [r4, #16]
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	b151      	cbz	r1, 8008f38 <_sungetc_r+0x60>
 8008f22:	4299      	cmp	r1, r3
 8008f24:	d208      	bcs.n	8008f38 <_sungetc_r+0x60>
 8008f26:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008f2a:	42a9      	cmp	r1, r5
 8008f2c:	d104      	bne.n	8008f38 <_sungetc_r+0x60>
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	3201      	adds	r2, #1
 8008f32:	6023      	str	r3, [r4, #0]
 8008f34:	6062      	str	r2, [r4, #4]
 8008f36:	e7d5      	b.n	8008ee4 <_sungetc_r+0xc>
 8008f38:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f40:	6363      	str	r3, [r4, #52]	; 0x34
 8008f42:	2303      	movs	r3, #3
 8008f44:	63a3      	str	r3, [r4, #56]	; 0x38
 8008f46:	4623      	mov	r3, r4
 8008f48:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e7dc      	b.n	8008f0c <_sungetc_r+0x34>

08008f52 <__ssrefill_r>:
 8008f52:	b510      	push	{r4, lr}
 8008f54:	460c      	mov	r4, r1
 8008f56:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008f58:	b169      	cbz	r1, 8008f76 <__ssrefill_r+0x24>
 8008f5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f5e:	4299      	cmp	r1, r3
 8008f60:	d001      	beq.n	8008f66 <__ssrefill_r+0x14>
 8008f62:	f7ff fd7d 	bl	8008a60 <_free_r>
 8008f66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f68:	6063      	str	r3, [r4, #4]
 8008f6a:	2000      	movs	r0, #0
 8008f6c:	6360      	str	r0, [r4, #52]	; 0x34
 8008f6e:	b113      	cbz	r3, 8008f76 <__ssrefill_r+0x24>
 8008f70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008f72:	6023      	str	r3, [r4, #0]
 8008f74:	bd10      	pop	{r4, pc}
 8008f76:	6923      	ldr	r3, [r4, #16]
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	6063      	str	r3, [r4, #4]
 8008f7e:	89a3      	ldrh	r3, [r4, #12]
 8008f80:	f043 0320 	orr.w	r3, r3, #32
 8008f84:	81a3      	strh	r3, [r4, #12]
 8008f86:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8a:	e7f3      	b.n	8008f74 <__ssrefill_r+0x22>

08008f8c <__ssvfiscanf_r>:
 8008f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f90:	460c      	mov	r4, r1
 8008f92:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008f96:	2100      	movs	r1, #0
 8008f98:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008f9c:	49a6      	ldr	r1, [pc, #664]	; (8009238 <__ssvfiscanf_r+0x2ac>)
 8008f9e:	91a0      	str	r1, [sp, #640]	; 0x280
 8008fa0:	f10d 0804 	add.w	r8, sp, #4
 8008fa4:	49a5      	ldr	r1, [pc, #660]	; (800923c <__ssvfiscanf_r+0x2b0>)
 8008fa6:	4fa6      	ldr	r7, [pc, #664]	; (8009240 <__ssvfiscanf_r+0x2b4>)
 8008fa8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009244 <__ssvfiscanf_r+0x2b8>
 8008fac:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008fb0:	4606      	mov	r6, r0
 8008fb2:	91a1      	str	r1, [sp, #644]	; 0x284
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	7813      	ldrb	r3, [r2, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 815a 	beq.w	8009272 <__ssvfiscanf_r+0x2e6>
 8008fbe:	5dd9      	ldrb	r1, [r3, r7]
 8008fc0:	f011 0108 	ands.w	r1, r1, #8
 8008fc4:	f102 0501 	add.w	r5, r2, #1
 8008fc8:	d019      	beq.n	8008ffe <__ssvfiscanf_r+0x72>
 8008fca:	6863      	ldr	r3, [r4, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	dd0f      	ble.n	8008ff0 <__ssvfiscanf_r+0x64>
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	781a      	ldrb	r2, [r3, #0]
 8008fd4:	5cba      	ldrb	r2, [r7, r2]
 8008fd6:	0712      	lsls	r2, r2, #28
 8008fd8:	d401      	bmi.n	8008fde <__ssvfiscanf_r+0x52>
 8008fda:	462a      	mov	r2, r5
 8008fdc:	e7eb      	b.n	8008fb6 <__ssvfiscanf_r+0x2a>
 8008fde:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008fe0:	3201      	adds	r2, #1
 8008fe2:	9245      	str	r2, [sp, #276]	; 0x114
 8008fe4:	6862      	ldr	r2, [r4, #4]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	3a01      	subs	r2, #1
 8008fea:	6062      	str	r2, [r4, #4]
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	e7ec      	b.n	8008fca <__ssvfiscanf_r+0x3e>
 8008ff0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	4798      	blx	r3
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d0e9      	beq.n	8008fd0 <__ssvfiscanf_r+0x44>
 8008ffc:	e7ed      	b.n	8008fda <__ssvfiscanf_r+0x4e>
 8008ffe:	2b25      	cmp	r3, #37	; 0x25
 8009000:	d012      	beq.n	8009028 <__ssvfiscanf_r+0x9c>
 8009002:	469a      	mov	sl, r3
 8009004:	6863      	ldr	r3, [r4, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	f340 8091 	ble.w	800912e <__ssvfiscanf_r+0x1a2>
 800900c:	6822      	ldr	r2, [r4, #0]
 800900e:	7813      	ldrb	r3, [r2, #0]
 8009010:	4553      	cmp	r3, sl
 8009012:	f040 812e 	bne.w	8009272 <__ssvfiscanf_r+0x2e6>
 8009016:	6863      	ldr	r3, [r4, #4]
 8009018:	3b01      	subs	r3, #1
 800901a:	6063      	str	r3, [r4, #4]
 800901c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800901e:	3201      	adds	r2, #1
 8009020:	3301      	adds	r3, #1
 8009022:	6022      	str	r2, [r4, #0]
 8009024:	9345      	str	r3, [sp, #276]	; 0x114
 8009026:	e7d8      	b.n	8008fda <__ssvfiscanf_r+0x4e>
 8009028:	9141      	str	r1, [sp, #260]	; 0x104
 800902a:	9143      	str	r1, [sp, #268]	; 0x10c
 800902c:	7853      	ldrb	r3, [r2, #1]
 800902e:	2b2a      	cmp	r3, #42	; 0x2a
 8009030:	bf02      	ittt	eq
 8009032:	2310      	moveq	r3, #16
 8009034:	1c95      	addeq	r5, r2, #2
 8009036:	9341      	streq	r3, [sp, #260]	; 0x104
 8009038:	220a      	movs	r2, #10
 800903a:	46aa      	mov	sl, r5
 800903c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009040:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009044:	2b09      	cmp	r3, #9
 8009046:	d91d      	bls.n	8009084 <__ssvfiscanf_r+0xf8>
 8009048:	487e      	ldr	r0, [pc, #504]	; (8009244 <__ssvfiscanf_r+0x2b8>)
 800904a:	2203      	movs	r2, #3
 800904c:	f7f7 f900 	bl	8000250 <memchr>
 8009050:	b140      	cbz	r0, 8009064 <__ssvfiscanf_r+0xd8>
 8009052:	2301      	movs	r3, #1
 8009054:	eba0 0009 	sub.w	r0, r0, r9
 8009058:	fa03 f000 	lsl.w	r0, r3, r0
 800905c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800905e:	4318      	orrs	r0, r3
 8009060:	9041      	str	r0, [sp, #260]	; 0x104
 8009062:	4655      	mov	r5, sl
 8009064:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009068:	2b78      	cmp	r3, #120	; 0x78
 800906a:	d806      	bhi.n	800907a <__ssvfiscanf_r+0xee>
 800906c:	2b57      	cmp	r3, #87	; 0x57
 800906e:	d810      	bhi.n	8009092 <__ssvfiscanf_r+0x106>
 8009070:	2b25      	cmp	r3, #37	; 0x25
 8009072:	d0c6      	beq.n	8009002 <__ssvfiscanf_r+0x76>
 8009074:	d856      	bhi.n	8009124 <__ssvfiscanf_r+0x198>
 8009076:	2b00      	cmp	r3, #0
 8009078:	d064      	beq.n	8009144 <__ssvfiscanf_r+0x1b8>
 800907a:	2303      	movs	r3, #3
 800907c:	9347      	str	r3, [sp, #284]	; 0x11c
 800907e:	230a      	movs	r3, #10
 8009080:	9342      	str	r3, [sp, #264]	; 0x108
 8009082:	e071      	b.n	8009168 <__ssvfiscanf_r+0x1dc>
 8009084:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009086:	fb02 1103 	mla	r1, r2, r3, r1
 800908a:	3930      	subs	r1, #48	; 0x30
 800908c:	9143      	str	r1, [sp, #268]	; 0x10c
 800908e:	4655      	mov	r5, sl
 8009090:	e7d3      	b.n	800903a <__ssvfiscanf_r+0xae>
 8009092:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009096:	2a20      	cmp	r2, #32
 8009098:	d8ef      	bhi.n	800907a <__ssvfiscanf_r+0xee>
 800909a:	a101      	add	r1, pc, #4	; (adr r1, 80090a0 <__ssvfiscanf_r+0x114>)
 800909c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80090a0:	08009153 	.word	0x08009153
 80090a4:	0800907b 	.word	0x0800907b
 80090a8:	0800907b 	.word	0x0800907b
 80090ac:	080091b1 	.word	0x080091b1
 80090b0:	0800907b 	.word	0x0800907b
 80090b4:	0800907b 	.word	0x0800907b
 80090b8:	0800907b 	.word	0x0800907b
 80090bc:	0800907b 	.word	0x0800907b
 80090c0:	0800907b 	.word	0x0800907b
 80090c4:	0800907b 	.word	0x0800907b
 80090c8:	0800907b 	.word	0x0800907b
 80090cc:	080091c7 	.word	0x080091c7
 80090d0:	0800919d 	.word	0x0800919d
 80090d4:	0800912b 	.word	0x0800912b
 80090d8:	0800912b 	.word	0x0800912b
 80090dc:	0800912b 	.word	0x0800912b
 80090e0:	0800907b 	.word	0x0800907b
 80090e4:	080091a1 	.word	0x080091a1
 80090e8:	0800907b 	.word	0x0800907b
 80090ec:	0800907b 	.word	0x0800907b
 80090f0:	0800907b 	.word	0x0800907b
 80090f4:	0800907b 	.word	0x0800907b
 80090f8:	080091d7 	.word	0x080091d7
 80090fc:	080091a9 	.word	0x080091a9
 8009100:	0800914b 	.word	0x0800914b
 8009104:	0800907b 	.word	0x0800907b
 8009108:	0800907b 	.word	0x0800907b
 800910c:	080091d3 	.word	0x080091d3
 8009110:	0800907b 	.word	0x0800907b
 8009114:	0800919d 	.word	0x0800919d
 8009118:	0800907b 	.word	0x0800907b
 800911c:	0800907b 	.word	0x0800907b
 8009120:	08009153 	.word	0x08009153
 8009124:	3b45      	subs	r3, #69	; 0x45
 8009126:	2b02      	cmp	r3, #2
 8009128:	d8a7      	bhi.n	800907a <__ssvfiscanf_r+0xee>
 800912a:	2305      	movs	r3, #5
 800912c:	e01b      	b.n	8009166 <__ssvfiscanf_r+0x1da>
 800912e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009130:	4621      	mov	r1, r4
 8009132:	4630      	mov	r0, r6
 8009134:	4798      	blx	r3
 8009136:	2800      	cmp	r0, #0
 8009138:	f43f af68 	beq.w	800900c <__ssvfiscanf_r+0x80>
 800913c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800913e:	2800      	cmp	r0, #0
 8009140:	f040 808d 	bne.w	800925e <__ssvfiscanf_r+0x2d2>
 8009144:	f04f 30ff 	mov.w	r0, #4294967295
 8009148:	e08f      	b.n	800926a <__ssvfiscanf_r+0x2de>
 800914a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800914c:	f042 0220 	orr.w	r2, r2, #32
 8009150:	9241      	str	r2, [sp, #260]	; 0x104
 8009152:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009158:	9241      	str	r2, [sp, #260]	; 0x104
 800915a:	2210      	movs	r2, #16
 800915c:	2b6f      	cmp	r3, #111	; 0x6f
 800915e:	9242      	str	r2, [sp, #264]	; 0x108
 8009160:	bf34      	ite	cc
 8009162:	2303      	movcc	r3, #3
 8009164:	2304      	movcs	r3, #4
 8009166:	9347      	str	r3, [sp, #284]	; 0x11c
 8009168:	6863      	ldr	r3, [r4, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	dd42      	ble.n	80091f4 <__ssvfiscanf_r+0x268>
 800916e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009170:	0659      	lsls	r1, r3, #25
 8009172:	d404      	bmi.n	800917e <__ssvfiscanf_r+0x1f2>
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	781a      	ldrb	r2, [r3, #0]
 8009178:	5cba      	ldrb	r2, [r7, r2]
 800917a:	0712      	lsls	r2, r2, #28
 800917c:	d441      	bmi.n	8009202 <__ssvfiscanf_r+0x276>
 800917e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009180:	2b02      	cmp	r3, #2
 8009182:	dc50      	bgt.n	8009226 <__ssvfiscanf_r+0x29a>
 8009184:	466b      	mov	r3, sp
 8009186:	4622      	mov	r2, r4
 8009188:	a941      	add	r1, sp, #260	; 0x104
 800918a:	4630      	mov	r0, r6
 800918c:	f000 fb64 	bl	8009858 <_scanf_chars>
 8009190:	2801      	cmp	r0, #1
 8009192:	d06e      	beq.n	8009272 <__ssvfiscanf_r+0x2e6>
 8009194:	2802      	cmp	r0, #2
 8009196:	f47f af20 	bne.w	8008fda <__ssvfiscanf_r+0x4e>
 800919a:	e7cf      	b.n	800913c <__ssvfiscanf_r+0x1b0>
 800919c:	220a      	movs	r2, #10
 800919e:	e7dd      	b.n	800915c <__ssvfiscanf_r+0x1d0>
 80091a0:	2300      	movs	r3, #0
 80091a2:	9342      	str	r3, [sp, #264]	; 0x108
 80091a4:	2303      	movs	r3, #3
 80091a6:	e7de      	b.n	8009166 <__ssvfiscanf_r+0x1da>
 80091a8:	2308      	movs	r3, #8
 80091aa:	9342      	str	r3, [sp, #264]	; 0x108
 80091ac:	2304      	movs	r3, #4
 80091ae:	e7da      	b.n	8009166 <__ssvfiscanf_r+0x1da>
 80091b0:	4629      	mov	r1, r5
 80091b2:	4640      	mov	r0, r8
 80091b4:	f000 fcc4 	bl	8009b40 <__sccl>
 80091b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80091ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091be:	9341      	str	r3, [sp, #260]	; 0x104
 80091c0:	4605      	mov	r5, r0
 80091c2:	2301      	movs	r3, #1
 80091c4:	e7cf      	b.n	8009166 <__ssvfiscanf_r+0x1da>
 80091c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80091c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091cc:	9341      	str	r3, [sp, #260]	; 0x104
 80091ce:	2300      	movs	r3, #0
 80091d0:	e7c9      	b.n	8009166 <__ssvfiscanf_r+0x1da>
 80091d2:	2302      	movs	r3, #2
 80091d4:	e7c7      	b.n	8009166 <__ssvfiscanf_r+0x1da>
 80091d6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80091d8:	06c3      	lsls	r3, r0, #27
 80091da:	f53f aefe 	bmi.w	8008fda <__ssvfiscanf_r+0x4e>
 80091de:	9b00      	ldr	r3, [sp, #0]
 80091e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80091e2:	1d19      	adds	r1, r3, #4
 80091e4:	9100      	str	r1, [sp, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f010 0f01 	tst.w	r0, #1
 80091ec:	bf14      	ite	ne
 80091ee:	801a      	strhne	r2, [r3, #0]
 80091f0:	601a      	streq	r2, [r3, #0]
 80091f2:	e6f2      	b.n	8008fda <__ssvfiscanf_r+0x4e>
 80091f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80091f6:	4621      	mov	r1, r4
 80091f8:	4630      	mov	r0, r6
 80091fa:	4798      	blx	r3
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d0b6      	beq.n	800916e <__ssvfiscanf_r+0x1e2>
 8009200:	e79c      	b.n	800913c <__ssvfiscanf_r+0x1b0>
 8009202:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009204:	3201      	adds	r2, #1
 8009206:	9245      	str	r2, [sp, #276]	; 0x114
 8009208:	6862      	ldr	r2, [r4, #4]
 800920a:	3a01      	subs	r2, #1
 800920c:	2a00      	cmp	r2, #0
 800920e:	6062      	str	r2, [r4, #4]
 8009210:	dd02      	ble.n	8009218 <__ssvfiscanf_r+0x28c>
 8009212:	3301      	adds	r3, #1
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	e7ad      	b.n	8009174 <__ssvfiscanf_r+0x1e8>
 8009218:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800921a:	4621      	mov	r1, r4
 800921c:	4630      	mov	r0, r6
 800921e:	4798      	blx	r3
 8009220:	2800      	cmp	r0, #0
 8009222:	d0a7      	beq.n	8009174 <__ssvfiscanf_r+0x1e8>
 8009224:	e78a      	b.n	800913c <__ssvfiscanf_r+0x1b0>
 8009226:	2b04      	cmp	r3, #4
 8009228:	dc0e      	bgt.n	8009248 <__ssvfiscanf_r+0x2bc>
 800922a:	466b      	mov	r3, sp
 800922c:	4622      	mov	r2, r4
 800922e:	a941      	add	r1, sp, #260	; 0x104
 8009230:	4630      	mov	r0, r6
 8009232:	f000 fb6b 	bl	800990c <_scanf_i>
 8009236:	e7ab      	b.n	8009190 <__ssvfiscanf_r+0x204>
 8009238:	08008ed9 	.word	0x08008ed9
 800923c:	08008f53 	.word	0x08008f53
 8009240:	0800a6ad 	.word	0x0800a6ad
 8009244:	0800a816 	.word	0x0800a816
 8009248:	4b0b      	ldr	r3, [pc, #44]	; (8009278 <__ssvfiscanf_r+0x2ec>)
 800924a:	2b00      	cmp	r3, #0
 800924c:	f43f aec5 	beq.w	8008fda <__ssvfiscanf_r+0x4e>
 8009250:	466b      	mov	r3, sp
 8009252:	4622      	mov	r2, r4
 8009254:	a941      	add	r1, sp, #260	; 0x104
 8009256:	4630      	mov	r0, r6
 8009258:	f3af 8000 	nop.w
 800925c:	e798      	b.n	8009190 <__ssvfiscanf_r+0x204>
 800925e:	89a3      	ldrh	r3, [r4, #12]
 8009260:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009264:	bf18      	it	ne
 8009266:	f04f 30ff 	movne.w	r0, #4294967295
 800926a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800926e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009272:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009274:	e7f9      	b.n	800926a <__ssvfiscanf_r+0x2de>
 8009276:	bf00      	nop
 8009278:	00000000 	.word	0x00000000

0800927c <__sfputc_r>:
 800927c:	6893      	ldr	r3, [r2, #8]
 800927e:	3b01      	subs	r3, #1
 8009280:	2b00      	cmp	r3, #0
 8009282:	b410      	push	{r4}
 8009284:	6093      	str	r3, [r2, #8]
 8009286:	da08      	bge.n	800929a <__sfputc_r+0x1e>
 8009288:	6994      	ldr	r4, [r2, #24]
 800928a:	42a3      	cmp	r3, r4
 800928c:	db01      	blt.n	8009292 <__sfputc_r+0x16>
 800928e:	290a      	cmp	r1, #10
 8009290:	d103      	bne.n	800929a <__sfputc_r+0x1e>
 8009292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009296:	f000 bd39 	b.w	8009d0c <__swbuf_r>
 800929a:	6813      	ldr	r3, [r2, #0]
 800929c:	1c58      	adds	r0, r3, #1
 800929e:	6010      	str	r0, [r2, #0]
 80092a0:	7019      	strb	r1, [r3, #0]
 80092a2:	4608      	mov	r0, r1
 80092a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092a8:	4770      	bx	lr

080092aa <__sfputs_r>:
 80092aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ac:	4606      	mov	r6, r0
 80092ae:	460f      	mov	r7, r1
 80092b0:	4614      	mov	r4, r2
 80092b2:	18d5      	adds	r5, r2, r3
 80092b4:	42ac      	cmp	r4, r5
 80092b6:	d101      	bne.n	80092bc <__sfputs_r+0x12>
 80092b8:	2000      	movs	r0, #0
 80092ba:	e007      	b.n	80092cc <__sfputs_r+0x22>
 80092bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092c0:	463a      	mov	r2, r7
 80092c2:	4630      	mov	r0, r6
 80092c4:	f7ff ffda 	bl	800927c <__sfputc_r>
 80092c8:	1c43      	adds	r3, r0, #1
 80092ca:	d1f3      	bne.n	80092b4 <__sfputs_r+0xa>
 80092cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092d0 <_vfiprintf_r>:
 80092d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d4:	460d      	mov	r5, r1
 80092d6:	b09d      	sub	sp, #116	; 0x74
 80092d8:	4614      	mov	r4, r2
 80092da:	4698      	mov	r8, r3
 80092dc:	4606      	mov	r6, r0
 80092de:	b118      	cbz	r0, 80092e8 <_vfiprintf_r+0x18>
 80092e0:	6983      	ldr	r3, [r0, #24]
 80092e2:	b90b      	cbnz	r3, 80092e8 <_vfiprintf_r+0x18>
 80092e4:	f7ff faf0 	bl	80088c8 <__sinit>
 80092e8:	4b89      	ldr	r3, [pc, #548]	; (8009510 <_vfiprintf_r+0x240>)
 80092ea:	429d      	cmp	r5, r3
 80092ec:	d11b      	bne.n	8009326 <_vfiprintf_r+0x56>
 80092ee:	6875      	ldr	r5, [r6, #4]
 80092f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092f2:	07d9      	lsls	r1, r3, #31
 80092f4:	d405      	bmi.n	8009302 <_vfiprintf_r+0x32>
 80092f6:	89ab      	ldrh	r3, [r5, #12]
 80092f8:	059a      	lsls	r2, r3, #22
 80092fa:	d402      	bmi.n	8009302 <_vfiprintf_r+0x32>
 80092fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092fe:	f7ff fb93 	bl	8008a28 <__retarget_lock_acquire_recursive>
 8009302:	89ab      	ldrh	r3, [r5, #12]
 8009304:	071b      	lsls	r3, r3, #28
 8009306:	d501      	bpl.n	800930c <_vfiprintf_r+0x3c>
 8009308:	692b      	ldr	r3, [r5, #16]
 800930a:	b9eb      	cbnz	r3, 8009348 <_vfiprintf_r+0x78>
 800930c:	4629      	mov	r1, r5
 800930e:	4630      	mov	r0, r6
 8009310:	f000 fd4e 	bl	8009db0 <__swsetup_r>
 8009314:	b1c0      	cbz	r0, 8009348 <_vfiprintf_r+0x78>
 8009316:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009318:	07dc      	lsls	r4, r3, #31
 800931a:	d50e      	bpl.n	800933a <_vfiprintf_r+0x6a>
 800931c:	f04f 30ff 	mov.w	r0, #4294967295
 8009320:	b01d      	add	sp, #116	; 0x74
 8009322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009326:	4b7b      	ldr	r3, [pc, #492]	; (8009514 <_vfiprintf_r+0x244>)
 8009328:	429d      	cmp	r5, r3
 800932a:	d101      	bne.n	8009330 <_vfiprintf_r+0x60>
 800932c:	68b5      	ldr	r5, [r6, #8]
 800932e:	e7df      	b.n	80092f0 <_vfiprintf_r+0x20>
 8009330:	4b79      	ldr	r3, [pc, #484]	; (8009518 <_vfiprintf_r+0x248>)
 8009332:	429d      	cmp	r5, r3
 8009334:	bf08      	it	eq
 8009336:	68f5      	ldreq	r5, [r6, #12]
 8009338:	e7da      	b.n	80092f0 <_vfiprintf_r+0x20>
 800933a:	89ab      	ldrh	r3, [r5, #12]
 800933c:	0598      	lsls	r0, r3, #22
 800933e:	d4ed      	bmi.n	800931c <_vfiprintf_r+0x4c>
 8009340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009342:	f7ff fb72 	bl	8008a2a <__retarget_lock_release_recursive>
 8009346:	e7e9      	b.n	800931c <_vfiprintf_r+0x4c>
 8009348:	2300      	movs	r3, #0
 800934a:	9309      	str	r3, [sp, #36]	; 0x24
 800934c:	2320      	movs	r3, #32
 800934e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009352:	f8cd 800c 	str.w	r8, [sp, #12]
 8009356:	2330      	movs	r3, #48	; 0x30
 8009358:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800951c <_vfiprintf_r+0x24c>
 800935c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009360:	f04f 0901 	mov.w	r9, #1
 8009364:	4623      	mov	r3, r4
 8009366:	469a      	mov	sl, r3
 8009368:	f813 2b01 	ldrb.w	r2, [r3], #1
 800936c:	b10a      	cbz	r2, 8009372 <_vfiprintf_r+0xa2>
 800936e:	2a25      	cmp	r2, #37	; 0x25
 8009370:	d1f9      	bne.n	8009366 <_vfiprintf_r+0x96>
 8009372:	ebba 0b04 	subs.w	fp, sl, r4
 8009376:	d00b      	beq.n	8009390 <_vfiprintf_r+0xc0>
 8009378:	465b      	mov	r3, fp
 800937a:	4622      	mov	r2, r4
 800937c:	4629      	mov	r1, r5
 800937e:	4630      	mov	r0, r6
 8009380:	f7ff ff93 	bl	80092aa <__sfputs_r>
 8009384:	3001      	adds	r0, #1
 8009386:	f000 80aa 	beq.w	80094de <_vfiprintf_r+0x20e>
 800938a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800938c:	445a      	add	r2, fp
 800938e:	9209      	str	r2, [sp, #36]	; 0x24
 8009390:	f89a 3000 	ldrb.w	r3, [sl]
 8009394:	2b00      	cmp	r3, #0
 8009396:	f000 80a2 	beq.w	80094de <_vfiprintf_r+0x20e>
 800939a:	2300      	movs	r3, #0
 800939c:	f04f 32ff 	mov.w	r2, #4294967295
 80093a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093a4:	f10a 0a01 	add.w	sl, sl, #1
 80093a8:	9304      	str	r3, [sp, #16]
 80093aa:	9307      	str	r3, [sp, #28]
 80093ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093b0:	931a      	str	r3, [sp, #104]	; 0x68
 80093b2:	4654      	mov	r4, sl
 80093b4:	2205      	movs	r2, #5
 80093b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ba:	4858      	ldr	r0, [pc, #352]	; (800951c <_vfiprintf_r+0x24c>)
 80093bc:	f7f6 ff48 	bl	8000250 <memchr>
 80093c0:	9a04      	ldr	r2, [sp, #16]
 80093c2:	b9d8      	cbnz	r0, 80093fc <_vfiprintf_r+0x12c>
 80093c4:	06d1      	lsls	r1, r2, #27
 80093c6:	bf44      	itt	mi
 80093c8:	2320      	movmi	r3, #32
 80093ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093ce:	0713      	lsls	r3, r2, #28
 80093d0:	bf44      	itt	mi
 80093d2:	232b      	movmi	r3, #43	; 0x2b
 80093d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093d8:	f89a 3000 	ldrb.w	r3, [sl]
 80093dc:	2b2a      	cmp	r3, #42	; 0x2a
 80093de:	d015      	beq.n	800940c <_vfiprintf_r+0x13c>
 80093e0:	9a07      	ldr	r2, [sp, #28]
 80093e2:	4654      	mov	r4, sl
 80093e4:	2000      	movs	r0, #0
 80093e6:	f04f 0c0a 	mov.w	ip, #10
 80093ea:	4621      	mov	r1, r4
 80093ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093f0:	3b30      	subs	r3, #48	; 0x30
 80093f2:	2b09      	cmp	r3, #9
 80093f4:	d94e      	bls.n	8009494 <_vfiprintf_r+0x1c4>
 80093f6:	b1b0      	cbz	r0, 8009426 <_vfiprintf_r+0x156>
 80093f8:	9207      	str	r2, [sp, #28]
 80093fa:	e014      	b.n	8009426 <_vfiprintf_r+0x156>
 80093fc:	eba0 0308 	sub.w	r3, r0, r8
 8009400:	fa09 f303 	lsl.w	r3, r9, r3
 8009404:	4313      	orrs	r3, r2
 8009406:	9304      	str	r3, [sp, #16]
 8009408:	46a2      	mov	sl, r4
 800940a:	e7d2      	b.n	80093b2 <_vfiprintf_r+0xe2>
 800940c:	9b03      	ldr	r3, [sp, #12]
 800940e:	1d19      	adds	r1, r3, #4
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	9103      	str	r1, [sp, #12]
 8009414:	2b00      	cmp	r3, #0
 8009416:	bfbb      	ittet	lt
 8009418:	425b      	neglt	r3, r3
 800941a:	f042 0202 	orrlt.w	r2, r2, #2
 800941e:	9307      	strge	r3, [sp, #28]
 8009420:	9307      	strlt	r3, [sp, #28]
 8009422:	bfb8      	it	lt
 8009424:	9204      	strlt	r2, [sp, #16]
 8009426:	7823      	ldrb	r3, [r4, #0]
 8009428:	2b2e      	cmp	r3, #46	; 0x2e
 800942a:	d10c      	bne.n	8009446 <_vfiprintf_r+0x176>
 800942c:	7863      	ldrb	r3, [r4, #1]
 800942e:	2b2a      	cmp	r3, #42	; 0x2a
 8009430:	d135      	bne.n	800949e <_vfiprintf_r+0x1ce>
 8009432:	9b03      	ldr	r3, [sp, #12]
 8009434:	1d1a      	adds	r2, r3, #4
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	9203      	str	r2, [sp, #12]
 800943a:	2b00      	cmp	r3, #0
 800943c:	bfb8      	it	lt
 800943e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009442:	3402      	adds	r4, #2
 8009444:	9305      	str	r3, [sp, #20]
 8009446:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800952c <_vfiprintf_r+0x25c>
 800944a:	7821      	ldrb	r1, [r4, #0]
 800944c:	2203      	movs	r2, #3
 800944e:	4650      	mov	r0, sl
 8009450:	f7f6 fefe 	bl	8000250 <memchr>
 8009454:	b140      	cbz	r0, 8009468 <_vfiprintf_r+0x198>
 8009456:	2340      	movs	r3, #64	; 0x40
 8009458:	eba0 000a 	sub.w	r0, r0, sl
 800945c:	fa03 f000 	lsl.w	r0, r3, r0
 8009460:	9b04      	ldr	r3, [sp, #16]
 8009462:	4303      	orrs	r3, r0
 8009464:	3401      	adds	r4, #1
 8009466:	9304      	str	r3, [sp, #16]
 8009468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800946c:	482c      	ldr	r0, [pc, #176]	; (8009520 <_vfiprintf_r+0x250>)
 800946e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009472:	2206      	movs	r2, #6
 8009474:	f7f6 feec 	bl	8000250 <memchr>
 8009478:	2800      	cmp	r0, #0
 800947a:	d03f      	beq.n	80094fc <_vfiprintf_r+0x22c>
 800947c:	4b29      	ldr	r3, [pc, #164]	; (8009524 <_vfiprintf_r+0x254>)
 800947e:	bb1b      	cbnz	r3, 80094c8 <_vfiprintf_r+0x1f8>
 8009480:	9b03      	ldr	r3, [sp, #12]
 8009482:	3307      	adds	r3, #7
 8009484:	f023 0307 	bic.w	r3, r3, #7
 8009488:	3308      	adds	r3, #8
 800948a:	9303      	str	r3, [sp, #12]
 800948c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800948e:	443b      	add	r3, r7
 8009490:	9309      	str	r3, [sp, #36]	; 0x24
 8009492:	e767      	b.n	8009364 <_vfiprintf_r+0x94>
 8009494:	fb0c 3202 	mla	r2, ip, r2, r3
 8009498:	460c      	mov	r4, r1
 800949a:	2001      	movs	r0, #1
 800949c:	e7a5      	b.n	80093ea <_vfiprintf_r+0x11a>
 800949e:	2300      	movs	r3, #0
 80094a0:	3401      	adds	r4, #1
 80094a2:	9305      	str	r3, [sp, #20]
 80094a4:	4619      	mov	r1, r3
 80094a6:	f04f 0c0a 	mov.w	ip, #10
 80094aa:	4620      	mov	r0, r4
 80094ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094b0:	3a30      	subs	r2, #48	; 0x30
 80094b2:	2a09      	cmp	r2, #9
 80094b4:	d903      	bls.n	80094be <_vfiprintf_r+0x1ee>
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d0c5      	beq.n	8009446 <_vfiprintf_r+0x176>
 80094ba:	9105      	str	r1, [sp, #20]
 80094bc:	e7c3      	b.n	8009446 <_vfiprintf_r+0x176>
 80094be:	fb0c 2101 	mla	r1, ip, r1, r2
 80094c2:	4604      	mov	r4, r0
 80094c4:	2301      	movs	r3, #1
 80094c6:	e7f0      	b.n	80094aa <_vfiprintf_r+0x1da>
 80094c8:	ab03      	add	r3, sp, #12
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	462a      	mov	r2, r5
 80094ce:	4b16      	ldr	r3, [pc, #88]	; (8009528 <_vfiprintf_r+0x258>)
 80094d0:	a904      	add	r1, sp, #16
 80094d2:	4630      	mov	r0, r6
 80094d4:	f3af 8000 	nop.w
 80094d8:	4607      	mov	r7, r0
 80094da:	1c78      	adds	r0, r7, #1
 80094dc:	d1d6      	bne.n	800948c <_vfiprintf_r+0x1bc>
 80094de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094e0:	07d9      	lsls	r1, r3, #31
 80094e2:	d405      	bmi.n	80094f0 <_vfiprintf_r+0x220>
 80094e4:	89ab      	ldrh	r3, [r5, #12]
 80094e6:	059a      	lsls	r2, r3, #22
 80094e8:	d402      	bmi.n	80094f0 <_vfiprintf_r+0x220>
 80094ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094ec:	f7ff fa9d 	bl	8008a2a <__retarget_lock_release_recursive>
 80094f0:	89ab      	ldrh	r3, [r5, #12]
 80094f2:	065b      	lsls	r3, r3, #25
 80094f4:	f53f af12 	bmi.w	800931c <_vfiprintf_r+0x4c>
 80094f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094fa:	e711      	b.n	8009320 <_vfiprintf_r+0x50>
 80094fc:	ab03      	add	r3, sp, #12
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	462a      	mov	r2, r5
 8009502:	4b09      	ldr	r3, [pc, #36]	; (8009528 <_vfiprintf_r+0x258>)
 8009504:	a904      	add	r1, sp, #16
 8009506:	4630      	mov	r0, r6
 8009508:	f000 f880 	bl	800960c <_printf_i>
 800950c:	e7e4      	b.n	80094d8 <_vfiprintf_r+0x208>
 800950e:	bf00      	nop
 8009510:	0800a7d0 	.word	0x0800a7d0
 8009514:	0800a7f0 	.word	0x0800a7f0
 8009518:	0800a7b0 	.word	0x0800a7b0
 800951c:	0800a810 	.word	0x0800a810
 8009520:	0800a81a 	.word	0x0800a81a
 8009524:	00000000 	.word	0x00000000
 8009528:	080092ab 	.word	0x080092ab
 800952c:	0800a816 	.word	0x0800a816

08009530 <_printf_common>:
 8009530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009534:	4616      	mov	r6, r2
 8009536:	4699      	mov	r9, r3
 8009538:	688a      	ldr	r2, [r1, #8]
 800953a:	690b      	ldr	r3, [r1, #16]
 800953c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009540:	4293      	cmp	r3, r2
 8009542:	bfb8      	it	lt
 8009544:	4613      	movlt	r3, r2
 8009546:	6033      	str	r3, [r6, #0]
 8009548:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800954c:	4607      	mov	r7, r0
 800954e:	460c      	mov	r4, r1
 8009550:	b10a      	cbz	r2, 8009556 <_printf_common+0x26>
 8009552:	3301      	adds	r3, #1
 8009554:	6033      	str	r3, [r6, #0]
 8009556:	6823      	ldr	r3, [r4, #0]
 8009558:	0699      	lsls	r1, r3, #26
 800955a:	bf42      	ittt	mi
 800955c:	6833      	ldrmi	r3, [r6, #0]
 800955e:	3302      	addmi	r3, #2
 8009560:	6033      	strmi	r3, [r6, #0]
 8009562:	6825      	ldr	r5, [r4, #0]
 8009564:	f015 0506 	ands.w	r5, r5, #6
 8009568:	d106      	bne.n	8009578 <_printf_common+0x48>
 800956a:	f104 0a19 	add.w	sl, r4, #25
 800956e:	68e3      	ldr	r3, [r4, #12]
 8009570:	6832      	ldr	r2, [r6, #0]
 8009572:	1a9b      	subs	r3, r3, r2
 8009574:	42ab      	cmp	r3, r5
 8009576:	dc26      	bgt.n	80095c6 <_printf_common+0x96>
 8009578:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800957c:	1e13      	subs	r3, r2, #0
 800957e:	6822      	ldr	r2, [r4, #0]
 8009580:	bf18      	it	ne
 8009582:	2301      	movne	r3, #1
 8009584:	0692      	lsls	r2, r2, #26
 8009586:	d42b      	bmi.n	80095e0 <_printf_common+0xb0>
 8009588:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800958c:	4649      	mov	r1, r9
 800958e:	4638      	mov	r0, r7
 8009590:	47c0      	blx	r8
 8009592:	3001      	adds	r0, #1
 8009594:	d01e      	beq.n	80095d4 <_printf_common+0xa4>
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	68e5      	ldr	r5, [r4, #12]
 800959a:	6832      	ldr	r2, [r6, #0]
 800959c:	f003 0306 	and.w	r3, r3, #6
 80095a0:	2b04      	cmp	r3, #4
 80095a2:	bf08      	it	eq
 80095a4:	1aad      	subeq	r5, r5, r2
 80095a6:	68a3      	ldr	r3, [r4, #8]
 80095a8:	6922      	ldr	r2, [r4, #16]
 80095aa:	bf0c      	ite	eq
 80095ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095b0:	2500      	movne	r5, #0
 80095b2:	4293      	cmp	r3, r2
 80095b4:	bfc4      	itt	gt
 80095b6:	1a9b      	subgt	r3, r3, r2
 80095b8:	18ed      	addgt	r5, r5, r3
 80095ba:	2600      	movs	r6, #0
 80095bc:	341a      	adds	r4, #26
 80095be:	42b5      	cmp	r5, r6
 80095c0:	d11a      	bne.n	80095f8 <_printf_common+0xc8>
 80095c2:	2000      	movs	r0, #0
 80095c4:	e008      	b.n	80095d8 <_printf_common+0xa8>
 80095c6:	2301      	movs	r3, #1
 80095c8:	4652      	mov	r2, sl
 80095ca:	4649      	mov	r1, r9
 80095cc:	4638      	mov	r0, r7
 80095ce:	47c0      	blx	r8
 80095d0:	3001      	adds	r0, #1
 80095d2:	d103      	bne.n	80095dc <_printf_common+0xac>
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295
 80095d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095dc:	3501      	adds	r5, #1
 80095de:	e7c6      	b.n	800956e <_printf_common+0x3e>
 80095e0:	18e1      	adds	r1, r4, r3
 80095e2:	1c5a      	adds	r2, r3, #1
 80095e4:	2030      	movs	r0, #48	; 0x30
 80095e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095ea:	4422      	add	r2, r4
 80095ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095f4:	3302      	adds	r3, #2
 80095f6:	e7c7      	b.n	8009588 <_printf_common+0x58>
 80095f8:	2301      	movs	r3, #1
 80095fa:	4622      	mov	r2, r4
 80095fc:	4649      	mov	r1, r9
 80095fe:	4638      	mov	r0, r7
 8009600:	47c0      	blx	r8
 8009602:	3001      	adds	r0, #1
 8009604:	d0e6      	beq.n	80095d4 <_printf_common+0xa4>
 8009606:	3601      	adds	r6, #1
 8009608:	e7d9      	b.n	80095be <_printf_common+0x8e>
	...

0800960c <_printf_i>:
 800960c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009610:	7e0f      	ldrb	r7, [r1, #24]
 8009612:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009614:	2f78      	cmp	r7, #120	; 0x78
 8009616:	4691      	mov	r9, r2
 8009618:	4680      	mov	r8, r0
 800961a:	460c      	mov	r4, r1
 800961c:	469a      	mov	sl, r3
 800961e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009622:	d807      	bhi.n	8009634 <_printf_i+0x28>
 8009624:	2f62      	cmp	r7, #98	; 0x62
 8009626:	d80a      	bhi.n	800963e <_printf_i+0x32>
 8009628:	2f00      	cmp	r7, #0
 800962a:	f000 80d8 	beq.w	80097de <_printf_i+0x1d2>
 800962e:	2f58      	cmp	r7, #88	; 0x58
 8009630:	f000 80a3 	beq.w	800977a <_printf_i+0x16e>
 8009634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009638:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800963c:	e03a      	b.n	80096b4 <_printf_i+0xa8>
 800963e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009642:	2b15      	cmp	r3, #21
 8009644:	d8f6      	bhi.n	8009634 <_printf_i+0x28>
 8009646:	a101      	add	r1, pc, #4	; (adr r1, 800964c <_printf_i+0x40>)
 8009648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800964c:	080096a5 	.word	0x080096a5
 8009650:	080096b9 	.word	0x080096b9
 8009654:	08009635 	.word	0x08009635
 8009658:	08009635 	.word	0x08009635
 800965c:	08009635 	.word	0x08009635
 8009660:	08009635 	.word	0x08009635
 8009664:	080096b9 	.word	0x080096b9
 8009668:	08009635 	.word	0x08009635
 800966c:	08009635 	.word	0x08009635
 8009670:	08009635 	.word	0x08009635
 8009674:	08009635 	.word	0x08009635
 8009678:	080097c5 	.word	0x080097c5
 800967c:	080096e9 	.word	0x080096e9
 8009680:	080097a7 	.word	0x080097a7
 8009684:	08009635 	.word	0x08009635
 8009688:	08009635 	.word	0x08009635
 800968c:	080097e7 	.word	0x080097e7
 8009690:	08009635 	.word	0x08009635
 8009694:	080096e9 	.word	0x080096e9
 8009698:	08009635 	.word	0x08009635
 800969c:	08009635 	.word	0x08009635
 80096a0:	080097af 	.word	0x080097af
 80096a4:	682b      	ldr	r3, [r5, #0]
 80096a6:	1d1a      	adds	r2, r3, #4
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	602a      	str	r2, [r5, #0]
 80096ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096b4:	2301      	movs	r3, #1
 80096b6:	e0a3      	b.n	8009800 <_printf_i+0x1f4>
 80096b8:	6820      	ldr	r0, [r4, #0]
 80096ba:	6829      	ldr	r1, [r5, #0]
 80096bc:	0606      	lsls	r6, r0, #24
 80096be:	f101 0304 	add.w	r3, r1, #4
 80096c2:	d50a      	bpl.n	80096da <_printf_i+0xce>
 80096c4:	680e      	ldr	r6, [r1, #0]
 80096c6:	602b      	str	r3, [r5, #0]
 80096c8:	2e00      	cmp	r6, #0
 80096ca:	da03      	bge.n	80096d4 <_printf_i+0xc8>
 80096cc:	232d      	movs	r3, #45	; 0x2d
 80096ce:	4276      	negs	r6, r6
 80096d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096d4:	485e      	ldr	r0, [pc, #376]	; (8009850 <_printf_i+0x244>)
 80096d6:	230a      	movs	r3, #10
 80096d8:	e019      	b.n	800970e <_printf_i+0x102>
 80096da:	680e      	ldr	r6, [r1, #0]
 80096dc:	602b      	str	r3, [r5, #0]
 80096de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80096e2:	bf18      	it	ne
 80096e4:	b236      	sxthne	r6, r6
 80096e6:	e7ef      	b.n	80096c8 <_printf_i+0xbc>
 80096e8:	682b      	ldr	r3, [r5, #0]
 80096ea:	6820      	ldr	r0, [r4, #0]
 80096ec:	1d19      	adds	r1, r3, #4
 80096ee:	6029      	str	r1, [r5, #0]
 80096f0:	0601      	lsls	r1, r0, #24
 80096f2:	d501      	bpl.n	80096f8 <_printf_i+0xec>
 80096f4:	681e      	ldr	r6, [r3, #0]
 80096f6:	e002      	b.n	80096fe <_printf_i+0xf2>
 80096f8:	0646      	lsls	r6, r0, #25
 80096fa:	d5fb      	bpl.n	80096f4 <_printf_i+0xe8>
 80096fc:	881e      	ldrh	r6, [r3, #0]
 80096fe:	4854      	ldr	r0, [pc, #336]	; (8009850 <_printf_i+0x244>)
 8009700:	2f6f      	cmp	r7, #111	; 0x6f
 8009702:	bf0c      	ite	eq
 8009704:	2308      	moveq	r3, #8
 8009706:	230a      	movne	r3, #10
 8009708:	2100      	movs	r1, #0
 800970a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800970e:	6865      	ldr	r5, [r4, #4]
 8009710:	60a5      	str	r5, [r4, #8]
 8009712:	2d00      	cmp	r5, #0
 8009714:	bfa2      	ittt	ge
 8009716:	6821      	ldrge	r1, [r4, #0]
 8009718:	f021 0104 	bicge.w	r1, r1, #4
 800971c:	6021      	strge	r1, [r4, #0]
 800971e:	b90e      	cbnz	r6, 8009724 <_printf_i+0x118>
 8009720:	2d00      	cmp	r5, #0
 8009722:	d04d      	beq.n	80097c0 <_printf_i+0x1b4>
 8009724:	4615      	mov	r5, r2
 8009726:	fbb6 f1f3 	udiv	r1, r6, r3
 800972a:	fb03 6711 	mls	r7, r3, r1, r6
 800972e:	5dc7      	ldrb	r7, [r0, r7]
 8009730:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009734:	4637      	mov	r7, r6
 8009736:	42bb      	cmp	r3, r7
 8009738:	460e      	mov	r6, r1
 800973a:	d9f4      	bls.n	8009726 <_printf_i+0x11a>
 800973c:	2b08      	cmp	r3, #8
 800973e:	d10b      	bne.n	8009758 <_printf_i+0x14c>
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	07de      	lsls	r6, r3, #31
 8009744:	d508      	bpl.n	8009758 <_printf_i+0x14c>
 8009746:	6923      	ldr	r3, [r4, #16]
 8009748:	6861      	ldr	r1, [r4, #4]
 800974a:	4299      	cmp	r1, r3
 800974c:	bfde      	ittt	le
 800974e:	2330      	movle	r3, #48	; 0x30
 8009750:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009754:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009758:	1b52      	subs	r2, r2, r5
 800975a:	6122      	str	r2, [r4, #16]
 800975c:	f8cd a000 	str.w	sl, [sp]
 8009760:	464b      	mov	r3, r9
 8009762:	aa03      	add	r2, sp, #12
 8009764:	4621      	mov	r1, r4
 8009766:	4640      	mov	r0, r8
 8009768:	f7ff fee2 	bl	8009530 <_printf_common>
 800976c:	3001      	adds	r0, #1
 800976e:	d14c      	bne.n	800980a <_printf_i+0x1fe>
 8009770:	f04f 30ff 	mov.w	r0, #4294967295
 8009774:	b004      	add	sp, #16
 8009776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800977a:	4835      	ldr	r0, [pc, #212]	; (8009850 <_printf_i+0x244>)
 800977c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009780:	6829      	ldr	r1, [r5, #0]
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	f851 6b04 	ldr.w	r6, [r1], #4
 8009788:	6029      	str	r1, [r5, #0]
 800978a:	061d      	lsls	r5, r3, #24
 800978c:	d514      	bpl.n	80097b8 <_printf_i+0x1ac>
 800978e:	07df      	lsls	r7, r3, #31
 8009790:	bf44      	itt	mi
 8009792:	f043 0320 	orrmi.w	r3, r3, #32
 8009796:	6023      	strmi	r3, [r4, #0]
 8009798:	b91e      	cbnz	r6, 80097a2 <_printf_i+0x196>
 800979a:	6823      	ldr	r3, [r4, #0]
 800979c:	f023 0320 	bic.w	r3, r3, #32
 80097a0:	6023      	str	r3, [r4, #0]
 80097a2:	2310      	movs	r3, #16
 80097a4:	e7b0      	b.n	8009708 <_printf_i+0xfc>
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	f043 0320 	orr.w	r3, r3, #32
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	2378      	movs	r3, #120	; 0x78
 80097b0:	4828      	ldr	r0, [pc, #160]	; (8009854 <_printf_i+0x248>)
 80097b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097b6:	e7e3      	b.n	8009780 <_printf_i+0x174>
 80097b8:	0659      	lsls	r1, r3, #25
 80097ba:	bf48      	it	mi
 80097bc:	b2b6      	uxthmi	r6, r6
 80097be:	e7e6      	b.n	800978e <_printf_i+0x182>
 80097c0:	4615      	mov	r5, r2
 80097c2:	e7bb      	b.n	800973c <_printf_i+0x130>
 80097c4:	682b      	ldr	r3, [r5, #0]
 80097c6:	6826      	ldr	r6, [r4, #0]
 80097c8:	6961      	ldr	r1, [r4, #20]
 80097ca:	1d18      	adds	r0, r3, #4
 80097cc:	6028      	str	r0, [r5, #0]
 80097ce:	0635      	lsls	r5, r6, #24
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	d501      	bpl.n	80097d8 <_printf_i+0x1cc>
 80097d4:	6019      	str	r1, [r3, #0]
 80097d6:	e002      	b.n	80097de <_printf_i+0x1d2>
 80097d8:	0670      	lsls	r0, r6, #25
 80097da:	d5fb      	bpl.n	80097d4 <_printf_i+0x1c8>
 80097dc:	8019      	strh	r1, [r3, #0]
 80097de:	2300      	movs	r3, #0
 80097e0:	6123      	str	r3, [r4, #16]
 80097e2:	4615      	mov	r5, r2
 80097e4:	e7ba      	b.n	800975c <_printf_i+0x150>
 80097e6:	682b      	ldr	r3, [r5, #0]
 80097e8:	1d1a      	adds	r2, r3, #4
 80097ea:	602a      	str	r2, [r5, #0]
 80097ec:	681d      	ldr	r5, [r3, #0]
 80097ee:	6862      	ldr	r2, [r4, #4]
 80097f0:	2100      	movs	r1, #0
 80097f2:	4628      	mov	r0, r5
 80097f4:	f7f6 fd2c 	bl	8000250 <memchr>
 80097f8:	b108      	cbz	r0, 80097fe <_printf_i+0x1f2>
 80097fa:	1b40      	subs	r0, r0, r5
 80097fc:	6060      	str	r0, [r4, #4]
 80097fe:	6863      	ldr	r3, [r4, #4]
 8009800:	6123      	str	r3, [r4, #16]
 8009802:	2300      	movs	r3, #0
 8009804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009808:	e7a8      	b.n	800975c <_printf_i+0x150>
 800980a:	6923      	ldr	r3, [r4, #16]
 800980c:	462a      	mov	r2, r5
 800980e:	4649      	mov	r1, r9
 8009810:	4640      	mov	r0, r8
 8009812:	47d0      	blx	sl
 8009814:	3001      	adds	r0, #1
 8009816:	d0ab      	beq.n	8009770 <_printf_i+0x164>
 8009818:	6823      	ldr	r3, [r4, #0]
 800981a:	079b      	lsls	r3, r3, #30
 800981c:	d413      	bmi.n	8009846 <_printf_i+0x23a>
 800981e:	68e0      	ldr	r0, [r4, #12]
 8009820:	9b03      	ldr	r3, [sp, #12]
 8009822:	4298      	cmp	r0, r3
 8009824:	bfb8      	it	lt
 8009826:	4618      	movlt	r0, r3
 8009828:	e7a4      	b.n	8009774 <_printf_i+0x168>
 800982a:	2301      	movs	r3, #1
 800982c:	4632      	mov	r2, r6
 800982e:	4649      	mov	r1, r9
 8009830:	4640      	mov	r0, r8
 8009832:	47d0      	blx	sl
 8009834:	3001      	adds	r0, #1
 8009836:	d09b      	beq.n	8009770 <_printf_i+0x164>
 8009838:	3501      	adds	r5, #1
 800983a:	68e3      	ldr	r3, [r4, #12]
 800983c:	9903      	ldr	r1, [sp, #12]
 800983e:	1a5b      	subs	r3, r3, r1
 8009840:	42ab      	cmp	r3, r5
 8009842:	dcf2      	bgt.n	800982a <_printf_i+0x21e>
 8009844:	e7eb      	b.n	800981e <_printf_i+0x212>
 8009846:	2500      	movs	r5, #0
 8009848:	f104 0619 	add.w	r6, r4, #25
 800984c:	e7f5      	b.n	800983a <_printf_i+0x22e>
 800984e:	bf00      	nop
 8009850:	0800a821 	.word	0x0800a821
 8009854:	0800a832 	.word	0x0800a832

08009858 <_scanf_chars>:
 8009858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800985c:	4615      	mov	r5, r2
 800985e:	688a      	ldr	r2, [r1, #8]
 8009860:	4680      	mov	r8, r0
 8009862:	460c      	mov	r4, r1
 8009864:	b932      	cbnz	r2, 8009874 <_scanf_chars+0x1c>
 8009866:	698a      	ldr	r2, [r1, #24]
 8009868:	2a00      	cmp	r2, #0
 800986a:	bf0c      	ite	eq
 800986c:	2201      	moveq	r2, #1
 800986e:	f04f 32ff 	movne.w	r2, #4294967295
 8009872:	608a      	str	r2, [r1, #8]
 8009874:	6822      	ldr	r2, [r4, #0]
 8009876:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009908 <_scanf_chars+0xb0>
 800987a:	06d1      	lsls	r1, r2, #27
 800987c:	bf5f      	itttt	pl
 800987e:	681a      	ldrpl	r2, [r3, #0]
 8009880:	1d11      	addpl	r1, r2, #4
 8009882:	6019      	strpl	r1, [r3, #0]
 8009884:	6816      	ldrpl	r6, [r2, #0]
 8009886:	2700      	movs	r7, #0
 8009888:	69a0      	ldr	r0, [r4, #24]
 800988a:	b188      	cbz	r0, 80098b0 <_scanf_chars+0x58>
 800988c:	2801      	cmp	r0, #1
 800988e:	d107      	bne.n	80098a0 <_scanf_chars+0x48>
 8009890:	682a      	ldr	r2, [r5, #0]
 8009892:	7811      	ldrb	r1, [r2, #0]
 8009894:	6962      	ldr	r2, [r4, #20]
 8009896:	5c52      	ldrb	r2, [r2, r1]
 8009898:	b952      	cbnz	r2, 80098b0 <_scanf_chars+0x58>
 800989a:	2f00      	cmp	r7, #0
 800989c:	d031      	beq.n	8009902 <_scanf_chars+0xaa>
 800989e:	e022      	b.n	80098e6 <_scanf_chars+0x8e>
 80098a0:	2802      	cmp	r0, #2
 80098a2:	d120      	bne.n	80098e6 <_scanf_chars+0x8e>
 80098a4:	682b      	ldr	r3, [r5, #0]
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80098ac:	071b      	lsls	r3, r3, #28
 80098ae:	d41a      	bmi.n	80098e6 <_scanf_chars+0x8e>
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	06da      	lsls	r2, r3, #27
 80098b4:	bf5e      	ittt	pl
 80098b6:	682b      	ldrpl	r3, [r5, #0]
 80098b8:	781b      	ldrbpl	r3, [r3, #0]
 80098ba:	f806 3b01 	strbpl.w	r3, [r6], #1
 80098be:	682a      	ldr	r2, [r5, #0]
 80098c0:	686b      	ldr	r3, [r5, #4]
 80098c2:	3201      	adds	r2, #1
 80098c4:	602a      	str	r2, [r5, #0]
 80098c6:	68a2      	ldr	r2, [r4, #8]
 80098c8:	3b01      	subs	r3, #1
 80098ca:	3a01      	subs	r2, #1
 80098cc:	606b      	str	r3, [r5, #4]
 80098ce:	3701      	adds	r7, #1
 80098d0:	60a2      	str	r2, [r4, #8]
 80098d2:	b142      	cbz	r2, 80098e6 <_scanf_chars+0x8e>
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	dcd7      	bgt.n	8009888 <_scanf_chars+0x30>
 80098d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80098dc:	4629      	mov	r1, r5
 80098de:	4640      	mov	r0, r8
 80098e0:	4798      	blx	r3
 80098e2:	2800      	cmp	r0, #0
 80098e4:	d0d0      	beq.n	8009888 <_scanf_chars+0x30>
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	f013 0310 	ands.w	r3, r3, #16
 80098ec:	d105      	bne.n	80098fa <_scanf_chars+0xa2>
 80098ee:	68e2      	ldr	r2, [r4, #12]
 80098f0:	3201      	adds	r2, #1
 80098f2:	60e2      	str	r2, [r4, #12]
 80098f4:	69a2      	ldr	r2, [r4, #24]
 80098f6:	b102      	cbz	r2, 80098fa <_scanf_chars+0xa2>
 80098f8:	7033      	strb	r3, [r6, #0]
 80098fa:	6923      	ldr	r3, [r4, #16]
 80098fc:	443b      	add	r3, r7
 80098fe:	6123      	str	r3, [r4, #16]
 8009900:	2000      	movs	r0, #0
 8009902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009906:	bf00      	nop
 8009908:	0800a6ad 	.word	0x0800a6ad

0800990c <_scanf_i>:
 800990c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009910:	4698      	mov	r8, r3
 8009912:	4b76      	ldr	r3, [pc, #472]	; (8009aec <_scanf_i+0x1e0>)
 8009914:	460c      	mov	r4, r1
 8009916:	4682      	mov	sl, r0
 8009918:	4616      	mov	r6, r2
 800991a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800991e:	b087      	sub	sp, #28
 8009920:	ab03      	add	r3, sp, #12
 8009922:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009926:	4b72      	ldr	r3, [pc, #456]	; (8009af0 <_scanf_i+0x1e4>)
 8009928:	69a1      	ldr	r1, [r4, #24]
 800992a:	4a72      	ldr	r2, [pc, #456]	; (8009af4 <_scanf_i+0x1e8>)
 800992c:	2903      	cmp	r1, #3
 800992e:	bf18      	it	ne
 8009930:	461a      	movne	r2, r3
 8009932:	68a3      	ldr	r3, [r4, #8]
 8009934:	9201      	str	r2, [sp, #4]
 8009936:	1e5a      	subs	r2, r3, #1
 8009938:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800993c:	bf88      	it	hi
 800993e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009942:	4627      	mov	r7, r4
 8009944:	bf82      	ittt	hi
 8009946:	eb03 0905 	addhi.w	r9, r3, r5
 800994a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800994e:	60a3      	strhi	r3, [r4, #8]
 8009950:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009954:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009958:	bf98      	it	ls
 800995a:	f04f 0900 	movls.w	r9, #0
 800995e:	6023      	str	r3, [r4, #0]
 8009960:	463d      	mov	r5, r7
 8009962:	f04f 0b00 	mov.w	fp, #0
 8009966:	6831      	ldr	r1, [r6, #0]
 8009968:	ab03      	add	r3, sp, #12
 800996a:	7809      	ldrb	r1, [r1, #0]
 800996c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009970:	2202      	movs	r2, #2
 8009972:	f7f6 fc6d 	bl	8000250 <memchr>
 8009976:	b328      	cbz	r0, 80099c4 <_scanf_i+0xb8>
 8009978:	f1bb 0f01 	cmp.w	fp, #1
 800997c:	d159      	bne.n	8009a32 <_scanf_i+0x126>
 800997e:	6862      	ldr	r2, [r4, #4]
 8009980:	b92a      	cbnz	r2, 800998e <_scanf_i+0x82>
 8009982:	6822      	ldr	r2, [r4, #0]
 8009984:	2308      	movs	r3, #8
 8009986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800998a:	6063      	str	r3, [r4, #4]
 800998c:	6022      	str	r2, [r4, #0]
 800998e:	6822      	ldr	r2, [r4, #0]
 8009990:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009994:	6022      	str	r2, [r4, #0]
 8009996:	68a2      	ldr	r2, [r4, #8]
 8009998:	1e51      	subs	r1, r2, #1
 800999a:	60a1      	str	r1, [r4, #8]
 800999c:	b192      	cbz	r2, 80099c4 <_scanf_i+0xb8>
 800999e:	6832      	ldr	r2, [r6, #0]
 80099a0:	1c51      	adds	r1, r2, #1
 80099a2:	6031      	str	r1, [r6, #0]
 80099a4:	7812      	ldrb	r2, [r2, #0]
 80099a6:	f805 2b01 	strb.w	r2, [r5], #1
 80099aa:	6872      	ldr	r2, [r6, #4]
 80099ac:	3a01      	subs	r2, #1
 80099ae:	2a00      	cmp	r2, #0
 80099b0:	6072      	str	r2, [r6, #4]
 80099b2:	dc07      	bgt.n	80099c4 <_scanf_i+0xb8>
 80099b4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80099b8:	4631      	mov	r1, r6
 80099ba:	4650      	mov	r0, sl
 80099bc:	4790      	blx	r2
 80099be:	2800      	cmp	r0, #0
 80099c0:	f040 8085 	bne.w	8009ace <_scanf_i+0x1c2>
 80099c4:	f10b 0b01 	add.w	fp, fp, #1
 80099c8:	f1bb 0f03 	cmp.w	fp, #3
 80099cc:	d1cb      	bne.n	8009966 <_scanf_i+0x5a>
 80099ce:	6863      	ldr	r3, [r4, #4]
 80099d0:	b90b      	cbnz	r3, 80099d6 <_scanf_i+0xca>
 80099d2:	230a      	movs	r3, #10
 80099d4:	6063      	str	r3, [r4, #4]
 80099d6:	6863      	ldr	r3, [r4, #4]
 80099d8:	4947      	ldr	r1, [pc, #284]	; (8009af8 <_scanf_i+0x1ec>)
 80099da:	6960      	ldr	r0, [r4, #20]
 80099dc:	1ac9      	subs	r1, r1, r3
 80099de:	f000 f8af 	bl	8009b40 <__sccl>
 80099e2:	f04f 0b00 	mov.w	fp, #0
 80099e6:	68a3      	ldr	r3, [r4, #8]
 80099e8:	6822      	ldr	r2, [r4, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d03d      	beq.n	8009a6a <_scanf_i+0x15e>
 80099ee:	6831      	ldr	r1, [r6, #0]
 80099f0:	6960      	ldr	r0, [r4, #20]
 80099f2:	f891 c000 	ldrb.w	ip, [r1]
 80099f6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80099fa:	2800      	cmp	r0, #0
 80099fc:	d035      	beq.n	8009a6a <_scanf_i+0x15e>
 80099fe:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009a02:	d124      	bne.n	8009a4e <_scanf_i+0x142>
 8009a04:	0510      	lsls	r0, r2, #20
 8009a06:	d522      	bpl.n	8009a4e <_scanf_i+0x142>
 8009a08:	f10b 0b01 	add.w	fp, fp, #1
 8009a0c:	f1b9 0f00 	cmp.w	r9, #0
 8009a10:	d003      	beq.n	8009a1a <_scanf_i+0x10e>
 8009a12:	3301      	adds	r3, #1
 8009a14:	f109 39ff 	add.w	r9, r9, #4294967295
 8009a18:	60a3      	str	r3, [r4, #8]
 8009a1a:	6873      	ldr	r3, [r6, #4]
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	6073      	str	r3, [r6, #4]
 8009a22:	dd1b      	ble.n	8009a5c <_scanf_i+0x150>
 8009a24:	6833      	ldr	r3, [r6, #0]
 8009a26:	3301      	adds	r3, #1
 8009a28:	6033      	str	r3, [r6, #0]
 8009a2a:	68a3      	ldr	r3, [r4, #8]
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	60a3      	str	r3, [r4, #8]
 8009a30:	e7d9      	b.n	80099e6 <_scanf_i+0xda>
 8009a32:	f1bb 0f02 	cmp.w	fp, #2
 8009a36:	d1ae      	bne.n	8009996 <_scanf_i+0x8a>
 8009a38:	6822      	ldr	r2, [r4, #0]
 8009a3a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009a3e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009a42:	d1bf      	bne.n	80099c4 <_scanf_i+0xb8>
 8009a44:	2310      	movs	r3, #16
 8009a46:	6063      	str	r3, [r4, #4]
 8009a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a4c:	e7a2      	b.n	8009994 <_scanf_i+0x88>
 8009a4e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009a52:	6022      	str	r2, [r4, #0]
 8009a54:	780b      	ldrb	r3, [r1, #0]
 8009a56:	f805 3b01 	strb.w	r3, [r5], #1
 8009a5a:	e7de      	b.n	8009a1a <_scanf_i+0x10e>
 8009a5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009a60:	4631      	mov	r1, r6
 8009a62:	4650      	mov	r0, sl
 8009a64:	4798      	blx	r3
 8009a66:	2800      	cmp	r0, #0
 8009a68:	d0df      	beq.n	8009a2a <_scanf_i+0x11e>
 8009a6a:	6823      	ldr	r3, [r4, #0]
 8009a6c:	05db      	lsls	r3, r3, #23
 8009a6e:	d50d      	bpl.n	8009a8c <_scanf_i+0x180>
 8009a70:	42bd      	cmp	r5, r7
 8009a72:	d909      	bls.n	8009a88 <_scanf_i+0x17c>
 8009a74:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009a78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a7c:	4632      	mov	r2, r6
 8009a7e:	4650      	mov	r0, sl
 8009a80:	4798      	blx	r3
 8009a82:	f105 39ff 	add.w	r9, r5, #4294967295
 8009a86:	464d      	mov	r5, r9
 8009a88:	42bd      	cmp	r5, r7
 8009a8a:	d02d      	beq.n	8009ae8 <_scanf_i+0x1dc>
 8009a8c:	6822      	ldr	r2, [r4, #0]
 8009a8e:	f012 0210 	ands.w	r2, r2, #16
 8009a92:	d113      	bne.n	8009abc <_scanf_i+0x1b0>
 8009a94:	702a      	strb	r2, [r5, #0]
 8009a96:	6863      	ldr	r3, [r4, #4]
 8009a98:	9e01      	ldr	r6, [sp, #4]
 8009a9a:	4639      	mov	r1, r7
 8009a9c:	4650      	mov	r0, sl
 8009a9e:	47b0      	blx	r6
 8009aa0:	6821      	ldr	r1, [r4, #0]
 8009aa2:	f8d8 3000 	ldr.w	r3, [r8]
 8009aa6:	f011 0f20 	tst.w	r1, #32
 8009aaa:	d013      	beq.n	8009ad4 <_scanf_i+0x1c8>
 8009aac:	1d1a      	adds	r2, r3, #4
 8009aae:	f8c8 2000 	str.w	r2, [r8]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6018      	str	r0, [r3, #0]
 8009ab6:	68e3      	ldr	r3, [r4, #12]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	60e3      	str	r3, [r4, #12]
 8009abc:	1bed      	subs	r5, r5, r7
 8009abe:	44ab      	add	fp, r5
 8009ac0:	6925      	ldr	r5, [r4, #16]
 8009ac2:	445d      	add	r5, fp
 8009ac4:	6125      	str	r5, [r4, #16]
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	b007      	add	sp, #28
 8009aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ace:	f04f 0b00 	mov.w	fp, #0
 8009ad2:	e7ca      	b.n	8009a6a <_scanf_i+0x15e>
 8009ad4:	1d1a      	adds	r2, r3, #4
 8009ad6:	f8c8 2000 	str.w	r2, [r8]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f011 0f01 	tst.w	r1, #1
 8009ae0:	bf14      	ite	ne
 8009ae2:	8018      	strhne	r0, [r3, #0]
 8009ae4:	6018      	streq	r0, [r3, #0]
 8009ae6:	e7e6      	b.n	8009ab6 <_scanf_i+0x1aa>
 8009ae8:	2001      	movs	r0, #1
 8009aea:	e7ed      	b.n	8009ac8 <_scanf_i+0x1bc>
 8009aec:	0800a304 	.word	0x0800a304
 8009af0:	08009c95 	.word	0x08009c95
 8009af4:	08008781 	.word	0x08008781
 8009af8:	0800a85c 	.word	0x0800a85c

08009afc <_read_r>:
 8009afc:	b538      	push	{r3, r4, r5, lr}
 8009afe:	4d07      	ldr	r5, [pc, #28]	; (8009b1c <_read_r+0x20>)
 8009b00:	4604      	mov	r4, r0
 8009b02:	4608      	mov	r0, r1
 8009b04:	4611      	mov	r1, r2
 8009b06:	2200      	movs	r2, #0
 8009b08:	602a      	str	r2, [r5, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	f7f7 fadc 	bl	80010c8 <_read>
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	d102      	bne.n	8009b1a <_read_r+0x1e>
 8009b14:	682b      	ldr	r3, [r5, #0]
 8009b16:	b103      	cbz	r3, 8009b1a <_read_r+0x1e>
 8009b18:	6023      	str	r3, [r4, #0]
 8009b1a:	bd38      	pop	{r3, r4, r5, pc}
 8009b1c:	20000300 	.word	0x20000300

08009b20 <_sbrk_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	4d06      	ldr	r5, [pc, #24]	; (8009b3c <_sbrk_r+0x1c>)
 8009b24:	2300      	movs	r3, #0
 8009b26:	4604      	mov	r4, r0
 8009b28:	4608      	mov	r0, r1
 8009b2a:	602b      	str	r3, [r5, #0]
 8009b2c:	f7f7 fb3a 	bl	80011a4 <_sbrk>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	d102      	bne.n	8009b3a <_sbrk_r+0x1a>
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	b103      	cbz	r3, 8009b3a <_sbrk_r+0x1a>
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	20000300 	.word	0x20000300

08009b40 <__sccl>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	780b      	ldrb	r3, [r1, #0]
 8009b44:	4604      	mov	r4, r0
 8009b46:	2b5e      	cmp	r3, #94	; 0x5e
 8009b48:	bf0b      	itete	eq
 8009b4a:	784b      	ldrbeq	r3, [r1, #1]
 8009b4c:	1c48      	addne	r0, r1, #1
 8009b4e:	1c88      	addeq	r0, r1, #2
 8009b50:	2200      	movne	r2, #0
 8009b52:	bf08      	it	eq
 8009b54:	2201      	moveq	r2, #1
 8009b56:	1e61      	subs	r1, r4, #1
 8009b58:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009b5c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009b60:	42a9      	cmp	r1, r5
 8009b62:	d1fb      	bne.n	8009b5c <__sccl+0x1c>
 8009b64:	b90b      	cbnz	r3, 8009b6a <__sccl+0x2a>
 8009b66:	3801      	subs	r0, #1
 8009b68:	bd70      	pop	{r4, r5, r6, pc}
 8009b6a:	f082 0201 	eor.w	r2, r2, #1
 8009b6e:	54e2      	strb	r2, [r4, r3]
 8009b70:	4605      	mov	r5, r0
 8009b72:	4628      	mov	r0, r5
 8009b74:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009b78:	292d      	cmp	r1, #45	; 0x2d
 8009b7a:	d006      	beq.n	8009b8a <__sccl+0x4a>
 8009b7c:	295d      	cmp	r1, #93	; 0x5d
 8009b7e:	d0f3      	beq.n	8009b68 <__sccl+0x28>
 8009b80:	b909      	cbnz	r1, 8009b86 <__sccl+0x46>
 8009b82:	4628      	mov	r0, r5
 8009b84:	e7f0      	b.n	8009b68 <__sccl+0x28>
 8009b86:	460b      	mov	r3, r1
 8009b88:	e7f1      	b.n	8009b6e <__sccl+0x2e>
 8009b8a:	786e      	ldrb	r6, [r5, #1]
 8009b8c:	2e5d      	cmp	r6, #93	; 0x5d
 8009b8e:	d0fa      	beq.n	8009b86 <__sccl+0x46>
 8009b90:	42b3      	cmp	r3, r6
 8009b92:	dcf8      	bgt.n	8009b86 <__sccl+0x46>
 8009b94:	3502      	adds	r5, #2
 8009b96:	4619      	mov	r1, r3
 8009b98:	3101      	adds	r1, #1
 8009b9a:	428e      	cmp	r6, r1
 8009b9c:	5462      	strb	r2, [r4, r1]
 8009b9e:	dcfb      	bgt.n	8009b98 <__sccl+0x58>
 8009ba0:	1af1      	subs	r1, r6, r3
 8009ba2:	3901      	subs	r1, #1
 8009ba4:	1c58      	adds	r0, r3, #1
 8009ba6:	42b3      	cmp	r3, r6
 8009ba8:	bfa8      	it	ge
 8009baa:	2100      	movge	r1, #0
 8009bac:	1843      	adds	r3, r0, r1
 8009bae:	e7e0      	b.n	8009b72 <__sccl+0x32>

08009bb0 <_strtoul_l.constprop.0>:
 8009bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bb4:	4f36      	ldr	r7, [pc, #216]	; (8009c90 <_strtoul_l.constprop.0+0xe0>)
 8009bb6:	4686      	mov	lr, r0
 8009bb8:	460d      	mov	r5, r1
 8009bba:	4628      	mov	r0, r5
 8009bbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bc0:	5de6      	ldrb	r6, [r4, r7]
 8009bc2:	f016 0608 	ands.w	r6, r6, #8
 8009bc6:	d1f8      	bne.n	8009bba <_strtoul_l.constprop.0+0xa>
 8009bc8:	2c2d      	cmp	r4, #45	; 0x2d
 8009bca:	d12f      	bne.n	8009c2c <_strtoul_l.constprop.0+0x7c>
 8009bcc:	782c      	ldrb	r4, [r5, #0]
 8009bce:	2601      	movs	r6, #1
 8009bd0:	1c85      	adds	r5, r0, #2
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d057      	beq.n	8009c86 <_strtoul_l.constprop.0+0xd6>
 8009bd6:	2b10      	cmp	r3, #16
 8009bd8:	d109      	bne.n	8009bee <_strtoul_l.constprop.0+0x3e>
 8009bda:	2c30      	cmp	r4, #48	; 0x30
 8009bdc:	d107      	bne.n	8009bee <_strtoul_l.constprop.0+0x3e>
 8009bde:	7828      	ldrb	r0, [r5, #0]
 8009be0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009be4:	2858      	cmp	r0, #88	; 0x58
 8009be6:	d149      	bne.n	8009c7c <_strtoul_l.constprop.0+0xcc>
 8009be8:	786c      	ldrb	r4, [r5, #1]
 8009bea:	2310      	movs	r3, #16
 8009bec:	3502      	adds	r5, #2
 8009bee:	f04f 38ff 	mov.w	r8, #4294967295
 8009bf2:	2700      	movs	r7, #0
 8009bf4:	fbb8 f8f3 	udiv	r8, r8, r3
 8009bf8:	fb03 f908 	mul.w	r9, r3, r8
 8009bfc:	ea6f 0909 	mvn.w	r9, r9
 8009c00:	4638      	mov	r0, r7
 8009c02:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009c06:	f1bc 0f09 	cmp.w	ip, #9
 8009c0a:	d814      	bhi.n	8009c36 <_strtoul_l.constprop.0+0x86>
 8009c0c:	4664      	mov	r4, ip
 8009c0e:	42a3      	cmp	r3, r4
 8009c10:	dd22      	ble.n	8009c58 <_strtoul_l.constprop.0+0xa8>
 8009c12:	2f00      	cmp	r7, #0
 8009c14:	db1d      	blt.n	8009c52 <_strtoul_l.constprop.0+0xa2>
 8009c16:	4580      	cmp	r8, r0
 8009c18:	d31b      	bcc.n	8009c52 <_strtoul_l.constprop.0+0xa2>
 8009c1a:	d101      	bne.n	8009c20 <_strtoul_l.constprop.0+0x70>
 8009c1c:	45a1      	cmp	r9, r4
 8009c1e:	db18      	blt.n	8009c52 <_strtoul_l.constprop.0+0xa2>
 8009c20:	fb00 4003 	mla	r0, r0, r3, r4
 8009c24:	2701      	movs	r7, #1
 8009c26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c2a:	e7ea      	b.n	8009c02 <_strtoul_l.constprop.0+0x52>
 8009c2c:	2c2b      	cmp	r4, #43	; 0x2b
 8009c2e:	bf04      	itt	eq
 8009c30:	782c      	ldrbeq	r4, [r5, #0]
 8009c32:	1c85      	addeq	r5, r0, #2
 8009c34:	e7cd      	b.n	8009bd2 <_strtoul_l.constprop.0+0x22>
 8009c36:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009c3a:	f1bc 0f19 	cmp.w	ip, #25
 8009c3e:	d801      	bhi.n	8009c44 <_strtoul_l.constprop.0+0x94>
 8009c40:	3c37      	subs	r4, #55	; 0x37
 8009c42:	e7e4      	b.n	8009c0e <_strtoul_l.constprop.0+0x5e>
 8009c44:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009c48:	f1bc 0f19 	cmp.w	ip, #25
 8009c4c:	d804      	bhi.n	8009c58 <_strtoul_l.constprop.0+0xa8>
 8009c4e:	3c57      	subs	r4, #87	; 0x57
 8009c50:	e7dd      	b.n	8009c0e <_strtoul_l.constprop.0+0x5e>
 8009c52:	f04f 37ff 	mov.w	r7, #4294967295
 8009c56:	e7e6      	b.n	8009c26 <_strtoul_l.constprop.0+0x76>
 8009c58:	2f00      	cmp	r7, #0
 8009c5a:	da07      	bge.n	8009c6c <_strtoul_l.constprop.0+0xbc>
 8009c5c:	2322      	movs	r3, #34	; 0x22
 8009c5e:	f8ce 3000 	str.w	r3, [lr]
 8009c62:	f04f 30ff 	mov.w	r0, #4294967295
 8009c66:	b932      	cbnz	r2, 8009c76 <_strtoul_l.constprop.0+0xc6>
 8009c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c6c:	b106      	cbz	r6, 8009c70 <_strtoul_l.constprop.0+0xc0>
 8009c6e:	4240      	negs	r0, r0
 8009c70:	2a00      	cmp	r2, #0
 8009c72:	d0f9      	beq.n	8009c68 <_strtoul_l.constprop.0+0xb8>
 8009c74:	b107      	cbz	r7, 8009c78 <_strtoul_l.constprop.0+0xc8>
 8009c76:	1e69      	subs	r1, r5, #1
 8009c78:	6011      	str	r1, [r2, #0]
 8009c7a:	e7f5      	b.n	8009c68 <_strtoul_l.constprop.0+0xb8>
 8009c7c:	2430      	movs	r4, #48	; 0x30
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1b5      	bne.n	8009bee <_strtoul_l.constprop.0+0x3e>
 8009c82:	2308      	movs	r3, #8
 8009c84:	e7b3      	b.n	8009bee <_strtoul_l.constprop.0+0x3e>
 8009c86:	2c30      	cmp	r4, #48	; 0x30
 8009c88:	d0a9      	beq.n	8009bde <_strtoul_l.constprop.0+0x2e>
 8009c8a:	230a      	movs	r3, #10
 8009c8c:	e7af      	b.n	8009bee <_strtoul_l.constprop.0+0x3e>
 8009c8e:	bf00      	nop
 8009c90:	0800a6ad 	.word	0x0800a6ad

08009c94 <_strtoul_r>:
 8009c94:	f7ff bf8c 	b.w	8009bb0 <_strtoul_l.constprop.0>

08009c98 <__submore>:
 8009c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c9c:	460c      	mov	r4, r1
 8009c9e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009ca0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ca4:	4299      	cmp	r1, r3
 8009ca6:	d11d      	bne.n	8009ce4 <__submore+0x4c>
 8009ca8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009cac:	f7fe ff44 	bl	8008b38 <_malloc_r>
 8009cb0:	b918      	cbnz	r0, 8009cba <__submore+0x22>
 8009cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cbe:	63a3      	str	r3, [r4, #56]	; 0x38
 8009cc0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009cc4:	6360      	str	r0, [r4, #52]	; 0x34
 8009cc6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009cca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009cce:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009cd2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009cd6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009cda:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009cde:	6020      	str	r0, [r4, #0]
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	e7e8      	b.n	8009cb6 <__submore+0x1e>
 8009ce4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009ce6:	0077      	lsls	r7, r6, #1
 8009ce8:	463a      	mov	r2, r7
 8009cea:	f000 fa33 	bl	800a154 <_realloc_r>
 8009cee:	4605      	mov	r5, r0
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d0de      	beq.n	8009cb2 <__submore+0x1a>
 8009cf4:	eb00 0806 	add.w	r8, r0, r6
 8009cf8:	4601      	mov	r1, r0
 8009cfa:	4632      	mov	r2, r6
 8009cfc:	4640      	mov	r0, r8
 8009cfe:	f000 f9f5 	bl	800a0ec <memcpy>
 8009d02:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009d06:	f8c4 8000 	str.w	r8, [r4]
 8009d0a:	e7e9      	b.n	8009ce0 <__submore+0x48>

08009d0c <__swbuf_r>:
 8009d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0e:	460e      	mov	r6, r1
 8009d10:	4614      	mov	r4, r2
 8009d12:	4605      	mov	r5, r0
 8009d14:	b118      	cbz	r0, 8009d1e <__swbuf_r+0x12>
 8009d16:	6983      	ldr	r3, [r0, #24]
 8009d18:	b90b      	cbnz	r3, 8009d1e <__swbuf_r+0x12>
 8009d1a:	f7fe fdd5 	bl	80088c8 <__sinit>
 8009d1e:	4b21      	ldr	r3, [pc, #132]	; (8009da4 <__swbuf_r+0x98>)
 8009d20:	429c      	cmp	r4, r3
 8009d22:	d12b      	bne.n	8009d7c <__swbuf_r+0x70>
 8009d24:	686c      	ldr	r4, [r5, #4]
 8009d26:	69a3      	ldr	r3, [r4, #24]
 8009d28:	60a3      	str	r3, [r4, #8]
 8009d2a:	89a3      	ldrh	r3, [r4, #12]
 8009d2c:	071a      	lsls	r2, r3, #28
 8009d2e:	d52f      	bpl.n	8009d90 <__swbuf_r+0x84>
 8009d30:	6923      	ldr	r3, [r4, #16]
 8009d32:	b36b      	cbz	r3, 8009d90 <__swbuf_r+0x84>
 8009d34:	6923      	ldr	r3, [r4, #16]
 8009d36:	6820      	ldr	r0, [r4, #0]
 8009d38:	1ac0      	subs	r0, r0, r3
 8009d3a:	6963      	ldr	r3, [r4, #20]
 8009d3c:	b2f6      	uxtb	r6, r6
 8009d3e:	4283      	cmp	r3, r0
 8009d40:	4637      	mov	r7, r6
 8009d42:	dc04      	bgt.n	8009d4e <__swbuf_r+0x42>
 8009d44:	4621      	mov	r1, r4
 8009d46:	4628      	mov	r0, r5
 8009d48:	f000 f92e 	bl	8009fa8 <_fflush_r>
 8009d4c:	bb30      	cbnz	r0, 8009d9c <__swbuf_r+0x90>
 8009d4e:	68a3      	ldr	r3, [r4, #8]
 8009d50:	3b01      	subs	r3, #1
 8009d52:	60a3      	str	r3, [r4, #8]
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	1c5a      	adds	r2, r3, #1
 8009d58:	6022      	str	r2, [r4, #0]
 8009d5a:	701e      	strb	r6, [r3, #0]
 8009d5c:	6963      	ldr	r3, [r4, #20]
 8009d5e:	3001      	adds	r0, #1
 8009d60:	4283      	cmp	r3, r0
 8009d62:	d004      	beq.n	8009d6e <__swbuf_r+0x62>
 8009d64:	89a3      	ldrh	r3, [r4, #12]
 8009d66:	07db      	lsls	r3, r3, #31
 8009d68:	d506      	bpl.n	8009d78 <__swbuf_r+0x6c>
 8009d6a:	2e0a      	cmp	r6, #10
 8009d6c:	d104      	bne.n	8009d78 <__swbuf_r+0x6c>
 8009d6e:	4621      	mov	r1, r4
 8009d70:	4628      	mov	r0, r5
 8009d72:	f000 f919 	bl	8009fa8 <_fflush_r>
 8009d76:	b988      	cbnz	r0, 8009d9c <__swbuf_r+0x90>
 8009d78:	4638      	mov	r0, r7
 8009d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d7c:	4b0a      	ldr	r3, [pc, #40]	; (8009da8 <__swbuf_r+0x9c>)
 8009d7e:	429c      	cmp	r4, r3
 8009d80:	d101      	bne.n	8009d86 <__swbuf_r+0x7a>
 8009d82:	68ac      	ldr	r4, [r5, #8]
 8009d84:	e7cf      	b.n	8009d26 <__swbuf_r+0x1a>
 8009d86:	4b09      	ldr	r3, [pc, #36]	; (8009dac <__swbuf_r+0xa0>)
 8009d88:	429c      	cmp	r4, r3
 8009d8a:	bf08      	it	eq
 8009d8c:	68ec      	ldreq	r4, [r5, #12]
 8009d8e:	e7ca      	b.n	8009d26 <__swbuf_r+0x1a>
 8009d90:	4621      	mov	r1, r4
 8009d92:	4628      	mov	r0, r5
 8009d94:	f000 f80c 	bl	8009db0 <__swsetup_r>
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	d0cb      	beq.n	8009d34 <__swbuf_r+0x28>
 8009d9c:	f04f 37ff 	mov.w	r7, #4294967295
 8009da0:	e7ea      	b.n	8009d78 <__swbuf_r+0x6c>
 8009da2:	bf00      	nop
 8009da4:	0800a7d0 	.word	0x0800a7d0
 8009da8:	0800a7f0 	.word	0x0800a7f0
 8009dac:	0800a7b0 	.word	0x0800a7b0

08009db0 <__swsetup_r>:
 8009db0:	4b32      	ldr	r3, [pc, #200]	; (8009e7c <__swsetup_r+0xcc>)
 8009db2:	b570      	push	{r4, r5, r6, lr}
 8009db4:	681d      	ldr	r5, [r3, #0]
 8009db6:	4606      	mov	r6, r0
 8009db8:	460c      	mov	r4, r1
 8009dba:	b125      	cbz	r5, 8009dc6 <__swsetup_r+0x16>
 8009dbc:	69ab      	ldr	r3, [r5, #24]
 8009dbe:	b913      	cbnz	r3, 8009dc6 <__swsetup_r+0x16>
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	f7fe fd81 	bl	80088c8 <__sinit>
 8009dc6:	4b2e      	ldr	r3, [pc, #184]	; (8009e80 <__swsetup_r+0xd0>)
 8009dc8:	429c      	cmp	r4, r3
 8009dca:	d10f      	bne.n	8009dec <__swsetup_r+0x3c>
 8009dcc:	686c      	ldr	r4, [r5, #4]
 8009dce:	89a3      	ldrh	r3, [r4, #12]
 8009dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dd4:	0719      	lsls	r1, r3, #28
 8009dd6:	d42c      	bmi.n	8009e32 <__swsetup_r+0x82>
 8009dd8:	06dd      	lsls	r5, r3, #27
 8009dda:	d411      	bmi.n	8009e00 <__swsetup_r+0x50>
 8009ddc:	2309      	movs	r3, #9
 8009dde:	6033      	str	r3, [r6, #0]
 8009de0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009de4:	81a3      	strh	r3, [r4, #12]
 8009de6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dea:	e03e      	b.n	8009e6a <__swsetup_r+0xba>
 8009dec:	4b25      	ldr	r3, [pc, #148]	; (8009e84 <__swsetup_r+0xd4>)
 8009dee:	429c      	cmp	r4, r3
 8009df0:	d101      	bne.n	8009df6 <__swsetup_r+0x46>
 8009df2:	68ac      	ldr	r4, [r5, #8]
 8009df4:	e7eb      	b.n	8009dce <__swsetup_r+0x1e>
 8009df6:	4b24      	ldr	r3, [pc, #144]	; (8009e88 <__swsetup_r+0xd8>)
 8009df8:	429c      	cmp	r4, r3
 8009dfa:	bf08      	it	eq
 8009dfc:	68ec      	ldreq	r4, [r5, #12]
 8009dfe:	e7e6      	b.n	8009dce <__swsetup_r+0x1e>
 8009e00:	0758      	lsls	r0, r3, #29
 8009e02:	d512      	bpl.n	8009e2a <__swsetup_r+0x7a>
 8009e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e06:	b141      	cbz	r1, 8009e1a <__swsetup_r+0x6a>
 8009e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e0c:	4299      	cmp	r1, r3
 8009e0e:	d002      	beq.n	8009e16 <__swsetup_r+0x66>
 8009e10:	4630      	mov	r0, r6
 8009e12:	f7fe fe25 	bl	8008a60 <_free_r>
 8009e16:	2300      	movs	r3, #0
 8009e18:	6363      	str	r3, [r4, #52]	; 0x34
 8009e1a:	89a3      	ldrh	r3, [r4, #12]
 8009e1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e20:	81a3      	strh	r3, [r4, #12]
 8009e22:	2300      	movs	r3, #0
 8009e24:	6063      	str	r3, [r4, #4]
 8009e26:	6923      	ldr	r3, [r4, #16]
 8009e28:	6023      	str	r3, [r4, #0]
 8009e2a:	89a3      	ldrh	r3, [r4, #12]
 8009e2c:	f043 0308 	orr.w	r3, r3, #8
 8009e30:	81a3      	strh	r3, [r4, #12]
 8009e32:	6923      	ldr	r3, [r4, #16]
 8009e34:	b94b      	cbnz	r3, 8009e4a <__swsetup_r+0x9a>
 8009e36:	89a3      	ldrh	r3, [r4, #12]
 8009e38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e40:	d003      	beq.n	8009e4a <__swsetup_r+0x9a>
 8009e42:	4621      	mov	r1, r4
 8009e44:	4630      	mov	r0, r6
 8009e46:	f000 f911 	bl	800a06c <__smakebuf_r>
 8009e4a:	89a0      	ldrh	r0, [r4, #12]
 8009e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e50:	f010 0301 	ands.w	r3, r0, #1
 8009e54:	d00a      	beq.n	8009e6c <__swsetup_r+0xbc>
 8009e56:	2300      	movs	r3, #0
 8009e58:	60a3      	str	r3, [r4, #8]
 8009e5a:	6963      	ldr	r3, [r4, #20]
 8009e5c:	425b      	negs	r3, r3
 8009e5e:	61a3      	str	r3, [r4, #24]
 8009e60:	6923      	ldr	r3, [r4, #16]
 8009e62:	b943      	cbnz	r3, 8009e76 <__swsetup_r+0xc6>
 8009e64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e68:	d1ba      	bne.n	8009de0 <__swsetup_r+0x30>
 8009e6a:	bd70      	pop	{r4, r5, r6, pc}
 8009e6c:	0781      	lsls	r1, r0, #30
 8009e6e:	bf58      	it	pl
 8009e70:	6963      	ldrpl	r3, [r4, #20]
 8009e72:	60a3      	str	r3, [r4, #8]
 8009e74:	e7f4      	b.n	8009e60 <__swsetup_r+0xb0>
 8009e76:	2000      	movs	r0, #0
 8009e78:	e7f7      	b.n	8009e6a <__swsetup_r+0xba>
 8009e7a:	bf00      	nop
 8009e7c:	20000074 	.word	0x20000074
 8009e80:	0800a7d0 	.word	0x0800a7d0
 8009e84:	0800a7f0 	.word	0x0800a7f0
 8009e88:	0800a7b0 	.word	0x0800a7b0

08009e8c <abort>:
 8009e8c:	b508      	push	{r3, lr}
 8009e8e:	2006      	movs	r0, #6
 8009e90:	f000 f9b8 	bl	800a204 <raise>
 8009e94:	2001      	movs	r0, #1
 8009e96:	f7f7 f90d 	bl	80010b4 <_exit>
	...

08009e9c <__sflush_r>:
 8009e9c:	898a      	ldrh	r2, [r1, #12]
 8009e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea2:	4605      	mov	r5, r0
 8009ea4:	0710      	lsls	r0, r2, #28
 8009ea6:	460c      	mov	r4, r1
 8009ea8:	d458      	bmi.n	8009f5c <__sflush_r+0xc0>
 8009eaa:	684b      	ldr	r3, [r1, #4]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	dc05      	bgt.n	8009ebc <__sflush_r+0x20>
 8009eb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	dc02      	bgt.n	8009ebc <__sflush_r+0x20>
 8009eb6:	2000      	movs	r0, #0
 8009eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ebe:	2e00      	cmp	r6, #0
 8009ec0:	d0f9      	beq.n	8009eb6 <__sflush_r+0x1a>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ec8:	682f      	ldr	r7, [r5, #0]
 8009eca:	602b      	str	r3, [r5, #0]
 8009ecc:	d032      	beq.n	8009f34 <__sflush_r+0x98>
 8009ece:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ed0:	89a3      	ldrh	r3, [r4, #12]
 8009ed2:	075a      	lsls	r2, r3, #29
 8009ed4:	d505      	bpl.n	8009ee2 <__sflush_r+0x46>
 8009ed6:	6863      	ldr	r3, [r4, #4]
 8009ed8:	1ac0      	subs	r0, r0, r3
 8009eda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009edc:	b10b      	cbz	r3, 8009ee2 <__sflush_r+0x46>
 8009ede:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ee0:	1ac0      	subs	r0, r0, r3
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ee8:	6a21      	ldr	r1, [r4, #32]
 8009eea:	4628      	mov	r0, r5
 8009eec:	47b0      	blx	r6
 8009eee:	1c43      	adds	r3, r0, #1
 8009ef0:	89a3      	ldrh	r3, [r4, #12]
 8009ef2:	d106      	bne.n	8009f02 <__sflush_r+0x66>
 8009ef4:	6829      	ldr	r1, [r5, #0]
 8009ef6:	291d      	cmp	r1, #29
 8009ef8:	d82c      	bhi.n	8009f54 <__sflush_r+0xb8>
 8009efa:	4a2a      	ldr	r2, [pc, #168]	; (8009fa4 <__sflush_r+0x108>)
 8009efc:	40ca      	lsrs	r2, r1
 8009efe:	07d6      	lsls	r6, r2, #31
 8009f00:	d528      	bpl.n	8009f54 <__sflush_r+0xb8>
 8009f02:	2200      	movs	r2, #0
 8009f04:	6062      	str	r2, [r4, #4]
 8009f06:	04d9      	lsls	r1, r3, #19
 8009f08:	6922      	ldr	r2, [r4, #16]
 8009f0a:	6022      	str	r2, [r4, #0]
 8009f0c:	d504      	bpl.n	8009f18 <__sflush_r+0x7c>
 8009f0e:	1c42      	adds	r2, r0, #1
 8009f10:	d101      	bne.n	8009f16 <__sflush_r+0x7a>
 8009f12:	682b      	ldr	r3, [r5, #0]
 8009f14:	b903      	cbnz	r3, 8009f18 <__sflush_r+0x7c>
 8009f16:	6560      	str	r0, [r4, #84]	; 0x54
 8009f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f1a:	602f      	str	r7, [r5, #0]
 8009f1c:	2900      	cmp	r1, #0
 8009f1e:	d0ca      	beq.n	8009eb6 <__sflush_r+0x1a>
 8009f20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f24:	4299      	cmp	r1, r3
 8009f26:	d002      	beq.n	8009f2e <__sflush_r+0x92>
 8009f28:	4628      	mov	r0, r5
 8009f2a:	f7fe fd99 	bl	8008a60 <_free_r>
 8009f2e:	2000      	movs	r0, #0
 8009f30:	6360      	str	r0, [r4, #52]	; 0x34
 8009f32:	e7c1      	b.n	8009eb8 <__sflush_r+0x1c>
 8009f34:	6a21      	ldr	r1, [r4, #32]
 8009f36:	2301      	movs	r3, #1
 8009f38:	4628      	mov	r0, r5
 8009f3a:	47b0      	blx	r6
 8009f3c:	1c41      	adds	r1, r0, #1
 8009f3e:	d1c7      	bne.n	8009ed0 <__sflush_r+0x34>
 8009f40:	682b      	ldr	r3, [r5, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d0c4      	beq.n	8009ed0 <__sflush_r+0x34>
 8009f46:	2b1d      	cmp	r3, #29
 8009f48:	d001      	beq.n	8009f4e <__sflush_r+0xb2>
 8009f4a:	2b16      	cmp	r3, #22
 8009f4c:	d101      	bne.n	8009f52 <__sflush_r+0xb6>
 8009f4e:	602f      	str	r7, [r5, #0]
 8009f50:	e7b1      	b.n	8009eb6 <__sflush_r+0x1a>
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f58:	81a3      	strh	r3, [r4, #12]
 8009f5a:	e7ad      	b.n	8009eb8 <__sflush_r+0x1c>
 8009f5c:	690f      	ldr	r7, [r1, #16]
 8009f5e:	2f00      	cmp	r7, #0
 8009f60:	d0a9      	beq.n	8009eb6 <__sflush_r+0x1a>
 8009f62:	0793      	lsls	r3, r2, #30
 8009f64:	680e      	ldr	r6, [r1, #0]
 8009f66:	bf08      	it	eq
 8009f68:	694b      	ldreq	r3, [r1, #20]
 8009f6a:	600f      	str	r7, [r1, #0]
 8009f6c:	bf18      	it	ne
 8009f6e:	2300      	movne	r3, #0
 8009f70:	eba6 0807 	sub.w	r8, r6, r7
 8009f74:	608b      	str	r3, [r1, #8]
 8009f76:	f1b8 0f00 	cmp.w	r8, #0
 8009f7a:	dd9c      	ble.n	8009eb6 <__sflush_r+0x1a>
 8009f7c:	6a21      	ldr	r1, [r4, #32]
 8009f7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f80:	4643      	mov	r3, r8
 8009f82:	463a      	mov	r2, r7
 8009f84:	4628      	mov	r0, r5
 8009f86:	47b0      	blx	r6
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	dc06      	bgt.n	8009f9a <__sflush_r+0xfe>
 8009f8c:	89a3      	ldrh	r3, [r4, #12]
 8009f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f92:	81a3      	strh	r3, [r4, #12]
 8009f94:	f04f 30ff 	mov.w	r0, #4294967295
 8009f98:	e78e      	b.n	8009eb8 <__sflush_r+0x1c>
 8009f9a:	4407      	add	r7, r0
 8009f9c:	eba8 0800 	sub.w	r8, r8, r0
 8009fa0:	e7e9      	b.n	8009f76 <__sflush_r+0xda>
 8009fa2:	bf00      	nop
 8009fa4:	20400001 	.word	0x20400001

08009fa8 <_fflush_r>:
 8009fa8:	b538      	push	{r3, r4, r5, lr}
 8009faa:	690b      	ldr	r3, [r1, #16]
 8009fac:	4605      	mov	r5, r0
 8009fae:	460c      	mov	r4, r1
 8009fb0:	b913      	cbnz	r3, 8009fb8 <_fflush_r+0x10>
 8009fb2:	2500      	movs	r5, #0
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	bd38      	pop	{r3, r4, r5, pc}
 8009fb8:	b118      	cbz	r0, 8009fc2 <_fflush_r+0x1a>
 8009fba:	6983      	ldr	r3, [r0, #24]
 8009fbc:	b90b      	cbnz	r3, 8009fc2 <_fflush_r+0x1a>
 8009fbe:	f7fe fc83 	bl	80088c8 <__sinit>
 8009fc2:	4b14      	ldr	r3, [pc, #80]	; (800a014 <_fflush_r+0x6c>)
 8009fc4:	429c      	cmp	r4, r3
 8009fc6:	d11b      	bne.n	800a000 <_fflush_r+0x58>
 8009fc8:	686c      	ldr	r4, [r5, #4]
 8009fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d0ef      	beq.n	8009fb2 <_fflush_r+0xa>
 8009fd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fd4:	07d0      	lsls	r0, r2, #31
 8009fd6:	d404      	bmi.n	8009fe2 <_fflush_r+0x3a>
 8009fd8:	0599      	lsls	r1, r3, #22
 8009fda:	d402      	bmi.n	8009fe2 <_fflush_r+0x3a>
 8009fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fde:	f7fe fd23 	bl	8008a28 <__retarget_lock_acquire_recursive>
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	4621      	mov	r1, r4
 8009fe6:	f7ff ff59 	bl	8009e9c <__sflush_r>
 8009fea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fec:	07da      	lsls	r2, r3, #31
 8009fee:	4605      	mov	r5, r0
 8009ff0:	d4e0      	bmi.n	8009fb4 <_fflush_r+0xc>
 8009ff2:	89a3      	ldrh	r3, [r4, #12]
 8009ff4:	059b      	lsls	r3, r3, #22
 8009ff6:	d4dd      	bmi.n	8009fb4 <_fflush_r+0xc>
 8009ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ffa:	f7fe fd16 	bl	8008a2a <__retarget_lock_release_recursive>
 8009ffe:	e7d9      	b.n	8009fb4 <_fflush_r+0xc>
 800a000:	4b05      	ldr	r3, [pc, #20]	; (800a018 <_fflush_r+0x70>)
 800a002:	429c      	cmp	r4, r3
 800a004:	d101      	bne.n	800a00a <_fflush_r+0x62>
 800a006:	68ac      	ldr	r4, [r5, #8]
 800a008:	e7df      	b.n	8009fca <_fflush_r+0x22>
 800a00a:	4b04      	ldr	r3, [pc, #16]	; (800a01c <_fflush_r+0x74>)
 800a00c:	429c      	cmp	r4, r3
 800a00e:	bf08      	it	eq
 800a010:	68ec      	ldreq	r4, [r5, #12]
 800a012:	e7da      	b.n	8009fca <_fflush_r+0x22>
 800a014:	0800a7d0 	.word	0x0800a7d0
 800a018:	0800a7f0 	.word	0x0800a7f0
 800a01c:	0800a7b0 	.word	0x0800a7b0

0800a020 <__swhatbuf_r>:
 800a020:	b570      	push	{r4, r5, r6, lr}
 800a022:	460e      	mov	r6, r1
 800a024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a028:	2900      	cmp	r1, #0
 800a02a:	b096      	sub	sp, #88	; 0x58
 800a02c:	4614      	mov	r4, r2
 800a02e:	461d      	mov	r5, r3
 800a030:	da08      	bge.n	800a044 <__swhatbuf_r+0x24>
 800a032:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a036:	2200      	movs	r2, #0
 800a038:	602a      	str	r2, [r5, #0]
 800a03a:	061a      	lsls	r2, r3, #24
 800a03c:	d410      	bmi.n	800a060 <__swhatbuf_r+0x40>
 800a03e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a042:	e00e      	b.n	800a062 <__swhatbuf_r+0x42>
 800a044:	466a      	mov	r2, sp
 800a046:	f000 f8f9 	bl	800a23c <_fstat_r>
 800a04a:	2800      	cmp	r0, #0
 800a04c:	dbf1      	blt.n	800a032 <__swhatbuf_r+0x12>
 800a04e:	9a01      	ldr	r2, [sp, #4]
 800a050:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a054:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a058:	425a      	negs	r2, r3
 800a05a:	415a      	adcs	r2, r3
 800a05c:	602a      	str	r2, [r5, #0]
 800a05e:	e7ee      	b.n	800a03e <__swhatbuf_r+0x1e>
 800a060:	2340      	movs	r3, #64	; 0x40
 800a062:	2000      	movs	r0, #0
 800a064:	6023      	str	r3, [r4, #0]
 800a066:	b016      	add	sp, #88	; 0x58
 800a068:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a06c <__smakebuf_r>:
 800a06c:	898b      	ldrh	r3, [r1, #12]
 800a06e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a070:	079d      	lsls	r5, r3, #30
 800a072:	4606      	mov	r6, r0
 800a074:	460c      	mov	r4, r1
 800a076:	d507      	bpl.n	800a088 <__smakebuf_r+0x1c>
 800a078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a07c:	6023      	str	r3, [r4, #0]
 800a07e:	6123      	str	r3, [r4, #16]
 800a080:	2301      	movs	r3, #1
 800a082:	6163      	str	r3, [r4, #20]
 800a084:	b002      	add	sp, #8
 800a086:	bd70      	pop	{r4, r5, r6, pc}
 800a088:	ab01      	add	r3, sp, #4
 800a08a:	466a      	mov	r2, sp
 800a08c:	f7ff ffc8 	bl	800a020 <__swhatbuf_r>
 800a090:	9900      	ldr	r1, [sp, #0]
 800a092:	4605      	mov	r5, r0
 800a094:	4630      	mov	r0, r6
 800a096:	f7fe fd4f 	bl	8008b38 <_malloc_r>
 800a09a:	b948      	cbnz	r0, 800a0b0 <__smakebuf_r+0x44>
 800a09c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0a0:	059a      	lsls	r2, r3, #22
 800a0a2:	d4ef      	bmi.n	800a084 <__smakebuf_r+0x18>
 800a0a4:	f023 0303 	bic.w	r3, r3, #3
 800a0a8:	f043 0302 	orr.w	r3, r3, #2
 800a0ac:	81a3      	strh	r3, [r4, #12]
 800a0ae:	e7e3      	b.n	800a078 <__smakebuf_r+0xc>
 800a0b0:	4b0d      	ldr	r3, [pc, #52]	; (800a0e8 <__smakebuf_r+0x7c>)
 800a0b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0b4:	89a3      	ldrh	r3, [r4, #12]
 800a0b6:	6020      	str	r0, [r4, #0]
 800a0b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0bc:	81a3      	strh	r3, [r4, #12]
 800a0be:	9b00      	ldr	r3, [sp, #0]
 800a0c0:	6163      	str	r3, [r4, #20]
 800a0c2:	9b01      	ldr	r3, [sp, #4]
 800a0c4:	6120      	str	r0, [r4, #16]
 800a0c6:	b15b      	cbz	r3, 800a0e0 <__smakebuf_r+0x74>
 800a0c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	f000 f8c7 	bl	800a260 <_isatty_r>
 800a0d2:	b128      	cbz	r0, 800a0e0 <__smakebuf_r+0x74>
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	f023 0303 	bic.w	r3, r3, #3
 800a0da:	f043 0301 	orr.w	r3, r3, #1
 800a0de:	81a3      	strh	r3, [r4, #12]
 800a0e0:	89a0      	ldrh	r0, [r4, #12]
 800a0e2:	4305      	orrs	r5, r0
 800a0e4:	81a5      	strh	r5, [r4, #12]
 800a0e6:	e7cd      	b.n	800a084 <__smakebuf_r+0x18>
 800a0e8:	08008861 	.word	0x08008861

0800a0ec <memcpy>:
 800a0ec:	440a      	add	r2, r1
 800a0ee:	4291      	cmp	r1, r2
 800a0f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0f4:	d100      	bne.n	800a0f8 <memcpy+0xc>
 800a0f6:	4770      	bx	lr
 800a0f8:	b510      	push	{r4, lr}
 800a0fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a102:	4291      	cmp	r1, r2
 800a104:	d1f9      	bne.n	800a0fa <memcpy+0xe>
 800a106:	bd10      	pop	{r4, pc}

0800a108 <memmove>:
 800a108:	4288      	cmp	r0, r1
 800a10a:	b510      	push	{r4, lr}
 800a10c:	eb01 0402 	add.w	r4, r1, r2
 800a110:	d902      	bls.n	800a118 <memmove+0x10>
 800a112:	4284      	cmp	r4, r0
 800a114:	4623      	mov	r3, r4
 800a116:	d807      	bhi.n	800a128 <memmove+0x20>
 800a118:	1e43      	subs	r3, r0, #1
 800a11a:	42a1      	cmp	r1, r4
 800a11c:	d008      	beq.n	800a130 <memmove+0x28>
 800a11e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a122:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a126:	e7f8      	b.n	800a11a <memmove+0x12>
 800a128:	4402      	add	r2, r0
 800a12a:	4601      	mov	r1, r0
 800a12c:	428a      	cmp	r2, r1
 800a12e:	d100      	bne.n	800a132 <memmove+0x2a>
 800a130:	bd10      	pop	{r4, pc}
 800a132:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a136:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a13a:	e7f7      	b.n	800a12c <memmove+0x24>

0800a13c <__malloc_lock>:
 800a13c:	4801      	ldr	r0, [pc, #4]	; (800a144 <__malloc_lock+0x8>)
 800a13e:	f7fe bc73 	b.w	8008a28 <__retarget_lock_acquire_recursive>
 800a142:	bf00      	nop
 800a144:	200002f4 	.word	0x200002f4

0800a148 <__malloc_unlock>:
 800a148:	4801      	ldr	r0, [pc, #4]	; (800a150 <__malloc_unlock+0x8>)
 800a14a:	f7fe bc6e 	b.w	8008a2a <__retarget_lock_release_recursive>
 800a14e:	bf00      	nop
 800a150:	200002f4 	.word	0x200002f4

0800a154 <_realloc_r>:
 800a154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a158:	4680      	mov	r8, r0
 800a15a:	4614      	mov	r4, r2
 800a15c:	460e      	mov	r6, r1
 800a15e:	b921      	cbnz	r1, 800a16a <_realloc_r+0x16>
 800a160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a164:	4611      	mov	r1, r2
 800a166:	f7fe bce7 	b.w	8008b38 <_malloc_r>
 800a16a:	b92a      	cbnz	r2, 800a178 <_realloc_r+0x24>
 800a16c:	f7fe fc78 	bl	8008a60 <_free_r>
 800a170:	4625      	mov	r5, r4
 800a172:	4628      	mov	r0, r5
 800a174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a178:	f000 f882 	bl	800a280 <_malloc_usable_size_r>
 800a17c:	4284      	cmp	r4, r0
 800a17e:	4607      	mov	r7, r0
 800a180:	d802      	bhi.n	800a188 <_realloc_r+0x34>
 800a182:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a186:	d812      	bhi.n	800a1ae <_realloc_r+0x5a>
 800a188:	4621      	mov	r1, r4
 800a18a:	4640      	mov	r0, r8
 800a18c:	f7fe fcd4 	bl	8008b38 <_malloc_r>
 800a190:	4605      	mov	r5, r0
 800a192:	2800      	cmp	r0, #0
 800a194:	d0ed      	beq.n	800a172 <_realloc_r+0x1e>
 800a196:	42bc      	cmp	r4, r7
 800a198:	4622      	mov	r2, r4
 800a19a:	4631      	mov	r1, r6
 800a19c:	bf28      	it	cs
 800a19e:	463a      	movcs	r2, r7
 800a1a0:	f7ff ffa4 	bl	800a0ec <memcpy>
 800a1a4:	4631      	mov	r1, r6
 800a1a6:	4640      	mov	r0, r8
 800a1a8:	f7fe fc5a 	bl	8008a60 <_free_r>
 800a1ac:	e7e1      	b.n	800a172 <_realloc_r+0x1e>
 800a1ae:	4635      	mov	r5, r6
 800a1b0:	e7df      	b.n	800a172 <_realloc_r+0x1e>

0800a1b2 <_raise_r>:
 800a1b2:	291f      	cmp	r1, #31
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	460d      	mov	r5, r1
 800a1ba:	d904      	bls.n	800a1c6 <_raise_r+0x14>
 800a1bc:	2316      	movs	r3, #22
 800a1be:	6003      	str	r3, [r0, #0]
 800a1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c4:	bd38      	pop	{r3, r4, r5, pc}
 800a1c6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a1c8:	b112      	cbz	r2, 800a1d0 <_raise_r+0x1e>
 800a1ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1ce:	b94b      	cbnz	r3, 800a1e4 <_raise_r+0x32>
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f000 f831 	bl	800a238 <_getpid_r>
 800a1d6:	462a      	mov	r2, r5
 800a1d8:	4601      	mov	r1, r0
 800a1da:	4620      	mov	r0, r4
 800a1dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1e0:	f000 b818 	b.w	800a214 <_kill_r>
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d00a      	beq.n	800a1fe <_raise_r+0x4c>
 800a1e8:	1c59      	adds	r1, r3, #1
 800a1ea:	d103      	bne.n	800a1f4 <_raise_r+0x42>
 800a1ec:	2316      	movs	r3, #22
 800a1ee:	6003      	str	r3, [r0, #0]
 800a1f0:	2001      	movs	r0, #1
 800a1f2:	e7e7      	b.n	800a1c4 <_raise_r+0x12>
 800a1f4:	2400      	movs	r4, #0
 800a1f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	4798      	blx	r3
 800a1fe:	2000      	movs	r0, #0
 800a200:	e7e0      	b.n	800a1c4 <_raise_r+0x12>
	...

0800a204 <raise>:
 800a204:	4b02      	ldr	r3, [pc, #8]	; (800a210 <raise+0xc>)
 800a206:	4601      	mov	r1, r0
 800a208:	6818      	ldr	r0, [r3, #0]
 800a20a:	f7ff bfd2 	b.w	800a1b2 <_raise_r>
 800a20e:	bf00      	nop
 800a210:	20000074 	.word	0x20000074

0800a214 <_kill_r>:
 800a214:	b538      	push	{r3, r4, r5, lr}
 800a216:	4d07      	ldr	r5, [pc, #28]	; (800a234 <_kill_r+0x20>)
 800a218:	2300      	movs	r3, #0
 800a21a:	4604      	mov	r4, r0
 800a21c:	4608      	mov	r0, r1
 800a21e:	4611      	mov	r1, r2
 800a220:	602b      	str	r3, [r5, #0]
 800a222:	f7f6 ff37 	bl	8001094 <_kill>
 800a226:	1c43      	adds	r3, r0, #1
 800a228:	d102      	bne.n	800a230 <_kill_r+0x1c>
 800a22a:	682b      	ldr	r3, [r5, #0]
 800a22c:	b103      	cbz	r3, 800a230 <_kill_r+0x1c>
 800a22e:	6023      	str	r3, [r4, #0]
 800a230:	bd38      	pop	{r3, r4, r5, pc}
 800a232:	bf00      	nop
 800a234:	20000300 	.word	0x20000300

0800a238 <_getpid_r>:
 800a238:	f7f6 bf24 	b.w	8001084 <_getpid>

0800a23c <_fstat_r>:
 800a23c:	b538      	push	{r3, r4, r5, lr}
 800a23e:	4d07      	ldr	r5, [pc, #28]	; (800a25c <_fstat_r+0x20>)
 800a240:	2300      	movs	r3, #0
 800a242:	4604      	mov	r4, r0
 800a244:	4608      	mov	r0, r1
 800a246:	4611      	mov	r1, r2
 800a248:	602b      	str	r3, [r5, #0]
 800a24a:	f7f6 ff82 	bl	8001152 <_fstat>
 800a24e:	1c43      	adds	r3, r0, #1
 800a250:	d102      	bne.n	800a258 <_fstat_r+0x1c>
 800a252:	682b      	ldr	r3, [r5, #0]
 800a254:	b103      	cbz	r3, 800a258 <_fstat_r+0x1c>
 800a256:	6023      	str	r3, [r4, #0]
 800a258:	bd38      	pop	{r3, r4, r5, pc}
 800a25a:	bf00      	nop
 800a25c:	20000300 	.word	0x20000300

0800a260 <_isatty_r>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	4d06      	ldr	r5, [pc, #24]	; (800a27c <_isatty_r+0x1c>)
 800a264:	2300      	movs	r3, #0
 800a266:	4604      	mov	r4, r0
 800a268:	4608      	mov	r0, r1
 800a26a:	602b      	str	r3, [r5, #0]
 800a26c:	f7f6 ff81 	bl	8001172 <_isatty>
 800a270:	1c43      	adds	r3, r0, #1
 800a272:	d102      	bne.n	800a27a <_isatty_r+0x1a>
 800a274:	682b      	ldr	r3, [r5, #0]
 800a276:	b103      	cbz	r3, 800a27a <_isatty_r+0x1a>
 800a278:	6023      	str	r3, [r4, #0]
 800a27a:	bd38      	pop	{r3, r4, r5, pc}
 800a27c:	20000300 	.word	0x20000300

0800a280 <_malloc_usable_size_r>:
 800a280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a284:	1f18      	subs	r0, r3, #4
 800a286:	2b00      	cmp	r3, #0
 800a288:	bfbc      	itt	lt
 800a28a:	580b      	ldrlt	r3, [r1, r0]
 800a28c:	18c0      	addlt	r0, r0, r3
 800a28e:	4770      	bx	lr

0800a290 <_init>:
 800a290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a292:	bf00      	nop
 800a294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a296:	bc08      	pop	{r3}
 800a298:	469e      	mov	lr, r3
 800a29a:	4770      	bx	lr

0800a29c <_fini>:
 800a29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29e:	bf00      	nop
 800a2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2a2:	bc08      	pop	{r3}
 800a2a4:	469e      	mov	lr, r3
 800a2a6:	4770      	bx	lr
