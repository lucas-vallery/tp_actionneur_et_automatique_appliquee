
tp_actionneur_et_automatique_appliquee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d94  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08006f74  08006f74  00016f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007228  08007228  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  08007228  08007228  00017228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007230  08007230  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007230  08007230  00017230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007234  08007234  00017234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08007238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000108  08007340  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08007340  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144d5  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b7  00000000  00000000  0003460d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00036ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  00037fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027845  00000000  00000000  00038ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001494b  00000000  00000000  00060835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd44f  00000000  00000000  00075180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001725cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053c8  00000000  00000000  00172620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000108 	.word	0x20000108
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006f5c 	.word	0x08006f5c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000010c 	.word	0x2000010c
 800021c:	08006f5c 	.word	0x08006f5c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <MX_GPIO_Init+0xe4>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a32      	ldr	r2, [pc, #200]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b30      	ldr	r3, [pc, #192]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000612:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a2c      	ldr	r2, [pc, #176]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000618:	f043 0320 	orr.w	r3, r3, #32
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0320 	and.w	r3, r3, #32
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <MX_GPIO_Init+0xe4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	4a26      	ldr	r2, [pc, #152]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000636:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4821      	ldr	r0, [pc, #132]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000648:	f001 f8a4 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2120      	movs	r1, #32
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f001 f89e 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800065e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4619      	mov	r1, r3
 800066e:	4817      	ldr	r0, [pc, #92]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000670:	f000 ff0e 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8000674:	2308      	movs	r3, #8
 8000676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	4810      	ldr	r0, [pc, #64]	; (80006cc <MX_GPIO_Init+0xe8>)
 800068c:	f000 ff00 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000690:	2320      	movs	r3, #32
 8000692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4619      	mov	r1, r3
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f000 fef1 	bl	8001490 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2028      	movs	r0, #40	; 0x28
 80006b4:	f000 fdf7 	bl	80012a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006b8:	2028      	movs	r0, #40	; 0x28
 80006ba:	f000 fe0e 	bl	80012da <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000800 	.word	0x48000800

080006d0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09e      	sub	sp, #120	; 0x78
 80006d4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	66bb      	str	r3, [r7, #104]	; 0x68
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006de:	f000 fc74 	bl	8000fca <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006e2:	f000 f901 	bl	80008e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006e6:	f7ff ff7d 	bl	80005e4 <MX_GPIO_Init>
	MX_TIM1_Init();
 80006ea:	f000 fa85 	bl	8000bf8 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 80006ee:	f000 fb97 	bl	8000e20 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	memset(argv,(int) NULL,MAX_ARGS*sizeof(char*));
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2224      	movs	r2, #36	; 0x24
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f005 f969 	bl	80059d0 <memset>
	memset(cmdBuffer,(int) NULL,CMD_BUFFER_SIZE*sizeof(char));
 80006fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000702:	2240      	movs	r2, #64	; 0x40
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f005 f962 	bl	80059d0 <memset>
 800070c:	4b69      	ldr	r3, [pc, #420]	; (80008b4 <main+0x1e4>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,(int) NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,(int) NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000712:	2240      	movs	r2, #64	; 0x40
 8000714:	2100      	movs	r1, #0
 8000716:	4868      	ldr	r0, [pc, #416]	; (80008b8 <main+0x1e8>)
 8000718:	f005 f95a 	bl	80059d0 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800071c:	2201      	movs	r2, #1
 800071e:	4965      	ldr	r1, [pc, #404]	; (80008b4 <main+0x1e4>)
 8000720:	4866      	ldr	r0, [pc, #408]	; (80008bc <main+0x1ec>)
 8000722:	f003 f98d 	bl	8003a40 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8000726:	200a      	movs	r0, #10
 8000728:	f000 fcc0 	bl	80010ac <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 800072c:	f04f 33ff 	mov.w	r3, #4294967295
 8000730:	2266      	movs	r2, #102	; 0x66
 8000732:	4963      	ldr	r1, [pc, #396]	; (80008c0 <main+0x1f0>)
 8000734:	4861      	ldr	r0, [pc, #388]	; (80008bc <main+0x1ec>)
 8000736:	f003 f8ed 	bl	8003914 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	2218      	movs	r2, #24
 8000740:	4960      	ldr	r1, [pc, #384]	; (80008c4 <main+0x1f4>)
 8000742:	485e      	ldr	r0, [pc, #376]	; (80008bc <main+0x1ec>)
 8000744:	f003 f8e6 	bl	8003914 <HAL_UART_Transmit>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{	// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 8000748:	4b5f      	ldr	r3, [pc, #380]	; (80008c8 <main+0x1f8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d056      	beq.n	80007fe <main+0x12e>
			switch(uartRxBuffer[0]){
 8000750:	4b58      	ldr	r3, [pc, #352]	; (80008b4 <main+0x1e4>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b0d      	cmp	r3, #13
 8000756:	d002      	beq.n	800075e <main+0x8e>
 8000758:	2b7f      	cmp	r3, #127	; 0x7f
 800075a:	d02d      	beq.n	80007b8 <main+0xe8>
 800075c:	e03c      	b.n	80007d8 <main+0x108>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
 8000762:	2203      	movs	r2, #3
 8000764:	4959      	ldr	r1, [pc, #356]	; (80008cc <main+0x1fc>)
 8000766:	4855      	ldr	r0, [pc, #340]	; (80008bc <main+0x1ec>)
 8000768:	f003 f8d4 	bl	8003914 <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 800076c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000772:	4413      	add	r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
				argc = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	673b      	str	r3, [r7, #112]	; 0x70
				token = strtok(cmdBuffer, " ");
 800077c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000780:	4953      	ldr	r1, [pc, #332]	; (80008d0 <main+0x200>)
 8000782:	4618      	mov	r0, r3
 8000784:	f005 f94c 	bl	8005a20 <strtok>
 8000788:	66f8      	str	r0, [r7, #108]	; 0x6c
				while(token!=NULL){
 800078a:	e00d      	b.n	80007a8 <main+0xd8>
					argv[argc++] = token;
 800078c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	673a      	str	r2, [r7, #112]	; 0x70
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	3378      	adds	r3, #120	; 0x78
 8000796:	443b      	add	r3, r7
 8000798:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800079a:	f843 2c74 	str.w	r2, [r3, #-116]
					token = strtok(NULL, " ");
 800079e:	494c      	ldr	r1, [pc, #304]	; (80008d0 <main+0x200>)
 80007a0:	2000      	movs	r0, #0
 80007a2:	f005 f93d 	bl	8005a20 <strtok>
 80007a6:	66f8      	str	r0, [r7, #108]	; 0x6c
				while(token!=NULL){
 80007a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1ee      	bne.n	800078c <main+0xbc>
				}

				idx_cmd = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	677b      	str	r3, [r7, #116]	; 0x74
				newCmdReady = 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 80007b6:	e01f      	b.n	80007f8 <main+0x128>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 80007b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007ba:	1e5a      	subs	r2, r3, #1
 80007bc:	677a      	str	r2, [r7, #116]	; 0x74
 80007be:	3378      	adds	r3, #120	; 0x78
 80007c0:	443b      	add	r3, r7
 80007c2:	2200      	movs	r2, #0
 80007c4:	f803 2c50 	strb.w	r2, [r3, #-80]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
 80007cc:	2201      	movs	r2, #1
 80007ce:	4939      	ldr	r1, [pc, #228]	; (80008b4 <main+0x1e4>)
 80007d0:	483a      	ldr	r0, [pc, #232]	; (80008bc <main+0x1ec>)
 80007d2:	f003 f89f 	bl	8003914 <HAL_UART_Transmit>
				break;
 80007d6:	e00f      	b.n	80007f8 <main+0x128>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80007d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	677a      	str	r2, [r7, #116]	; 0x74
 80007de:	4a35      	ldr	r2, [pc, #212]	; (80008b4 <main+0x1e4>)
 80007e0:	7812      	ldrb	r2, [r2, #0]
 80007e2:	3378      	adds	r3, #120	; 0x78
 80007e4:	443b      	add	r3, r7
 80007e6:	f803 2c50 	strb.w	r2, [r3, #-80]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
 80007ee:	2201      	movs	r2, #1
 80007f0:	4930      	ldr	r1, [pc, #192]	; (80008b4 <main+0x1e4>)
 80007f2:	4832      	ldr	r0, [pc, #200]	; (80008bc <main+0x1ec>)
 80007f4:	f003 f88e 	bl	8003914 <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 80007f8:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <main+0x1f8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 80007fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000800:	2b00      	cmp	r3, #0
 8000802:	d0a1      	beq.n	8000748 <main+0x78>
			if(strcmp(argv[0],"set")==0){
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4933      	ldr	r1, [pc, #204]	; (80008d4 <main+0x204>)
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fd09 	bl	8000220 <strcmp>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d12d      	bne.n	8000870 <main+0x1a0>
				if(strcmp(argv[1],"PA5")==0){
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	4930      	ldr	r1, [pc, #192]	; (80008d8 <main+0x208>)
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fd01 	bl	8000220 <strcmp>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d11d      	bne.n	8000860 <main+0x190>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	4618      	mov	r0, r3
 8000828:	f005 f8a4 	bl	8005974 <atoi>
 800082c:	4603      	mov	r3, r0
 800082e:	b2db      	uxtb	r3, r3
 8000830:	461a      	mov	r2, r3
 8000832:	2120      	movs	r1, #32
 8000834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000838:	f000 ffac 	bl	8001794 <HAL_GPIO_WritePin>
					sprintf((char*) &uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	4618      	mov	r0, r3
 8000840:	f005 f898 	bl	8005974 <atoi>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
 8000848:	4924      	ldr	r1, [pc, #144]	; (80008dc <main+0x20c>)
 800084a:	481b      	ldr	r0, [pc, #108]	; (80008b8 <main+0x1e8>)
 800084c:	f005 f8c8 	bl	80059e0 <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
 8000854:	2220      	movs	r2, #32
 8000856:	4918      	ldr	r1, [pc, #96]	; (80008b8 <main+0x1e8>)
 8000858:	4818      	ldr	r0, [pc, #96]	; (80008bc <main+0x1ec>)
 800085a:	f003 f85b 	bl	8003914 <HAL_UART_Transmit>
 800085e:	e01e      	b.n	800089e <main+0x1ce>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
 8000864:	2214      	movs	r2, #20
 8000866:	491e      	ldr	r1, [pc, #120]	; (80008e0 <main+0x210>)
 8000868:	4814      	ldr	r0, [pc, #80]	; (80008bc <main+0x1ec>)
 800086a:	f003 f853 	bl	8003914 <HAL_UART_Transmit>
 800086e:	e016      	b.n	800089e <main+0x1ce>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	491c      	ldr	r1, [pc, #112]	; (80008e4 <main+0x214>)
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fcd3 	bl	8000220 <strcmp>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d107      	bne.n	8000890 <main+0x1c0>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000880:	f04f 33ff 	mov.w	r3, #4294967295
 8000884:	2214      	movs	r2, #20
 8000886:	4916      	ldr	r1, [pc, #88]	; (80008e0 <main+0x210>)
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <main+0x1ec>)
 800088a:	f003 f843 	bl	8003914 <HAL_UART_Transmit>
 800088e:	e006      	b.n	800089e <main+0x1ce>
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000890:	f04f 33ff 	mov.w	r3, #4294967295
 8000894:	2214      	movs	r2, #20
 8000896:	4912      	ldr	r1, [pc, #72]	; (80008e0 <main+0x210>)
 8000898:	4808      	ldr	r0, [pc, #32]	; (80008bc <main+0x1ec>)
 800089a:	f003 f83b 	bl	8003914 <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	2218      	movs	r2, #24
 80008a4:	4907      	ldr	r1, [pc, #28]	; (80008c4 <main+0x1f4>)
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <main+0x1ec>)
 80008a8:	f003 f834 	bl	8003914 <HAL_UART_Transmit>
			newCmdReady = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	66bb      	str	r3, [r7, #104]	; 0x68
		if(uartRxReceived){
 80008b0:	e74a      	b.n	8000748 <main+0x78>
 80008b2:	bf00      	nop
 80008b4:	20000128 	.word	0x20000128
 80008b8:	2000012c 	.word	0x2000012c
 80008bc:	200001bc 	.word	0x200001bc
 80008c0:	20000018 	.word	0x20000018
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000124 	.word	0x20000124
 80008cc:	20000080 	.word	0x20000080
 80008d0:	08006f74 	.word	0x08006f74
 80008d4:	08006f78 	.word	0x08006f78
 80008d8:	08006f7c 	.word	0x08006f7c
 80008dc:	08006f80 	.word	0x08006f80
 80008e0:	20000084 	.word	0x20000084
 80008e4:	08006f9c 	.word	0x08006f9c

080008e8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b094      	sub	sp, #80	; 0x50
 80008ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0318 	add.w	r3, r7, #24
 80008f2:	2238      	movs	r2, #56	; 0x38
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f005 f86a 	bl	80059d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800090a:	2000      	movs	r0, #0
 800090c:	f000 ff7e 	bl	800180c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000910:	2302      	movs	r3, #2
 8000912:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000914:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091a:	2340      	movs	r3, #64	; 0x40
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	2302      	movs	r3, #2
 8000920:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000922:	2302      	movs	r3, #2
 8000924:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000926:	2304      	movs	r3, #4
 8000928:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800092a:	2355      	movs	r3, #85	; 0x55
 800092c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800092e:	2302      	movs	r3, #2
 8000930:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000932:	2302      	movs	r3, #2
 8000934:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000936:	2302      	movs	r3, #2
 8000938:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	f107 0318 	add.w	r3, r7, #24
 800093e:	4618      	mov	r0, r3
 8000940:	f001 f818 	bl	8001974 <HAL_RCC_OscConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x66>
	{
		Error_Handler();
 800094a:	f000 f818 	bl	800097e <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	230f      	movs	r3, #15
 8000950:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000952:	2303      	movs	r3, #3
 8000954:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2104      	movs	r1, #4
 8000966:	4618      	mov	r0, r3
 8000968:	f001 fb1c 	bl	8001fa4 <HAL_RCC_ClockConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8000972:	f000 f804 	bl	800097e <Error_Handler>
	}
}
 8000976:	bf00      	nop
 8000978:	3750      	adds	r7, #80	; 0x50
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000982:	b672      	cpsid	i
}
 8000984:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000986:	e7fe      	b.n	8000986 <Error_Handler+0x8>

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <HAL_MspInit+0x44>)
 8000990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000992:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <HAL_MspInit+0x44>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6613      	str	r3, [r2, #96]	; 0x60
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <HAL_MspInit+0x44>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x44>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_MspInit+0x44>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6593      	str	r3, [r2, #88]	; 0x58
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_MspInit+0x44>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009be:	f000 ffc9 	bl	8001954 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1c:	f000 fb28 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <USART2_IRQHandler+0x10>)
 8000a2a:	f003 f85f 	bl	8003aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200001bc 	.word	0x200001bc

08000a38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a40:	f000 fec0 	bl	80017c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
	return 1;
 8000a4c:	2301      	movs	r3, #1
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <_kill>:

int _kill(int pid, int sig)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a62:	f004 ff8b 	bl	800597c <__errno>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2216      	movs	r2, #22
 8000a6a:	601a      	str	r2, [r3, #0]
	return -1;
 8000a6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_exit>:

void _exit (int status)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a80:	f04f 31ff 	mov.w	r1, #4294967295
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff ffe7 	bl	8000a58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a8a:	e7fe      	b.n	8000a8a <_exit+0x12>

08000a8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	e00a      	b.n	8000ab4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a9e:	f3af 8000 	nop.w
 8000aa2:	4601      	mov	r1, r0
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	1c5a      	adds	r2, r3, #1
 8000aa8:	60ba      	str	r2, [r7, #8]
 8000aaa:	b2ca      	uxtb	r2, r1
 8000aac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	dbf0      	blt.n	8000a9e <_read+0x12>
	}

return len;
 8000abc:	687b      	ldr	r3, [r7, #4]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	60f8      	str	r0, [r7, #12]
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	e009      	b.n	8000aec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	60ba      	str	r2, [r7, #8]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	dbf1      	blt.n	8000ad8 <_write+0x12>
	}
	return len;
 8000af4:	687b      	ldr	r3, [r7, #4]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_close>:

int _close(int file)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
	return -1;
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
 8000b1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b26:	605a      	str	r2, [r3, #4]
	return 0;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <_isatty>:

int _isatty(int file)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
	return 1;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
	return 0;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b70:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <_sbrk+0x5c>)
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <_sbrk+0x60>)
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d102      	bne.n	8000b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <_sbrk+0x64>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <_sbrk+0x68>)
 8000b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d207      	bcs.n	8000ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b98:	f004 fef0 	bl	800597c <__errno>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba6:	e009      	b.n	8000bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <_sbrk+0x64>)
 8000bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bba:	68fb      	ldr	r3, [r7, #12]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20020000 	.word	0x20020000
 8000bc8:	00000400 	.word	0x00000400
 8000bcc:	2000016c 	.word	0x2000016c
 8000bd0:	20000260 	.word	0x20000260

08000bd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <SystemInit+0x20>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <SystemInit+0x20>)
 8000be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b09c      	sub	sp, #112	; 0x70
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
 8000c28:	615a      	str	r2, [r3, #20]
 8000c2a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2234      	movs	r2, #52	; 0x34
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f004 fecc 	bl	80059d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c38:	4b4b      	ldr	r3, [pc, #300]	; (8000d68 <MX_TIM1_Init+0x170>)
 8000c3a:	4a4c      	ldr	r2, [pc, #304]	; (8000d6c <MX_TIM1_Init+0x174>)
 8000c3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c3e:	4b4a      	ldr	r3, [pc, #296]	; (8000d68 <MX_TIM1_Init+0x170>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c44:	4b48      	ldr	r3, [pc, #288]	; (8000d68 <MX_TIM1_Init+0x170>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c4a:	4b47      	ldr	r3, [pc, #284]	; (8000d68 <MX_TIM1_Init+0x170>)
 8000c4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c52:	4b45      	ldr	r3, [pc, #276]	; (8000d68 <MX_TIM1_Init+0x170>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c58:	4b43      	ldr	r3, [pc, #268]	; (8000d68 <MX_TIM1_Init+0x170>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5e:	4b42      	ldr	r3, [pc, #264]	; (8000d68 <MX_TIM1_Init+0x170>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c64:	4840      	ldr	r0, [pc, #256]	; (8000d68 <MX_TIM1_Init+0x170>)
 8000c66:	f001 fe07 	bl	8002878 <HAL_TIM_Base_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c70:	f7ff fe85 	bl	800097e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c78:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c7a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4839      	ldr	r0, [pc, #228]	; (8000d68 <MX_TIM1_Init+0x170>)
 8000c82:	f001 ff2b 	bl	8002adc <HAL_TIM_ConfigClockSource>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c8c:	f7ff fe77 	bl	800097e <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000c90:	4835      	ldr	r0, [pc, #212]	; (8000d68 <MX_TIM1_Init+0x170>)
 8000c92:	f001 fe48 	bl	8002926 <HAL_TIM_OC_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c9c:	f7ff fe6f 	bl	800097e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	482d      	ldr	r0, [pc, #180]	; (8000d68 <MX_TIM1_Init+0x170>)
 8000cb4:	f002 fc96 	bl	80035e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000cbe:	f7ff fe5e 	bl	800097e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4820      	ldr	r0, [pc, #128]	; (8000d68 <MX_TIM1_Init+0x170>)
 8000ce8:	f001 fe7e 	bl	80029e8 <HAL_TIM_OC_ConfigChannel>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000cf2:	f7ff fe44 	bl	800097e <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cf6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	481a      	ldr	r0, [pc, #104]	; (8000d68 <MX_TIM1_Init+0x170>)
 8000d00:	f001 fe72 	bl	80029e8 <HAL_TIM_OC_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000d0a:	f7ff fe38 	bl	800097e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4807      	ldr	r0, [pc, #28]	; (8000d68 <MX_TIM1_Init+0x170>)
 8000d4c:	f002 fce0 	bl	8003710 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000d56:	f7ff fe12 	bl	800097e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d5a:	4803      	ldr	r0, [pc, #12]	; (8000d68 <MX_TIM1_Init+0x170>)
 8000d5c:	f000 f828 	bl	8000db0 <HAL_TIM_MspPostInit>

}
 8000d60:	bf00      	nop
 8000d62:	3770      	adds	r7, #112	; 0x70
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000170 	.word	0x20000170
 8000d6c:	40012c00 	.word	0x40012c00

08000d70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_TIM_Base_MspInit+0x38>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d10b      	bne.n	8000d9a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_TIM_Base_MspInit+0x3c>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d86:	4a09      	ldr	r2, [pc, #36]	; (8000dac <HAL_TIM_Base_MspInit+0x3c>)
 8000d88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <HAL_TIM_Base_MspInit+0x3c>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40012c00 	.word	0x40012c00
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <HAL_TIM_MspPostInit+0x68>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d11d      	bne.n	8000e0e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_TIM_MspPostInit+0x6c>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	4a11      	ldr	r2, [pc, #68]	; (8000e1c <HAL_TIM_MspPostInit+0x6c>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_TIM_MspPostInit+0x6c>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000dea:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000dee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000dfc:	2306      	movs	r3, #6
 8000dfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	4619      	mov	r1, r3
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0a:	f000 fb41 	bl	8001490 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e0e:	bf00      	nop
 8000e10:	3720      	adds	r7, #32
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40012c00 	.word	0x40012c00
 8000e1c:	40021000 	.word	0x40021000

08000e20 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e24:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e26:	4a23      	ldr	r2, [pc, #140]	; (8000eb4 <MX_USART2_UART_Init+0x94>)
 8000e28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e2a:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e32:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e44:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e46:	220c      	movs	r2, #12
 8000e48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e50:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e68:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e6a:	f002 fd03 	bl	8003874 <HAL_UART_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e74:	f7ff fd83 	bl	800097e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e78:	2100      	movs	r1, #0
 8000e7a:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e7c:	f004 fcaf 	bl	80057de <HAL_UARTEx_SetTxFifoThreshold>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e86:	f7ff fd7a 	bl	800097e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e8e:	f004 fce4 	bl	800585a <HAL_UARTEx_SetRxFifoThreshold>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e98:	f7ff fd71 	bl	800097e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e9e:	f004 fc65 	bl	800576c <HAL_UARTEx_DisableFifoMode>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ea8:	f7ff fd69 	bl	800097e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200001bc 	.word	0x200001bc
 8000eb4:	40004400 	.word	0x40004400

08000eb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b09e      	sub	sp, #120	; 0x78
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	2254      	movs	r2, #84	; 0x54
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f004 fd79 	bl	80059d0 <memset>
  if(uartHandle->Instance==USART2)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a23      	ldr	r2, [pc, #140]	; (8000f70 <HAL_UART_MspInit+0xb8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d13e      	bne.n	8000f66 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 fa71 	bl	80023dc <HAL_RCCEx_PeriphCLKConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f00:	f7ff fd3d 	bl	800097e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <HAL_UART_MspInit+0xbc>)
 8000f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f08:	4a1a      	ldr	r2, [pc, #104]	; (8000f74 <HAL_UART_MspInit+0xbc>)
 8000f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0e:	6593      	str	r3, [r2, #88]	; 0x58
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <HAL_UART_MspInit+0xbc>)
 8000f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_UART_MspInit+0xbc>)
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f20:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <HAL_UART_MspInit+0xbc>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_UART_MspInit+0xbc>)
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f34:	230c      	movs	r3, #12
 8000f36:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f44:	2307      	movs	r3, #7
 8000f46:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f52:	f000 fa9d 	bl	8001490 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2026      	movs	r0, #38	; 0x26
 8000f5c:	f000 f9a3 	bl	80012a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f60:	2026      	movs	r0, #38	; 0x26
 8000f62:	f000 f9ba 	bl	80012da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f66:	bf00      	nop
 8000f68:	3778      	adds	r7, #120	; 0x78
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40004400 	.word	0x40004400
 8000f74:	40021000 	.word	0x40021000

08000f78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f78:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f7a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f7e:	490e      	ldr	r1, [pc, #56]	; (8000fb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f80:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <LoopForever+0xe>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f84:	e002      	b.n	8000f8c <LoopCopyDataInit>

08000f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8a:	3304      	adds	r3, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f90:	d3f9      	bcc.n	8000f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f94:	4c0b      	ldr	r4, [pc, #44]	; (8000fc4 <LoopForever+0x16>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f98:	e001      	b.n	8000f9e <LoopFillZerobss>

08000f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f9c:	3204      	adds	r2, #4

08000f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa0:	d3fb      	bcc.n	8000f9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fa2:	f7ff fe17 	bl	8000bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fa6:	f004 fcef 	bl	8005988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000faa:	f7ff fb91 	bl	80006d0 <main>

08000fae <LoopForever>:

LoopForever:
    b LoopForever
 8000fae:	e7fe      	b.n	8000fae <LoopForever>
  ldr   r0, =_estack
 8000fb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb8:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8000fbc:	08007238 	.word	0x08007238
  ldr r2, =_sbss
 8000fc0:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8000fc4:	20000260 	.word	0x20000260

08000fc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC1_2_IRQHandler>

08000fca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 f95b 	bl	8001290 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f000 f80e 	bl	8000ffc <HAL_InitTick>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	71fb      	strb	r3, [r7, #7]
 8000fea:	e001      	b.n	8000ff0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fec:	f7ff fccc 	bl	8000988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ff0:	79fb      	ldrb	r3, [r7, #7]

}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_InitTick+0x68>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d022      	beq.n	8001056 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_InitTick+0x6c>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <HAL_InitTick+0x68>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800101c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001020:	fbb2 f3f3 	udiv	r3, r2, r3
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f966 	bl	80012f6 <HAL_SYSTICK_Config>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d10f      	bne.n	8001050 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b0f      	cmp	r3, #15
 8001034:	d809      	bhi.n	800104a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001036:	2200      	movs	r2, #0
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	f04f 30ff 	mov.w	r0, #4294967295
 800103e:	f000 f932 	bl	80012a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <HAL_InitTick+0x70>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	e007      	b.n	800105a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	e004      	b.n	800105a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	e001      	b.n	800105a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200000a0 	.word	0x200000a0
 8001068:	20000098 	.word	0x20000098
 800106c:	2000009c 	.word	0x2000009c

08001070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <HAL_IncTick+0x1c>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_IncTick+0x20>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4413      	add	r3, r2
 800107e:	4a03      	ldr	r2, [pc, #12]	; (800108c <HAL_IncTick+0x1c>)
 8001080:	6013      	str	r3, [r2, #0]
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	2000024c 	.word	0x2000024c
 8001090:	200000a0 	.word	0x200000a0

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_GetTick+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	2000024c 	.word	0x2000024c

080010ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b4:	f7ff ffee 	bl	8001094 <HAL_GetTick>
 80010b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c4:	d004      	beq.n	80010d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <HAL_Delay+0x40>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	4413      	add	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010d0:	bf00      	nop
 80010d2:	f7ff ffdf 	bl	8001094 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d8f7      	bhi.n	80010d2 <HAL_Delay+0x26>
  {
  }
}
 80010e2:	bf00      	nop
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200000a0 	.word	0x200000a0

080010f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800111c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	2b00      	cmp	r3, #0
 8001164:	db0b      	blt.n	800117e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 021f 	and.w	r2, r3, #31
 800116c:	4907      	ldr	r1, [pc, #28]	; (800118c <__NVIC_EnableIRQ+0x38>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	095b      	lsrs	r3, r3, #5
 8001174:	2001      	movs	r0, #1
 8001176:	fa00 f202 	lsl.w	r2, r0, r2
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000e100 	.word	0xe000e100

08001190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db0a      	blt.n	80011ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	490c      	ldr	r1, [pc, #48]	; (80011dc <__NVIC_SetPriority+0x4c>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b8:	e00a      	b.n	80011d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4908      	ldr	r1, [pc, #32]	; (80011e0 <__NVIC_SetPriority+0x50>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	3b04      	subs	r3, #4
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	440b      	add	r3, r1
 80011ce:	761a      	strb	r2, [r3, #24]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000e100 	.word	0xe000e100
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	; 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f1c3 0307 	rsb	r3, r3, #7
 80011fe:	2b04      	cmp	r3, #4
 8001200:	bf28      	it	cs
 8001202:	2304      	movcs	r3, #4
 8001204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3304      	adds	r3, #4
 800120a:	2b06      	cmp	r3, #6
 800120c:	d902      	bls.n	8001214 <NVIC_EncodePriority+0x30>
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3b03      	subs	r3, #3
 8001212:	e000      	b.n	8001216 <NVIC_EncodePriority+0x32>
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	f04f 32ff 	mov.w	r2, #4294967295
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	401a      	ands	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800122c:	f04f 31ff 	mov.w	r1, #4294967295
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	43d9      	mvns	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	4313      	orrs	r3, r2
         );
}
 800123e:	4618      	mov	r0, r3
 8001240:	3724      	adds	r7, #36	; 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800125c:	d301      	bcc.n	8001262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125e:	2301      	movs	r3, #1
 8001260:	e00f      	b.n	8001282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001262:	4a0a      	ldr	r2, [pc, #40]	; (800128c <SysTick_Config+0x40>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126a:	210f      	movs	r1, #15
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f7ff ff8e 	bl	8001190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <SysTick_Config+0x40>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127a:	4b04      	ldr	r3, [pc, #16]	; (800128c <SysTick_Config+0x40>)
 800127c:	2207      	movs	r2, #7
 800127e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	e000e010 	.word	0xe000e010

08001290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ff29 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b086      	sub	sp, #24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012b4:	f7ff ff40 	bl	8001138 <__NVIC_GetPriorityGrouping>
 80012b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff ff90 	bl	80011e4 <NVIC_EncodePriority>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff5f 	bl	8001190 <__NVIC_SetPriority>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff33 	bl	8001154 <__NVIC_EnableIRQ>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffa4 	bl	800124c <SysTick_Config>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800130e:	b480      	push	{r7}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d005      	beq.n	8001332 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2204      	movs	r2, #4
 800132a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	e037      	b.n	80013a2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 020e 	bic.w	r2, r2, #14
 8001340:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800134c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001350:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0201 	bic.w	r2, r2, #1
 8001360:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f003 021f 	and.w	r2, r3, #31
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	2101      	movs	r1, #1
 8001370:	fa01 f202 	lsl.w	r2, r1, r2
 8001374:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800137e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00c      	beq.n	80013a2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001392:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001396:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013a0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d00d      	beq.n	80013f4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2204      	movs	r2, #4
 80013dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	73fb      	strb	r3, [r7, #15]
 80013f2:	e047      	b.n	8001484 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 020e 	bic.w	r2, r2, #14
 8001402:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0201 	bic.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001422:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001428:	f003 021f 	and.w	r2, r3, #31
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	2101      	movs	r1, #1
 8001432:	fa01 f202 	lsl.w	r2, r1, r2
 8001436:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001440:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00c      	beq.n	8001464 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001458:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001462:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	4798      	blx	r3
    }
  }
  return status;
 8001484:	7bfb      	ldrb	r3, [r7, #15]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800149e:	e15a      	b.n	8001756 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	2101      	movs	r1, #1
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	4013      	ands	r3, r2
 80014ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 814c 	beq.w	8001750 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d005      	beq.n	80014d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d130      	bne.n	8001532 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001506:	2201      	movs	r2, #1
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	091b      	lsrs	r3, r3, #4
 800151c:	f003 0201 	and.w	r2, r3, #1
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b03      	cmp	r3, #3
 800153c:	d017      	beq.n	800156e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	2203      	movs	r2, #3
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d123      	bne.n	80015c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	08da      	lsrs	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3208      	adds	r2, #8
 8001582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001586:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	220f      	movs	r2, #15
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	691a      	ldr	r2, [r3, #16]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	08da      	lsrs	r2, r3, #3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3208      	adds	r2, #8
 80015bc:	6939      	ldr	r1, [r7, #16]
 80015be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	2203      	movs	r2, #3
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0203 	and.w	r2, r3, #3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 80a6 	beq.w	8001750 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001604:	4b5b      	ldr	r3, [pc, #364]	; (8001774 <HAL_GPIO_Init+0x2e4>)
 8001606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001608:	4a5a      	ldr	r2, [pc, #360]	; (8001774 <HAL_GPIO_Init+0x2e4>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6613      	str	r3, [r2, #96]	; 0x60
 8001610:	4b58      	ldr	r3, [pc, #352]	; (8001774 <HAL_GPIO_Init+0x2e4>)
 8001612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800161c:	4a56      	ldr	r2, [pc, #344]	; (8001778 <HAL_GPIO_Init+0x2e8>)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	220f      	movs	r2, #15
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001646:	d01f      	beq.n	8001688 <HAL_GPIO_Init+0x1f8>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a4c      	ldr	r2, [pc, #304]	; (800177c <HAL_GPIO_Init+0x2ec>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d019      	beq.n	8001684 <HAL_GPIO_Init+0x1f4>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a4b      	ldr	r2, [pc, #300]	; (8001780 <HAL_GPIO_Init+0x2f0>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d013      	beq.n	8001680 <HAL_GPIO_Init+0x1f0>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a4a      	ldr	r2, [pc, #296]	; (8001784 <HAL_GPIO_Init+0x2f4>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d00d      	beq.n	800167c <HAL_GPIO_Init+0x1ec>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a49      	ldr	r2, [pc, #292]	; (8001788 <HAL_GPIO_Init+0x2f8>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d007      	beq.n	8001678 <HAL_GPIO_Init+0x1e8>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a48      	ldr	r2, [pc, #288]	; (800178c <HAL_GPIO_Init+0x2fc>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d101      	bne.n	8001674 <HAL_GPIO_Init+0x1e4>
 8001670:	2305      	movs	r3, #5
 8001672:	e00a      	b.n	800168a <HAL_GPIO_Init+0x1fa>
 8001674:	2306      	movs	r3, #6
 8001676:	e008      	b.n	800168a <HAL_GPIO_Init+0x1fa>
 8001678:	2304      	movs	r3, #4
 800167a:	e006      	b.n	800168a <HAL_GPIO_Init+0x1fa>
 800167c:	2303      	movs	r3, #3
 800167e:	e004      	b.n	800168a <HAL_GPIO_Init+0x1fa>
 8001680:	2302      	movs	r3, #2
 8001682:	e002      	b.n	800168a <HAL_GPIO_Init+0x1fa>
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <HAL_GPIO_Init+0x1fa>
 8001688:	2300      	movs	r3, #0
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	f002 0203 	and.w	r2, r2, #3
 8001690:	0092      	lsls	r2, r2, #2
 8001692:	4093      	lsls	r3, r2
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800169a:	4937      	ldr	r1, [pc, #220]	; (8001778 <HAL_GPIO_Init+0x2e8>)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3302      	adds	r3, #2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a8:	4b39      	ldr	r3, [pc, #228]	; (8001790 <HAL_GPIO_Init+0x300>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016cc:	4a30      	ldr	r2, [pc, #192]	; (8001790 <HAL_GPIO_Init+0x300>)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016d2:	4b2f      	ldr	r3, [pc, #188]	; (8001790 <HAL_GPIO_Init+0x300>)
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016f6:	4a26      	ldr	r2, [pc, #152]	; (8001790 <HAL_GPIO_Init+0x300>)
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016fc:	4b24      	ldr	r3, [pc, #144]	; (8001790 <HAL_GPIO_Init+0x300>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	43db      	mvns	r3, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001720:	4a1b      	ldr	r2, [pc, #108]	; (8001790 <HAL_GPIO_Init+0x300>)
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <HAL_GPIO_Init+0x300>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	43db      	mvns	r3, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800174a:	4a11      	ldr	r2, [pc, #68]	; (8001790 <HAL_GPIO_Init+0x300>)
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	3301      	adds	r3, #1
 8001754:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	fa22 f303 	lsr.w	r3, r2, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	f47f ae9d 	bne.w	80014a0 <HAL_GPIO_Init+0x10>
  }
}
 8001766:	bf00      	nop
 8001768:	bf00      	nop
 800176a:	371c      	adds	r7, #28
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	40021000 	.word	0x40021000
 8001778:	40010000 	.word	0x40010000
 800177c:	48000400 	.word	0x48000400
 8001780:	48000800 	.word	0x48000800
 8001784:	48000c00 	.word	0x48000c00
 8001788:	48001000 	.word	0x48001000
 800178c:	48001400 	.word	0x48001400
 8001790:	40010400 	.word	0x40010400

08001794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
 80017a0:	4613      	mov	r3, r2
 80017a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a4:	787b      	ldrb	r3, [r7, #1]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017aa:	887a      	ldrh	r2, [r7, #2]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017b2:	887a      	ldrh	r2, [r7, #2]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d006      	beq.n	80017e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f806 	bl	80017f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40010400 	.word	0x40010400

080017f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d141      	bne.n	800189e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800181a:	4b4b      	ldr	r3, [pc, #300]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001826:	d131      	bne.n	800188c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001828:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800182e:	4a46      	ldr	r2, [pc, #280]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001834:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001838:	4b43      	ldr	r3, [pc, #268]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001840:	4a41      	ldr	r2, [pc, #260]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001846:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001848:	4b40      	ldr	r3, [pc, #256]	; (800194c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2232      	movs	r2, #50	; 0x32
 800184e:	fb02 f303 	mul.w	r3, r2, r3
 8001852:	4a3f      	ldr	r2, [pc, #252]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001854:	fba2 2303 	umull	r2, r3, r2, r3
 8001858:	0c9b      	lsrs	r3, r3, #18
 800185a:	3301      	adds	r3, #1
 800185c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800185e:	e002      	b.n	8001866 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3b01      	subs	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001866:	4b38      	ldr	r3, [pc, #224]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001872:	d102      	bne.n	800187a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f2      	bne.n	8001860 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800187a:	4b33      	ldr	r3, [pc, #204]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001886:	d158      	bne.n	800193a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e057      	b.n	800193c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a2d      	ldr	r2, [pc, #180]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800189c:	e04d      	b.n	800193a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a4:	d141      	bne.n	800192a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018a6:	4b28      	ldr	r3, [pc, #160]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b2:	d131      	bne.n	8001918 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018b4:	4b24      	ldr	r3, [pc, #144]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018ba:	4a23      	ldr	r2, [pc, #140]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c4:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018cc:	4a1e      	ldr	r2, [pc, #120]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018d4:	4b1d      	ldr	r3, [pc, #116]	; (800194c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2232      	movs	r2, #50	; 0x32
 80018da:	fb02 f303 	mul.w	r3, r2, r3
 80018de:	4a1c      	ldr	r2, [pc, #112]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018e0:	fba2 2303 	umull	r2, r3, r2, r3
 80018e4:	0c9b      	lsrs	r3, r3, #18
 80018e6:	3301      	adds	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ea:	e002      	b.n	80018f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018fe:	d102      	bne.n	8001906 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f2      	bne.n	80018ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001912:	d112      	bne.n	800193a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e011      	b.n	800193c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800191a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001924:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001928:	e007      	b.n	800193a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001932:	4a05      	ldr	r2, [pc, #20]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001934:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001938:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	40007000 	.word	0x40007000
 800194c:	20000098 	.word	0x20000098
 8001950:	431bde83 	.word	0x431bde83

08001954 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800195e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001962:	6093      	str	r3, [r2, #8]
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40007000 	.word	0x40007000

08001974 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e306      	b.n	8001f94 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d075      	beq.n	8001a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001992:	4b97      	ldr	r3, [pc, #604]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800199c:	4b94      	ldr	r3, [pc, #592]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b0c      	cmp	r3, #12
 80019aa:	d102      	bne.n	80019b2 <HAL_RCC_OscConfig+0x3e>
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d002      	beq.n	80019b8 <HAL_RCC_OscConfig+0x44>
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d10b      	bne.n	80019d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b8:	4b8d      	ldr	r3, [pc, #564]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d05b      	beq.n	8001a7c <HAL_RCC_OscConfig+0x108>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d157      	bne.n	8001a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e2e1      	b.n	8001f94 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d8:	d106      	bne.n	80019e8 <HAL_RCC_OscConfig+0x74>
 80019da:	4b85      	ldr	r3, [pc, #532]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a84      	ldr	r2, [pc, #528]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e01d      	b.n	8001a24 <HAL_RCC_OscConfig+0xb0>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x98>
 80019f2:	4b7f      	ldr	r3, [pc, #508]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a7e      	ldr	r2, [pc, #504]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 80019f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b7c      	ldr	r3, [pc, #496]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a7b      	ldr	r2, [pc, #492]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e00b      	b.n	8001a24 <HAL_RCC_OscConfig+0xb0>
 8001a0c:	4b78      	ldr	r3, [pc, #480]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a77      	ldr	r2, [pc, #476]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b75      	ldr	r3, [pc, #468]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a74      	ldr	r2, [pc, #464]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d013      	beq.n	8001a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb32 	bl	8001094 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb2e 	bl	8001094 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e2a6      	b.n	8001f94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a46:	4b6a      	ldr	r3, [pc, #424]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0xc0>
 8001a52:	e014      	b.n	8001a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff fb1e 	bl	8001094 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7ff fb1a 	bl	8001094 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e292      	b.n	8001f94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a6e:	4b60      	ldr	r3, [pc, #384]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0xe8>
 8001a7a:	e000      	b.n	8001a7e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d075      	beq.n	8001b76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a8a:	4b59      	ldr	r3, [pc, #356]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a94:	4b56      	ldr	r3, [pc, #344]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	2b0c      	cmp	r3, #12
 8001aa2:	d102      	bne.n	8001aaa <HAL_RCC_OscConfig+0x136>
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d002      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x13c>
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d11f      	bne.n	8001af0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ab0:	4b4f      	ldr	r3, [pc, #316]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x154>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e265      	b.n	8001f94 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac8:	4b49      	ldr	r3, [pc, #292]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	061b      	lsls	r3, r3, #24
 8001ad6:	4946      	ldr	r1, [pc, #280]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001adc:	4b45      	ldr	r3, [pc, #276]	; (8001bf4 <HAL_RCC_OscConfig+0x280>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fa8b 	bl	8000ffc <HAL_InitTick>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d043      	beq.n	8001b74 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e251      	b.n	8001f94 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d023      	beq.n	8001b40 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af8:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a3c      	ldr	r2, [pc, #240]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff fac6 	bl	8001094 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0c:	f7ff fac2 	bl	8001094 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e23a      	b.n	8001f94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b1e:	4b34      	ldr	r3, [pc, #208]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2a:	4b31      	ldr	r3, [pc, #196]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	061b      	lsls	r3, r3, #24
 8001b38:	492d      	ldr	r1, [pc, #180]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
 8001b3e:	e01a      	b.n	8001b76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a2a      	ldr	r2, [pc, #168]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001b46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff faa2 	bl	8001094 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b54:	f7ff fa9e 	bl	8001094 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e216      	b.n	8001f94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b66:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x1e0>
 8001b72:	e000      	b.n	8001b76 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d041      	beq.n	8001c06 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d01c      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b90:	4a17      	ldr	r2, [pc, #92]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9a:	f7ff fa7b 	bl	8001094 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba2:	f7ff fa77 	bl	8001094 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e1ef      	b.n	8001f94 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0ef      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x22e>
 8001bc2:	e020      	b.n	8001c06 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bca:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fa5e 	bl	8001094 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bda:	e00d      	b.n	8001bf8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bdc:	f7ff fa5a 	bl	8001094 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d906      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e1d2      	b.n	8001f94 <HAL_RCC_OscConfig+0x620>
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	2000009c 	.word	0x2000009c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bf8:	4b8c      	ldr	r3, [pc, #560]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1ea      	bne.n	8001bdc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 80a6 	beq.w	8001d60 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c18:	4b84      	ldr	r3, [pc, #528]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_OscConfig+0x2b4>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0x2b6>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00d      	beq.n	8001c4a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b7f      	ldr	r3, [pc, #508]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	4a7e      	ldr	r2, [pc, #504]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	6593      	str	r3, [r2, #88]	; 0x58
 8001c3a:	4b7c      	ldr	r3, [pc, #496]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c46:	2301      	movs	r3, #1
 8001c48:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4a:	4b79      	ldr	r3, [pc, #484]	; (8001e30 <HAL_RCC_OscConfig+0x4bc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d118      	bne.n	8001c88 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c56:	4b76      	ldr	r3, [pc, #472]	; (8001e30 <HAL_RCC_OscConfig+0x4bc>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a75      	ldr	r2, [pc, #468]	; (8001e30 <HAL_RCC_OscConfig+0x4bc>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c62:	f7ff fa17 	bl	8001094 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6a:	f7ff fa13 	bl	8001094 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e18b      	b.n	8001f94 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c7c:	4b6c      	ldr	r3, [pc, #432]	; (8001e30 <HAL_RCC_OscConfig+0x4bc>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d108      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x32e>
 8001c90:	4b66      	ldr	r3, [pc, #408]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c96:	4a65      	ldr	r2, [pc, #404]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca0:	e024      	b.n	8001cec <HAL_RCC_OscConfig+0x378>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	d110      	bne.n	8001ccc <HAL_RCC_OscConfig+0x358>
 8001caa:	4b60      	ldr	r3, [pc, #384]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb0:	4a5e      	ldr	r2, [pc, #376]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001cb2:	f043 0304 	orr.w	r3, r3, #4
 8001cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cba:	4b5c      	ldr	r3, [pc, #368]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc0:	4a5a      	ldr	r2, [pc, #360]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cca:	e00f      	b.n	8001cec <HAL_RCC_OscConfig+0x378>
 8001ccc:	4b57      	ldr	r3, [pc, #348]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd2:	4a56      	ldr	r2, [pc, #344]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cdc:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce2:	4a52      	ldr	r2, [pc, #328]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001ce4:	f023 0304 	bic.w	r3, r3, #4
 8001ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d016      	beq.n	8001d22 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf4:	f7ff f9ce 	bl	8001094 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfc:	f7ff f9ca 	bl	8001094 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e140      	b.n	8001f94 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d12:	4b46      	ldr	r3, [pc, #280]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0ed      	beq.n	8001cfc <HAL_RCC_OscConfig+0x388>
 8001d20:	e015      	b.n	8001d4e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d22:	f7ff f9b7 	bl	8001094 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7ff f9b3 	bl	8001094 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e129      	b.n	8001f94 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d40:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1ed      	bne.n	8001d2a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d4e:	7ffb      	ldrb	r3, [r7, #31]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d105      	bne.n	8001d60 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d54:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d58:	4a34      	ldr	r2, [pc, #208]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d03c      	beq.n	8001de6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d01c      	beq.n	8001dae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d74:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7a:	4a2c      	ldr	r2, [pc, #176]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d84:	f7ff f986 	bl	8001094 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d8c:	f7ff f982 	bl	8001094 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e0fa      	b.n	8001f94 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d9e:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0ef      	beq.n	8001d8c <HAL_RCC_OscConfig+0x418>
 8001dac:	e01b      	b.n	8001de6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dae:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db4:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001db6:	f023 0301 	bic.w	r3, r3, #1
 8001dba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbe:	f7ff f969 	bl	8001094 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dc6:	f7ff f965 	bl	8001094 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e0dd      	b.n	8001f94 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dd8:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1ef      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80d1 	beq.w	8001f92 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b0c      	cmp	r3, #12
 8001dfa:	f000 808b 	beq.w	8001f14 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d15e      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e06:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a08      	ldr	r2, [pc, #32]	; (8001e2c <HAL_RCC_OscConfig+0x4b8>)
 8001e0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7ff f93f 	bl	8001094 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e18:	e00c      	b.n	8001e34 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7ff f93b 	bl	8001094 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d905      	bls.n	8001e34 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e0b3      	b.n	8001f94 <HAL_RCC_OscConfig+0x620>
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e34:	4b59      	ldr	r3, [pc, #356]	; (8001f9c <HAL_RCC_OscConfig+0x628>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1ec      	bne.n	8001e1a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e40:	4b56      	ldr	r3, [pc, #344]	; (8001f9c <HAL_RCC_OscConfig+0x628>)
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	4b56      	ldr	r3, [pc, #344]	; (8001fa0 <HAL_RCC_OscConfig+0x62c>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6a11      	ldr	r1, [r2, #32]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e50:	3a01      	subs	r2, #1
 8001e52:	0112      	lsls	r2, r2, #4
 8001e54:	4311      	orrs	r1, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e5a:	0212      	lsls	r2, r2, #8
 8001e5c:	4311      	orrs	r1, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e62:	0852      	lsrs	r2, r2, #1
 8001e64:	3a01      	subs	r2, #1
 8001e66:	0552      	lsls	r2, r2, #21
 8001e68:	4311      	orrs	r1, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e6e:	0852      	lsrs	r2, r2, #1
 8001e70:	3a01      	subs	r2, #1
 8001e72:	0652      	lsls	r2, r2, #25
 8001e74:	4311      	orrs	r1, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e7a:	06d2      	lsls	r2, r2, #27
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	4947      	ldr	r1, [pc, #284]	; (8001f9c <HAL_RCC_OscConfig+0x628>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e84:	4b45      	ldr	r3, [pc, #276]	; (8001f9c <HAL_RCC_OscConfig+0x628>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a44      	ldr	r2, [pc, #272]	; (8001f9c <HAL_RCC_OscConfig+0x628>)
 8001e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e90:	4b42      	ldr	r3, [pc, #264]	; (8001f9c <HAL_RCC_OscConfig+0x628>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4a41      	ldr	r2, [pc, #260]	; (8001f9c <HAL_RCC_OscConfig+0x628>)
 8001e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7ff f8fa 	bl	8001094 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7ff f8f6 	bl	8001094 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e06e      	b.n	8001f94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb6:	4b39      	ldr	r3, [pc, #228]	; (8001f9c <HAL_RCC_OscConfig+0x628>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x530>
 8001ec2:	e066      	b.n	8001f92 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec4:	4b35      	ldr	r3, [pc, #212]	; (8001f9c <HAL_RCC_OscConfig+0x628>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a34      	ldr	r2, [pc, #208]	; (8001f9c <HAL_RCC_OscConfig+0x628>)
 8001eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ece:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ed0:	4b32      	ldr	r3, [pc, #200]	; (8001f9c <HAL_RCC_OscConfig+0x628>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4a31      	ldr	r2, [pc, #196]	; (8001f9c <HAL_RCC_OscConfig+0x628>)
 8001ed6:	f023 0303 	bic.w	r3, r3, #3
 8001eda:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001edc:	4b2f      	ldr	r3, [pc, #188]	; (8001f9c <HAL_RCC_OscConfig+0x628>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	4a2e      	ldr	r2, [pc, #184]	; (8001f9c <HAL_RCC_OscConfig+0x628>)
 8001ee2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7ff f8d2 	bl	8001094 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef4:	f7ff f8ce 	bl	8001094 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e046      	b.n	8001f94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f06:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <HAL_RCC_OscConfig+0x628>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x580>
 8001f12:	e03e      	b.n	8001f92 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e039      	b.n	8001f94 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <HAL_RCC_OscConfig+0x628>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f003 0203 	and.w	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d12c      	bne.n	8001f8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d123      	bne.n	8001f8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d11b      	bne.n	8001f8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d113      	bne.n	8001f8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	085b      	lsrs	r3, r3, #1
 8001f72:	3b01      	subs	r3, #1
 8001f74:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d109      	bne.n	8001f8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f84:	085b      	lsrs	r3, r3, #1
 8001f86:	3b01      	subs	r3, #1
 8001f88:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d001      	beq.n	8001f92 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3720      	adds	r7, #32
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	019f800c 	.word	0x019f800c

08001fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e11e      	b.n	80021fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b91      	ldr	r3, [pc, #580]	; (8002204 <HAL_RCC_ClockConfig+0x260>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d910      	bls.n	8001fec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b8e      	ldr	r3, [pc, #568]	; (8002204 <HAL_RCC_ClockConfig+0x260>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 020f 	bic.w	r2, r3, #15
 8001fd2:	498c      	ldr	r1, [pc, #560]	; (8002204 <HAL_RCC_ClockConfig+0x260>)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b8a      	ldr	r3, [pc, #552]	; (8002204 <HAL_RCC_ClockConfig+0x260>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e106      	b.n	80021fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d073      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d129      	bne.n	8002054 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002000:	4b81      	ldr	r3, [pc, #516]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0f4      	b.n	80021fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002010:	f000 f99e 	bl	8002350 <RCC_GetSysClockFreqFromPLLSource>
 8002014:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4a7c      	ldr	r2, [pc, #496]	; (800220c <HAL_RCC_ClockConfig+0x268>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d93f      	bls.n	800209e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800201e:	4b7a      	ldr	r3, [pc, #488]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002032:	2b00      	cmp	r3, #0
 8002034:	d033      	beq.n	800209e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800203a:	2b00      	cmp	r3, #0
 800203c:	d12f      	bne.n	800209e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800203e:	4b72      	ldr	r3, [pc, #456]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002046:	4a70      	ldr	r2, [pc, #448]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 8002048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800204c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e024      	b.n	800209e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d107      	bne.n	800206c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800205c:	4b6a      	ldr	r3, [pc, #424]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d109      	bne.n	800207c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0c6      	b.n	80021fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800206c:	4b66      	ldr	r3, [pc, #408]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0be      	b.n	80021fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800207c:	f000 f8ce 	bl	800221c <HAL_RCC_GetSysClockFreq>
 8002080:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4a61      	ldr	r2, [pc, #388]	; (800220c <HAL_RCC_ClockConfig+0x268>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d909      	bls.n	800209e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800208a:	4b5f      	ldr	r3, [pc, #380]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002092:	4a5d      	ldr	r2, [pc, #372]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 8002094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002098:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800209a:	2380      	movs	r3, #128	; 0x80
 800209c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800209e:	4b5a      	ldr	r3, [pc, #360]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f023 0203 	bic.w	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4957      	ldr	r1, [pc, #348]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b0:	f7fe fff0 	bl	8001094 <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b8:	f7fe ffec 	bl	8001094 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e095      	b.n	80021fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	4b4e      	ldr	r3, [pc, #312]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 020c 	and.w	r2, r3, #12
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	429a      	cmp	r2, r3
 80020de:	d1eb      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d023      	beq.n	8002134 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f8:	4b43      	ldr	r3, [pc, #268]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4a42      	ldr	r2, [pc, #264]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 80020fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002102:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b00      	cmp	r3, #0
 800210e:	d007      	beq.n	8002120 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002110:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002118:	4a3b      	ldr	r2, [pc, #236]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 800211a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800211e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002120:	4b39      	ldr	r3, [pc, #228]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4936      	ldr	r1, [pc, #216]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 800212e:	4313      	orrs	r3, r2
 8002130:	608b      	str	r3, [r1, #8]
 8002132:	e008      	b.n	8002146 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b80      	cmp	r3, #128	; 0x80
 8002138:	d105      	bne.n	8002146 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800213a:	4b33      	ldr	r3, [pc, #204]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	4a32      	ldr	r2, [pc, #200]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 8002140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002144:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002146:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_RCC_ClockConfig+0x260>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d21d      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002154:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <HAL_RCC_ClockConfig+0x260>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 020f 	bic.w	r2, r3, #15
 800215c:	4929      	ldr	r1, [pc, #164]	; (8002204 <HAL_RCC_ClockConfig+0x260>)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	4313      	orrs	r3, r2
 8002162:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002164:	f7fe ff96 	bl	8001094 <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	e00a      	b.n	8002182 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216c:	f7fe ff92 	bl	8001094 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	; 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e03b      	b.n	80021fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_RCC_ClockConfig+0x260>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d1ed      	bne.n	800216c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4917      	ldr	r1, [pc, #92]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ba:	4b13      	ldr	r3, [pc, #76]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	490f      	ldr	r1, [pc, #60]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021ce:	f000 f825 	bl	800221c <HAL_RCC_GetSysClockFreq>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	490c      	ldr	r1, [pc, #48]	; (8002210 <HAL_RCC_ClockConfig+0x26c>)
 80021e0:	5ccb      	ldrb	r3, [r1, r3]
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ea:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <HAL_RCC_ClockConfig+0x270>)
 80021ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021ee:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <HAL_RCC_ClockConfig+0x274>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe ff02 	bl	8000ffc <HAL_InitTick>
 80021f8:	4603      	mov	r3, r0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40022000 	.word	0x40022000
 8002208:	40021000 	.word	0x40021000
 800220c:	04c4b400 	.word	0x04c4b400
 8002210:	08006fa0 	.word	0x08006fa0
 8002214:	20000098 	.word	0x20000098
 8002218:	2000009c 	.word	0x2000009c

0800221c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002222:	4b2c      	ldr	r3, [pc, #176]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b04      	cmp	r3, #4
 800222c:	d102      	bne.n	8002234 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800222e:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	e047      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 030c 	and.w	r3, r3, #12
 800223c:	2b08      	cmp	r3, #8
 800223e:	d102      	bne.n	8002246 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002240:	4b26      	ldr	r3, [pc, #152]	; (80022dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	e03e      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002246:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d136      	bne.n	80022c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002252:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800225c:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	3301      	adds	r3, #1
 8002268:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d10c      	bne.n	800228a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002270:	4a1a      	ldr	r2, [pc, #104]	; (80022dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	fbb2 f3f3 	udiv	r3, r2, r3
 8002278:	4a16      	ldr	r2, [pc, #88]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800227a:	68d2      	ldr	r2, [r2, #12]
 800227c:	0a12      	lsrs	r2, r2, #8
 800227e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	617b      	str	r3, [r7, #20]
      break;
 8002288:	e00c      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800228a:	4a13      	ldr	r2, [pc, #76]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002292:	4a10      	ldr	r2, [pc, #64]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002294:	68d2      	ldr	r2, [r2, #12]
 8002296:	0a12      	lsrs	r2, r2, #8
 8002298:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800229c:	fb02 f303 	mul.w	r3, r2, r3
 80022a0:	617b      	str	r3, [r7, #20]
      break;
 80022a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	0e5b      	lsrs	r3, r3, #25
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	3301      	adds	r3, #1
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	e001      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80022c4:	693b      	ldr	r3, [r7, #16]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	371c      	adds	r7, #28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000
 80022d8:	00f42400 	.word	0x00f42400
 80022dc:	016e3600 	.word	0x016e3600

080022e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e4:	4b03      	ldr	r3, [pc, #12]	; (80022f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022e6:	681b      	ldr	r3, [r3, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000098 	.word	0x20000098

080022f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022fc:	f7ff fff0 	bl	80022e0 <HAL_RCC_GetHCLKFreq>
 8002300:	4602      	mov	r2, r0
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	0a1b      	lsrs	r3, r3, #8
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	4904      	ldr	r1, [pc, #16]	; (8002320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800230e:	5ccb      	ldrb	r3, [r1, r3]
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	08006fb0 	.word	0x08006fb0

08002324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002328:	f7ff ffda 	bl	80022e0 <HAL_RCC_GetHCLKFreq>
 800232c:	4602      	mov	r2, r0
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	0adb      	lsrs	r3, r3, #11
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	4904      	ldr	r1, [pc, #16]	; (800234c <HAL_RCC_GetPCLK2Freq+0x28>)
 800233a:	5ccb      	ldrb	r3, [r1, r3]
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	08006fb0 	.word	0x08006fb0

08002350 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002356:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002360:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3301      	adds	r3, #1
 800236c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d10c      	bne.n	800238e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002374:	4a17      	ldr	r2, [pc, #92]	; (80023d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	fbb2 f3f3 	udiv	r3, r2, r3
 800237c:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800237e:	68d2      	ldr	r2, [r2, #12]
 8002380:	0a12      	lsrs	r2, r2, #8
 8002382:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	617b      	str	r3, [r7, #20]
    break;
 800238c:	e00c      	b.n	80023a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	fbb2 f3f3 	udiv	r3, r2, r3
 8002396:	4a0e      	ldr	r2, [pc, #56]	; (80023d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002398:	68d2      	ldr	r2, [r2, #12]
 800239a:	0a12      	lsrs	r2, r2, #8
 800239c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023a0:	fb02 f303 	mul.w	r3, r2, r3
 80023a4:	617b      	str	r3, [r7, #20]
    break;
 80023a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	0e5b      	lsrs	r3, r3, #25
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	3301      	adds	r3, #1
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80023c2:	687b      	ldr	r3, [r7, #4]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	371c      	adds	r7, #28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	40021000 	.word	0x40021000
 80023d4:	016e3600 	.word	0x016e3600
 80023d8:	00f42400 	.word	0x00f42400

080023dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023e4:	2300      	movs	r3, #0
 80023e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023e8:	2300      	movs	r3, #0
 80023ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 8098 	beq.w	800252a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023fa:	2300      	movs	r3, #0
 80023fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fe:	4b43      	ldr	r3, [pc, #268]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10d      	bne.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	4b40      	ldr	r3, [pc, #256]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	4a3f      	ldr	r2, [pc, #252]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002414:	6593      	str	r3, [r2, #88]	; 0x58
 8002416:	4b3d      	ldr	r3, [pc, #244]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002422:	2301      	movs	r3, #1
 8002424:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002426:	4b3a      	ldr	r3, [pc, #232]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a39      	ldr	r2, [pc, #228]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002432:	f7fe fe2f 	bl	8001094 <HAL_GetTick>
 8002436:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002438:	e009      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243a:	f7fe fe2b 	bl	8001094 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d902      	bls.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	74fb      	strb	r3, [r7, #19]
        break;
 800244c:	e005      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800244e:	4b30      	ldr	r3, [pc, #192]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0ef      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800245a:	7cfb      	ldrb	r3, [r7, #19]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d159      	bne.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002460:	4b2a      	ldr	r3, [pc, #168]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d01e      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	429a      	cmp	r2, r3
 800247a:	d019      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002486:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002488:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800248a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248e:	4a1f      	ldr	r2, [pc, #124]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002498:	4b1c      	ldr	r3, [pc, #112]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249e:	4a1b      	ldr	r2, [pc, #108]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024a8:	4a18      	ldr	r2, [pc, #96]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d016      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7fe fdeb 	bl	8001094 <HAL_GetTick>
 80024be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c0:	e00b      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c2:	f7fe fde7 	bl	8001094 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d902      	bls.n	80024da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	74fb      	strb	r3, [r7, #19]
            break;
 80024d8:	e006      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ec      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024e8:	7cfb      	ldrb	r3, [r7, #19]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10b      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024fc:	4903      	ldr	r1, [pc, #12]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002504:	e008      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002506:	7cfb      	ldrb	r3, [r7, #19]
 8002508:	74bb      	strb	r3, [r7, #18]
 800250a:	e005      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800250c:	40021000 	.word	0x40021000
 8002510:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002514:	7cfb      	ldrb	r3, [r7, #19]
 8002516:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002518:	7c7b      	ldrb	r3, [r7, #17]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d105      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251e:	4ba7      	ldr	r3, [pc, #668]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002522:	4aa6      	ldr	r2, [pc, #664]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002528:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002536:	4ba1      	ldr	r3, [pc, #644]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253c:	f023 0203 	bic.w	r2, r3, #3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	499d      	ldr	r1, [pc, #628]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002558:	4b98      	ldr	r3, [pc, #608]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255e:	f023 020c 	bic.w	r2, r3, #12
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	4995      	ldr	r1, [pc, #596]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800257a:	4b90      	ldr	r3, [pc, #576]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002580:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	498c      	ldr	r1, [pc, #560]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800259c:	4b87      	ldr	r3, [pc, #540]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	4984      	ldr	r1, [pc, #528]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025be:	4b7f      	ldr	r3, [pc, #508]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	497b      	ldr	r1, [pc, #492]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025e0:	4b76      	ldr	r3, [pc, #472]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	4973      	ldr	r1, [pc, #460]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002602:	4b6e      	ldr	r3, [pc, #440]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002608:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	496a      	ldr	r1, [pc, #424]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002624:	4b65      	ldr	r3, [pc, #404]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4962      	ldr	r1, [pc, #392]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002646:	4b5d      	ldr	r3, [pc, #372]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	4959      	ldr	r1, [pc, #356]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002668:	4b54      	ldr	r3, [pc, #336]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800266a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800266e:	f023 0203 	bic.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	4951      	ldr	r1, [pc, #324]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800268a:	4b4c      	ldr	r3, [pc, #304]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002690:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	4948      	ldr	r1, [pc, #288]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d015      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026ac:	4b43      	ldr	r3, [pc, #268]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	4940      	ldr	r1, [pc, #256]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026ca:	d105      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026cc:	4b3b      	ldr	r3, [pc, #236]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4a3a      	ldr	r2, [pc, #232]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d015      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026e4:	4b35      	ldr	r3, [pc, #212]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f2:	4932      	ldr	r1, [pc, #200]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002702:	d105      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002704:	4b2d      	ldr	r3, [pc, #180]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4a2c      	ldr	r2, [pc, #176]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800270a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800270e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d015      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800271c:	4b27      	ldr	r3, [pc, #156]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272a:	4924      	ldr	r1, [pc, #144]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002736:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800273a:	d105      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800273c:	4b1f      	ldr	r3, [pc, #124]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002746:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d015      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002762:	4916      	ldr	r1, [pc, #88]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002772:	d105      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a10      	ldr	r2, [pc, #64]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800277a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800277e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d019      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002792:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4908      	ldr	r1, [pc, #32]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027aa:	d109      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ac:	4b03      	ldr	r3, [pc, #12]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4a02      	ldr	r2, [pc, #8]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027b6:	60d3      	str	r3, [r2, #12]
 80027b8:	e002      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d015      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80027cc:	4b29      	ldr	r3, [pc, #164]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	4926      	ldr	r1, [pc, #152]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027ea:	d105      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027ec:	4b21      	ldr	r3, [pc, #132]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4a20      	ldr	r2, [pc, #128]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d015      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002804:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002812:	4918      	ldr	r1, [pc, #96]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800281e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002822:	d105      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002824:	4b13      	ldr	r3, [pc, #76]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4a12      	ldr	r2, [pc, #72]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800282a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d015      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800283c:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800283e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002842:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284a:	490a      	ldr	r1, [pc, #40]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800285a:	d105      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4a04      	ldr	r2, [pc, #16]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002866:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002868:	7cbb      	ldrb	r3, [r7, #18]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000

08002878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e049      	b.n	800291e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7fe fa66 	bl	8000d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3304      	adds	r3, #4
 80028b4:	4619      	mov	r1, r3
 80028b6:	4610      	mov	r0, r2
 80028b8:	f000 fa26 	bl	8002d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e049      	b.n	80029cc <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d106      	bne.n	8002952 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f841 	bl	80029d4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2202      	movs	r2, #2
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3304      	adds	r3, #4
 8002962:	4619      	mov	r1, r3
 8002964:	4610      	mov	r0, r2
 8002966:	f000 f9cf 	bl	8002d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e066      	b.n	8002ad4 <HAL_TIM_OC_ConfigChannel+0xec>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b14      	cmp	r3, #20
 8002a12:	d857      	bhi.n	8002ac4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8002a14:	a201      	add	r2, pc, #4	; (adr r2, 8002a1c <HAL_TIM_OC_ConfigChannel+0x34>)
 8002a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1a:	bf00      	nop
 8002a1c:	08002a71 	.word	0x08002a71
 8002a20:	08002ac5 	.word	0x08002ac5
 8002a24:	08002ac5 	.word	0x08002ac5
 8002a28:	08002ac5 	.word	0x08002ac5
 8002a2c:	08002a7f 	.word	0x08002a7f
 8002a30:	08002ac5 	.word	0x08002ac5
 8002a34:	08002ac5 	.word	0x08002ac5
 8002a38:	08002ac5 	.word	0x08002ac5
 8002a3c:	08002a8d 	.word	0x08002a8d
 8002a40:	08002ac5 	.word	0x08002ac5
 8002a44:	08002ac5 	.word	0x08002ac5
 8002a48:	08002ac5 	.word	0x08002ac5
 8002a4c:	08002a9b 	.word	0x08002a9b
 8002a50:	08002ac5 	.word	0x08002ac5
 8002a54:	08002ac5 	.word	0x08002ac5
 8002a58:	08002ac5 	.word	0x08002ac5
 8002a5c:	08002aa9 	.word	0x08002aa9
 8002a60:	08002ac5 	.word	0x08002ac5
 8002a64:	08002ac5 	.word	0x08002ac5
 8002a68:	08002ac5 	.word	0x08002ac5
 8002a6c:	08002ab7 	.word	0x08002ab7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 f9ee 	bl	8002e58 <TIM_OC1_SetConfig>
      break;
 8002a7c:	e025      	b.n	8002aca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68b9      	ldr	r1, [r7, #8]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 fa81 	bl	8002f8c <TIM_OC2_SetConfig>
      break;
 8002a8a:	e01e      	b.n	8002aca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fb0e 	bl	80030b4 <TIM_OC3_SetConfig>
      break;
 8002a98:	e017      	b.n	8002aca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fb99 	bl	80031d8 <TIM_OC4_SetConfig>
      break;
 8002aa6:	e010      	b.n	8002aca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 fc26 	bl	8003300 <TIM_OC5_SetConfig>
      break;
 8002ab4:	e009      	b.n	8002aca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68b9      	ldr	r1, [r7, #8]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 fc89 	bl	80033d4 <TIM_OC6_SetConfig>
      break;
 8002ac2:	e002      	b.n	8002aca <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ac8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_TIM_ConfigClockSource+0x1c>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e0f6      	b.n	8002ce6 <HAL_TIM_ConfigClockSource+0x20a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002b16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a6f      	ldr	r2, [pc, #444]	; (8002cf0 <HAL_TIM_ConfigClockSource+0x214>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	f000 80c1 	beq.w	8002cba <HAL_TIM_ConfigClockSource+0x1de>
 8002b38:	4a6d      	ldr	r2, [pc, #436]	; (8002cf0 <HAL_TIM_ConfigClockSource+0x214>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	f200 80c6 	bhi.w	8002ccc <HAL_TIM_ConfigClockSource+0x1f0>
 8002b40:	4a6c      	ldr	r2, [pc, #432]	; (8002cf4 <HAL_TIM_ConfigClockSource+0x218>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	f000 80b9 	beq.w	8002cba <HAL_TIM_ConfigClockSource+0x1de>
 8002b48:	4a6a      	ldr	r2, [pc, #424]	; (8002cf4 <HAL_TIM_ConfigClockSource+0x218>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	f200 80be 	bhi.w	8002ccc <HAL_TIM_ConfigClockSource+0x1f0>
 8002b50:	4a69      	ldr	r2, [pc, #420]	; (8002cf8 <HAL_TIM_ConfigClockSource+0x21c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	f000 80b1 	beq.w	8002cba <HAL_TIM_ConfigClockSource+0x1de>
 8002b58:	4a67      	ldr	r2, [pc, #412]	; (8002cf8 <HAL_TIM_ConfigClockSource+0x21c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	f200 80b6 	bhi.w	8002ccc <HAL_TIM_ConfigClockSource+0x1f0>
 8002b60:	4a66      	ldr	r2, [pc, #408]	; (8002cfc <HAL_TIM_ConfigClockSource+0x220>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	f000 80a9 	beq.w	8002cba <HAL_TIM_ConfigClockSource+0x1de>
 8002b68:	4a64      	ldr	r2, [pc, #400]	; (8002cfc <HAL_TIM_ConfigClockSource+0x220>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	f200 80ae 	bhi.w	8002ccc <HAL_TIM_ConfigClockSource+0x1f0>
 8002b70:	4a63      	ldr	r2, [pc, #396]	; (8002d00 <HAL_TIM_ConfigClockSource+0x224>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	f000 80a1 	beq.w	8002cba <HAL_TIM_ConfigClockSource+0x1de>
 8002b78:	4a61      	ldr	r2, [pc, #388]	; (8002d00 <HAL_TIM_ConfigClockSource+0x224>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	f200 80a6 	bhi.w	8002ccc <HAL_TIM_ConfigClockSource+0x1f0>
 8002b80:	4a60      	ldr	r2, [pc, #384]	; (8002d04 <HAL_TIM_ConfigClockSource+0x228>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	f000 8099 	beq.w	8002cba <HAL_TIM_ConfigClockSource+0x1de>
 8002b88:	4a5e      	ldr	r2, [pc, #376]	; (8002d04 <HAL_TIM_ConfigClockSource+0x228>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	f200 809e 	bhi.w	8002ccc <HAL_TIM_ConfigClockSource+0x1f0>
 8002b90:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002b94:	f000 8091 	beq.w	8002cba <HAL_TIM_ConfigClockSource+0x1de>
 8002b98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002b9c:	f200 8096 	bhi.w	8002ccc <HAL_TIM_ConfigClockSource+0x1f0>
 8002ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ba4:	f000 8089 	beq.w	8002cba <HAL_TIM_ConfigClockSource+0x1de>
 8002ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bac:	f200 808e 	bhi.w	8002ccc <HAL_TIM_ConfigClockSource+0x1f0>
 8002bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb4:	d03e      	beq.n	8002c34 <HAL_TIM_ConfigClockSource+0x158>
 8002bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bba:	f200 8087 	bhi.w	8002ccc <HAL_TIM_ConfigClockSource+0x1f0>
 8002bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc2:	f000 8086 	beq.w	8002cd2 <HAL_TIM_ConfigClockSource+0x1f6>
 8002bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bca:	d87f      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x1f0>
 8002bcc:	2b70      	cmp	r3, #112	; 0x70
 8002bce:	d01a      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x12a>
 8002bd0:	2b70      	cmp	r3, #112	; 0x70
 8002bd2:	d87b      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x1f0>
 8002bd4:	2b60      	cmp	r3, #96	; 0x60
 8002bd6:	d050      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0x19e>
 8002bd8:	2b60      	cmp	r3, #96	; 0x60
 8002bda:	d877      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x1f0>
 8002bdc:	2b50      	cmp	r3, #80	; 0x50
 8002bde:	d03c      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x17e>
 8002be0:	2b50      	cmp	r3, #80	; 0x50
 8002be2:	d873      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x1f0>
 8002be4:	2b40      	cmp	r3, #64	; 0x40
 8002be6:	d058      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0x1be>
 8002be8:	2b40      	cmp	r3, #64	; 0x40
 8002bea:	d86f      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x1f0>
 8002bec:	2b30      	cmp	r3, #48	; 0x30
 8002bee:	d064      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0x1de>
 8002bf0:	2b30      	cmp	r3, #48	; 0x30
 8002bf2:	d86b      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x1f0>
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d060      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0x1de>
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d867      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x1f0>
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d05c      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0x1de>
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d05a      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0x1de>
 8002c04:	e062      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6899      	ldr	r1, [r3, #8]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f000 fcc5 	bl	80035a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	609a      	str	r2, [r3, #8]
      break;
 8002c32:	e04f      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6818      	ldr	r0, [r3, #0]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	6899      	ldr	r1, [r3, #8]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f000 fcae 	bl	80035a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c56:	609a      	str	r2, [r3, #8]
      break;
 8002c58:	e03c      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6859      	ldr	r1, [r3, #4]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	461a      	mov	r2, r3
 8002c68:	f000 fc20 	bl	80034ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2150      	movs	r1, #80	; 0x50
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fc79 	bl	800356a <TIM_ITRx_SetConfig>
      break;
 8002c78:	e02c      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	461a      	mov	r2, r3
 8002c88:	f000 fc3f 	bl	800350a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2160      	movs	r1, #96	; 0x60
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fc69 	bl	800356a <TIM_ITRx_SetConfig>
      break;
 8002c98:	e01c      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6859      	ldr	r1, [r3, #4]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f000 fc00 	bl	80034ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2140      	movs	r1, #64	; 0x40
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fc59 	bl	800356a <TIM_ITRx_SetConfig>
      break;
 8002cb8:	e00c      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	f000 fc50 	bl	800356a <TIM_ITRx_SetConfig>
      break;
 8002cca:	e003      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd0:	e000      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002cd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	00100070 	.word	0x00100070
 8002cf4:	00100060 	.word	0x00100060
 8002cf8:	00100050 	.word	0x00100050
 8002cfc:	00100040 	.word	0x00100040
 8002d00:	00100030 	.word	0x00100030
 8002d04:	00100020 	.word	0x00100020

08002d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a46      	ldr	r2, [pc, #280]	; (8002e34 <TIM_Base_SetConfig+0x12c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d017      	beq.n	8002d50 <TIM_Base_SetConfig+0x48>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d26:	d013      	beq.n	8002d50 <TIM_Base_SetConfig+0x48>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a43      	ldr	r2, [pc, #268]	; (8002e38 <TIM_Base_SetConfig+0x130>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00f      	beq.n	8002d50 <TIM_Base_SetConfig+0x48>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a42      	ldr	r2, [pc, #264]	; (8002e3c <TIM_Base_SetConfig+0x134>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00b      	beq.n	8002d50 <TIM_Base_SetConfig+0x48>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a41      	ldr	r2, [pc, #260]	; (8002e40 <TIM_Base_SetConfig+0x138>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d007      	beq.n	8002d50 <TIM_Base_SetConfig+0x48>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a40      	ldr	r2, [pc, #256]	; (8002e44 <TIM_Base_SetConfig+0x13c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d003      	beq.n	8002d50 <TIM_Base_SetConfig+0x48>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a3f      	ldr	r2, [pc, #252]	; (8002e48 <TIM_Base_SetConfig+0x140>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d108      	bne.n	8002d62 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a33      	ldr	r2, [pc, #204]	; (8002e34 <TIM_Base_SetConfig+0x12c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d023      	beq.n	8002db2 <TIM_Base_SetConfig+0xaa>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d70:	d01f      	beq.n	8002db2 <TIM_Base_SetConfig+0xaa>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a30      	ldr	r2, [pc, #192]	; (8002e38 <TIM_Base_SetConfig+0x130>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d01b      	beq.n	8002db2 <TIM_Base_SetConfig+0xaa>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a2f      	ldr	r2, [pc, #188]	; (8002e3c <TIM_Base_SetConfig+0x134>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d017      	beq.n	8002db2 <TIM_Base_SetConfig+0xaa>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a2e      	ldr	r2, [pc, #184]	; (8002e40 <TIM_Base_SetConfig+0x138>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d013      	beq.n	8002db2 <TIM_Base_SetConfig+0xaa>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a2d      	ldr	r2, [pc, #180]	; (8002e44 <TIM_Base_SetConfig+0x13c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00f      	beq.n	8002db2 <TIM_Base_SetConfig+0xaa>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a2d      	ldr	r2, [pc, #180]	; (8002e4c <TIM_Base_SetConfig+0x144>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00b      	beq.n	8002db2 <TIM_Base_SetConfig+0xaa>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a2c      	ldr	r2, [pc, #176]	; (8002e50 <TIM_Base_SetConfig+0x148>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d007      	beq.n	8002db2 <TIM_Base_SetConfig+0xaa>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a2b      	ldr	r2, [pc, #172]	; (8002e54 <TIM_Base_SetConfig+0x14c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d003      	beq.n	8002db2 <TIM_Base_SetConfig+0xaa>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <TIM_Base_SetConfig+0x140>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d108      	bne.n	8002dc4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a12      	ldr	r2, [pc, #72]	; (8002e34 <TIM_Base_SetConfig+0x12c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d013      	beq.n	8002e18 <TIM_Base_SetConfig+0x110>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a14      	ldr	r2, [pc, #80]	; (8002e44 <TIM_Base_SetConfig+0x13c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00f      	beq.n	8002e18 <TIM_Base_SetConfig+0x110>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <TIM_Base_SetConfig+0x144>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00b      	beq.n	8002e18 <TIM_Base_SetConfig+0x110>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a13      	ldr	r2, [pc, #76]	; (8002e50 <TIM_Base_SetConfig+0x148>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d007      	beq.n	8002e18 <TIM_Base_SetConfig+0x110>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <TIM_Base_SetConfig+0x14c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <TIM_Base_SetConfig+0x110>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a0d      	ldr	r2, [pc, #52]	; (8002e48 <TIM_Base_SetConfig+0x140>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d103      	bne.n	8002e20 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	615a      	str	r2, [r3, #20]
}
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40012c00 	.word	0x40012c00
 8002e38:	40000400 	.word	0x40000400
 8002e3c:	40000800 	.word	0x40000800
 8002e40:	40000c00 	.word	0x40000c00
 8002e44:	40013400 	.word	0x40013400
 8002e48:	40015000 	.word	0x40015000
 8002e4c:	40014000 	.word	0x40014000
 8002e50:	40014400 	.word	0x40014400
 8002e54:	40014800 	.word	0x40014800

08002e58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f023 0201 	bic.w	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f023 0302 	bic.w	r3, r3, #2
 8002ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a30      	ldr	r2, [pc, #192]	; (8002f74 <TIM_OC1_SetConfig+0x11c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d013      	beq.n	8002ee0 <TIM_OC1_SetConfig+0x88>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a2f      	ldr	r2, [pc, #188]	; (8002f78 <TIM_OC1_SetConfig+0x120>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00f      	beq.n	8002ee0 <TIM_OC1_SetConfig+0x88>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a2e      	ldr	r2, [pc, #184]	; (8002f7c <TIM_OC1_SetConfig+0x124>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00b      	beq.n	8002ee0 <TIM_OC1_SetConfig+0x88>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a2d      	ldr	r2, [pc, #180]	; (8002f80 <TIM_OC1_SetConfig+0x128>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d007      	beq.n	8002ee0 <TIM_OC1_SetConfig+0x88>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a2c      	ldr	r2, [pc, #176]	; (8002f84 <TIM_OC1_SetConfig+0x12c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d003      	beq.n	8002ee0 <TIM_OC1_SetConfig+0x88>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a2b      	ldr	r2, [pc, #172]	; (8002f88 <TIM_OC1_SetConfig+0x130>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d10c      	bne.n	8002efa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f023 0308 	bic.w	r3, r3, #8
 8002ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f023 0304 	bic.w	r3, r3, #4
 8002ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a1d      	ldr	r2, [pc, #116]	; (8002f74 <TIM_OC1_SetConfig+0x11c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <TIM_OC1_SetConfig+0xd2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a1c      	ldr	r2, [pc, #112]	; (8002f78 <TIM_OC1_SetConfig+0x120>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00f      	beq.n	8002f2a <TIM_OC1_SetConfig+0xd2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a1b      	ldr	r2, [pc, #108]	; (8002f7c <TIM_OC1_SetConfig+0x124>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00b      	beq.n	8002f2a <TIM_OC1_SetConfig+0xd2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a1a      	ldr	r2, [pc, #104]	; (8002f80 <TIM_OC1_SetConfig+0x128>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <TIM_OC1_SetConfig+0xd2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a19      	ldr	r2, [pc, #100]	; (8002f84 <TIM_OC1_SetConfig+0x12c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d003      	beq.n	8002f2a <TIM_OC1_SetConfig+0xd2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a18      	ldr	r2, [pc, #96]	; (8002f88 <TIM_OC1_SetConfig+0x130>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d111      	bne.n	8002f4e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	621a      	str	r2, [r3, #32]
}
 8002f68:	bf00      	nop
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	40012c00 	.word	0x40012c00
 8002f78:	40013400 	.word	0x40013400
 8002f7c:	40014000 	.word	0x40014000
 8002f80:	40014400 	.word	0x40014400
 8002f84:	40014800 	.word	0x40014800
 8002f88:	40015000 	.word	0x40015000

08002f8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	f023 0210 	bic.w	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f023 0320 	bic.w	r3, r3, #32
 8002fda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a2c      	ldr	r2, [pc, #176]	; (800309c <TIM_OC2_SetConfig+0x110>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d007      	beq.n	8003000 <TIM_OC2_SetConfig+0x74>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a2b      	ldr	r2, [pc, #172]	; (80030a0 <TIM_OC2_SetConfig+0x114>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <TIM_OC2_SetConfig+0x74>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a2a      	ldr	r2, [pc, #168]	; (80030a4 <TIM_OC2_SetConfig+0x118>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d10d      	bne.n	800301c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800301a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a1f      	ldr	r2, [pc, #124]	; (800309c <TIM_OC2_SetConfig+0x110>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d013      	beq.n	800304c <TIM_OC2_SetConfig+0xc0>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a1e      	ldr	r2, [pc, #120]	; (80030a0 <TIM_OC2_SetConfig+0x114>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00f      	beq.n	800304c <TIM_OC2_SetConfig+0xc0>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a1e      	ldr	r2, [pc, #120]	; (80030a8 <TIM_OC2_SetConfig+0x11c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00b      	beq.n	800304c <TIM_OC2_SetConfig+0xc0>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a1d      	ldr	r2, [pc, #116]	; (80030ac <TIM_OC2_SetConfig+0x120>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <TIM_OC2_SetConfig+0xc0>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a1c      	ldr	r2, [pc, #112]	; (80030b0 <TIM_OC2_SetConfig+0x124>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d003      	beq.n	800304c <TIM_OC2_SetConfig+0xc0>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a17      	ldr	r2, [pc, #92]	; (80030a4 <TIM_OC2_SetConfig+0x118>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d113      	bne.n	8003074 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003052:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800305a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	621a      	str	r2, [r3, #32]
}
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40012c00 	.word	0x40012c00
 80030a0:	40013400 	.word	0x40013400
 80030a4:	40015000 	.word	0x40015000
 80030a8:	40014000 	.word	0x40014000
 80030ac:	40014400 	.word	0x40014400
 80030b0:	40014800 	.word	0x40014800

080030b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0303 	bic.w	r3, r3, #3
 80030ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a2b      	ldr	r2, [pc, #172]	; (80031c0 <TIM_OC3_SetConfig+0x10c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d007      	beq.n	8003126 <TIM_OC3_SetConfig+0x72>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a2a      	ldr	r2, [pc, #168]	; (80031c4 <TIM_OC3_SetConfig+0x110>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d003      	beq.n	8003126 <TIM_OC3_SetConfig+0x72>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a29      	ldr	r2, [pc, #164]	; (80031c8 <TIM_OC3_SetConfig+0x114>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d10d      	bne.n	8003142 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800312c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	4313      	orrs	r3, r2
 8003138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a1e      	ldr	r2, [pc, #120]	; (80031c0 <TIM_OC3_SetConfig+0x10c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d013      	beq.n	8003172 <TIM_OC3_SetConfig+0xbe>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a1d      	ldr	r2, [pc, #116]	; (80031c4 <TIM_OC3_SetConfig+0x110>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00f      	beq.n	8003172 <TIM_OC3_SetConfig+0xbe>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a1d      	ldr	r2, [pc, #116]	; (80031cc <TIM_OC3_SetConfig+0x118>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00b      	beq.n	8003172 <TIM_OC3_SetConfig+0xbe>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a1c      	ldr	r2, [pc, #112]	; (80031d0 <TIM_OC3_SetConfig+0x11c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d007      	beq.n	8003172 <TIM_OC3_SetConfig+0xbe>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a1b      	ldr	r2, [pc, #108]	; (80031d4 <TIM_OC3_SetConfig+0x120>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d003      	beq.n	8003172 <TIM_OC3_SetConfig+0xbe>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a16      	ldr	r2, [pc, #88]	; (80031c8 <TIM_OC3_SetConfig+0x114>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d113      	bne.n	800319a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	621a      	str	r2, [r3, #32]
}
 80031b4:	bf00      	nop
 80031b6:	371c      	adds	r7, #28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	40012c00 	.word	0x40012c00
 80031c4:	40013400 	.word	0x40013400
 80031c8:	40015000 	.word	0x40015000
 80031cc:	40014000 	.word	0x40014000
 80031d0:	40014400 	.word	0x40014400
 80031d4:	40014800 	.word	0x40014800

080031d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800320a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	021b      	lsls	r3, r3, #8
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	031b      	lsls	r3, r3, #12
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a2c      	ldr	r2, [pc, #176]	; (80032e8 <TIM_OC4_SetConfig+0x110>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d007      	beq.n	800324c <TIM_OC4_SetConfig+0x74>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a2b      	ldr	r2, [pc, #172]	; (80032ec <TIM_OC4_SetConfig+0x114>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d003      	beq.n	800324c <TIM_OC4_SetConfig+0x74>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a2a      	ldr	r2, [pc, #168]	; (80032f0 <TIM_OC4_SetConfig+0x118>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d10d      	bne.n	8003268 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	031b      	lsls	r3, r3, #12
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003266:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a1f      	ldr	r2, [pc, #124]	; (80032e8 <TIM_OC4_SetConfig+0x110>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d013      	beq.n	8003298 <TIM_OC4_SetConfig+0xc0>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a1e      	ldr	r2, [pc, #120]	; (80032ec <TIM_OC4_SetConfig+0x114>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00f      	beq.n	8003298 <TIM_OC4_SetConfig+0xc0>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a1e      	ldr	r2, [pc, #120]	; (80032f4 <TIM_OC4_SetConfig+0x11c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00b      	beq.n	8003298 <TIM_OC4_SetConfig+0xc0>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a1d      	ldr	r2, [pc, #116]	; (80032f8 <TIM_OC4_SetConfig+0x120>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d007      	beq.n	8003298 <TIM_OC4_SetConfig+0xc0>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a1c      	ldr	r2, [pc, #112]	; (80032fc <TIM_OC4_SetConfig+0x124>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d003      	beq.n	8003298 <TIM_OC4_SetConfig+0xc0>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a17      	ldr	r2, [pc, #92]	; (80032f0 <TIM_OC4_SetConfig+0x118>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d113      	bne.n	80032c0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800329e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80032a6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	019b      	lsls	r3, r3, #6
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	019b      	lsls	r3, r3, #6
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	621a      	str	r2, [r3, #32]
}
 80032da:	bf00      	nop
 80032dc:	371c      	adds	r7, #28
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40012c00 	.word	0x40012c00
 80032ec:	40013400 	.word	0x40013400
 80032f0:	40015000 	.word	0x40015000
 80032f4:	40014000 	.word	0x40014000
 80032f8:	40014400 	.word	0x40014400
 80032fc:	40014800 	.word	0x40014800

08003300 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800332e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003344:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	041b      	lsls	r3, r3, #16
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a19      	ldr	r2, [pc, #100]	; (80033bc <TIM_OC5_SetConfig+0xbc>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d013      	beq.n	8003382 <TIM_OC5_SetConfig+0x82>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a18      	ldr	r2, [pc, #96]	; (80033c0 <TIM_OC5_SetConfig+0xc0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00f      	beq.n	8003382 <TIM_OC5_SetConfig+0x82>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a17      	ldr	r2, [pc, #92]	; (80033c4 <TIM_OC5_SetConfig+0xc4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00b      	beq.n	8003382 <TIM_OC5_SetConfig+0x82>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a16      	ldr	r2, [pc, #88]	; (80033c8 <TIM_OC5_SetConfig+0xc8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d007      	beq.n	8003382 <TIM_OC5_SetConfig+0x82>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a15      	ldr	r2, [pc, #84]	; (80033cc <TIM_OC5_SetConfig+0xcc>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d003      	beq.n	8003382 <TIM_OC5_SetConfig+0x82>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <TIM_OC5_SetConfig+0xd0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d109      	bne.n	8003396 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003388:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	021b      	lsls	r3, r3, #8
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	621a      	str	r2, [r3, #32]
}
 80033b0:	bf00      	nop
 80033b2:	371c      	adds	r7, #28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	40012c00 	.word	0x40012c00
 80033c0:	40013400 	.word	0x40013400
 80033c4:	40014000 	.word	0x40014000
 80033c8:	40014400 	.word	0x40014400
 80033cc:	40014800 	.word	0x40014800
 80033d0:	40015000 	.word	0x40015000

080033d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	021b      	lsls	r3, r3, #8
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800341a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	051b      	lsls	r3, r3, #20
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a1a      	ldr	r2, [pc, #104]	; (8003494 <TIM_OC6_SetConfig+0xc0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d013      	beq.n	8003458 <TIM_OC6_SetConfig+0x84>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a19      	ldr	r2, [pc, #100]	; (8003498 <TIM_OC6_SetConfig+0xc4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00f      	beq.n	8003458 <TIM_OC6_SetConfig+0x84>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a18      	ldr	r2, [pc, #96]	; (800349c <TIM_OC6_SetConfig+0xc8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00b      	beq.n	8003458 <TIM_OC6_SetConfig+0x84>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a17      	ldr	r2, [pc, #92]	; (80034a0 <TIM_OC6_SetConfig+0xcc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d007      	beq.n	8003458 <TIM_OC6_SetConfig+0x84>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a16      	ldr	r2, [pc, #88]	; (80034a4 <TIM_OC6_SetConfig+0xd0>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d003      	beq.n	8003458 <TIM_OC6_SetConfig+0x84>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a15      	ldr	r2, [pc, #84]	; (80034a8 <TIM_OC6_SetConfig+0xd4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d109      	bne.n	800346c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800345e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	029b      	lsls	r3, r3, #10
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	621a      	str	r2, [r3, #32]
}
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40012c00 	.word	0x40012c00
 8003498:	40013400 	.word	0x40013400
 800349c:	40014000 	.word	0x40014000
 80034a0:	40014400 	.word	0x40014400
 80034a4:	40014800 	.word	0x40014800
 80034a8:	40015000 	.word	0x40015000

080034ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	f023 0201 	bic.w	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f023 030a 	bic.w	r3, r3, #10
 80034e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	621a      	str	r2, [r3, #32]
}
 80034fe:	bf00      	nop
 8003500:	371c      	adds	r7, #28
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800350a:	b480      	push	{r7}
 800350c:	b087      	sub	sp, #28
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	f023 0210 	bic.w	r2, r3, #16
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003534:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	031b      	lsls	r3, r3, #12
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	4313      	orrs	r3, r2
 800353e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003546:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	621a      	str	r2, [r3, #32]
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800356a:	b480      	push	{r7}
 800356c:	b085      	sub	sp, #20
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	f043 0307 	orr.w	r3, r3, #7
 8003590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	609a      	str	r2, [r3, #8]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	021a      	lsls	r2, r3, #8
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	609a      	str	r2, [r3, #8]
}
 80035d8:	bf00      	nop
 80035da:	371c      	adds	r7, #28
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e074      	b.n	80036e6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a34      	ldr	r2, [pc, #208]	; (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d009      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a33      	ldr	r2, [pc, #204]	; (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d004      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a31      	ldr	r2, [pc, #196]	; (80036fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d108      	bne.n	800364c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003640:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003656:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a21      	ldr	r2, [pc, #132]	; (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d022      	beq.n	80036ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367c:	d01d      	beq.n	80036ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1f      	ldr	r2, [pc, #124]	; (8003700 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d018      	beq.n	80036ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d013      	beq.n	80036ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00e      	beq.n	80036ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a15      	ldr	r2, [pc, #84]	; (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d009      	beq.n	80036ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a18      	ldr	r2, [pc, #96]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d004      	beq.n	80036ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a11      	ldr	r2, [pc, #68]	; (80036fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d10c      	bne.n	80036d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40012c00 	.word	0x40012c00
 80036f8:	40013400 	.word	0x40013400
 80036fc:	40015000 	.word	0x40015000
 8003700:	40000400 	.word	0x40000400
 8003704:	40000800 	.word	0x40000800
 8003708:	40000c00 	.word	0x40000c00
 800370c:	40014000 	.word	0x40014000

08003710 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003728:	2302      	movs	r3, #2
 800372a:	e096      	b.n	800385a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	4313      	orrs	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4313      	orrs	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	041b      	lsls	r3, r3, #16
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a2f      	ldr	r2, [pc, #188]	; (8003868 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d009      	beq.n	80037c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a2d      	ldr	r2, [pc, #180]	; (800386c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d004      	beq.n	80037c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a2c      	ldr	r2, [pc, #176]	; (8003870 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d106      	bne.n	80037d2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a24      	ldr	r2, [pc, #144]	; (8003868 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d009      	beq.n	80037f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a22      	ldr	r2, [pc, #136]	; (800386c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d004      	beq.n	80037f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a21      	ldr	r2, [pc, #132]	; (8003870 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d12b      	bne.n	8003848 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fa:	051b      	lsls	r3, r3, #20
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a11      	ldr	r2, [pc, #68]	; (8003868 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d009      	beq.n	800383a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a10      	ldr	r2, [pc, #64]	; (800386c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d004      	beq.n	800383a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a0e      	ldr	r2, [pc, #56]	; (8003870 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d106      	bne.n	8003848 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40012c00 	.word	0x40012c00
 800386c:	40013400 	.word	0x40013400
 8003870:	40015000 	.word	0x40015000

08003874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e042      	b.n	800390c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800388c:	2b00      	cmp	r3, #0
 800388e:	d106      	bne.n	800389e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7fd fb0d 	bl	8000eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2224      	movs	r2, #36	; 0x24
 80038a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0201 	bic.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fc5a 	bl	8004170 <UART_SetConfig>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e022      	b.n	800390c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 ff4a 	bl	8004768 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 ffd1 	bl	80048ac <UART_CheckIdleState>
 800390a:	4603      	mov	r3, r0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	; 0x28
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800392a:	2b20      	cmp	r3, #32
 800392c:	f040 8083 	bne.w	8003a36 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_UART_Transmit+0x28>
 8003936:	88fb      	ldrh	r3, [r7, #6]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e07b      	b.n	8003a38 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_UART_Transmit+0x3a>
 800394a:	2302      	movs	r3, #2
 800394c:	e074      	b.n	8003a38 <HAL_UART_Transmit+0x124>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2221      	movs	r2, #33	; 0x21
 8003962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003966:	f7fd fb95 	bl	8001094 <HAL_GetTick>
 800396a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	88fa      	ldrh	r2, [r7, #6]
 8003970:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	88fa      	ldrh	r2, [r7, #6]
 8003978:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003984:	d108      	bne.n	8003998 <HAL_UART_Transmit+0x84>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d104      	bne.n	8003998 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	61bb      	str	r3, [r7, #24]
 8003996:	e003      	b.n	80039a0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800399c:	2300      	movs	r3, #0
 800399e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80039a8:	e02c      	b.n	8003a04 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2200      	movs	r2, #0
 80039b2:	2180      	movs	r1, #128	; 0x80
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 ffc4 	bl	8004942 <UART_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e039      	b.n	8003a38 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10b      	bne.n	80039e2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	3302      	adds	r3, #2
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	e007      	b.n	80039f2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	781a      	ldrb	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	3301      	adds	r3, #1
 80039f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1cc      	bne.n	80039aa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2200      	movs	r2, #0
 8003a18:	2140      	movs	r1, #64	; 0x40
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 ff91 	bl	8004942 <UART_WaitOnFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e006      	b.n	8003a38 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e000      	b.n	8003a38 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003a36:	2302      	movs	r3, #2
  }
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3720      	adds	r7, #32
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08a      	sub	sp, #40	; 0x28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d142      	bne.n	8003ade <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <HAL_UART_Receive_IT+0x24>
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e03b      	b.n	8003ae0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_UART_Receive_IT+0x36>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e034      	b.n	8003ae0 <HAL_UART_Receive_IT+0xa0>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a17      	ldr	r2, [pc, #92]	; (8003ae8 <HAL_UART_Receive_IT+0xa8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d01f      	beq.n	8003ace <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d018      	beq.n	8003ace <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	623b      	str	r3, [r7, #32]
 8003abc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	69f9      	ldr	r1, [r7, #28]
 8003ac0:	6a3a      	ldr	r2, [r7, #32]
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e6      	bne.n	8003a9c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fffd 	bl	8004ad4 <UART_Start_Receive_IT>
 8003ada:	4603      	mov	r3, r0
 8003adc:	e000      	b.n	8003ae0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
  }
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3728      	adds	r7, #40	; 0x28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40008000 	.word	0x40008000

08003aec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b0ba      	sub	sp, #232	; 0xe8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003b16:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003b20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d11b      	bne.n	8003b60 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d015      	beq.n	8003b60 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b38:	f003 0320 	and.w	r3, r3, #32
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d105      	bne.n	8003b4c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d009      	beq.n	8003b60 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 82d6 	beq.w	8004102 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	4798      	blx	r3
      }
      return;
 8003b5e:	e2d0      	b.n	8004102 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 811f 	beq.w	8003da8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003b6a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003b6e:	4b8b      	ldr	r3, [pc, #556]	; (8003d9c <HAL_UART_IRQHandler+0x2b0>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003b76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003b7a:	4b89      	ldr	r3, [pc, #548]	; (8003da0 <HAL_UART_IRQHandler+0x2b4>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8112 	beq.w	8003da8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d011      	beq.n	8003bb4 <HAL_UART_IRQHandler+0xc8>
 8003b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00b      	beq.n	8003bb4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003baa:	f043 0201 	orr.w	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d011      	beq.n	8003be4 <HAL_UART_IRQHandler+0xf8>
 8003bc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00b      	beq.n	8003be4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bda:	f043 0204 	orr.w	r2, r3, #4
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d011      	beq.n	8003c14 <HAL_UART_IRQHandler+0x128>
 8003bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00b      	beq.n	8003c14 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2204      	movs	r2, #4
 8003c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c0a:	f043 0202 	orr.w	r2, r3, #2
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d017      	beq.n	8003c50 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003c2c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003c30:	4b5a      	ldr	r3, [pc, #360]	; (8003d9c <HAL_UART_IRQHandler+0x2b0>)
 8003c32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00b      	beq.n	8003c50 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c46:	f043 0208 	orr.w	r2, r3, #8
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d012      	beq.n	8003c82 <HAL_UART_IRQHandler+0x196>
 8003c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00c      	beq.n	8003c82 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c78:	f043 0220 	orr.w	r2, r3, #32
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 823c 	beq.w	8004106 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d013      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d105      	bne.n	8003cb2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d007      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd6:	2b40      	cmp	r3, #64	; 0x40
 8003cd8:	d005      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cde:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d04f      	beq.n	8003d86 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f001 f81e 	bl	8004d28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	d141      	bne.n	8003d7e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3308      	adds	r3, #8
 8003d00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3308      	adds	r3, #8
 8003d22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d36:	e841 2300 	strex	r3, r2, [r1]
 8003d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1d9      	bne.n	8003cfa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d013      	beq.n	8003d76 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d52:	4a14      	ldr	r2, [pc, #80]	; (8003da4 <HAL_UART_IRQHandler+0x2b8>)
 8003d54:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fd fb30 	bl	80013c0 <HAL_DMA_Abort_IT>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d017      	beq.n	8003d96 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003d70:	4610      	mov	r0, r2
 8003d72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d74:	e00f      	b.n	8003d96 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f9e4 	bl	8004144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7c:	e00b      	b.n	8003d96 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f9e0 	bl	8004144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d84:	e007      	b.n	8003d96 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f9dc 	bl	8004144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003d94:	e1b7      	b.n	8004106 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d96:	bf00      	nop
    return;
 8003d98:	e1b5      	b.n	8004106 <HAL_UART_IRQHandler+0x61a>
 8003d9a:	bf00      	nop
 8003d9c:	10000001 	.word	0x10000001
 8003da0:	04000120 	.word	0x04000120
 8003da4:	08004df5 	.word	0x08004df5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	f040 814a 	bne.w	8004046 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db6:	f003 0310 	and.w	r3, r3, #16
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 8143 	beq.w	8004046 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 813c 	beq.w	8004046 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2210      	movs	r2, #16
 8003dd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de0:	2b40      	cmp	r3, #64	; 0x40
 8003de2:	f040 80b5 	bne.w	8003f50 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003df2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 8187 	beq.w	800410a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e06:	429a      	cmp	r2, r3
 8003e08:	f080 817f 	bcs.w	800410a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f040 8086 	bne.w	8003f34 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e56:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1da      	bne.n	8003e28 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3308      	adds	r3, #8
 8003e78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3308      	adds	r3, #8
 8003e92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e1      	bne.n	8003e72 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3308      	adds	r3, #8
 8003ece:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ed2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ed4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ed8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e3      	bne.n	8003eae <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f04:	f023 0310 	bic.w	r3, r3, #16
 8003f08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f16:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e4      	bne.n	8003ef4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fd f9ed 	bl	800130e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	4619      	mov	r1, r3
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f905 	bl	8004158 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f4e:	e0dc      	b.n	800410a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80ce 	beq.w	800410e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8003f72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80c9 	beq.w	800410e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f9e:	647b      	str	r3, [r7, #68]	; 0x44
 8003fa0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fa6:	e841 2300 	strex	r3, r2, [r1]
 8003faa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e4      	bne.n	8003f7c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	623b      	str	r3, [r7, #32]
   return(result);
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003fda:	633a      	str	r2, [r7, #48]	; 0x30
 8003fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e1      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0310 	bic.w	r3, r3, #16
 8004016:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004024:	61fb      	str	r3, [r7, #28]
 8004026:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	69b9      	ldr	r1, [r7, #24]
 800402a:	69fa      	ldr	r2, [r7, #28]
 800402c:	e841 2300 	strex	r3, r2, [r1]
 8004030:	617b      	str	r3, [r7, #20]
   return(result);
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e4      	bne.n	8004002 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004038:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800403c:	4619      	mov	r1, r3
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f88a 	bl	8004158 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004044:	e063      	b.n	800410e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800404a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00e      	beq.n	8004070 <HAL_UART_IRQHandler+0x584>
 8004052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d008      	beq.n	8004070 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004066:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f001 fb61 	bl	8005730 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800406e:	e051      	b.n	8004114 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004078:	2b00      	cmp	r3, #0
 800407a:	d014      	beq.n	80040a6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800407c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004084:	2b00      	cmp	r3, #0
 8004086:	d105      	bne.n	8004094 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800408c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004098:	2b00      	cmp	r3, #0
 800409a:	d03a      	beq.n	8004112 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	4798      	blx	r3
    }
    return;
 80040a4:	e035      	b.n	8004112 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d009      	beq.n	80040c6 <HAL_UART_IRQHandler+0x5da>
 80040b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 feae 	bl	8004e20 <UART_EndTransmit_IT>
    return;
 80040c4:	e026      	b.n	8004114 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80040c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <HAL_UART_IRQHandler+0x5fa>
 80040d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f001 fb3a 	bl	8005758 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040e4:	e016      	b.n	8004114 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80040e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d010      	beq.n	8004114 <HAL_UART_IRQHandler+0x628>
 80040f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	da0c      	bge.n	8004114 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f001 fb22 	bl	8005744 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004100:	e008      	b.n	8004114 <HAL_UART_IRQHandler+0x628>
      return;
 8004102:	bf00      	nop
 8004104:	e006      	b.n	8004114 <HAL_UART_IRQHandler+0x628>
    return;
 8004106:	bf00      	nop
 8004108:	e004      	b.n	8004114 <HAL_UART_IRQHandler+0x628>
      return;
 800410a:	bf00      	nop
 800410c:	e002      	b.n	8004114 <HAL_UART_IRQHandler+0x628>
      return;
 800410e:	bf00      	nop
 8004110:	e000      	b.n	8004114 <HAL_UART_IRQHandler+0x628>
    return;
 8004112:	bf00      	nop
  }
}
 8004114:	37e8      	adds	r7, #232	; 0xe8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop

0800411c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004174:	b08c      	sub	sp, #48	; 0x30
 8004176:	af00      	add	r7, sp, #0
 8004178:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	431a      	orrs	r2, r3
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	431a      	orrs	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	4313      	orrs	r3, r2
 8004196:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	4baa      	ldr	r3, [pc, #680]	; (8004448 <UART_SetConfig+0x2d8>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041a8:	430b      	orrs	r3, r1
 80041aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a9f      	ldr	r2, [pc, #636]	; (800444c <UART_SetConfig+0x2dc>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d004      	beq.n	80041dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041d8:	4313      	orrs	r3, r2
 80041da:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80041e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	6812      	ldr	r2, [r2, #0]
 80041ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041f0:	430b      	orrs	r3, r1
 80041f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	f023 010f 	bic.w	r1, r3, #15
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a90      	ldr	r2, [pc, #576]	; (8004450 <UART_SetConfig+0x2e0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d125      	bne.n	8004260 <UART_SetConfig+0xf0>
 8004214:	4b8f      	ldr	r3, [pc, #572]	; (8004454 <UART_SetConfig+0x2e4>)
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b03      	cmp	r3, #3
 8004220:	d81a      	bhi.n	8004258 <UART_SetConfig+0xe8>
 8004222:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <UART_SetConfig+0xb8>)
 8004224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004228:	08004239 	.word	0x08004239
 800422c:	08004249 	.word	0x08004249
 8004230:	08004241 	.word	0x08004241
 8004234:	08004251 	.word	0x08004251
 8004238:	2301      	movs	r3, #1
 800423a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800423e:	e116      	b.n	800446e <UART_SetConfig+0x2fe>
 8004240:	2302      	movs	r3, #2
 8004242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004246:	e112      	b.n	800446e <UART_SetConfig+0x2fe>
 8004248:	2304      	movs	r3, #4
 800424a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800424e:	e10e      	b.n	800446e <UART_SetConfig+0x2fe>
 8004250:	2308      	movs	r3, #8
 8004252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004256:	e10a      	b.n	800446e <UART_SetConfig+0x2fe>
 8004258:	2310      	movs	r3, #16
 800425a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800425e:	e106      	b.n	800446e <UART_SetConfig+0x2fe>
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a7c      	ldr	r2, [pc, #496]	; (8004458 <UART_SetConfig+0x2e8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d138      	bne.n	80042dc <UART_SetConfig+0x16c>
 800426a:	4b7a      	ldr	r3, [pc, #488]	; (8004454 <UART_SetConfig+0x2e4>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	2b0c      	cmp	r3, #12
 8004276:	d82d      	bhi.n	80042d4 <UART_SetConfig+0x164>
 8004278:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <UART_SetConfig+0x110>)
 800427a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427e:	bf00      	nop
 8004280:	080042b5 	.word	0x080042b5
 8004284:	080042d5 	.word	0x080042d5
 8004288:	080042d5 	.word	0x080042d5
 800428c:	080042d5 	.word	0x080042d5
 8004290:	080042c5 	.word	0x080042c5
 8004294:	080042d5 	.word	0x080042d5
 8004298:	080042d5 	.word	0x080042d5
 800429c:	080042d5 	.word	0x080042d5
 80042a0:	080042bd 	.word	0x080042bd
 80042a4:	080042d5 	.word	0x080042d5
 80042a8:	080042d5 	.word	0x080042d5
 80042ac:	080042d5 	.word	0x080042d5
 80042b0:	080042cd 	.word	0x080042cd
 80042b4:	2300      	movs	r3, #0
 80042b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ba:	e0d8      	b.n	800446e <UART_SetConfig+0x2fe>
 80042bc:	2302      	movs	r3, #2
 80042be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042c2:	e0d4      	b.n	800446e <UART_SetConfig+0x2fe>
 80042c4:	2304      	movs	r3, #4
 80042c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ca:	e0d0      	b.n	800446e <UART_SetConfig+0x2fe>
 80042cc:	2308      	movs	r3, #8
 80042ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042d2:	e0cc      	b.n	800446e <UART_SetConfig+0x2fe>
 80042d4:	2310      	movs	r3, #16
 80042d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042da:	e0c8      	b.n	800446e <UART_SetConfig+0x2fe>
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a5e      	ldr	r2, [pc, #376]	; (800445c <UART_SetConfig+0x2ec>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d125      	bne.n	8004332 <UART_SetConfig+0x1c2>
 80042e6:	4b5b      	ldr	r3, [pc, #364]	; (8004454 <UART_SetConfig+0x2e4>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042f0:	2b30      	cmp	r3, #48	; 0x30
 80042f2:	d016      	beq.n	8004322 <UART_SetConfig+0x1b2>
 80042f4:	2b30      	cmp	r3, #48	; 0x30
 80042f6:	d818      	bhi.n	800432a <UART_SetConfig+0x1ba>
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	d00a      	beq.n	8004312 <UART_SetConfig+0x1a2>
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	d814      	bhi.n	800432a <UART_SetConfig+0x1ba>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <UART_SetConfig+0x19a>
 8004304:	2b10      	cmp	r3, #16
 8004306:	d008      	beq.n	800431a <UART_SetConfig+0x1aa>
 8004308:	e00f      	b.n	800432a <UART_SetConfig+0x1ba>
 800430a:	2300      	movs	r3, #0
 800430c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004310:	e0ad      	b.n	800446e <UART_SetConfig+0x2fe>
 8004312:	2302      	movs	r3, #2
 8004314:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004318:	e0a9      	b.n	800446e <UART_SetConfig+0x2fe>
 800431a:	2304      	movs	r3, #4
 800431c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004320:	e0a5      	b.n	800446e <UART_SetConfig+0x2fe>
 8004322:	2308      	movs	r3, #8
 8004324:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004328:	e0a1      	b.n	800446e <UART_SetConfig+0x2fe>
 800432a:	2310      	movs	r3, #16
 800432c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004330:	e09d      	b.n	800446e <UART_SetConfig+0x2fe>
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a4a      	ldr	r2, [pc, #296]	; (8004460 <UART_SetConfig+0x2f0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d125      	bne.n	8004388 <UART_SetConfig+0x218>
 800433c:	4b45      	ldr	r3, [pc, #276]	; (8004454 <UART_SetConfig+0x2e4>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004342:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004346:	2bc0      	cmp	r3, #192	; 0xc0
 8004348:	d016      	beq.n	8004378 <UART_SetConfig+0x208>
 800434a:	2bc0      	cmp	r3, #192	; 0xc0
 800434c:	d818      	bhi.n	8004380 <UART_SetConfig+0x210>
 800434e:	2b80      	cmp	r3, #128	; 0x80
 8004350:	d00a      	beq.n	8004368 <UART_SetConfig+0x1f8>
 8004352:	2b80      	cmp	r3, #128	; 0x80
 8004354:	d814      	bhi.n	8004380 <UART_SetConfig+0x210>
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <UART_SetConfig+0x1f0>
 800435a:	2b40      	cmp	r3, #64	; 0x40
 800435c:	d008      	beq.n	8004370 <UART_SetConfig+0x200>
 800435e:	e00f      	b.n	8004380 <UART_SetConfig+0x210>
 8004360:	2300      	movs	r3, #0
 8004362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004366:	e082      	b.n	800446e <UART_SetConfig+0x2fe>
 8004368:	2302      	movs	r3, #2
 800436a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800436e:	e07e      	b.n	800446e <UART_SetConfig+0x2fe>
 8004370:	2304      	movs	r3, #4
 8004372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004376:	e07a      	b.n	800446e <UART_SetConfig+0x2fe>
 8004378:	2308      	movs	r3, #8
 800437a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800437e:	e076      	b.n	800446e <UART_SetConfig+0x2fe>
 8004380:	2310      	movs	r3, #16
 8004382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004386:	e072      	b.n	800446e <UART_SetConfig+0x2fe>
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a35      	ldr	r2, [pc, #212]	; (8004464 <UART_SetConfig+0x2f4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d12a      	bne.n	80043e8 <UART_SetConfig+0x278>
 8004392:	4b30      	ldr	r3, [pc, #192]	; (8004454 <UART_SetConfig+0x2e4>)
 8004394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043a0:	d01a      	beq.n	80043d8 <UART_SetConfig+0x268>
 80043a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043a6:	d81b      	bhi.n	80043e0 <UART_SetConfig+0x270>
 80043a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ac:	d00c      	beq.n	80043c8 <UART_SetConfig+0x258>
 80043ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b2:	d815      	bhi.n	80043e0 <UART_SetConfig+0x270>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <UART_SetConfig+0x250>
 80043b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043bc:	d008      	beq.n	80043d0 <UART_SetConfig+0x260>
 80043be:	e00f      	b.n	80043e0 <UART_SetConfig+0x270>
 80043c0:	2300      	movs	r3, #0
 80043c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043c6:	e052      	b.n	800446e <UART_SetConfig+0x2fe>
 80043c8:	2302      	movs	r3, #2
 80043ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043ce:	e04e      	b.n	800446e <UART_SetConfig+0x2fe>
 80043d0:	2304      	movs	r3, #4
 80043d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043d6:	e04a      	b.n	800446e <UART_SetConfig+0x2fe>
 80043d8:	2308      	movs	r3, #8
 80043da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043de:	e046      	b.n	800446e <UART_SetConfig+0x2fe>
 80043e0:	2310      	movs	r3, #16
 80043e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043e6:	e042      	b.n	800446e <UART_SetConfig+0x2fe>
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a17      	ldr	r2, [pc, #92]	; (800444c <UART_SetConfig+0x2dc>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d13a      	bne.n	8004468 <UART_SetConfig+0x2f8>
 80043f2:	4b18      	ldr	r3, [pc, #96]	; (8004454 <UART_SetConfig+0x2e4>)
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004400:	d01a      	beq.n	8004438 <UART_SetConfig+0x2c8>
 8004402:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004406:	d81b      	bhi.n	8004440 <UART_SetConfig+0x2d0>
 8004408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800440c:	d00c      	beq.n	8004428 <UART_SetConfig+0x2b8>
 800440e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004412:	d815      	bhi.n	8004440 <UART_SetConfig+0x2d0>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <UART_SetConfig+0x2b0>
 8004418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441c:	d008      	beq.n	8004430 <UART_SetConfig+0x2c0>
 800441e:	e00f      	b.n	8004440 <UART_SetConfig+0x2d0>
 8004420:	2300      	movs	r3, #0
 8004422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004426:	e022      	b.n	800446e <UART_SetConfig+0x2fe>
 8004428:	2302      	movs	r3, #2
 800442a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800442e:	e01e      	b.n	800446e <UART_SetConfig+0x2fe>
 8004430:	2304      	movs	r3, #4
 8004432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004436:	e01a      	b.n	800446e <UART_SetConfig+0x2fe>
 8004438:	2308      	movs	r3, #8
 800443a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800443e:	e016      	b.n	800446e <UART_SetConfig+0x2fe>
 8004440:	2310      	movs	r3, #16
 8004442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004446:	e012      	b.n	800446e <UART_SetConfig+0x2fe>
 8004448:	cfff69f3 	.word	0xcfff69f3
 800444c:	40008000 	.word	0x40008000
 8004450:	40013800 	.word	0x40013800
 8004454:	40021000 	.word	0x40021000
 8004458:	40004400 	.word	0x40004400
 800445c:	40004800 	.word	0x40004800
 8004460:	40004c00 	.word	0x40004c00
 8004464:	40005000 	.word	0x40005000
 8004468:	2310      	movs	r3, #16
 800446a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4aae      	ldr	r2, [pc, #696]	; (800472c <UART_SetConfig+0x5bc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	f040 8097 	bne.w	80045a8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800447a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800447e:	2b08      	cmp	r3, #8
 8004480:	d823      	bhi.n	80044ca <UART_SetConfig+0x35a>
 8004482:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <UART_SetConfig+0x318>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	080044ad 	.word	0x080044ad
 800448c:	080044cb 	.word	0x080044cb
 8004490:	080044b5 	.word	0x080044b5
 8004494:	080044cb 	.word	0x080044cb
 8004498:	080044bb 	.word	0x080044bb
 800449c:	080044cb 	.word	0x080044cb
 80044a0:	080044cb 	.word	0x080044cb
 80044a4:	080044cb 	.word	0x080044cb
 80044a8:	080044c3 	.word	0x080044c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ac:	f7fd ff24 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 80044b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044b2:	e010      	b.n	80044d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b4:	4b9e      	ldr	r3, [pc, #632]	; (8004730 <UART_SetConfig+0x5c0>)
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044b8:	e00d      	b.n	80044d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ba:	f7fd feaf 	bl	800221c <HAL_RCC_GetSysClockFreq>
 80044be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044c0:	e009      	b.n	80044d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044c8:	e005      	b.n	80044d6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80044d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8130 	beq.w	800473e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	4a94      	ldr	r2, [pc, #592]	; (8004734 <UART_SetConfig+0x5c4>)
 80044e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044e8:	461a      	mov	r2, r3
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	4413      	add	r3, r2
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d305      	bcc.n	800450e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	429a      	cmp	r2, r3
 800450c:	d903      	bls.n	8004516 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004514:	e113      	b.n	800473e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	2200      	movs	r2, #0
 800451a:	60bb      	str	r3, [r7, #8]
 800451c:	60fa      	str	r2, [r7, #12]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	4a84      	ldr	r2, [pc, #528]	; (8004734 <UART_SetConfig+0x5c4>)
 8004524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004528:	b29b      	uxth	r3, r3
 800452a:	2200      	movs	r2, #0
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004534:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004538:	f7fb fed2 	bl	80002e0 <__aeabi_uldivmod>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4610      	mov	r0, r2
 8004542:	4619      	mov	r1, r3
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	020b      	lsls	r3, r1, #8
 800454e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004552:	0202      	lsls	r2, r0, #8
 8004554:	6979      	ldr	r1, [r7, #20]
 8004556:	6849      	ldr	r1, [r1, #4]
 8004558:	0849      	lsrs	r1, r1, #1
 800455a:	2000      	movs	r0, #0
 800455c:	460c      	mov	r4, r1
 800455e:	4605      	mov	r5, r0
 8004560:	eb12 0804 	adds.w	r8, r2, r4
 8004564:	eb43 0905 	adc.w	r9, r3, r5
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	469a      	mov	sl, r3
 8004570:	4693      	mov	fp, r2
 8004572:	4652      	mov	r2, sl
 8004574:	465b      	mov	r3, fp
 8004576:	4640      	mov	r0, r8
 8004578:	4649      	mov	r1, r9
 800457a:	f7fb feb1 	bl	80002e0 <__aeabi_uldivmod>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4613      	mov	r3, r2
 8004584:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800458c:	d308      	bcc.n	80045a0 <UART_SetConfig+0x430>
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004594:	d204      	bcs.n	80045a0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6a3a      	ldr	r2, [r7, #32]
 800459c:	60da      	str	r2, [r3, #12]
 800459e:	e0ce      	b.n	800473e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80045a6:	e0ca      	b.n	800473e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b0:	d166      	bne.n	8004680 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80045b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d827      	bhi.n	800460a <UART_SetConfig+0x49a>
 80045ba:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <UART_SetConfig+0x450>)
 80045bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c0:	080045e5 	.word	0x080045e5
 80045c4:	080045ed 	.word	0x080045ed
 80045c8:	080045f5 	.word	0x080045f5
 80045cc:	0800460b 	.word	0x0800460b
 80045d0:	080045fb 	.word	0x080045fb
 80045d4:	0800460b 	.word	0x0800460b
 80045d8:	0800460b 	.word	0x0800460b
 80045dc:	0800460b 	.word	0x0800460b
 80045e0:	08004603 	.word	0x08004603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045e4:	f7fd fe88 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 80045e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045ea:	e014      	b.n	8004616 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045ec:	f7fd fe9a 	bl	8002324 <HAL_RCC_GetPCLK2Freq>
 80045f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045f2:	e010      	b.n	8004616 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f4:	4b4e      	ldr	r3, [pc, #312]	; (8004730 <UART_SetConfig+0x5c0>)
 80045f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045f8:	e00d      	b.n	8004616 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045fa:	f7fd fe0f 	bl	800221c <HAL_RCC_GetSysClockFreq>
 80045fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004600:	e009      	b.n	8004616 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004608:	e005      	b.n	8004616 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004614:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8090 	beq.w	800473e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	4a44      	ldr	r2, [pc, #272]	; (8004734 <UART_SetConfig+0x5c4>)
 8004624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004628:	461a      	mov	r2, r3
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004630:	005a      	lsls	r2, r3, #1
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	085b      	lsrs	r3, r3, #1
 8004638:	441a      	add	r2, r3
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004642:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	2b0f      	cmp	r3, #15
 8004648:	d916      	bls.n	8004678 <UART_SetConfig+0x508>
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004650:	d212      	bcs.n	8004678 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	b29b      	uxth	r3, r3
 8004656:	f023 030f 	bic.w	r3, r3, #15
 800465a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	085b      	lsrs	r3, r3, #1
 8004660:	b29b      	uxth	r3, r3
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	b29a      	uxth	r2, r3
 8004668:	8bfb      	ldrh	r3, [r7, #30]
 800466a:	4313      	orrs	r3, r2
 800466c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	8bfa      	ldrh	r2, [r7, #30]
 8004674:	60da      	str	r2, [r3, #12]
 8004676:	e062      	b.n	800473e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800467e:	e05e      	b.n	800473e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004680:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004684:	2b08      	cmp	r3, #8
 8004686:	d828      	bhi.n	80046da <UART_SetConfig+0x56a>
 8004688:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <UART_SetConfig+0x520>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	080046b5 	.word	0x080046b5
 8004694:	080046bd 	.word	0x080046bd
 8004698:	080046c5 	.word	0x080046c5
 800469c:	080046db 	.word	0x080046db
 80046a0:	080046cb 	.word	0x080046cb
 80046a4:	080046db 	.word	0x080046db
 80046a8:	080046db 	.word	0x080046db
 80046ac:	080046db 	.word	0x080046db
 80046b0:	080046d3 	.word	0x080046d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b4:	f7fd fe20 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 80046b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046ba:	e014      	b.n	80046e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046bc:	f7fd fe32 	bl	8002324 <HAL_RCC_GetPCLK2Freq>
 80046c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046c2:	e010      	b.n	80046e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c4:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <UART_SetConfig+0x5c0>)
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046c8:	e00d      	b.n	80046e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ca:	f7fd fda7 	bl	800221c <HAL_RCC_GetSysClockFreq>
 80046ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046d0:	e009      	b.n	80046e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046d8:	e005      	b.n	80046e6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80046e4:	bf00      	nop
    }

    if (pclk != 0U)
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d028      	beq.n	800473e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	4a10      	ldr	r2, [pc, #64]	; (8004734 <UART_SetConfig+0x5c4>)
 80046f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046f6:	461a      	mov	r2, r3
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	085b      	lsrs	r3, r3, #1
 8004704:	441a      	add	r2, r3
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	fbb2 f3f3 	udiv	r3, r2, r3
 800470e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	2b0f      	cmp	r3, #15
 8004714:	d910      	bls.n	8004738 <UART_SetConfig+0x5c8>
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800471c:	d20c      	bcs.n	8004738 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	b29a      	uxth	r2, r3
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	60da      	str	r2, [r3, #12]
 8004728:	e009      	b.n	800473e <UART_SetConfig+0x5ce>
 800472a:	bf00      	nop
 800472c:	40008000 	.word	0x40008000
 8004730:	00f42400 	.word	0x00f42400
 8004734:	08006fb8 	.word	0x08006fb8
      }
      else
      {
        ret = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2201      	movs	r2, #1
 8004742:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2201      	movs	r2, #1
 800474a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2200      	movs	r2, #0
 8004758:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800475a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800475e:	4618      	mov	r0, r3
 8004760:	3730      	adds	r7, #48	; 0x30
 8004762:	46bd      	mov	sp, r7
 8004764:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004768 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01a      	beq.n	800487e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004866:	d10a      	bne.n	800487e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	605a      	str	r2, [r3, #4]
  }
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048bc:	f7fc fbea 	bl	8001094 <HAL_GetTick>
 80048c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d10e      	bne.n	80048ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f82f 	bl	8004942 <UART_WaitOnFlagUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e025      	b.n	800493a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d10e      	bne.n	800491a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f819 	bl	8004942 <UART_WaitOnFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e00f      	b.n	800493a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2220      	movs	r2, #32
 8004926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b09c      	sub	sp, #112	; 0x70
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	603b      	str	r3, [r7, #0]
 800494e:	4613      	mov	r3, r2
 8004950:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004952:	e0a9      	b.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495a:	f000 80a5 	beq.w	8004aa8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800495e:	f7fc fb99 	bl	8001094 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800496a:	429a      	cmp	r2, r3
 800496c:	d302      	bcc.n	8004974 <UART_WaitOnFlagUntilTimeout+0x32>
 800496e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004970:	2b00      	cmp	r3, #0
 8004972:	d140      	bne.n	80049f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004984:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004988:	667b      	str	r3, [r7, #100]	; 0x64
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004992:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004994:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004996:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004998:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800499a:	e841 2300 	strex	r3, r2, [r1]
 800499e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80049a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1e6      	bne.n	8004974 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3308      	adds	r3, #8
 80049ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b0:	e853 3f00 	ldrex	r3, [r3]
 80049b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	f023 0301 	bic.w	r3, r3, #1
 80049bc:	663b      	str	r3, [r7, #96]	; 0x60
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3308      	adds	r3, #8
 80049c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80049c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1e5      	bne.n	80049a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2220      	movs	r2, #32
 80049de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e069      	b.n	8004aca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d051      	beq.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a12:	d149      	bne.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	e853 3f00 	ldrex	r3, [r3]
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a44:	e841 2300 	strex	r3, r2, [r1]
 8004a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e6      	bne.n	8004a1e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3308      	adds	r3, #8
 8004a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	e853 3f00 	ldrex	r3, [r3]
 8004a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f023 0301 	bic.w	r3, r3, #1
 8004a66:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a70:	623a      	str	r2, [r7, #32]
 8004a72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a74:	69f9      	ldr	r1, [r7, #28]
 8004a76:	6a3a      	ldr	r2, [r7, #32]
 8004a78:	e841 2300 	strex	r3, r2, [r1]
 8004a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1e5      	bne.n	8004a50 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e010      	b.n	8004aca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	69da      	ldr	r2, [r3, #28]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2301      	moveq	r3, #1
 8004aba:	2300      	movne	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	461a      	mov	r2, r3
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	f43f af46 	beq.w	8004954 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3770      	adds	r7, #112	; 0x70
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b0a3      	sub	sp, #140	; 0x8c
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	88fa      	ldrh	r2, [r7, #6]
 8004aec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	88fa      	ldrh	r2, [r7, #6]
 8004af4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b06:	d10e      	bne.n	8004b26 <UART_Start_Receive_IT+0x52>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d105      	bne.n	8004b1c <UART_Start_Receive_IT+0x48>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b1a:	e02d      	b.n	8004b78 <UART_Start_Receive_IT+0xa4>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	22ff      	movs	r2, #255	; 0xff
 8004b20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b24:	e028      	b.n	8004b78 <UART_Start_Receive_IT+0xa4>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10d      	bne.n	8004b4a <UART_Start_Receive_IT+0x76>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d104      	bne.n	8004b40 <UART_Start_Receive_IT+0x6c>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	22ff      	movs	r2, #255	; 0xff
 8004b3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b3e:	e01b      	b.n	8004b78 <UART_Start_Receive_IT+0xa4>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	227f      	movs	r2, #127	; 0x7f
 8004b44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b48:	e016      	b.n	8004b78 <UART_Start_Receive_IT+0xa4>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b52:	d10d      	bne.n	8004b70 <UART_Start_Receive_IT+0x9c>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d104      	bne.n	8004b66 <UART_Start_Receive_IT+0x92>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	227f      	movs	r2, #127	; 0x7f
 8004b60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b64:	e008      	b.n	8004b78 <UART_Start_Receive_IT+0xa4>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	223f      	movs	r2, #63	; 0x3f
 8004b6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b6e:	e003      	b.n	8004b78 <UART_Start_Receive_IT+0xa4>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2222      	movs	r2, #34	; 0x22
 8004b84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b92:	e853 3f00 	ldrex	r3, [r3]
 8004b96:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004b98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b9a:	f043 0301 	orr.w	r3, r3, #1
 8004b9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3308      	adds	r3, #8
 8004ba8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004bac:	673a      	str	r2, [r7, #112]	; 0x70
 8004bae:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004bb2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004bba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e3      	bne.n	8004b88 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bc8:	d153      	bne.n	8004c72 <UART_Start_Receive_IT+0x19e>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004bd0:	88fa      	ldrh	r2, [r7, #6]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d34d      	bcc.n	8004c72 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bde:	d107      	bne.n	8004bf0 <UART_Start_Receive_IT+0x11c>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d103      	bne.n	8004bf0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4a4b      	ldr	r2, [pc, #300]	; (8004d18 <UART_Start_Receive_IT+0x244>)
 8004bec:	671a      	str	r2, [r3, #112]	; 0x70
 8004bee:	e002      	b.n	8004bf6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4a4a      	ldr	r2, [pc, #296]	; (8004d1c <UART_Start_Receive_IT+0x248>)
 8004bf4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d01a      	beq.n	8004c3c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c2a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e4      	bne.n	8004c06 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3308      	adds	r3, #8
 8004c42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c46:	e853 3f00 	ldrex	r3, [r3]
 8004c4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3308      	adds	r3, #8
 8004c5a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004c5c:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c5e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c60:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c64:	e841 2300 	strex	r3, r2, [r1]
 8004c68:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e5      	bne.n	8004c3c <UART_Start_Receive_IT+0x168>
 8004c70:	e04a      	b.n	8004d08 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7a:	d107      	bne.n	8004c8c <UART_Start_Receive_IT+0x1b8>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d103      	bne.n	8004c8c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4a26      	ldr	r2, [pc, #152]	; (8004d20 <UART_Start_Receive_IT+0x24c>)
 8004c88:	671a      	str	r2, [r3, #112]	; 0x70
 8004c8a:	e002      	b.n	8004c92 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4a25      	ldr	r2, [pc, #148]	; (8004d24 <UART_Start_Receive_IT+0x250>)
 8004c90:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d019      	beq.n	8004cd6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004cb6:	677b      	str	r3, [r7, #116]	; 0x74
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8004cc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cc8:	e841 2300 	strex	r3, r2, [r1]
 8004ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e6      	bne.n	8004ca2 <UART_Start_Receive_IT+0x1ce>
 8004cd4:	e018      	b.n	8004d08 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f043 0320 	orr.w	r3, r3, #32
 8004cea:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cf4:	623b      	str	r3, [r7, #32]
 8004cf6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	69f9      	ldr	r1, [r7, #28]
 8004cfa:	6a3a      	ldr	r2, [r7, #32]
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e6      	bne.n	8004cd6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	378c      	adds	r7, #140	; 0x8c
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	08005431 	.word	0x08005431
 8004d1c:	08005139 	.word	0x08005139
 8004d20:	08004fd7 	.word	0x08004fd7
 8004d24:	08004e77 	.word	0x08004e77

08004d28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b095      	sub	sp, #84	; 0x54
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8004d50:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e6      	bne.n	8004d30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3308      	adds	r3, #8
 8004d68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d78:	f023 0301 	bic.w	r3, r3, #1
 8004d7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3308      	adds	r3, #8
 8004d84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e3      	bne.n	8004d62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d118      	bne.n	8004dd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	e853 3f00 	ldrex	r3, [r3]
 8004dae:	60bb      	str	r3, [r7, #8]
   return(result);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f023 0310 	bic.w	r3, r3, #16
 8004db6:	647b      	str	r3, [r7, #68]	; 0x44
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	6979      	ldr	r1, [r7, #20]
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e6      	bne.n	8004da2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004de8:	bf00      	nop
 8004dea:	3754      	adds	r7, #84	; 0x54
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f7ff f996 	bl	8004144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e18:	bf00      	nop
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b088      	sub	sp, #32
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	e853 3f00 	ldrex	r3, [r3]
 8004e34:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e3c:	61fb      	str	r3, [r7, #28]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	461a      	mov	r2, r3
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	61bb      	str	r3, [r7, #24]
 8004e48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4a:	6979      	ldr	r1, [r7, #20]
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	e841 2300 	strex	r3, r2, [r1]
 8004e52:	613b      	str	r3, [r7, #16]
   return(result);
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1e6      	bne.n	8004e28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff f957 	bl	800411c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e6e:	bf00      	nop
 8004e70:	3720      	adds	r7, #32
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b096      	sub	sp, #88	; 0x58
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004e84:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8e:	2b22      	cmp	r3, #34	; 0x22
 8004e90:	f040 8095 	bne.w	8004fbe <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e9e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004ea2:	b2d9      	uxtb	r1, r3
 8004ea4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eae:	400a      	ands	r2, r1
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d178      	bne.n	8004fce <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ef0:	653b      	str	r3, [r7, #80]	; 0x50
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004efa:	647b      	str	r3, [r7, #68]	; 0x44
 8004efc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e6      	bne.n	8004edc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3308      	adds	r3, #8
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	623b      	str	r3, [r7, #32]
   return(result);
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	f023 0301 	bic.w	r3, r3, #1
 8004f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3308      	adds	r3, #8
 8004f2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f2e:	633a      	str	r2, [r7, #48]	; 0x30
 8004f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e5      	bne.n	8004f0e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d12e      	bne.n	8004fb6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0310 	bic.w	r3, r3, #16
 8004f72:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f7c:	61fb      	str	r3, [r7, #28]
 8004f7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	69b9      	ldr	r1, [r7, #24]
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	617b      	str	r3, [r7, #20]
   return(result);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e6      	bne.n	8004f5e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	f003 0310 	and.w	r3, r3, #16
 8004f9a:	2b10      	cmp	r3, #16
 8004f9c:	d103      	bne.n	8004fa6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2210      	movs	r2, #16
 8004fa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004fac:	4619      	mov	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff f8d2 	bl	8004158 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fb4:	e00b      	b.n	8004fce <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff f8ba 	bl	8004130 <HAL_UART_RxCpltCallback>
}
 8004fbc:	e007      	b.n	8004fce <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	699a      	ldr	r2, [r3, #24]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f042 0208 	orr.w	r2, r2, #8
 8004fcc:	619a      	str	r2, [r3, #24]
}
 8004fce:	bf00      	nop
 8004fd0:	3758      	adds	r7, #88	; 0x58
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b096      	sub	sp, #88	; 0x58
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004fe4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fee:	2b22      	cmp	r3, #34	; 0x22
 8004ff0:	f040 8095 	bne.w	800511e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005002:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005004:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005008:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800500c:	4013      	ands	r3, r2
 800500e:	b29a      	uxth	r2, r3
 8005010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005012:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005018:	1c9a      	adds	r2, r3, #2
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005036:	b29b      	uxth	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d178      	bne.n	800512e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005050:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800505a:	643b      	str	r3, [r7, #64]	; 0x40
 800505c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005060:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005062:	e841 2300 	strex	r3, r2, [r1]
 8005066:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1e6      	bne.n	800503c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3308      	adds	r3, #8
 8005074:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	61fb      	str	r3, [r7, #28]
   return(result);
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	f023 0301 	bic.w	r3, r3, #1
 8005084:	64bb      	str	r3, [r7, #72]	; 0x48
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3308      	adds	r3, #8
 800508c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800508e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005090:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e5      	bne.n	800506e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d12e      	bne.n	8005116 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	e853 3f00 	ldrex	r3, [r3]
 80050ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f023 0310 	bic.w	r3, r3, #16
 80050d2:	647b      	str	r3, [r7, #68]	; 0x44
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	461a      	mov	r2, r3
 80050da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e0:	6979      	ldr	r1, [r7, #20]
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	e841 2300 	strex	r3, r2, [r1]
 80050e8:	613b      	str	r3, [r7, #16]
   return(result);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e6      	bne.n	80050be <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f003 0310 	and.w	r3, r3, #16
 80050fa:	2b10      	cmp	r3, #16
 80050fc:	d103      	bne.n	8005106 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2210      	movs	r2, #16
 8005104:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800510c:	4619      	mov	r1, r3
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff f822 	bl	8004158 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005114:	e00b      	b.n	800512e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7ff f80a 	bl	8004130 <HAL_UART_RxCpltCallback>
}
 800511c:	e007      	b.n	800512e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699a      	ldr	r2, [r3, #24]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0208 	orr.w	r2, r2, #8
 800512c:	619a      	str	r2, [r3, #24]
}
 800512e:	bf00      	nop
 8005130:	3758      	adds	r7, #88	; 0x58
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
	...

08005138 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b0a6      	sub	sp, #152	; 0x98
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005146:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516e:	2b22      	cmp	r3, #34	; 0x22
 8005170:	f040 814f 	bne.w	8005412 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800517a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800517e:	e0f6      	b.n	800536e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800518a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800518e:	b2d9      	uxtb	r1, r3
 8005190:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005194:	b2da      	uxtb	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519a:	400a      	ands	r2, r1
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80051c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d053      	beq.n	800527a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d011      	beq.n	8005202 <UART_RxISR_8BIT_FIFOEN+0xca>
 80051de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00b      	beq.n	8005202 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2201      	movs	r2, #1
 80051f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051f8:	f043 0201 	orr.w	r2, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005202:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d011      	beq.n	8005232 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800520e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00b      	beq.n	8005232 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2202      	movs	r2, #2
 8005220:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005228:	f043 0204 	orr.w	r2, r3, #4
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005232:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005236:	f003 0304 	and.w	r3, r3, #4
 800523a:	2b00      	cmp	r3, #0
 800523c:	d011      	beq.n	8005262 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800523e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00b      	beq.n	8005262 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2204      	movs	r2, #4
 8005250:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005258:	f043 0202 	orr.w	r2, r3, #2
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005268:	2b00      	cmp	r3, #0
 800526a:	d006      	beq.n	800527a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7fe ff69 	bl	8004144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d173      	bne.n	800536e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005294:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800529a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80052aa:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ac:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80052ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052b0:	e841 2300 	strex	r3, r2, [r1]
 80052b4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80052b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e4      	bne.n	8005286 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3308      	adds	r3, #8
 80052c2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c6:	e853 3f00 	ldrex	r3, [r3]
 80052ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80052cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052d2:	f023 0301 	bic.w	r3, r3, #1
 80052d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3308      	adds	r3, #8
 80052de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80052e0:	657a      	str	r2, [r7, #84]	; 0x54
 80052e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80052e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052e8:	e841 2300 	strex	r3, r2, [r1]
 80052ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1e3      	bne.n	80052bc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005306:	2b01      	cmp	r3, #1
 8005308:	d12e      	bne.n	8005368 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	f023 0310 	bic.w	r3, r3, #16
 8005324:	67bb      	str	r3, [r7, #120]	; 0x78
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800532e:	643b      	str	r3, [r7, #64]	; 0x40
 8005330:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005334:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800533c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e6      	bne.n	8005310 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b10      	cmp	r3, #16
 800534e:	d103      	bne.n	8005358 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2210      	movs	r2, #16
 8005356:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800535e:	4619      	mov	r1, r3
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7fe fef9 	bl	8004158 <HAL_UARTEx_RxEventCallback>
 8005366:	e002      	b.n	800536e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fe fee1 	bl	8004130 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800536e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005372:	2b00      	cmp	r3, #0
 8005374:	d006      	beq.n	8005384 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8005376:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	f47f aefe 	bne.w	8005180 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800538a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800538e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8005392:	2b00      	cmp	r3, #0
 8005394:	d045      	beq.n	8005422 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800539c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d23e      	bcs.n	8005422 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3308      	adds	r3, #8
 80053aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ba:	673b      	str	r3, [r7, #112]	; 0x70
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3308      	adds	r3, #8
 80053c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80053c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053cc:	e841 2300 	strex	r3, r2, [r1]
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e5      	bne.n	80053a4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a14      	ldr	r2, [pc, #80]	; (800542c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80053dc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	e853 3f00 	ldrex	r3, [r3]
 80053ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f043 0320 	orr.w	r3, r3, #32
 80053f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	461a      	mov	r2, r3
 80053fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005400:	6979      	ldr	r1, [r7, #20]
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	e841 2300 	strex	r3, r2, [r1]
 8005408:	613b      	str	r3, [r7, #16]
   return(result);
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1e6      	bne.n	80053de <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005410:	e007      	b.n	8005422 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	699a      	ldr	r2, [r3, #24]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f042 0208 	orr.w	r2, r2, #8
 8005420:	619a      	str	r2, [r3, #24]
}
 8005422:	bf00      	nop
 8005424:	3798      	adds	r7, #152	; 0x98
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	08004e77 	.word	0x08004e77

08005430 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b0a8      	sub	sp, #160	; 0xa0
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800543e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005466:	2b22      	cmp	r3, #34	; 0x22
 8005468:	f040 8153 	bne.w	8005712 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005472:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005476:	e0fa      	b.n	800566e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005486:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800548a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800548e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005492:	4013      	ands	r3, r2
 8005494:	b29a      	uxth	r2, r3
 8005496:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800549a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a0:	1c9a      	adds	r2, r3, #2
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80054c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d053      	beq.n	8005576 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d011      	beq.n	80054fe <UART_RxISR_16BIT_FIFOEN+0xce>
 80054da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00b      	beq.n	80054fe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2201      	movs	r2, #1
 80054ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054f4:	f043 0201 	orr.w	r2, r3, #1
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d011      	beq.n	800552e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800550a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00b      	beq.n	800552e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2202      	movs	r2, #2
 800551c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005524:	f043 0204 	orr.w	r2, r3, #4
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800552e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005532:	f003 0304 	and.w	r3, r3, #4
 8005536:	2b00      	cmp	r3, #0
 8005538:	d011      	beq.n	800555e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800553a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00b      	beq.n	800555e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2204      	movs	r2, #4
 800554c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005554:	f043 0202 	orr.w	r2, r3, #2
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005564:	2b00      	cmp	r3, #0
 8005566:	d006      	beq.n	8005576 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7fe fdeb 	bl	8004144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d175      	bne.n	800566e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005588:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800558a:	e853 3f00 	ldrex	r3, [r3]
 800558e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005592:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005596:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055a6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055ac:	e841 2300 	strex	r3, r2, [r1]
 80055b0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1e4      	bne.n	8005582 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3308      	adds	r3, #8
 80055be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ce:	f023 0301 	bic.w	r3, r3, #1
 80055d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3308      	adds	r3, #8
 80055dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80055e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055e8:	e841 2300 	strex	r3, r2, [r1]
 80055ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1e1      	bne.n	80055b8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2220      	movs	r2, #32
 80055f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005606:	2b01      	cmp	r3, #1
 8005608:	d12e      	bne.n	8005668 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800561e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005620:	f023 0310 	bic.w	r3, r3, #16
 8005624:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	461a      	mov	r2, r3
 800562c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800562e:	647b      	str	r3, [r7, #68]	; 0x44
 8005630:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005632:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005636:	e841 2300 	strex	r3, r2, [r1]
 800563a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800563c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1e6      	bne.n	8005610 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	f003 0310 	and.w	r3, r3, #16
 800564c:	2b10      	cmp	r3, #16
 800564e:	d103      	bne.n	8005658 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2210      	movs	r2, #16
 8005656:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800565e:	4619      	mov	r1, r3
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7fe fd79 	bl	8004158 <HAL_UARTEx_RxEventCallback>
 8005666:	e002      	b.n	800566e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7fe fd61 	bl	8004130 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800566e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005672:	2b00      	cmp	r3, #0
 8005674:	d006      	beq.n	8005684 <UART_RxISR_16BIT_FIFOEN+0x254>
 8005676:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b00      	cmp	r3, #0
 8005680:	f47f aefa 	bne.w	8005478 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800568a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800568e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8005692:	2b00      	cmp	r3, #0
 8005694:	d045      	beq.n	8005722 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800569c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d23e      	bcs.n	8005722 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3308      	adds	r3, #8
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	e853 3f00 	ldrex	r3, [r3]
 80056b2:	623b      	str	r3, [r7, #32]
   return(result);
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ba:	677b      	str	r3, [r7, #116]	; 0x74
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3308      	adds	r3, #8
 80056c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80056c4:	633a      	str	r2, [r7, #48]	; 0x30
 80056c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056cc:	e841 2300 	strex	r3, r2, [r1]
 80056d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e5      	bne.n	80056a4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a14      	ldr	r2, [pc, #80]	; (800572c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80056dc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	e853 3f00 	ldrex	r3, [r3]
 80056ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f043 0320 	orr.w	r3, r3, #32
 80056f2:	673b      	str	r3, [r7, #112]	; 0x70
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	69b9      	ldr	r1, [r7, #24]
 8005702:	69fa      	ldr	r2, [r7, #28]
 8005704:	e841 2300 	strex	r3, r2, [r1]
 8005708:	617b      	str	r3, [r7, #20]
   return(result);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e6      	bne.n	80056de <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005710:	e007      	b.n	8005722 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	699a      	ldr	r2, [r3, #24]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f042 0208 	orr.w	r2, r2, #8
 8005720:	619a      	str	r2, [r3, #24]
}
 8005722:	bf00      	nop
 8005724:	37a0      	adds	r7, #160	; 0xa0
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	08004fd7 	.word	0x08004fd7

08005730 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_UARTEx_DisableFifoMode+0x16>
 800577e:	2302      	movs	r3, #2
 8005780:	e027      	b.n	80057d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2224      	movs	r2, #36	; 0x24
 800578e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0201 	bic.w	r2, r2, #1
 80057a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80057b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057f2:	2302      	movs	r3, #2
 80057f4:	e02d      	b.n	8005852 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2224      	movs	r2, #36	; 0x24
 8005802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0201 	bic.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f850 	bl	80058d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2220      	movs	r2, #32
 8005844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800586e:	2302      	movs	r3, #2
 8005870:	e02d      	b.n	80058ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2224      	movs	r2, #36	; 0x24
 800587e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0201 	bic.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f812 	bl	80058d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d108      	bne.n	80058fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058f8:	e031      	b.n	800595e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058fa:	2308      	movs	r3, #8
 80058fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058fe:	2308      	movs	r3, #8
 8005900:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	0e5b      	lsrs	r3, r3, #25
 800590a:	b2db      	uxtb	r3, r3
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	0f5b      	lsrs	r3, r3, #29
 800591a:	b2db      	uxtb	r3, r3
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005922:	7bbb      	ldrb	r3, [r7, #14]
 8005924:	7b3a      	ldrb	r2, [r7, #12]
 8005926:	4911      	ldr	r1, [pc, #68]	; (800596c <UARTEx_SetNbDataToProcess+0x94>)
 8005928:	5c8a      	ldrb	r2, [r1, r2]
 800592a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800592e:	7b3a      	ldrb	r2, [r7, #12]
 8005930:	490f      	ldr	r1, [pc, #60]	; (8005970 <UARTEx_SetNbDataToProcess+0x98>)
 8005932:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005934:	fb93 f3f2 	sdiv	r3, r3, r2
 8005938:	b29a      	uxth	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	7b7a      	ldrb	r2, [r7, #13]
 8005944:	4909      	ldr	r1, [pc, #36]	; (800596c <UARTEx_SetNbDataToProcess+0x94>)
 8005946:	5c8a      	ldrb	r2, [r1, r2]
 8005948:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800594c:	7b7a      	ldrb	r2, [r7, #13]
 800594e:	4908      	ldr	r1, [pc, #32]	; (8005970 <UARTEx_SetNbDataToProcess+0x98>)
 8005950:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005952:	fb93 f3f2 	sdiv	r3, r3, r2
 8005956:	b29a      	uxth	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	08006fd0 	.word	0x08006fd0
 8005970:	08006fd8 	.word	0x08006fd8

08005974 <atoi>:
 8005974:	220a      	movs	r2, #10
 8005976:	2100      	movs	r1, #0
 8005978:	f000 b930 	b.w	8005bdc <strtol>

0800597c <__errno>:
 800597c:	4b01      	ldr	r3, [pc, #4]	; (8005984 <__errno+0x8>)
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	200000a4 	.word	0x200000a4

08005988 <__libc_init_array>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	4d0d      	ldr	r5, [pc, #52]	; (80059c0 <__libc_init_array+0x38>)
 800598c:	4c0d      	ldr	r4, [pc, #52]	; (80059c4 <__libc_init_array+0x3c>)
 800598e:	1b64      	subs	r4, r4, r5
 8005990:	10a4      	asrs	r4, r4, #2
 8005992:	2600      	movs	r6, #0
 8005994:	42a6      	cmp	r6, r4
 8005996:	d109      	bne.n	80059ac <__libc_init_array+0x24>
 8005998:	4d0b      	ldr	r5, [pc, #44]	; (80059c8 <__libc_init_array+0x40>)
 800599a:	4c0c      	ldr	r4, [pc, #48]	; (80059cc <__libc_init_array+0x44>)
 800599c:	f001 fade 	bl	8006f5c <_init>
 80059a0:	1b64      	subs	r4, r4, r5
 80059a2:	10a4      	asrs	r4, r4, #2
 80059a4:	2600      	movs	r6, #0
 80059a6:	42a6      	cmp	r6, r4
 80059a8:	d105      	bne.n	80059b6 <__libc_init_array+0x2e>
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
 80059ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b0:	4798      	blx	r3
 80059b2:	3601      	adds	r6, #1
 80059b4:	e7ee      	b.n	8005994 <__libc_init_array+0xc>
 80059b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ba:	4798      	blx	r3
 80059bc:	3601      	adds	r6, #1
 80059be:	e7f2      	b.n	80059a6 <__libc_init_array+0x1e>
 80059c0:	08007230 	.word	0x08007230
 80059c4:	08007230 	.word	0x08007230
 80059c8:	08007230 	.word	0x08007230
 80059cc:	08007234 	.word	0x08007234

080059d0 <memset>:
 80059d0:	4402      	add	r2, r0
 80059d2:	4603      	mov	r3, r0
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d100      	bne.n	80059da <memset+0xa>
 80059d8:	4770      	bx	lr
 80059da:	f803 1b01 	strb.w	r1, [r3], #1
 80059de:	e7f9      	b.n	80059d4 <memset+0x4>

080059e0 <siprintf>:
 80059e0:	b40e      	push	{r1, r2, r3}
 80059e2:	b500      	push	{lr}
 80059e4:	b09c      	sub	sp, #112	; 0x70
 80059e6:	ab1d      	add	r3, sp, #116	; 0x74
 80059e8:	9002      	str	r0, [sp, #8]
 80059ea:	9006      	str	r0, [sp, #24]
 80059ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80059f0:	4809      	ldr	r0, [pc, #36]	; (8005a18 <siprintf+0x38>)
 80059f2:	9107      	str	r1, [sp, #28]
 80059f4:	9104      	str	r1, [sp, #16]
 80059f6:	4909      	ldr	r1, [pc, #36]	; (8005a1c <siprintf+0x3c>)
 80059f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80059fc:	9105      	str	r1, [sp, #20]
 80059fe:	6800      	ldr	r0, [r0, #0]
 8005a00:	9301      	str	r3, [sp, #4]
 8005a02:	a902      	add	r1, sp, #8
 8005a04:	f000 fa68 	bl	8005ed8 <_svfiprintf_r>
 8005a08:	9b02      	ldr	r3, [sp, #8]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	b01c      	add	sp, #112	; 0x70
 8005a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a14:	b003      	add	sp, #12
 8005a16:	4770      	bx	lr
 8005a18:	200000a4 	.word	0x200000a4
 8005a1c:	ffff0208 	.word	0xffff0208

08005a20 <strtok>:
 8005a20:	4b16      	ldr	r3, [pc, #88]	; (8005a7c <strtok+0x5c>)
 8005a22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a24:	681e      	ldr	r6, [r3, #0]
 8005a26:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005a28:	4605      	mov	r5, r0
 8005a2a:	b9fc      	cbnz	r4, 8005a6c <strtok+0x4c>
 8005a2c:	2050      	movs	r0, #80	; 0x50
 8005a2e:	9101      	str	r1, [sp, #4]
 8005a30:	f000 f90e 	bl	8005c50 <malloc>
 8005a34:	9901      	ldr	r1, [sp, #4]
 8005a36:	65b0      	str	r0, [r6, #88]	; 0x58
 8005a38:	4602      	mov	r2, r0
 8005a3a:	b920      	cbnz	r0, 8005a46 <strtok+0x26>
 8005a3c:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <strtok+0x60>)
 8005a3e:	4811      	ldr	r0, [pc, #68]	; (8005a84 <strtok+0x64>)
 8005a40:	2157      	movs	r1, #87	; 0x57
 8005a42:	f000 f8d5 	bl	8005bf0 <__assert_func>
 8005a46:	e9c0 4400 	strd	r4, r4, [r0]
 8005a4a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005a4e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005a52:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005a56:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005a5a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005a5e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005a62:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005a66:	6184      	str	r4, [r0, #24]
 8005a68:	7704      	strb	r4, [r0, #28]
 8005a6a:	6244      	str	r4, [r0, #36]	; 0x24
 8005a6c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005a6e:	2301      	movs	r3, #1
 8005a70:	4628      	mov	r0, r5
 8005a72:	b002      	add	sp, #8
 8005a74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005a78:	f000 b806 	b.w	8005a88 <__strtok_r>
 8005a7c:	200000a4 	.word	0x200000a4
 8005a80:	08006fe4 	.word	0x08006fe4
 8005a84:	08006ffb 	.word	0x08006ffb

08005a88 <__strtok_r>:
 8005a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a8a:	b908      	cbnz	r0, 8005a90 <__strtok_r+0x8>
 8005a8c:	6810      	ldr	r0, [r2, #0]
 8005a8e:	b188      	cbz	r0, 8005ab4 <__strtok_r+0x2c>
 8005a90:	4604      	mov	r4, r0
 8005a92:	4620      	mov	r0, r4
 8005a94:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005a98:	460f      	mov	r7, r1
 8005a9a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005a9e:	b91e      	cbnz	r6, 8005aa8 <__strtok_r+0x20>
 8005aa0:	b965      	cbnz	r5, 8005abc <__strtok_r+0x34>
 8005aa2:	6015      	str	r5, [r2, #0]
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	e005      	b.n	8005ab4 <__strtok_r+0x2c>
 8005aa8:	42b5      	cmp	r5, r6
 8005aaa:	d1f6      	bne.n	8005a9a <__strtok_r+0x12>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1f0      	bne.n	8005a92 <__strtok_r+0xa>
 8005ab0:	6014      	str	r4, [r2, #0]
 8005ab2:	7003      	strb	r3, [r0, #0]
 8005ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ab6:	461c      	mov	r4, r3
 8005ab8:	e00c      	b.n	8005ad4 <__strtok_r+0x4c>
 8005aba:	b915      	cbnz	r5, 8005ac2 <__strtok_r+0x3a>
 8005abc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005ac0:	460e      	mov	r6, r1
 8005ac2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005ac6:	42ab      	cmp	r3, r5
 8005ac8:	d1f7      	bne.n	8005aba <__strtok_r+0x32>
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0f3      	beq.n	8005ab6 <__strtok_r+0x2e>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005ad4:	6014      	str	r4, [r2, #0]
 8005ad6:	e7ed      	b.n	8005ab4 <__strtok_r+0x2c>

08005ad8 <_strtol_l.constprop.0>:
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ade:	d001      	beq.n	8005ae4 <_strtol_l.constprop.0+0xc>
 8005ae0:	2b24      	cmp	r3, #36	; 0x24
 8005ae2:	d906      	bls.n	8005af2 <_strtol_l.constprop.0+0x1a>
 8005ae4:	f7ff ff4a 	bl	800597c <__errno>
 8005ae8:	2316      	movs	r3, #22
 8005aea:	6003      	str	r3, [r0, #0]
 8005aec:	2000      	movs	r0, #0
 8005aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005bd8 <_strtol_l.constprop.0+0x100>
 8005af6:	460d      	mov	r5, r1
 8005af8:	462e      	mov	r6, r5
 8005afa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005afe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005b02:	f017 0708 	ands.w	r7, r7, #8
 8005b06:	d1f7      	bne.n	8005af8 <_strtol_l.constprop.0+0x20>
 8005b08:	2c2d      	cmp	r4, #45	; 0x2d
 8005b0a:	d132      	bne.n	8005b72 <_strtol_l.constprop.0+0x9a>
 8005b0c:	782c      	ldrb	r4, [r5, #0]
 8005b0e:	2701      	movs	r7, #1
 8005b10:	1cb5      	adds	r5, r6, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d05b      	beq.n	8005bce <_strtol_l.constprop.0+0xf6>
 8005b16:	2b10      	cmp	r3, #16
 8005b18:	d109      	bne.n	8005b2e <_strtol_l.constprop.0+0x56>
 8005b1a:	2c30      	cmp	r4, #48	; 0x30
 8005b1c:	d107      	bne.n	8005b2e <_strtol_l.constprop.0+0x56>
 8005b1e:	782c      	ldrb	r4, [r5, #0]
 8005b20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005b24:	2c58      	cmp	r4, #88	; 0x58
 8005b26:	d14d      	bne.n	8005bc4 <_strtol_l.constprop.0+0xec>
 8005b28:	786c      	ldrb	r4, [r5, #1]
 8005b2a:	2310      	movs	r3, #16
 8005b2c:	3502      	adds	r5, #2
 8005b2e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005b32:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b36:	f04f 0c00 	mov.w	ip, #0
 8005b3a:	fbb8 f9f3 	udiv	r9, r8, r3
 8005b3e:	4666      	mov	r6, ip
 8005b40:	fb03 8a19 	mls	sl, r3, r9, r8
 8005b44:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005b48:	f1be 0f09 	cmp.w	lr, #9
 8005b4c:	d816      	bhi.n	8005b7c <_strtol_l.constprop.0+0xa4>
 8005b4e:	4674      	mov	r4, lr
 8005b50:	42a3      	cmp	r3, r4
 8005b52:	dd24      	ble.n	8005b9e <_strtol_l.constprop.0+0xc6>
 8005b54:	f1bc 0f00 	cmp.w	ip, #0
 8005b58:	db1e      	blt.n	8005b98 <_strtol_l.constprop.0+0xc0>
 8005b5a:	45b1      	cmp	r9, r6
 8005b5c:	d31c      	bcc.n	8005b98 <_strtol_l.constprop.0+0xc0>
 8005b5e:	d101      	bne.n	8005b64 <_strtol_l.constprop.0+0x8c>
 8005b60:	45a2      	cmp	sl, r4
 8005b62:	db19      	blt.n	8005b98 <_strtol_l.constprop.0+0xc0>
 8005b64:	fb06 4603 	mla	r6, r6, r3, r4
 8005b68:	f04f 0c01 	mov.w	ip, #1
 8005b6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b70:	e7e8      	b.n	8005b44 <_strtol_l.constprop.0+0x6c>
 8005b72:	2c2b      	cmp	r4, #43	; 0x2b
 8005b74:	bf04      	itt	eq
 8005b76:	782c      	ldrbeq	r4, [r5, #0]
 8005b78:	1cb5      	addeq	r5, r6, #2
 8005b7a:	e7ca      	b.n	8005b12 <_strtol_l.constprop.0+0x3a>
 8005b7c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005b80:	f1be 0f19 	cmp.w	lr, #25
 8005b84:	d801      	bhi.n	8005b8a <_strtol_l.constprop.0+0xb2>
 8005b86:	3c37      	subs	r4, #55	; 0x37
 8005b88:	e7e2      	b.n	8005b50 <_strtol_l.constprop.0+0x78>
 8005b8a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005b8e:	f1be 0f19 	cmp.w	lr, #25
 8005b92:	d804      	bhi.n	8005b9e <_strtol_l.constprop.0+0xc6>
 8005b94:	3c57      	subs	r4, #87	; 0x57
 8005b96:	e7db      	b.n	8005b50 <_strtol_l.constprop.0+0x78>
 8005b98:	f04f 3cff 	mov.w	ip, #4294967295
 8005b9c:	e7e6      	b.n	8005b6c <_strtol_l.constprop.0+0x94>
 8005b9e:	f1bc 0f00 	cmp.w	ip, #0
 8005ba2:	da05      	bge.n	8005bb0 <_strtol_l.constprop.0+0xd8>
 8005ba4:	2322      	movs	r3, #34	; 0x22
 8005ba6:	6003      	str	r3, [r0, #0]
 8005ba8:	4646      	mov	r6, r8
 8005baa:	b942      	cbnz	r2, 8005bbe <_strtol_l.constprop.0+0xe6>
 8005bac:	4630      	mov	r0, r6
 8005bae:	e79e      	b.n	8005aee <_strtol_l.constprop.0+0x16>
 8005bb0:	b107      	cbz	r7, 8005bb4 <_strtol_l.constprop.0+0xdc>
 8005bb2:	4276      	negs	r6, r6
 8005bb4:	2a00      	cmp	r2, #0
 8005bb6:	d0f9      	beq.n	8005bac <_strtol_l.constprop.0+0xd4>
 8005bb8:	f1bc 0f00 	cmp.w	ip, #0
 8005bbc:	d000      	beq.n	8005bc0 <_strtol_l.constprop.0+0xe8>
 8005bbe:	1e69      	subs	r1, r5, #1
 8005bc0:	6011      	str	r1, [r2, #0]
 8005bc2:	e7f3      	b.n	8005bac <_strtol_l.constprop.0+0xd4>
 8005bc4:	2430      	movs	r4, #48	; 0x30
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1b1      	bne.n	8005b2e <_strtol_l.constprop.0+0x56>
 8005bca:	2308      	movs	r3, #8
 8005bcc:	e7af      	b.n	8005b2e <_strtol_l.constprop.0+0x56>
 8005bce:	2c30      	cmp	r4, #48	; 0x30
 8005bd0:	d0a5      	beq.n	8005b1e <_strtol_l.constprop.0+0x46>
 8005bd2:	230a      	movs	r3, #10
 8005bd4:	e7ab      	b.n	8005b2e <_strtol_l.constprop.0+0x56>
 8005bd6:	bf00      	nop
 8005bd8:	08007095 	.word	0x08007095

08005bdc <strtol>:
 8005bdc:	4613      	mov	r3, r2
 8005bde:	460a      	mov	r2, r1
 8005be0:	4601      	mov	r1, r0
 8005be2:	4802      	ldr	r0, [pc, #8]	; (8005bec <strtol+0x10>)
 8005be4:	6800      	ldr	r0, [r0, #0]
 8005be6:	f7ff bf77 	b.w	8005ad8 <_strtol_l.constprop.0>
 8005bea:	bf00      	nop
 8005bec:	200000a4 	.word	0x200000a4

08005bf0 <__assert_func>:
 8005bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005bf2:	4614      	mov	r4, r2
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <__assert_func+0x2c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	68d8      	ldr	r0, [r3, #12]
 8005bfe:	b14c      	cbz	r4, 8005c14 <__assert_func+0x24>
 8005c00:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <__assert_func+0x30>)
 8005c02:	9100      	str	r1, [sp, #0]
 8005c04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c08:	4906      	ldr	r1, [pc, #24]	; (8005c24 <__assert_func+0x34>)
 8005c0a:	462b      	mov	r3, r5
 8005c0c:	f000 f80e 	bl	8005c2c <fiprintf>
 8005c10:	f000 fe20 	bl	8006854 <abort>
 8005c14:	4b04      	ldr	r3, [pc, #16]	; (8005c28 <__assert_func+0x38>)
 8005c16:	461c      	mov	r4, r3
 8005c18:	e7f3      	b.n	8005c02 <__assert_func+0x12>
 8005c1a:	bf00      	nop
 8005c1c:	200000a4 	.word	0x200000a4
 8005c20:	08007058 	.word	0x08007058
 8005c24:	08007065 	.word	0x08007065
 8005c28:	08007093 	.word	0x08007093

08005c2c <fiprintf>:
 8005c2c:	b40e      	push	{r1, r2, r3}
 8005c2e:	b503      	push	{r0, r1, lr}
 8005c30:	4601      	mov	r1, r0
 8005c32:	ab03      	add	r3, sp, #12
 8005c34:	4805      	ldr	r0, [pc, #20]	; (8005c4c <fiprintf+0x20>)
 8005c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c3a:	6800      	ldr	r0, [r0, #0]
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	f000 fa75 	bl	800612c <_vfiprintf_r>
 8005c42:	b002      	add	sp, #8
 8005c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c48:	b003      	add	sp, #12
 8005c4a:	4770      	bx	lr
 8005c4c:	200000a4 	.word	0x200000a4

08005c50 <malloc>:
 8005c50:	4b02      	ldr	r3, [pc, #8]	; (8005c5c <malloc+0xc>)
 8005c52:	4601      	mov	r1, r0
 8005c54:	6818      	ldr	r0, [r3, #0]
 8005c56:	f000 b86f 	b.w	8005d38 <_malloc_r>
 8005c5a:	bf00      	nop
 8005c5c:	200000a4 	.word	0x200000a4

08005c60 <_free_r>:
 8005c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c62:	2900      	cmp	r1, #0
 8005c64:	d044      	beq.n	8005cf0 <_free_r+0x90>
 8005c66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c6a:	9001      	str	r0, [sp, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f1a1 0404 	sub.w	r4, r1, #4
 8005c72:	bfb8      	it	lt
 8005c74:	18e4      	addlt	r4, r4, r3
 8005c76:	f001 f83d 	bl	8006cf4 <__malloc_lock>
 8005c7a:	4a1e      	ldr	r2, [pc, #120]	; (8005cf4 <_free_r+0x94>)
 8005c7c:	9801      	ldr	r0, [sp, #4]
 8005c7e:	6813      	ldr	r3, [r2, #0]
 8005c80:	b933      	cbnz	r3, 8005c90 <_free_r+0x30>
 8005c82:	6063      	str	r3, [r4, #4]
 8005c84:	6014      	str	r4, [r2, #0]
 8005c86:	b003      	add	sp, #12
 8005c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c8c:	f001 b838 	b.w	8006d00 <__malloc_unlock>
 8005c90:	42a3      	cmp	r3, r4
 8005c92:	d908      	bls.n	8005ca6 <_free_r+0x46>
 8005c94:	6825      	ldr	r5, [r4, #0]
 8005c96:	1961      	adds	r1, r4, r5
 8005c98:	428b      	cmp	r3, r1
 8005c9a:	bf01      	itttt	eq
 8005c9c:	6819      	ldreq	r1, [r3, #0]
 8005c9e:	685b      	ldreq	r3, [r3, #4]
 8005ca0:	1949      	addeq	r1, r1, r5
 8005ca2:	6021      	streq	r1, [r4, #0]
 8005ca4:	e7ed      	b.n	8005c82 <_free_r+0x22>
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	b10b      	cbz	r3, 8005cb0 <_free_r+0x50>
 8005cac:	42a3      	cmp	r3, r4
 8005cae:	d9fa      	bls.n	8005ca6 <_free_r+0x46>
 8005cb0:	6811      	ldr	r1, [r2, #0]
 8005cb2:	1855      	adds	r5, r2, r1
 8005cb4:	42a5      	cmp	r5, r4
 8005cb6:	d10b      	bne.n	8005cd0 <_free_r+0x70>
 8005cb8:	6824      	ldr	r4, [r4, #0]
 8005cba:	4421      	add	r1, r4
 8005cbc:	1854      	adds	r4, r2, r1
 8005cbe:	42a3      	cmp	r3, r4
 8005cc0:	6011      	str	r1, [r2, #0]
 8005cc2:	d1e0      	bne.n	8005c86 <_free_r+0x26>
 8005cc4:	681c      	ldr	r4, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	6053      	str	r3, [r2, #4]
 8005cca:	4421      	add	r1, r4
 8005ccc:	6011      	str	r1, [r2, #0]
 8005cce:	e7da      	b.n	8005c86 <_free_r+0x26>
 8005cd0:	d902      	bls.n	8005cd8 <_free_r+0x78>
 8005cd2:	230c      	movs	r3, #12
 8005cd4:	6003      	str	r3, [r0, #0]
 8005cd6:	e7d6      	b.n	8005c86 <_free_r+0x26>
 8005cd8:	6825      	ldr	r5, [r4, #0]
 8005cda:	1961      	adds	r1, r4, r5
 8005cdc:	428b      	cmp	r3, r1
 8005cde:	bf04      	itt	eq
 8005ce0:	6819      	ldreq	r1, [r3, #0]
 8005ce2:	685b      	ldreq	r3, [r3, #4]
 8005ce4:	6063      	str	r3, [r4, #4]
 8005ce6:	bf04      	itt	eq
 8005ce8:	1949      	addeq	r1, r1, r5
 8005cea:	6021      	streq	r1, [r4, #0]
 8005cec:	6054      	str	r4, [r2, #4]
 8005cee:	e7ca      	b.n	8005c86 <_free_r+0x26>
 8005cf0:	b003      	add	sp, #12
 8005cf2:	bd30      	pop	{r4, r5, pc}
 8005cf4:	20000250 	.word	0x20000250

08005cf8 <sbrk_aligned>:
 8005cf8:	b570      	push	{r4, r5, r6, lr}
 8005cfa:	4e0e      	ldr	r6, [pc, #56]	; (8005d34 <sbrk_aligned+0x3c>)
 8005cfc:	460c      	mov	r4, r1
 8005cfe:	6831      	ldr	r1, [r6, #0]
 8005d00:	4605      	mov	r5, r0
 8005d02:	b911      	cbnz	r1, 8005d0a <sbrk_aligned+0x12>
 8005d04:	f000 fcd6 	bl	80066b4 <_sbrk_r>
 8005d08:	6030      	str	r0, [r6, #0]
 8005d0a:	4621      	mov	r1, r4
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	f000 fcd1 	bl	80066b4 <_sbrk_r>
 8005d12:	1c43      	adds	r3, r0, #1
 8005d14:	d00a      	beq.n	8005d2c <sbrk_aligned+0x34>
 8005d16:	1cc4      	adds	r4, r0, #3
 8005d18:	f024 0403 	bic.w	r4, r4, #3
 8005d1c:	42a0      	cmp	r0, r4
 8005d1e:	d007      	beq.n	8005d30 <sbrk_aligned+0x38>
 8005d20:	1a21      	subs	r1, r4, r0
 8005d22:	4628      	mov	r0, r5
 8005d24:	f000 fcc6 	bl	80066b4 <_sbrk_r>
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d101      	bne.n	8005d30 <sbrk_aligned+0x38>
 8005d2c:	f04f 34ff 	mov.w	r4, #4294967295
 8005d30:	4620      	mov	r0, r4
 8005d32:	bd70      	pop	{r4, r5, r6, pc}
 8005d34:	20000254 	.word	0x20000254

08005d38 <_malloc_r>:
 8005d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3c:	1ccd      	adds	r5, r1, #3
 8005d3e:	f025 0503 	bic.w	r5, r5, #3
 8005d42:	3508      	adds	r5, #8
 8005d44:	2d0c      	cmp	r5, #12
 8005d46:	bf38      	it	cc
 8005d48:	250c      	movcc	r5, #12
 8005d4a:	2d00      	cmp	r5, #0
 8005d4c:	4607      	mov	r7, r0
 8005d4e:	db01      	blt.n	8005d54 <_malloc_r+0x1c>
 8005d50:	42a9      	cmp	r1, r5
 8005d52:	d905      	bls.n	8005d60 <_malloc_r+0x28>
 8005d54:	230c      	movs	r3, #12
 8005d56:	603b      	str	r3, [r7, #0]
 8005d58:	2600      	movs	r6, #0
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d60:	4e2e      	ldr	r6, [pc, #184]	; (8005e1c <_malloc_r+0xe4>)
 8005d62:	f000 ffc7 	bl	8006cf4 <__malloc_lock>
 8005d66:	6833      	ldr	r3, [r6, #0]
 8005d68:	461c      	mov	r4, r3
 8005d6a:	bb34      	cbnz	r4, 8005dba <_malloc_r+0x82>
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	4638      	mov	r0, r7
 8005d70:	f7ff ffc2 	bl	8005cf8 <sbrk_aligned>
 8005d74:	1c43      	adds	r3, r0, #1
 8005d76:	4604      	mov	r4, r0
 8005d78:	d14d      	bne.n	8005e16 <_malloc_r+0xde>
 8005d7a:	6834      	ldr	r4, [r6, #0]
 8005d7c:	4626      	mov	r6, r4
 8005d7e:	2e00      	cmp	r6, #0
 8005d80:	d140      	bne.n	8005e04 <_malloc_r+0xcc>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	4631      	mov	r1, r6
 8005d86:	4638      	mov	r0, r7
 8005d88:	eb04 0803 	add.w	r8, r4, r3
 8005d8c:	f000 fc92 	bl	80066b4 <_sbrk_r>
 8005d90:	4580      	cmp	r8, r0
 8005d92:	d13a      	bne.n	8005e0a <_malloc_r+0xd2>
 8005d94:	6821      	ldr	r1, [r4, #0]
 8005d96:	3503      	adds	r5, #3
 8005d98:	1a6d      	subs	r5, r5, r1
 8005d9a:	f025 0503 	bic.w	r5, r5, #3
 8005d9e:	3508      	adds	r5, #8
 8005da0:	2d0c      	cmp	r5, #12
 8005da2:	bf38      	it	cc
 8005da4:	250c      	movcc	r5, #12
 8005da6:	4629      	mov	r1, r5
 8005da8:	4638      	mov	r0, r7
 8005daa:	f7ff ffa5 	bl	8005cf8 <sbrk_aligned>
 8005dae:	3001      	adds	r0, #1
 8005db0:	d02b      	beq.n	8005e0a <_malloc_r+0xd2>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	442b      	add	r3, r5
 8005db6:	6023      	str	r3, [r4, #0]
 8005db8:	e00e      	b.n	8005dd8 <_malloc_r+0xa0>
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	1b52      	subs	r2, r2, r5
 8005dbe:	d41e      	bmi.n	8005dfe <_malloc_r+0xc6>
 8005dc0:	2a0b      	cmp	r2, #11
 8005dc2:	d916      	bls.n	8005df2 <_malloc_r+0xba>
 8005dc4:	1961      	adds	r1, r4, r5
 8005dc6:	42a3      	cmp	r3, r4
 8005dc8:	6025      	str	r5, [r4, #0]
 8005dca:	bf18      	it	ne
 8005dcc:	6059      	strne	r1, [r3, #4]
 8005dce:	6863      	ldr	r3, [r4, #4]
 8005dd0:	bf08      	it	eq
 8005dd2:	6031      	streq	r1, [r6, #0]
 8005dd4:	5162      	str	r2, [r4, r5]
 8005dd6:	604b      	str	r3, [r1, #4]
 8005dd8:	4638      	mov	r0, r7
 8005dda:	f104 060b 	add.w	r6, r4, #11
 8005dde:	f000 ff8f 	bl	8006d00 <__malloc_unlock>
 8005de2:	f026 0607 	bic.w	r6, r6, #7
 8005de6:	1d23      	adds	r3, r4, #4
 8005de8:	1af2      	subs	r2, r6, r3
 8005dea:	d0b6      	beq.n	8005d5a <_malloc_r+0x22>
 8005dec:	1b9b      	subs	r3, r3, r6
 8005dee:	50a3      	str	r3, [r4, r2]
 8005df0:	e7b3      	b.n	8005d5a <_malloc_r+0x22>
 8005df2:	6862      	ldr	r2, [r4, #4]
 8005df4:	42a3      	cmp	r3, r4
 8005df6:	bf0c      	ite	eq
 8005df8:	6032      	streq	r2, [r6, #0]
 8005dfa:	605a      	strne	r2, [r3, #4]
 8005dfc:	e7ec      	b.n	8005dd8 <_malloc_r+0xa0>
 8005dfe:	4623      	mov	r3, r4
 8005e00:	6864      	ldr	r4, [r4, #4]
 8005e02:	e7b2      	b.n	8005d6a <_malloc_r+0x32>
 8005e04:	4634      	mov	r4, r6
 8005e06:	6876      	ldr	r6, [r6, #4]
 8005e08:	e7b9      	b.n	8005d7e <_malloc_r+0x46>
 8005e0a:	230c      	movs	r3, #12
 8005e0c:	603b      	str	r3, [r7, #0]
 8005e0e:	4638      	mov	r0, r7
 8005e10:	f000 ff76 	bl	8006d00 <__malloc_unlock>
 8005e14:	e7a1      	b.n	8005d5a <_malloc_r+0x22>
 8005e16:	6025      	str	r5, [r4, #0]
 8005e18:	e7de      	b.n	8005dd8 <_malloc_r+0xa0>
 8005e1a:	bf00      	nop
 8005e1c:	20000250 	.word	0x20000250

08005e20 <__ssputs_r>:
 8005e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e24:	688e      	ldr	r6, [r1, #8]
 8005e26:	429e      	cmp	r6, r3
 8005e28:	4682      	mov	sl, r0
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	4690      	mov	r8, r2
 8005e2e:	461f      	mov	r7, r3
 8005e30:	d838      	bhi.n	8005ea4 <__ssputs_r+0x84>
 8005e32:	898a      	ldrh	r2, [r1, #12]
 8005e34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e38:	d032      	beq.n	8005ea0 <__ssputs_r+0x80>
 8005e3a:	6825      	ldr	r5, [r4, #0]
 8005e3c:	6909      	ldr	r1, [r1, #16]
 8005e3e:	eba5 0901 	sub.w	r9, r5, r1
 8005e42:	6965      	ldr	r5, [r4, #20]
 8005e44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	444b      	add	r3, r9
 8005e50:	106d      	asrs	r5, r5, #1
 8005e52:	429d      	cmp	r5, r3
 8005e54:	bf38      	it	cc
 8005e56:	461d      	movcc	r5, r3
 8005e58:	0553      	lsls	r3, r2, #21
 8005e5a:	d531      	bpl.n	8005ec0 <__ssputs_r+0xa0>
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	f7ff ff6b 	bl	8005d38 <_malloc_r>
 8005e62:	4606      	mov	r6, r0
 8005e64:	b950      	cbnz	r0, 8005e7c <__ssputs_r+0x5c>
 8005e66:	230c      	movs	r3, #12
 8005e68:	f8ca 3000 	str.w	r3, [sl]
 8005e6c:	89a3      	ldrh	r3, [r4, #12]
 8005e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e72:	81a3      	strh	r3, [r4, #12]
 8005e74:	f04f 30ff 	mov.w	r0, #4294967295
 8005e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e7c:	6921      	ldr	r1, [r4, #16]
 8005e7e:	464a      	mov	r2, r9
 8005e80:	f000 ff10 	bl	8006ca4 <memcpy>
 8005e84:	89a3      	ldrh	r3, [r4, #12]
 8005e86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8e:	81a3      	strh	r3, [r4, #12]
 8005e90:	6126      	str	r6, [r4, #16]
 8005e92:	6165      	str	r5, [r4, #20]
 8005e94:	444e      	add	r6, r9
 8005e96:	eba5 0509 	sub.w	r5, r5, r9
 8005e9a:	6026      	str	r6, [r4, #0]
 8005e9c:	60a5      	str	r5, [r4, #8]
 8005e9e:	463e      	mov	r6, r7
 8005ea0:	42be      	cmp	r6, r7
 8005ea2:	d900      	bls.n	8005ea6 <__ssputs_r+0x86>
 8005ea4:	463e      	mov	r6, r7
 8005ea6:	6820      	ldr	r0, [r4, #0]
 8005ea8:	4632      	mov	r2, r6
 8005eaa:	4641      	mov	r1, r8
 8005eac:	f000 ff08 	bl	8006cc0 <memmove>
 8005eb0:	68a3      	ldr	r3, [r4, #8]
 8005eb2:	1b9b      	subs	r3, r3, r6
 8005eb4:	60a3      	str	r3, [r4, #8]
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	4433      	add	r3, r6
 8005eba:	6023      	str	r3, [r4, #0]
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	e7db      	b.n	8005e78 <__ssputs_r+0x58>
 8005ec0:	462a      	mov	r2, r5
 8005ec2:	f000 ff23 	bl	8006d0c <_realloc_r>
 8005ec6:	4606      	mov	r6, r0
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	d1e1      	bne.n	8005e90 <__ssputs_r+0x70>
 8005ecc:	6921      	ldr	r1, [r4, #16]
 8005ece:	4650      	mov	r0, sl
 8005ed0:	f7ff fec6 	bl	8005c60 <_free_r>
 8005ed4:	e7c7      	b.n	8005e66 <__ssputs_r+0x46>
	...

08005ed8 <_svfiprintf_r>:
 8005ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005edc:	4698      	mov	r8, r3
 8005ede:	898b      	ldrh	r3, [r1, #12]
 8005ee0:	061b      	lsls	r3, r3, #24
 8005ee2:	b09d      	sub	sp, #116	; 0x74
 8005ee4:	4607      	mov	r7, r0
 8005ee6:	460d      	mov	r5, r1
 8005ee8:	4614      	mov	r4, r2
 8005eea:	d50e      	bpl.n	8005f0a <_svfiprintf_r+0x32>
 8005eec:	690b      	ldr	r3, [r1, #16]
 8005eee:	b963      	cbnz	r3, 8005f0a <_svfiprintf_r+0x32>
 8005ef0:	2140      	movs	r1, #64	; 0x40
 8005ef2:	f7ff ff21 	bl	8005d38 <_malloc_r>
 8005ef6:	6028      	str	r0, [r5, #0]
 8005ef8:	6128      	str	r0, [r5, #16]
 8005efa:	b920      	cbnz	r0, 8005f06 <_svfiprintf_r+0x2e>
 8005efc:	230c      	movs	r3, #12
 8005efe:	603b      	str	r3, [r7, #0]
 8005f00:	f04f 30ff 	mov.w	r0, #4294967295
 8005f04:	e0d1      	b.n	80060aa <_svfiprintf_r+0x1d2>
 8005f06:	2340      	movs	r3, #64	; 0x40
 8005f08:	616b      	str	r3, [r5, #20]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f0e:	2320      	movs	r3, #32
 8005f10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f14:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f18:	2330      	movs	r3, #48	; 0x30
 8005f1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80060c4 <_svfiprintf_r+0x1ec>
 8005f1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f22:	f04f 0901 	mov.w	r9, #1
 8005f26:	4623      	mov	r3, r4
 8005f28:	469a      	mov	sl, r3
 8005f2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f2e:	b10a      	cbz	r2, 8005f34 <_svfiprintf_r+0x5c>
 8005f30:	2a25      	cmp	r2, #37	; 0x25
 8005f32:	d1f9      	bne.n	8005f28 <_svfiprintf_r+0x50>
 8005f34:	ebba 0b04 	subs.w	fp, sl, r4
 8005f38:	d00b      	beq.n	8005f52 <_svfiprintf_r+0x7a>
 8005f3a:	465b      	mov	r3, fp
 8005f3c:	4622      	mov	r2, r4
 8005f3e:	4629      	mov	r1, r5
 8005f40:	4638      	mov	r0, r7
 8005f42:	f7ff ff6d 	bl	8005e20 <__ssputs_r>
 8005f46:	3001      	adds	r0, #1
 8005f48:	f000 80aa 	beq.w	80060a0 <_svfiprintf_r+0x1c8>
 8005f4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f4e:	445a      	add	r2, fp
 8005f50:	9209      	str	r2, [sp, #36]	; 0x24
 8005f52:	f89a 3000 	ldrb.w	r3, [sl]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 80a2 	beq.w	80060a0 <_svfiprintf_r+0x1c8>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f66:	f10a 0a01 	add.w	sl, sl, #1
 8005f6a:	9304      	str	r3, [sp, #16]
 8005f6c:	9307      	str	r3, [sp, #28]
 8005f6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f72:	931a      	str	r3, [sp, #104]	; 0x68
 8005f74:	4654      	mov	r4, sl
 8005f76:	2205      	movs	r2, #5
 8005f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f7c:	4851      	ldr	r0, [pc, #324]	; (80060c4 <_svfiprintf_r+0x1ec>)
 8005f7e:	f7fa f95f 	bl	8000240 <memchr>
 8005f82:	9a04      	ldr	r2, [sp, #16]
 8005f84:	b9d8      	cbnz	r0, 8005fbe <_svfiprintf_r+0xe6>
 8005f86:	06d0      	lsls	r0, r2, #27
 8005f88:	bf44      	itt	mi
 8005f8a:	2320      	movmi	r3, #32
 8005f8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f90:	0711      	lsls	r1, r2, #28
 8005f92:	bf44      	itt	mi
 8005f94:	232b      	movmi	r3, #43	; 0x2b
 8005f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f9e:	2b2a      	cmp	r3, #42	; 0x2a
 8005fa0:	d015      	beq.n	8005fce <_svfiprintf_r+0xf6>
 8005fa2:	9a07      	ldr	r2, [sp, #28]
 8005fa4:	4654      	mov	r4, sl
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	f04f 0c0a 	mov.w	ip, #10
 8005fac:	4621      	mov	r1, r4
 8005fae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fb2:	3b30      	subs	r3, #48	; 0x30
 8005fb4:	2b09      	cmp	r3, #9
 8005fb6:	d94e      	bls.n	8006056 <_svfiprintf_r+0x17e>
 8005fb8:	b1b0      	cbz	r0, 8005fe8 <_svfiprintf_r+0x110>
 8005fba:	9207      	str	r2, [sp, #28]
 8005fbc:	e014      	b.n	8005fe8 <_svfiprintf_r+0x110>
 8005fbe:	eba0 0308 	sub.w	r3, r0, r8
 8005fc2:	fa09 f303 	lsl.w	r3, r9, r3
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	9304      	str	r3, [sp, #16]
 8005fca:	46a2      	mov	sl, r4
 8005fcc:	e7d2      	b.n	8005f74 <_svfiprintf_r+0x9c>
 8005fce:	9b03      	ldr	r3, [sp, #12]
 8005fd0:	1d19      	adds	r1, r3, #4
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	9103      	str	r1, [sp, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	bfbb      	ittet	lt
 8005fda:	425b      	neglt	r3, r3
 8005fdc:	f042 0202 	orrlt.w	r2, r2, #2
 8005fe0:	9307      	strge	r3, [sp, #28]
 8005fe2:	9307      	strlt	r3, [sp, #28]
 8005fe4:	bfb8      	it	lt
 8005fe6:	9204      	strlt	r2, [sp, #16]
 8005fe8:	7823      	ldrb	r3, [r4, #0]
 8005fea:	2b2e      	cmp	r3, #46	; 0x2e
 8005fec:	d10c      	bne.n	8006008 <_svfiprintf_r+0x130>
 8005fee:	7863      	ldrb	r3, [r4, #1]
 8005ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ff2:	d135      	bne.n	8006060 <_svfiprintf_r+0x188>
 8005ff4:	9b03      	ldr	r3, [sp, #12]
 8005ff6:	1d1a      	adds	r2, r3, #4
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	9203      	str	r2, [sp, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	bfb8      	it	lt
 8006000:	f04f 33ff 	movlt.w	r3, #4294967295
 8006004:	3402      	adds	r4, #2
 8006006:	9305      	str	r3, [sp, #20]
 8006008:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80060d4 <_svfiprintf_r+0x1fc>
 800600c:	7821      	ldrb	r1, [r4, #0]
 800600e:	2203      	movs	r2, #3
 8006010:	4650      	mov	r0, sl
 8006012:	f7fa f915 	bl	8000240 <memchr>
 8006016:	b140      	cbz	r0, 800602a <_svfiprintf_r+0x152>
 8006018:	2340      	movs	r3, #64	; 0x40
 800601a:	eba0 000a 	sub.w	r0, r0, sl
 800601e:	fa03 f000 	lsl.w	r0, r3, r0
 8006022:	9b04      	ldr	r3, [sp, #16]
 8006024:	4303      	orrs	r3, r0
 8006026:	3401      	adds	r4, #1
 8006028:	9304      	str	r3, [sp, #16]
 800602a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800602e:	4826      	ldr	r0, [pc, #152]	; (80060c8 <_svfiprintf_r+0x1f0>)
 8006030:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006034:	2206      	movs	r2, #6
 8006036:	f7fa f903 	bl	8000240 <memchr>
 800603a:	2800      	cmp	r0, #0
 800603c:	d038      	beq.n	80060b0 <_svfiprintf_r+0x1d8>
 800603e:	4b23      	ldr	r3, [pc, #140]	; (80060cc <_svfiprintf_r+0x1f4>)
 8006040:	bb1b      	cbnz	r3, 800608a <_svfiprintf_r+0x1b2>
 8006042:	9b03      	ldr	r3, [sp, #12]
 8006044:	3307      	adds	r3, #7
 8006046:	f023 0307 	bic.w	r3, r3, #7
 800604a:	3308      	adds	r3, #8
 800604c:	9303      	str	r3, [sp, #12]
 800604e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006050:	4433      	add	r3, r6
 8006052:	9309      	str	r3, [sp, #36]	; 0x24
 8006054:	e767      	b.n	8005f26 <_svfiprintf_r+0x4e>
 8006056:	fb0c 3202 	mla	r2, ip, r2, r3
 800605a:	460c      	mov	r4, r1
 800605c:	2001      	movs	r0, #1
 800605e:	e7a5      	b.n	8005fac <_svfiprintf_r+0xd4>
 8006060:	2300      	movs	r3, #0
 8006062:	3401      	adds	r4, #1
 8006064:	9305      	str	r3, [sp, #20]
 8006066:	4619      	mov	r1, r3
 8006068:	f04f 0c0a 	mov.w	ip, #10
 800606c:	4620      	mov	r0, r4
 800606e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006072:	3a30      	subs	r2, #48	; 0x30
 8006074:	2a09      	cmp	r2, #9
 8006076:	d903      	bls.n	8006080 <_svfiprintf_r+0x1a8>
 8006078:	2b00      	cmp	r3, #0
 800607a:	d0c5      	beq.n	8006008 <_svfiprintf_r+0x130>
 800607c:	9105      	str	r1, [sp, #20]
 800607e:	e7c3      	b.n	8006008 <_svfiprintf_r+0x130>
 8006080:	fb0c 2101 	mla	r1, ip, r1, r2
 8006084:	4604      	mov	r4, r0
 8006086:	2301      	movs	r3, #1
 8006088:	e7f0      	b.n	800606c <_svfiprintf_r+0x194>
 800608a:	ab03      	add	r3, sp, #12
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	462a      	mov	r2, r5
 8006090:	4b0f      	ldr	r3, [pc, #60]	; (80060d0 <_svfiprintf_r+0x1f8>)
 8006092:	a904      	add	r1, sp, #16
 8006094:	4638      	mov	r0, r7
 8006096:	f3af 8000 	nop.w
 800609a:	1c42      	adds	r2, r0, #1
 800609c:	4606      	mov	r6, r0
 800609e:	d1d6      	bne.n	800604e <_svfiprintf_r+0x176>
 80060a0:	89ab      	ldrh	r3, [r5, #12]
 80060a2:	065b      	lsls	r3, r3, #25
 80060a4:	f53f af2c 	bmi.w	8005f00 <_svfiprintf_r+0x28>
 80060a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060aa:	b01d      	add	sp, #116	; 0x74
 80060ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b0:	ab03      	add	r3, sp, #12
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	462a      	mov	r2, r5
 80060b6:	4b06      	ldr	r3, [pc, #24]	; (80060d0 <_svfiprintf_r+0x1f8>)
 80060b8:	a904      	add	r1, sp, #16
 80060ba:	4638      	mov	r0, r7
 80060bc:	f000 f9d4 	bl	8006468 <_printf_i>
 80060c0:	e7eb      	b.n	800609a <_svfiprintf_r+0x1c2>
 80060c2:	bf00      	nop
 80060c4:	08007195 	.word	0x08007195
 80060c8:	0800719f 	.word	0x0800719f
 80060cc:	00000000 	.word	0x00000000
 80060d0:	08005e21 	.word	0x08005e21
 80060d4:	0800719b 	.word	0x0800719b

080060d8 <__sfputc_r>:
 80060d8:	6893      	ldr	r3, [r2, #8]
 80060da:	3b01      	subs	r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	b410      	push	{r4}
 80060e0:	6093      	str	r3, [r2, #8]
 80060e2:	da08      	bge.n	80060f6 <__sfputc_r+0x1e>
 80060e4:	6994      	ldr	r4, [r2, #24]
 80060e6:	42a3      	cmp	r3, r4
 80060e8:	db01      	blt.n	80060ee <__sfputc_r+0x16>
 80060ea:	290a      	cmp	r1, #10
 80060ec:	d103      	bne.n	80060f6 <__sfputc_r+0x1e>
 80060ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060f2:	f000 baef 	b.w	80066d4 <__swbuf_r>
 80060f6:	6813      	ldr	r3, [r2, #0]
 80060f8:	1c58      	adds	r0, r3, #1
 80060fa:	6010      	str	r0, [r2, #0]
 80060fc:	7019      	strb	r1, [r3, #0]
 80060fe:	4608      	mov	r0, r1
 8006100:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006104:	4770      	bx	lr

08006106 <__sfputs_r>:
 8006106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006108:	4606      	mov	r6, r0
 800610a:	460f      	mov	r7, r1
 800610c:	4614      	mov	r4, r2
 800610e:	18d5      	adds	r5, r2, r3
 8006110:	42ac      	cmp	r4, r5
 8006112:	d101      	bne.n	8006118 <__sfputs_r+0x12>
 8006114:	2000      	movs	r0, #0
 8006116:	e007      	b.n	8006128 <__sfputs_r+0x22>
 8006118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800611c:	463a      	mov	r2, r7
 800611e:	4630      	mov	r0, r6
 8006120:	f7ff ffda 	bl	80060d8 <__sfputc_r>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d1f3      	bne.n	8006110 <__sfputs_r+0xa>
 8006128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800612c <_vfiprintf_r>:
 800612c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006130:	460d      	mov	r5, r1
 8006132:	b09d      	sub	sp, #116	; 0x74
 8006134:	4614      	mov	r4, r2
 8006136:	4698      	mov	r8, r3
 8006138:	4606      	mov	r6, r0
 800613a:	b118      	cbz	r0, 8006144 <_vfiprintf_r+0x18>
 800613c:	6983      	ldr	r3, [r0, #24]
 800613e:	b90b      	cbnz	r3, 8006144 <_vfiprintf_r+0x18>
 8006140:	f000 fcaa 	bl	8006a98 <__sinit>
 8006144:	4b89      	ldr	r3, [pc, #548]	; (800636c <_vfiprintf_r+0x240>)
 8006146:	429d      	cmp	r5, r3
 8006148:	d11b      	bne.n	8006182 <_vfiprintf_r+0x56>
 800614a:	6875      	ldr	r5, [r6, #4]
 800614c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800614e:	07d9      	lsls	r1, r3, #31
 8006150:	d405      	bmi.n	800615e <_vfiprintf_r+0x32>
 8006152:	89ab      	ldrh	r3, [r5, #12]
 8006154:	059a      	lsls	r2, r3, #22
 8006156:	d402      	bmi.n	800615e <_vfiprintf_r+0x32>
 8006158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800615a:	f000 fd3b 	bl	8006bd4 <__retarget_lock_acquire_recursive>
 800615e:	89ab      	ldrh	r3, [r5, #12]
 8006160:	071b      	lsls	r3, r3, #28
 8006162:	d501      	bpl.n	8006168 <_vfiprintf_r+0x3c>
 8006164:	692b      	ldr	r3, [r5, #16]
 8006166:	b9eb      	cbnz	r3, 80061a4 <_vfiprintf_r+0x78>
 8006168:	4629      	mov	r1, r5
 800616a:	4630      	mov	r0, r6
 800616c:	f000 fb04 	bl	8006778 <__swsetup_r>
 8006170:	b1c0      	cbz	r0, 80061a4 <_vfiprintf_r+0x78>
 8006172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006174:	07dc      	lsls	r4, r3, #31
 8006176:	d50e      	bpl.n	8006196 <_vfiprintf_r+0x6a>
 8006178:	f04f 30ff 	mov.w	r0, #4294967295
 800617c:	b01d      	add	sp, #116	; 0x74
 800617e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006182:	4b7b      	ldr	r3, [pc, #492]	; (8006370 <_vfiprintf_r+0x244>)
 8006184:	429d      	cmp	r5, r3
 8006186:	d101      	bne.n	800618c <_vfiprintf_r+0x60>
 8006188:	68b5      	ldr	r5, [r6, #8]
 800618a:	e7df      	b.n	800614c <_vfiprintf_r+0x20>
 800618c:	4b79      	ldr	r3, [pc, #484]	; (8006374 <_vfiprintf_r+0x248>)
 800618e:	429d      	cmp	r5, r3
 8006190:	bf08      	it	eq
 8006192:	68f5      	ldreq	r5, [r6, #12]
 8006194:	e7da      	b.n	800614c <_vfiprintf_r+0x20>
 8006196:	89ab      	ldrh	r3, [r5, #12]
 8006198:	0598      	lsls	r0, r3, #22
 800619a:	d4ed      	bmi.n	8006178 <_vfiprintf_r+0x4c>
 800619c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800619e:	f000 fd1a 	bl	8006bd6 <__retarget_lock_release_recursive>
 80061a2:	e7e9      	b.n	8006178 <_vfiprintf_r+0x4c>
 80061a4:	2300      	movs	r3, #0
 80061a6:	9309      	str	r3, [sp, #36]	; 0x24
 80061a8:	2320      	movs	r3, #32
 80061aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80061b2:	2330      	movs	r3, #48	; 0x30
 80061b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006378 <_vfiprintf_r+0x24c>
 80061b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061bc:	f04f 0901 	mov.w	r9, #1
 80061c0:	4623      	mov	r3, r4
 80061c2:	469a      	mov	sl, r3
 80061c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061c8:	b10a      	cbz	r2, 80061ce <_vfiprintf_r+0xa2>
 80061ca:	2a25      	cmp	r2, #37	; 0x25
 80061cc:	d1f9      	bne.n	80061c2 <_vfiprintf_r+0x96>
 80061ce:	ebba 0b04 	subs.w	fp, sl, r4
 80061d2:	d00b      	beq.n	80061ec <_vfiprintf_r+0xc0>
 80061d4:	465b      	mov	r3, fp
 80061d6:	4622      	mov	r2, r4
 80061d8:	4629      	mov	r1, r5
 80061da:	4630      	mov	r0, r6
 80061dc:	f7ff ff93 	bl	8006106 <__sfputs_r>
 80061e0:	3001      	adds	r0, #1
 80061e2:	f000 80aa 	beq.w	800633a <_vfiprintf_r+0x20e>
 80061e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061e8:	445a      	add	r2, fp
 80061ea:	9209      	str	r2, [sp, #36]	; 0x24
 80061ec:	f89a 3000 	ldrb.w	r3, [sl]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 80a2 	beq.w	800633a <_vfiprintf_r+0x20e>
 80061f6:	2300      	movs	r3, #0
 80061f8:	f04f 32ff 	mov.w	r2, #4294967295
 80061fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006200:	f10a 0a01 	add.w	sl, sl, #1
 8006204:	9304      	str	r3, [sp, #16]
 8006206:	9307      	str	r3, [sp, #28]
 8006208:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800620c:	931a      	str	r3, [sp, #104]	; 0x68
 800620e:	4654      	mov	r4, sl
 8006210:	2205      	movs	r2, #5
 8006212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006216:	4858      	ldr	r0, [pc, #352]	; (8006378 <_vfiprintf_r+0x24c>)
 8006218:	f7fa f812 	bl	8000240 <memchr>
 800621c:	9a04      	ldr	r2, [sp, #16]
 800621e:	b9d8      	cbnz	r0, 8006258 <_vfiprintf_r+0x12c>
 8006220:	06d1      	lsls	r1, r2, #27
 8006222:	bf44      	itt	mi
 8006224:	2320      	movmi	r3, #32
 8006226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800622a:	0713      	lsls	r3, r2, #28
 800622c:	bf44      	itt	mi
 800622e:	232b      	movmi	r3, #43	; 0x2b
 8006230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006234:	f89a 3000 	ldrb.w	r3, [sl]
 8006238:	2b2a      	cmp	r3, #42	; 0x2a
 800623a:	d015      	beq.n	8006268 <_vfiprintf_r+0x13c>
 800623c:	9a07      	ldr	r2, [sp, #28]
 800623e:	4654      	mov	r4, sl
 8006240:	2000      	movs	r0, #0
 8006242:	f04f 0c0a 	mov.w	ip, #10
 8006246:	4621      	mov	r1, r4
 8006248:	f811 3b01 	ldrb.w	r3, [r1], #1
 800624c:	3b30      	subs	r3, #48	; 0x30
 800624e:	2b09      	cmp	r3, #9
 8006250:	d94e      	bls.n	80062f0 <_vfiprintf_r+0x1c4>
 8006252:	b1b0      	cbz	r0, 8006282 <_vfiprintf_r+0x156>
 8006254:	9207      	str	r2, [sp, #28]
 8006256:	e014      	b.n	8006282 <_vfiprintf_r+0x156>
 8006258:	eba0 0308 	sub.w	r3, r0, r8
 800625c:	fa09 f303 	lsl.w	r3, r9, r3
 8006260:	4313      	orrs	r3, r2
 8006262:	9304      	str	r3, [sp, #16]
 8006264:	46a2      	mov	sl, r4
 8006266:	e7d2      	b.n	800620e <_vfiprintf_r+0xe2>
 8006268:	9b03      	ldr	r3, [sp, #12]
 800626a:	1d19      	adds	r1, r3, #4
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	9103      	str	r1, [sp, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	bfbb      	ittet	lt
 8006274:	425b      	neglt	r3, r3
 8006276:	f042 0202 	orrlt.w	r2, r2, #2
 800627a:	9307      	strge	r3, [sp, #28]
 800627c:	9307      	strlt	r3, [sp, #28]
 800627e:	bfb8      	it	lt
 8006280:	9204      	strlt	r2, [sp, #16]
 8006282:	7823      	ldrb	r3, [r4, #0]
 8006284:	2b2e      	cmp	r3, #46	; 0x2e
 8006286:	d10c      	bne.n	80062a2 <_vfiprintf_r+0x176>
 8006288:	7863      	ldrb	r3, [r4, #1]
 800628a:	2b2a      	cmp	r3, #42	; 0x2a
 800628c:	d135      	bne.n	80062fa <_vfiprintf_r+0x1ce>
 800628e:	9b03      	ldr	r3, [sp, #12]
 8006290:	1d1a      	adds	r2, r3, #4
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	9203      	str	r2, [sp, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	bfb8      	it	lt
 800629a:	f04f 33ff 	movlt.w	r3, #4294967295
 800629e:	3402      	adds	r4, #2
 80062a0:	9305      	str	r3, [sp, #20]
 80062a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006388 <_vfiprintf_r+0x25c>
 80062a6:	7821      	ldrb	r1, [r4, #0]
 80062a8:	2203      	movs	r2, #3
 80062aa:	4650      	mov	r0, sl
 80062ac:	f7f9 ffc8 	bl	8000240 <memchr>
 80062b0:	b140      	cbz	r0, 80062c4 <_vfiprintf_r+0x198>
 80062b2:	2340      	movs	r3, #64	; 0x40
 80062b4:	eba0 000a 	sub.w	r0, r0, sl
 80062b8:	fa03 f000 	lsl.w	r0, r3, r0
 80062bc:	9b04      	ldr	r3, [sp, #16]
 80062be:	4303      	orrs	r3, r0
 80062c0:	3401      	adds	r4, #1
 80062c2:	9304      	str	r3, [sp, #16]
 80062c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c8:	482c      	ldr	r0, [pc, #176]	; (800637c <_vfiprintf_r+0x250>)
 80062ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062ce:	2206      	movs	r2, #6
 80062d0:	f7f9 ffb6 	bl	8000240 <memchr>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	d03f      	beq.n	8006358 <_vfiprintf_r+0x22c>
 80062d8:	4b29      	ldr	r3, [pc, #164]	; (8006380 <_vfiprintf_r+0x254>)
 80062da:	bb1b      	cbnz	r3, 8006324 <_vfiprintf_r+0x1f8>
 80062dc:	9b03      	ldr	r3, [sp, #12]
 80062de:	3307      	adds	r3, #7
 80062e0:	f023 0307 	bic.w	r3, r3, #7
 80062e4:	3308      	adds	r3, #8
 80062e6:	9303      	str	r3, [sp, #12]
 80062e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ea:	443b      	add	r3, r7
 80062ec:	9309      	str	r3, [sp, #36]	; 0x24
 80062ee:	e767      	b.n	80061c0 <_vfiprintf_r+0x94>
 80062f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80062f4:	460c      	mov	r4, r1
 80062f6:	2001      	movs	r0, #1
 80062f8:	e7a5      	b.n	8006246 <_vfiprintf_r+0x11a>
 80062fa:	2300      	movs	r3, #0
 80062fc:	3401      	adds	r4, #1
 80062fe:	9305      	str	r3, [sp, #20]
 8006300:	4619      	mov	r1, r3
 8006302:	f04f 0c0a 	mov.w	ip, #10
 8006306:	4620      	mov	r0, r4
 8006308:	f810 2b01 	ldrb.w	r2, [r0], #1
 800630c:	3a30      	subs	r2, #48	; 0x30
 800630e:	2a09      	cmp	r2, #9
 8006310:	d903      	bls.n	800631a <_vfiprintf_r+0x1ee>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0c5      	beq.n	80062a2 <_vfiprintf_r+0x176>
 8006316:	9105      	str	r1, [sp, #20]
 8006318:	e7c3      	b.n	80062a2 <_vfiprintf_r+0x176>
 800631a:	fb0c 2101 	mla	r1, ip, r1, r2
 800631e:	4604      	mov	r4, r0
 8006320:	2301      	movs	r3, #1
 8006322:	e7f0      	b.n	8006306 <_vfiprintf_r+0x1da>
 8006324:	ab03      	add	r3, sp, #12
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	462a      	mov	r2, r5
 800632a:	4b16      	ldr	r3, [pc, #88]	; (8006384 <_vfiprintf_r+0x258>)
 800632c:	a904      	add	r1, sp, #16
 800632e:	4630      	mov	r0, r6
 8006330:	f3af 8000 	nop.w
 8006334:	4607      	mov	r7, r0
 8006336:	1c78      	adds	r0, r7, #1
 8006338:	d1d6      	bne.n	80062e8 <_vfiprintf_r+0x1bc>
 800633a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800633c:	07d9      	lsls	r1, r3, #31
 800633e:	d405      	bmi.n	800634c <_vfiprintf_r+0x220>
 8006340:	89ab      	ldrh	r3, [r5, #12]
 8006342:	059a      	lsls	r2, r3, #22
 8006344:	d402      	bmi.n	800634c <_vfiprintf_r+0x220>
 8006346:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006348:	f000 fc45 	bl	8006bd6 <__retarget_lock_release_recursive>
 800634c:	89ab      	ldrh	r3, [r5, #12]
 800634e:	065b      	lsls	r3, r3, #25
 8006350:	f53f af12 	bmi.w	8006178 <_vfiprintf_r+0x4c>
 8006354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006356:	e711      	b.n	800617c <_vfiprintf_r+0x50>
 8006358:	ab03      	add	r3, sp, #12
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	462a      	mov	r2, r5
 800635e:	4b09      	ldr	r3, [pc, #36]	; (8006384 <_vfiprintf_r+0x258>)
 8006360:	a904      	add	r1, sp, #16
 8006362:	4630      	mov	r0, r6
 8006364:	f000 f880 	bl	8006468 <_printf_i>
 8006368:	e7e4      	b.n	8006334 <_vfiprintf_r+0x208>
 800636a:	bf00      	nop
 800636c:	080071e8 	.word	0x080071e8
 8006370:	08007208 	.word	0x08007208
 8006374:	080071c8 	.word	0x080071c8
 8006378:	08007195 	.word	0x08007195
 800637c:	0800719f 	.word	0x0800719f
 8006380:	00000000 	.word	0x00000000
 8006384:	08006107 	.word	0x08006107
 8006388:	0800719b 	.word	0x0800719b

0800638c <_printf_common>:
 800638c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006390:	4616      	mov	r6, r2
 8006392:	4699      	mov	r9, r3
 8006394:	688a      	ldr	r2, [r1, #8]
 8006396:	690b      	ldr	r3, [r1, #16]
 8006398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800639c:	4293      	cmp	r3, r2
 800639e:	bfb8      	it	lt
 80063a0:	4613      	movlt	r3, r2
 80063a2:	6033      	str	r3, [r6, #0]
 80063a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063a8:	4607      	mov	r7, r0
 80063aa:	460c      	mov	r4, r1
 80063ac:	b10a      	cbz	r2, 80063b2 <_printf_common+0x26>
 80063ae:	3301      	adds	r3, #1
 80063b0:	6033      	str	r3, [r6, #0]
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	0699      	lsls	r1, r3, #26
 80063b6:	bf42      	ittt	mi
 80063b8:	6833      	ldrmi	r3, [r6, #0]
 80063ba:	3302      	addmi	r3, #2
 80063bc:	6033      	strmi	r3, [r6, #0]
 80063be:	6825      	ldr	r5, [r4, #0]
 80063c0:	f015 0506 	ands.w	r5, r5, #6
 80063c4:	d106      	bne.n	80063d4 <_printf_common+0x48>
 80063c6:	f104 0a19 	add.w	sl, r4, #25
 80063ca:	68e3      	ldr	r3, [r4, #12]
 80063cc:	6832      	ldr	r2, [r6, #0]
 80063ce:	1a9b      	subs	r3, r3, r2
 80063d0:	42ab      	cmp	r3, r5
 80063d2:	dc26      	bgt.n	8006422 <_printf_common+0x96>
 80063d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063d8:	1e13      	subs	r3, r2, #0
 80063da:	6822      	ldr	r2, [r4, #0]
 80063dc:	bf18      	it	ne
 80063de:	2301      	movne	r3, #1
 80063e0:	0692      	lsls	r2, r2, #26
 80063e2:	d42b      	bmi.n	800643c <_printf_common+0xb0>
 80063e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063e8:	4649      	mov	r1, r9
 80063ea:	4638      	mov	r0, r7
 80063ec:	47c0      	blx	r8
 80063ee:	3001      	adds	r0, #1
 80063f0:	d01e      	beq.n	8006430 <_printf_common+0xa4>
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	68e5      	ldr	r5, [r4, #12]
 80063f6:	6832      	ldr	r2, [r6, #0]
 80063f8:	f003 0306 	and.w	r3, r3, #6
 80063fc:	2b04      	cmp	r3, #4
 80063fe:	bf08      	it	eq
 8006400:	1aad      	subeq	r5, r5, r2
 8006402:	68a3      	ldr	r3, [r4, #8]
 8006404:	6922      	ldr	r2, [r4, #16]
 8006406:	bf0c      	ite	eq
 8006408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800640c:	2500      	movne	r5, #0
 800640e:	4293      	cmp	r3, r2
 8006410:	bfc4      	itt	gt
 8006412:	1a9b      	subgt	r3, r3, r2
 8006414:	18ed      	addgt	r5, r5, r3
 8006416:	2600      	movs	r6, #0
 8006418:	341a      	adds	r4, #26
 800641a:	42b5      	cmp	r5, r6
 800641c:	d11a      	bne.n	8006454 <_printf_common+0xc8>
 800641e:	2000      	movs	r0, #0
 8006420:	e008      	b.n	8006434 <_printf_common+0xa8>
 8006422:	2301      	movs	r3, #1
 8006424:	4652      	mov	r2, sl
 8006426:	4649      	mov	r1, r9
 8006428:	4638      	mov	r0, r7
 800642a:	47c0      	blx	r8
 800642c:	3001      	adds	r0, #1
 800642e:	d103      	bne.n	8006438 <_printf_common+0xac>
 8006430:	f04f 30ff 	mov.w	r0, #4294967295
 8006434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006438:	3501      	adds	r5, #1
 800643a:	e7c6      	b.n	80063ca <_printf_common+0x3e>
 800643c:	18e1      	adds	r1, r4, r3
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	2030      	movs	r0, #48	; 0x30
 8006442:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006446:	4422      	add	r2, r4
 8006448:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800644c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006450:	3302      	adds	r3, #2
 8006452:	e7c7      	b.n	80063e4 <_printf_common+0x58>
 8006454:	2301      	movs	r3, #1
 8006456:	4622      	mov	r2, r4
 8006458:	4649      	mov	r1, r9
 800645a:	4638      	mov	r0, r7
 800645c:	47c0      	blx	r8
 800645e:	3001      	adds	r0, #1
 8006460:	d0e6      	beq.n	8006430 <_printf_common+0xa4>
 8006462:	3601      	adds	r6, #1
 8006464:	e7d9      	b.n	800641a <_printf_common+0x8e>
	...

08006468 <_printf_i>:
 8006468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800646c:	7e0f      	ldrb	r7, [r1, #24]
 800646e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006470:	2f78      	cmp	r7, #120	; 0x78
 8006472:	4691      	mov	r9, r2
 8006474:	4680      	mov	r8, r0
 8006476:	460c      	mov	r4, r1
 8006478:	469a      	mov	sl, r3
 800647a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800647e:	d807      	bhi.n	8006490 <_printf_i+0x28>
 8006480:	2f62      	cmp	r7, #98	; 0x62
 8006482:	d80a      	bhi.n	800649a <_printf_i+0x32>
 8006484:	2f00      	cmp	r7, #0
 8006486:	f000 80d8 	beq.w	800663a <_printf_i+0x1d2>
 800648a:	2f58      	cmp	r7, #88	; 0x58
 800648c:	f000 80a3 	beq.w	80065d6 <_printf_i+0x16e>
 8006490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006494:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006498:	e03a      	b.n	8006510 <_printf_i+0xa8>
 800649a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800649e:	2b15      	cmp	r3, #21
 80064a0:	d8f6      	bhi.n	8006490 <_printf_i+0x28>
 80064a2:	a101      	add	r1, pc, #4	; (adr r1, 80064a8 <_printf_i+0x40>)
 80064a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064a8:	08006501 	.word	0x08006501
 80064ac:	08006515 	.word	0x08006515
 80064b0:	08006491 	.word	0x08006491
 80064b4:	08006491 	.word	0x08006491
 80064b8:	08006491 	.word	0x08006491
 80064bc:	08006491 	.word	0x08006491
 80064c0:	08006515 	.word	0x08006515
 80064c4:	08006491 	.word	0x08006491
 80064c8:	08006491 	.word	0x08006491
 80064cc:	08006491 	.word	0x08006491
 80064d0:	08006491 	.word	0x08006491
 80064d4:	08006621 	.word	0x08006621
 80064d8:	08006545 	.word	0x08006545
 80064dc:	08006603 	.word	0x08006603
 80064e0:	08006491 	.word	0x08006491
 80064e4:	08006491 	.word	0x08006491
 80064e8:	08006643 	.word	0x08006643
 80064ec:	08006491 	.word	0x08006491
 80064f0:	08006545 	.word	0x08006545
 80064f4:	08006491 	.word	0x08006491
 80064f8:	08006491 	.word	0x08006491
 80064fc:	0800660b 	.word	0x0800660b
 8006500:	682b      	ldr	r3, [r5, #0]
 8006502:	1d1a      	adds	r2, r3, #4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	602a      	str	r2, [r5, #0]
 8006508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800650c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006510:	2301      	movs	r3, #1
 8006512:	e0a3      	b.n	800665c <_printf_i+0x1f4>
 8006514:	6820      	ldr	r0, [r4, #0]
 8006516:	6829      	ldr	r1, [r5, #0]
 8006518:	0606      	lsls	r6, r0, #24
 800651a:	f101 0304 	add.w	r3, r1, #4
 800651e:	d50a      	bpl.n	8006536 <_printf_i+0xce>
 8006520:	680e      	ldr	r6, [r1, #0]
 8006522:	602b      	str	r3, [r5, #0]
 8006524:	2e00      	cmp	r6, #0
 8006526:	da03      	bge.n	8006530 <_printf_i+0xc8>
 8006528:	232d      	movs	r3, #45	; 0x2d
 800652a:	4276      	negs	r6, r6
 800652c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006530:	485e      	ldr	r0, [pc, #376]	; (80066ac <_printf_i+0x244>)
 8006532:	230a      	movs	r3, #10
 8006534:	e019      	b.n	800656a <_printf_i+0x102>
 8006536:	680e      	ldr	r6, [r1, #0]
 8006538:	602b      	str	r3, [r5, #0]
 800653a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800653e:	bf18      	it	ne
 8006540:	b236      	sxthne	r6, r6
 8006542:	e7ef      	b.n	8006524 <_printf_i+0xbc>
 8006544:	682b      	ldr	r3, [r5, #0]
 8006546:	6820      	ldr	r0, [r4, #0]
 8006548:	1d19      	adds	r1, r3, #4
 800654a:	6029      	str	r1, [r5, #0]
 800654c:	0601      	lsls	r1, r0, #24
 800654e:	d501      	bpl.n	8006554 <_printf_i+0xec>
 8006550:	681e      	ldr	r6, [r3, #0]
 8006552:	e002      	b.n	800655a <_printf_i+0xf2>
 8006554:	0646      	lsls	r6, r0, #25
 8006556:	d5fb      	bpl.n	8006550 <_printf_i+0xe8>
 8006558:	881e      	ldrh	r6, [r3, #0]
 800655a:	4854      	ldr	r0, [pc, #336]	; (80066ac <_printf_i+0x244>)
 800655c:	2f6f      	cmp	r7, #111	; 0x6f
 800655e:	bf0c      	ite	eq
 8006560:	2308      	moveq	r3, #8
 8006562:	230a      	movne	r3, #10
 8006564:	2100      	movs	r1, #0
 8006566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800656a:	6865      	ldr	r5, [r4, #4]
 800656c:	60a5      	str	r5, [r4, #8]
 800656e:	2d00      	cmp	r5, #0
 8006570:	bfa2      	ittt	ge
 8006572:	6821      	ldrge	r1, [r4, #0]
 8006574:	f021 0104 	bicge.w	r1, r1, #4
 8006578:	6021      	strge	r1, [r4, #0]
 800657a:	b90e      	cbnz	r6, 8006580 <_printf_i+0x118>
 800657c:	2d00      	cmp	r5, #0
 800657e:	d04d      	beq.n	800661c <_printf_i+0x1b4>
 8006580:	4615      	mov	r5, r2
 8006582:	fbb6 f1f3 	udiv	r1, r6, r3
 8006586:	fb03 6711 	mls	r7, r3, r1, r6
 800658a:	5dc7      	ldrb	r7, [r0, r7]
 800658c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006590:	4637      	mov	r7, r6
 8006592:	42bb      	cmp	r3, r7
 8006594:	460e      	mov	r6, r1
 8006596:	d9f4      	bls.n	8006582 <_printf_i+0x11a>
 8006598:	2b08      	cmp	r3, #8
 800659a:	d10b      	bne.n	80065b4 <_printf_i+0x14c>
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	07de      	lsls	r6, r3, #31
 80065a0:	d508      	bpl.n	80065b4 <_printf_i+0x14c>
 80065a2:	6923      	ldr	r3, [r4, #16]
 80065a4:	6861      	ldr	r1, [r4, #4]
 80065a6:	4299      	cmp	r1, r3
 80065a8:	bfde      	ittt	le
 80065aa:	2330      	movle	r3, #48	; 0x30
 80065ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065b4:	1b52      	subs	r2, r2, r5
 80065b6:	6122      	str	r2, [r4, #16]
 80065b8:	f8cd a000 	str.w	sl, [sp]
 80065bc:	464b      	mov	r3, r9
 80065be:	aa03      	add	r2, sp, #12
 80065c0:	4621      	mov	r1, r4
 80065c2:	4640      	mov	r0, r8
 80065c4:	f7ff fee2 	bl	800638c <_printf_common>
 80065c8:	3001      	adds	r0, #1
 80065ca:	d14c      	bne.n	8006666 <_printf_i+0x1fe>
 80065cc:	f04f 30ff 	mov.w	r0, #4294967295
 80065d0:	b004      	add	sp, #16
 80065d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d6:	4835      	ldr	r0, [pc, #212]	; (80066ac <_printf_i+0x244>)
 80065d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065dc:	6829      	ldr	r1, [r5, #0]
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80065e4:	6029      	str	r1, [r5, #0]
 80065e6:	061d      	lsls	r5, r3, #24
 80065e8:	d514      	bpl.n	8006614 <_printf_i+0x1ac>
 80065ea:	07df      	lsls	r7, r3, #31
 80065ec:	bf44      	itt	mi
 80065ee:	f043 0320 	orrmi.w	r3, r3, #32
 80065f2:	6023      	strmi	r3, [r4, #0]
 80065f4:	b91e      	cbnz	r6, 80065fe <_printf_i+0x196>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	f023 0320 	bic.w	r3, r3, #32
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	2310      	movs	r3, #16
 8006600:	e7b0      	b.n	8006564 <_printf_i+0xfc>
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	f043 0320 	orr.w	r3, r3, #32
 8006608:	6023      	str	r3, [r4, #0]
 800660a:	2378      	movs	r3, #120	; 0x78
 800660c:	4828      	ldr	r0, [pc, #160]	; (80066b0 <_printf_i+0x248>)
 800660e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006612:	e7e3      	b.n	80065dc <_printf_i+0x174>
 8006614:	0659      	lsls	r1, r3, #25
 8006616:	bf48      	it	mi
 8006618:	b2b6      	uxthmi	r6, r6
 800661a:	e7e6      	b.n	80065ea <_printf_i+0x182>
 800661c:	4615      	mov	r5, r2
 800661e:	e7bb      	b.n	8006598 <_printf_i+0x130>
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	6826      	ldr	r6, [r4, #0]
 8006624:	6961      	ldr	r1, [r4, #20]
 8006626:	1d18      	adds	r0, r3, #4
 8006628:	6028      	str	r0, [r5, #0]
 800662a:	0635      	lsls	r5, r6, #24
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	d501      	bpl.n	8006634 <_printf_i+0x1cc>
 8006630:	6019      	str	r1, [r3, #0]
 8006632:	e002      	b.n	800663a <_printf_i+0x1d2>
 8006634:	0670      	lsls	r0, r6, #25
 8006636:	d5fb      	bpl.n	8006630 <_printf_i+0x1c8>
 8006638:	8019      	strh	r1, [r3, #0]
 800663a:	2300      	movs	r3, #0
 800663c:	6123      	str	r3, [r4, #16]
 800663e:	4615      	mov	r5, r2
 8006640:	e7ba      	b.n	80065b8 <_printf_i+0x150>
 8006642:	682b      	ldr	r3, [r5, #0]
 8006644:	1d1a      	adds	r2, r3, #4
 8006646:	602a      	str	r2, [r5, #0]
 8006648:	681d      	ldr	r5, [r3, #0]
 800664a:	6862      	ldr	r2, [r4, #4]
 800664c:	2100      	movs	r1, #0
 800664e:	4628      	mov	r0, r5
 8006650:	f7f9 fdf6 	bl	8000240 <memchr>
 8006654:	b108      	cbz	r0, 800665a <_printf_i+0x1f2>
 8006656:	1b40      	subs	r0, r0, r5
 8006658:	6060      	str	r0, [r4, #4]
 800665a:	6863      	ldr	r3, [r4, #4]
 800665c:	6123      	str	r3, [r4, #16]
 800665e:	2300      	movs	r3, #0
 8006660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006664:	e7a8      	b.n	80065b8 <_printf_i+0x150>
 8006666:	6923      	ldr	r3, [r4, #16]
 8006668:	462a      	mov	r2, r5
 800666a:	4649      	mov	r1, r9
 800666c:	4640      	mov	r0, r8
 800666e:	47d0      	blx	sl
 8006670:	3001      	adds	r0, #1
 8006672:	d0ab      	beq.n	80065cc <_printf_i+0x164>
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	079b      	lsls	r3, r3, #30
 8006678:	d413      	bmi.n	80066a2 <_printf_i+0x23a>
 800667a:	68e0      	ldr	r0, [r4, #12]
 800667c:	9b03      	ldr	r3, [sp, #12]
 800667e:	4298      	cmp	r0, r3
 8006680:	bfb8      	it	lt
 8006682:	4618      	movlt	r0, r3
 8006684:	e7a4      	b.n	80065d0 <_printf_i+0x168>
 8006686:	2301      	movs	r3, #1
 8006688:	4632      	mov	r2, r6
 800668a:	4649      	mov	r1, r9
 800668c:	4640      	mov	r0, r8
 800668e:	47d0      	blx	sl
 8006690:	3001      	adds	r0, #1
 8006692:	d09b      	beq.n	80065cc <_printf_i+0x164>
 8006694:	3501      	adds	r5, #1
 8006696:	68e3      	ldr	r3, [r4, #12]
 8006698:	9903      	ldr	r1, [sp, #12]
 800669a:	1a5b      	subs	r3, r3, r1
 800669c:	42ab      	cmp	r3, r5
 800669e:	dcf2      	bgt.n	8006686 <_printf_i+0x21e>
 80066a0:	e7eb      	b.n	800667a <_printf_i+0x212>
 80066a2:	2500      	movs	r5, #0
 80066a4:	f104 0619 	add.w	r6, r4, #25
 80066a8:	e7f5      	b.n	8006696 <_printf_i+0x22e>
 80066aa:	bf00      	nop
 80066ac:	080071a6 	.word	0x080071a6
 80066b0:	080071b7 	.word	0x080071b7

080066b4 <_sbrk_r>:
 80066b4:	b538      	push	{r3, r4, r5, lr}
 80066b6:	4d06      	ldr	r5, [pc, #24]	; (80066d0 <_sbrk_r+0x1c>)
 80066b8:	2300      	movs	r3, #0
 80066ba:	4604      	mov	r4, r0
 80066bc:	4608      	mov	r0, r1
 80066be:	602b      	str	r3, [r5, #0]
 80066c0:	f7fa fa52 	bl	8000b68 <_sbrk>
 80066c4:	1c43      	adds	r3, r0, #1
 80066c6:	d102      	bne.n	80066ce <_sbrk_r+0x1a>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	b103      	cbz	r3, 80066ce <_sbrk_r+0x1a>
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	bd38      	pop	{r3, r4, r5, pc}
 80066d0:	2000025c 	.word	0x2000025c

080066d4 <__swbuf_r>:
 80066d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d6:	460e      	mov	r6, r1
 80066d8:	4614      	mov	r4, r2
 80066da:	4605      	mov	r5, r0
 80066dc:	b118      	cbz	r0, 80066e6 <__swbuf_r+0x12>
 80066de:	6983      	ldr	r3, [r0, #24]
 80066e0:	b90b      	cbnz	r3, 80066e6 <__swbuf_r+0x12>
 80066e2:	f000 f9d9 	bl	8006a98 <__sinit>
 80066e6:	4b21      	ldr	r3, [pc, #132]	; (800676c <__swbuf_r+0x98>)
 80066e8:	429c      	cmp	r4, r3
 80066ea:	d12b      	bne.n	8006744 <__swbuf_r+0x70>
 80066ec:	686c      	ldr	r4, [r5, #4]
 80066ee:	69a3      	ldr	r3, [r4, #24]
 80066f0:	60a3      	str	r3, [r4, #8]
 80066f2:	89a3      	ldrh	r3, [r4, #12]
 80066f4:	071a      	lsls	r2, r3, #28
 80066f6:	d52f      	bpl.n	8006758 <__swbuf_r+0x84>
 80066f8:	6923      	ldr	r3, [r4, #16]
 80066fa:	b36b      	cbz	r3, 8006758 <__swbuf_r+0x84>
 80066fc:	6923      	ldr	r3, [r4, #16]
 80066fe:	6820      	ldr	r0, [r4, #0]
 8006700:	1ac0      	subs	r0, r0, r3
 8006702:	6963      	ldr	r3, [r4, #20]
 8006704:	b2f6      	uxtb	r6, r6
 8006706:	4283      	cmp	r3, r0
 8006708:	4637      	mov	r7, r6
 800670a:	dc04      	bgt.n	8006716 <__swbuf_r+0x42>
 800670c:	4621      	mov	r1, r4
 800670e:	4628      	mov	r0, r5
 8006710:	f000 f92e 	bl	8006970 <_fflush_r>
 8006714:	bb30      	cbnz	r0, 8006764 <__swbuf_r+0x90>
 8006716:	68a3      	ldr	r3, [r4, #8]
 8006718:	3b01      	subs	r3, #1
 800671a:	60a3      	str	r3, [r4, #8]
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	6022      	str	r2, [r4, #0]
 8006722:	701e      	strb	r6, [r3, #0]
 8006724:	6963      	ldr	r3, [r4, #20]
 8006726:	3001      	adds	r0, #1
 8006728:	4283      	cmp	r3, r0
 800672a:	d004      	beq.n	8006736 <__swbuf_r+0x62>
 800672c:	89a3      	ldrh	r3, [r4, #12]
 800672e:	07db      	lsls	r3, r3, #31
 8006730:	d506      	bpl.n	8006740 <__swbuf_r+0x6c>
 8006732:	2e0a      	cmp	r6, #10
 8006734:	d104      	bne.n	8006740 <__swbuf_r+0x6c>
 8006736:	4621      	mov	r1, r4
 8006738:	4628      	mov	r0, r5
 800673a:	f000 f919 	bl	8006970 <_fflush_r>
 800673e:	b988      	cbnz	r0, 8006764 <__swbuf_r+0x90>
 8006740:	4638      	mov	r0, r7
 8006742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006744:	4b0a      	ldr	r3, [pc, #40]	; (8006770 <__swbuf_r+0x9c>)
 8006746:	429c      	cmp	r4, r3
 8006748:	d101      	bne.n	800674e <__swbuf_r+0x7a>
 800674a:	68ac      	ldr	r4, [r5, #8]
 800674c:	e7cf      	b.n	80066ee <__swbuf_r+0x1a>
 800674e:	4b09      	ldr	r3, [pc, #36]	; (8006774 <__swbuf_r+0xa0>)
 8006750:	429c      	cmp	r4, r3
 8006752:	bf08      	it	eq
 8006754:	68ec      	ldreq	r4, [r5, #12]
 8006756:	e7ca      	b.n	80066ee <__swbuf_r+0x1a>
 8006758:	4621      	mov	r1, r4
 800675a:	4628      	mov	r0, r5
 800675c:	f000 f80c 	bl	8006778 <__swsetup_r>
 8006760:	2800      	cmp	r0, #0
 8006762:	d0cb      	beq.n	80066fc <__swbuf_r+0x28>
 8006764:	f04f 37ff 	mov.w	r7, #4294967295
 8006768:	e7ea      	b.n	8006740 <__swbuf_r+0x6c>
 800676a:	bf00      	nop
 800676c:	080071e8 	.word	0x080071e8
 8006770:	08007208 	.word	0x08007208
 8006774:	080071c8 	.word	0x080071c8

08006778 <__swsetup_r>:
 8006778:	4b32      	ldr	r3, [pc, #200]	; (8006844 <__swsetup_r+0xcc>)
 800677a:	b570      	push	{r4, r5, r6, lr}
 800677c:	681d      	ldr	r5, [r3, #0]
 800677e:	4606      	mov	r6, r0
 8006780:	460c      	mov	r4, r1
 8006782:	b125      	cbz	r5, 800678e <__swsetup_r+0x16>
 8006784:	69ab      	ldr	r3, [r5, #24]
 8006786:	b913      	cbnz	r3, 800678e <__swsetup_r+0x16>
 8006788:	4628      	mov	r0, r5
 800678a:	f000 f985 	bl	8006a98 <__sinit>
 800678e:	4b2e      	ldr	r3, [pc, #184]	; (8006848 <__swsetup_r+0xd0>)
 8006790:	429c      	cmp	r4, r3
 8006792:	d10f      	bne.n	80067b4 <__swsetup_r+0x3c>
 8006794:	686c      	ldr	r4, [r5, #4]
 8006796:	89a3      	ldrh	r3, [r4, #12]
 8006798:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800679c:	0719      	lsls	r1, r3, #28
 800679e:	d42c      	bmi.n	80067fa <__swsetup_r+0x82>
 80067a0:	06dd      	lsls	r5, r3, #27
 80067a2:	d411      	bmi.n	80067c8 <__swsetup_r+0x50>
 80067a4:	2309      	movs	r3, #9
 80067a6:	6033      	str	r3, [r6, #0]
 80067a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067ac:	81a3      	strh	r3, [r4, #12]
 80067ae:	f04f 30ff 	mov.w	r0, #4294967295
 80067b2:	e03e      	b.n	8006832 <__swsetup_r+0xba>
 80067b4:	4b25      	ldr	r3, [pc, #148]	; (800684c <__swsetup_r+0xd4>)
 80067b6:	429c      	cmp	r4, r3
 80067b8:	d101      	bne.n	80067be <__swsetup_r+0x46>
 80067ba:	68ac      	ldr	r4, [r5, #8]
 80067bc:	e7eb      	b.n	8006796 <__swsetup_r+0x1e>
 80067be:	4b24      	ldr	r3, [pc, #144]	; (8006850 <__swsetup_r+0xd8>)
 80067c0:	429c      	cmp	r4, r3
 80067c2:	bf08      	it	eq
 80067c4:	68ec      	ldreq	r4, [r5, #12]
 80067c6:	e7e6      	b.n	8006796 <__swsetup_r+0x1e>
 80067c8:	0758      	lsls	r0, r3, #29
 80067ca:	d512      	bpl.n	80067f2 <__swsetup_r+0x7a>
 80067cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067ce:	b141      	cbz	r1, 80067e2 <__swsetup_r+0x6a>
 80067d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067d4:	4299      	cmp	r1, r3
 80067d6:	d002      	beq.n	80067de <__swsetup_r+0x66>
 80067d8:	4630      	mov	r0, r6
 80067da:	f7ff fa41 	bl	8005c60 <_free_r>
 80067de:	2300      	movs	r3, #0
 80067e0:	6363      	str	r3, [r4, #52]	; 0x34
 80067e2:	89a3      	ldrh	r3, [r4, #12]
 80067e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067e8:	81a3      	strh	r3, [r4, #12]
 80067ea:	2300      	movs	r3, #0
 80067ec:	6063      	str	r3, [r4, #4]
 80067ee:	6923      	ldr	r3, [r4, #16]
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	f043 0308 	orr.w	r3, r3, #8
 80067f8:	81a3      	strh	r3, [r4, #12]
 80067fa:	6923      	ldr	r3, [r4, #16]
 80067fc:	b94b      	cbnz	r3, 8006812 <__swsetup_r+0x9a>
 80067fe:	89a3      	ldrh	r3, [r4, #12]
 8006800:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006808:	d003      	beq.n	8006812 <__swsetup_r+0x9a>
 800680a:	4621      	mov	r1, r4
 800680c:	4630      	mov	r0, r6
 800680e:	f000 fa09 	bl	8006c24 <__smakebuf_r>
 8006812:	89a0      	ldrh	r0, [r4, #12]
 8006814:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006818:	f010 0301 	ands.w	r3, r0, #1
 800681c:	d00a      	beq.n	8006834 <__swsetup_r+0xbc>
 800681e:	2300      	movs	r3, #0
 8006820:	60a3      	str	r3, [r4, #8]
 8006822:	6963      	ldr	r3, [r4, #20]
 8006824:	425b      	negs	r3, r3
 8006826:	61a3      	str	r3, [r4, #24]
 8006828:	6923      	ldr	r3, [r4, #16]
 800682a:	b943      	cbnz	r3, 800683e <__swsetup_r+0xc6>
 800682c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006830:	d1ba      	bne.n	80067a8 <__swsetup_r+0x30>
 8006832:	bd70      	pop	{r4, r5, r6, pc}
 8006834:	0781      	lsls	r1, r0, #30
 8006836:	bf58      	it	pl
 8006838:	6963      	ldrpl	r3, [r4, #20]
 800683a:	60a3      	str	r3, [r4, #8]
 800683c:	e7f4      	b.n	8006828 <__swsetup_r+0xb0>
 800683e:	2000      	movs	r0, #0
 8006840:	e7f7      	b.n	8006832 <__swsetup_r+0xba>
 8006842:	bf00      	nop
 8006844:	200000a4 	.word	0x200000a4
 8006848:	080071e8 	.word	0x080071e8
 800684c:	08007208 	.word	0x08007208
 8006850:	080071c8 	.word	0x080071c8

08006854 <abort>:
 8006854:	b508      	push	{r3, lr}
 8006856:	2006      	movs	r0, #6
 8006858:	f000 fab0 	bl	8006dbc <raise>
 800685c:	2001      	movs	r0, #1
 800685e:	f7fa f90b 	bl	8000a78 <_exit>
	...

08006864 <__sflush_r>:
 8006864:	898a      	ldrh	r2, [r1, #12]
 8006866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800686a:	4605      	mov	r5, r0
 800686c:	0710      	lsls	r0, r2, #28
 800686e:	460c      	mov	r4, r1
 8006870:	d458      	bmi.n	8006924 <__sflush_r+0xc0>
 8006872:	684b      	ldr	r3, [r1, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	dc05      	bgt.n	8006884 <__sflush_r+0x20>
 8006878:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800687a:	2b00      	cmp	r3, #0
 800687c:	dc02      	bgt.n	8006884 <__sflush_r+0x20>
 800687e:	2000      	movs	r0, #0
 8006880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006884:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006886:	2e00      	cmp	r6, #0
 8006888:	d0f9      	beq.n	800687e <__sflush_r+0x1a>
 800688a:	2300      	movs	r3, #0
 800688c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006890:	682f      	ldr	r7, [r5, #0]
 8006892:	602b      	str	r3, [r5, #0]
 8006894:	d032      	beq.n	80068fc <__sflush_r+0x98>
 8006896:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006898:	89a3      	ldrh	r3, [r4, #12]
 800689a:	075a      	lsls	r2, r3, #29
 800689c:	d505      	bpl.n	80068aa <__sflush_r+0x46>
 800689e:	6863      	ldr	r3, [r4, #4]
 80068a0:	1ac0      	subs	r0, r0, r3
 80068a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068a4:	b10b      	cbz	r3, 80068aa <__sflush_r+0x46>
 80068a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068a8:	1ac0      	subs	r0, r0, r3
 80068aa:	2300      	movs	r3, #0
 80068ac:	4602      	mov	r2, r0
 80068ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068b0:	6a21      	ldr	r1, [r4, #32]
 80068b2:	4628      	mov	r0, r5
 80068b4:	47b0      	blx	r6
 80068b6:	1c43      	adds	r3, r0, #1
 80068b8:	89a3      	ldrh	r3, [r4, #12]
 80068ba:	d106      	bne.n	80068ca <__sflush_r+0x66>
 80068bc:	6829      	ldr	r1, [r5, #0]
 80068be:	291d      	cmp	r1, #29
 80068c0:	d82c      	bhi.n	800691c <__sflush_r+0xb8>
 80068c2:	4a2a      	ldr	r2, [pc, #168]	; (800696c <__sflush_r+0x108>)
 80068c4:	40ca      	lsrs	r2, r1
 80068c6:	07d6      	lsls	r6, r2, #31
 80068c8:	d528      	bpl.n	800691c <__sflush_r+0xb8>
 80068ca:	2200      	movs	r2, #0
 80068cc:	6062      	str	r2, [r4, #4]
 80068ce:	04d9      	lsls	r1, r3, #19
 80068d0:	6922      	ldr	r2, [r4, #16]
 80068d2:	6022      	str	r2, [r4, #0]
 80068d4:	d504      	bpl.n	80068e0 <__sflush_r+0x7c>
 80068d6:	1c42      	adds	r2, r0, #1
 80068d8:	d101      	bne.n	80068de <__sflush_r+0x7a>
 80068da:	682b      	ldr	r3, [r5, #0]
 80068dc:	b903      	cbnz	r3, 80068e0 <__sflush_r+0x7c>
 80068de:	6560      	str	r0, [r4, #84]	; 0x54
 80068e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068e2:	602f      	str	r7, [r5, #0]
 80068e4:	2900      	cmp	r1, #0
 80068e6:	d0ca      	beq.n	800687e <__sflush_r+0x1a>
 80068e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068ec:	4299      	cmp	r1, r3
 80068ee:	d002      	beq.n	80068f6 <__sflush_r+0x92>
 80068f0:	4628      	mov	r0, r5
 80068f2:	f7ff f9b5 	bl	8005c60 <_free_r>
 80068f6:	2000      	movs	r0, #0
 80068f8:	6360      	str	r0, [r4, #52]	; 0x34
 80068fa:	e7c1      	b.n	8006880 <__sflush_r+0x1c>
 80068fc:	6a21      	ldr	r1, [r4, #32]
 80068fe:	2301      	movs	r3, #1
 8006900:	4628      	mov	r0, r5
 8006902:	47b0      	blx	r6
 8006904:	1c41      	adds	r1, r0, #1
 8006906:	d1c7      	bne.n	8006898 <__sflush_r+0x34>
 8006908:	682b      	ldr	r3, [r5, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d0c4      	beq.n	8006898 <__sflush_r+0x34>
 800690e:	2b1d      	cmp	r3, #29
 8006910:	d001      	beq.n	8006916 <__sflush_r+0xb2>
 8006912:	2b16      	cmp	r3, #22
 8006914:	d101      	bne.n	800691a <__sflush_r+0xb6>
 8006916:	602f      	str	r7, [r5, #0]
 8006918:	e7b1      	b.n	800687e <__sflush_r+0x1a>
 800691a:	89a3      	ldrh	r3, [r4, #12]
 800691c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006920:	81a3      	strh	r3, [r4, #12]
 8006922:	e7ad      	b.n	8006880 <__sflush_r+0x1c>
 8006924:	690f      	ldr	r7, [r1, #16]
 8006926:	2f00      	cmp	r7, #0
 8006928:	d0a9      	beq.n	800687e <__sflush_r+0x1a>
 800692a:	0793      	lsls	r3, r2, #30
 800692c:	680e      	ldr	r6, [r1, #0]
 800692e:	bf08      	it	eq
 8006930:	694b      	ldreq	r3, [r1, #20]
 8006932:	600f      	str	r7, [r1, #0]
 8006934:	bf18      	it	ne
 8006936:	2300      	movne	r3, #0
 8006938:	eba6 0807 	sub.w	r8, r6, r7
 800693c:	608b      	str	r3, [r1, #8]
 800693e:	f1b8 0f00 	cmp.w	r8, #0
 8006942:	dd9c      	ble.n	800687e <__sflush_r+0x1a>
 8006944:	6a21      	ldr	r1, [r4, #32]
 8006946:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006948:	4643      	mov	r3, r8
 800694a:	463a      	mov	r2, r7
 800694c:	4628      	mov	r0, r5
 800694e:	47b0      	blx	r6
 8006950:	2800      	cmp	r0, #0
 8006952:	dc06      	bgt.n	8006962 <__sflush_r+0xfe>
 8006954:	89a3      	ldrh	r3, [r4, #12]
 8006956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800695a:	81a3      	strh	r3, [r4, #12]
 800695c:	f04f 30ff 	mov.w	r0, #4294967295
 8006960:	e78e      	b.n	8006880 <__sflush_r+0x1c>
 8006962:	4407      	add	r7, r0
 8006964:	eba8 0800 	sub.w	r8, r8, r0
 8006968:	e7e9      	b.n	800693e <__sflush_r+0xda>
 800696a:	bf00      	nop
 800696c:	20400001 	.word	0x20400001

08006970 <_fflush_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	690b      	ldr	r3, [r1, #16]
 8006974:	4605      	mov	r5, r0
 8006976:	460c      	mov	r4, r1
 8006978:	b913      	cbnz	r3, 8006980 <_fflush_r+0x10>
 800697a:	2500      	movs	r5, #0
 800697c:	4628      	mov	r0, r5
 800697e:	bd38      	pop	{r3, r4, r5, pc}
 8006980:	b118      	cbz	r0, 800698a <_fflush_r+0x1a>
 8006982:	6983      	ldr	r3, [r0, #24]
 8006984:	b90b      	cbnz	r3, 800698a <_fflush_r+0x1a>
 8006986:	f000 f887 	bl	8006a98 <__sinit>
 800698a:	4b14      	ldr	r3, [pc, #80]	; (80069dc <_fflush_r+0x6c>)
 800698c:	429c      	cmp	r4, r3
 800698e:	d11b      	bne.n	80069c8 <_fflush_r+0x58>
 8006990:	686c      	ldr	r4, [r5, #4]
 8006992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0ef      	beq.n	800697a <_fflush_r+0xa>
 800699a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800699c:	07d0      	lsls	r0, r2, #31
 800699e:	d404      	bmi.n	80069aa <_fflush_r+0x3a>
 80069a0:	0599      	lsls	r1, r3, #22
 80069a2:	d402      	bmi.n	80069aa <_fflush_r+0x3a>
 80069a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069a6:	f000 f915 	bl	8006bd4 <__retarget_lock_acquire_recursive>
 80069aa:	4628      	mov	r0, r5
 80069ac:	4621      	mov	r1, r4
 80069ae:	f7ff ff59 	bl	8006864 <__sflush_r>
 80069b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069b4:	07da      	lsls	r2, r3, #31
 80069b6:	4605      	mov	r5, r0
 80069b8:	d4e0      	bmi.n	800697c <_fflush_r+0xc>
 80069ba:	89a3      	ldrh	r3, [r4, #12]
 80069bc:	059b      	lsls	r3, r3, #22
 80069be:	d4dd      	bmi.n	800697c <_fflush_r+0xc>
 80069c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069c2:	f000 f908 	bl	8006bd6 <__retarget_lock_release_recursive>
 80069c6:	e7d9      	b.n	800697c <_fflush_r+0xc>
 80069c8:	4b05      	ldr	r3, [pc, #20]	; (80069e0 <_fflush_r+0x70>)
 80069ca:	429c      	cmp	r4, r3
 80069cc:	d101      	bne.n	80069d2 <_fflush_r+0x62>
 80069ce:	68ac      	ldr	r4, [r5, #8]
 80069d0:	e7df      	b.n	8006992 <_fflush_r+0x22>
 80069d2:	4b04      	ldr	r3, [pc, #16]	; (80069e4 <_fflush_r+0x74>)
 80069d4:	429c      	cmp	r4, r3
 80069d6:	bf08      	it	eq
 80069d8:	68ec      	ldreq	r4, [r5, #12]
 80069da:	e7da      	b.n	8006992 <_fflush_r+0x22>
 80069dc:	080071e8 	.word	0x080071e8
 80069e0:	08007208 	.word	0x08007208
 80069e4:	080071c8 	.word	0x080071c8

080069e8 <std>:
 80069e8:	2300      	movs	r3, #0
 80069ea:	b510      	push	{r4, lr}
 80069ec:	4604      	mov	r4, r0
 80069ee:	e9c0 3300 	strd	r3, r3, [r0]
 80069f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069f6:	6083      	str	r3, [r0, #8]
 80069f8:	8181      	strh	r1, [r0, #12]
 80069fa:	6643      	str	r3, [r0, #100]	; 0x64
 80069fc:	81c2      	strh	r2, [r0, #14]
 80069fe:	6183      	str	r3, [r0, #24]
 8006a00:	4619      	mov	r1, r3
 8006a02:	2208      	movs	r2, #8
 8006a04:	305c      	adds	r0, #92	; 0x5c
 8006a06:	f7fe ffe3 	bl	80059d0 <memset>
 8006a0a:	4b05      	ldr	r3, [pc, #20]	; (8006a20 <std+0x38>)
 8006a0c:	6263      	str	r3, [r4, #36]	; 0x24
 8006a0e:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <std+0x3c>)
 8006a10:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a12:	4b05      	ldr	r3, [pc, #20]	; (8006a28 <std+0x40>)
 8006a14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a16:	4b05      	ldr	r3, [pc, #20]	; (8006a2c <std+0x44>)
 8006a18:	6224      	str	r4, [r4, #32]
 8006a1a:	6323      	str	r3, [r4, #48]	; 0x30
 8006a1c:	bd10      	pop	{r4, pc}
 8006a1e:	bf00      	nop
 8006a20:	08006df5 	.word	0x08006df5
 8006a24:	08006e17 	.word	0x08006e17
 8006a28:	08006e4f 	.word	0x08006e4f
 8006a2c:	08006e73 	.word	0x08006e73

08006a30 <_cleanup_r>:
 8006a30:	4901      	ldr	r1, [pc, #4]	; (8006a38 <_cleanup_r+0x8>)
 8006a32:	f000 b8af 	b.w	8006b94 <_fwalk_reent>
 8006a36:	bf00      	nop
 8006a38:	08006971 	.word	0x08006971

08006a3c <__sfmoreglue>:
 8006a3c:	b570      	push	{r4, r5, r6, lr}
 8006a3e:	2268      	movs	r2, #104	; 0x68
 8006a40:	1e4d      	subs	r5, r1, #1
 8006a42:	4355      	muls	r5, r2
 8006a44:	460e      	mov	r6, r1
 8006a46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a4a:	f7ff f975 	bl	8005d38 <_malloc_r>
 8006a4e:	4604      	mov	r4, r0
 8006a50:	b140      	cbz	r0, 8006a64 <__sfmoreglue+0x28>
 8006a52:	2100      	movs	r1, #0
 8006a54:	e9c0 1600 	strd	r1, r6, [r0]
 8006a58:	300c      	adds	r0, #12
 8006a5a:	60a0      	str	r0, [r4, #8]
 8006a5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a60:	f7fe ffb6 	bl	80059d0 <memset>
 8006a64:	4620      	mov	r0, r4
 8006a66:	bd70      	pop	{r4, r5, r6, pc}

08006a68 <__sfp_lock_acquire>:
 8006a68:	4801      	ldr	r0, [pc, #4]	; (8006a70 <__sfp_lock_acquire+0x8>)
 8006a6a:	f000 b8b3 	b.w	8006bd4 <__retarget_lock_acquire_recursive>
 8006a6e:	bf00      	nop
 8006a70:	20000259 	.word	0x20000259

08006a74 <__sfp_lock_release>:
 8006a74:	4801      	ldr	r0, [pc, #4]	; (8006a7c <__sfp_lock_release+0x8>)
 8006a76:	f000 b8ae 	b.w	8006bd6 <__retarget_lock_release_recursive>
 8006a7a:	bf00      	nop
 8006a7c:	20000259 	.word	0x20000259

08006a80 <__sinit_lock_acquire>:
 8006a80:	4801      	ldr	r0, [pc, #4]	; (8006a88 <__sinit_lock_acquire+0x8>)
 8006a82:	f000 b8a7 	b.w	8006bd4 <__retarget_lock_acquire_recursive>
 8006a86:	bf00      	nop
 8006a88:	2000025a 	.word	0x2000025a

08006a8c <__sinit_lock_release>:
 8006a8c:	4801      	ldr	r0, [pc, #4]	; (8006a94 <__sinit_lock_release+0x8>)
 8006a8e:	f000 b8a2 	b.w	8006bd6 <__retarget_lock_release_recursive>
 8006a92:	bf00      	nop
 8006a94:	2000025a 	.word	0x2000025a

08006a98 <__sinit>:
 8006a98:	b510      	push	{r4, lr}
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	f7ff fff0 	bl	8006a80 <__sinit_lock_acquire>
 8006aa0:	69a3      	ldr	r3, [r4, #24]
 8006aa2:	b11b      	cbz	r3, 8006aac <__sinit+0x14>
 8006aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aa8:	f7ff bff0 	b.w	8006a8c <__sinit_lock_release>
 8006aac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ab0:	6523      	str	r3, [r4, #80]	; 0x50
 8006ab2:	4b13      	ldr	r3, [pc, #76]	; (8006b00 <__sinit+0x68>)
 8006ab4:	4a13      	ldr	r2, [pc, #76]	; (8006b04 <__sinit+0x6c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006aba:	42a3      	cmp	r3, r4
 8006abc:	bf04      	itt	eq
 8006abe:	2301      	moveq	r3, #1
 8006ac0:	61a3      	streq	r3, [r4, #24]
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f000 f820 	bl	8006b08 <__sfp>
 8006ac8:	6060      	str	r0, [r4, #4]
 8006aca:	4620      	mov	r0, r4
 8006acc:	f000 f81c 	bl	8006b08 <__sfp>
 8006ad0:	60a0      	str	r0, [r4, #8]
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f000 f818 	bl	8006b08 <__sfp>
 8006ad8:	2200      	movs	r2, #0
 8006ada:	60e0      	str	r0, [r4, #12]
 8006adc:	2104      	movs	r1, #4
 8006ade:	6860      	ldr	r0, [r4, #4]
 8006ae0:	f7ff ff82 	bl	80069e8 <std>
 8006ae4:	68a0      	ldr	r0, [r4, #8]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	2109      	movs	r1, #9
 8006aea:	f7ff ff7d 	bl	80069e8 <std>
 8006aee:	68e0      	ldr	r0, [r4, #12]
 8006af0:	2202      	movs	r2, #2
 8006af2:	2112      	movs	r1, #18
 8006af4:	f7ff ff78 	bl	80069e8 <std>
 8006af8:	2301      	movs	r3, #1
 8006afa:	61a3      	str	r3, [r4, #24]
 8006afc:	e7d2      	b.n	8006aa4 <__sinit+0xc>
 8006afe:	bf00      	nop
 8006b00:	08006fe0 	.word	0x08006fe0
 8006b04:	08006a31 	.word	0x08006a31

08006b08 <__sfp>:
 8006b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0a:	4607      	mov	r7, r0
 8006b0c:	f7ff ffac 	bl	8006a68 <__sfp_lock_acquire>
 8006b10:	4b1e      	ldr	r3, [pc, #120]	; (8006b8c <__sfp+0x84>)
 8006b12:	681e      	ldr	r6, [r3, #0]
 8006b14:	69b3      	ldr	r3, [r6, #24]
 8006b16:	b913      	cbnz	r3, 8006b1e <__sfp+0x16>
 8006b18:	4630      	mov	r0, r6
 8006b1a:	f7ff ffbd 	bl	8006a98 <__sinit>
 8006b1e:	3648      	adds	r6, #72	; 0x48
 8006b20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b24:	3b01      	subs	r3, #1
 8006b26:	d503      	bpl.n	8006b30 <__sfp+0x28>
 8006b28:	6833      	ldr	r3, [r6, #0]
 8006b2a:	b30b      	cbz	r3, 8006b70 <__sfp+0x68>
 8006b2c:	6836      	ldr	r6, [r6, #0]
 8006b2e:	e7f7      	b.n	8006b20 <__sfp+0x18>
 8006b30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b34:	b9d5      	cbnz	r5, 8006b6c <__sfp+0x64>
 8006b36:	4b16      	ldr	r3, [pc, #88]	; (8006b90 <__sfp+0x88>)
 8006b38:	60e3      	str	r3, [r4, #12]
 8006b3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b3e:	6665      	str	r5, [r4, #100]	; 0x64
 8006b40:	f000 f847 	bl	8006bd2 <__retarget_lock_init_recursive>
 8006b44:	f7ff ff96 	bl	8006a74 <__sfp_lock_release>
 8006b48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b50:	6025      	str	r5, [r4, #0]
 8006b52:	61a5      	str	r5, [r4, #24]
 8006b54:	2208      	movs	r2, #8
 8006b56:	4629      	mov	r1, r5
 8006b58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b5c:	f7fe ff38 	bl	80059d0 <memset>
 8006b60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b68:	4620      	mov	r0, r4
 8006b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b6c:	3468      	adds	r4, #104	; 0x68
 8006b6e:	e7d9      	b.n	8006b24 <__sfp+0x1c>
 8006b70:	2104      	movs	r1, #4
 8006b72:	4638      	mov	r0, r7
 8006b74:	f7ff ff62 	bl	8006a3c <__sfmoreglue>
 8006b78:	4604      	mov	r4, r0
 8006b7a:	6030      	str	r0, [r6, #0]
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d1d5      	bne.n	8006b2c <__sfp+0x24>
 8006b80:	f7ff ff78 	bl	8006a74 <__sfp_lock_release>
 8006b84:	230c      	movs	r3, #12
 8006b86:	603b      	str	r3, [r7, #0]
 8006b88:	e7ee      	b.n	8006b68 <__sfp+0x60>
 8006b8a:	bf00      	nop
 8006b8c:	08006fe0 	.word	0x08006fe0
 8006b90:	ffff0001 	.word	0xffff0001

08006b94 <_fwalk_reent>:
 8006b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b98:	4606      	mov	r6, r0
 8006b9a:	4688      	mov	r8, r1
 8006b9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ba0:	2700      	movs	r7, #0
 8006ba2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ba6:	f1b9 0901 	subs.w	r9, r9, #1
 8006baa:	d505      	bpl.n	8006bb8 <_fwalk_reent+0x24>
 8006bac:	6824      	ldr	r4, [r4, #0]
 8006bae:	2c00      	cmp	r4, #0
 8006bb0:	d1f7      	bne.n	8006ba2 <_fwalk_reent+0xe>
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bb8:	89ab      	ldrh	r3, [r5, #12]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d907      	bls.n	8006bce <_fwalk_reent+0x3a>
 8006bbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	d003      	beq.n	8006bce <_fwalk_reent+0x3a>
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	4630      	mov	r0, r6
 8006bca:	47c0      	blx	r8
 8006bcc:	4307      	orrs	r7, r0
 8006bce:	3568      	adds	r5, #104	; 0x68
 8006bd0:	e7e9      	b.n	8006ba6 <_fwalk_reent+0x12>

08006bd2 <__retarget_lock_init_recursive>:
 8006bd2:	4770      	bx	lr

08006bd4 <__retarget_lock_acquire_recursive>:
 8006bd4:	4770      	bx	lr

08006bd6 <__retarget_lock_release_recursive>:
 8006bd6:	4770      	bx	lr

08006bd8 <__swhatbuf_r>:
 8006bd8:	b570      	push	{r4, r5, r6, lr}
 8006bda:	460e      	mov	r6, r1
 8006bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be0:	2900      	cmp	r1, #0
 8006be2:	b096      	sub	sp, #88	; 0x58
 8006be4:	4614      	mov	r4, r2
 8006be6:	461d      	mov	r5, r3
 8006be8:	da08      	bge.n	8006bfc <__swhatbuf_r+0x24>
 8006bea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	602a      	str	r2, [r5, #0]
 8006bf2:	061a      	lsls	r2, r3, #24
 8006bf4:	d410      	bmi.n	8006c18 <__swhatbuf_r+0x40>
 8006bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bfa:	e00e      	b.n	8006c1a <__swhatbuf_r+0x42>
 8006bfc:	466a      	mov	r2, sp
 8006bfe:	f000 f95f 	bl	8006ec0 <_fstat_r>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	dbf1      	blt.n	8006bea <__swhatbuf_r+0x12>
 8006c06:	9a01      	ldr	r2, [sp, #4]
 8006c08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c10:	425a      	negs	r2, r3
 8006c12:	415a      	adcs	r2, r3
 8006c14:	602a      	str	r2, [r5, #0]
 8006c16:	e7ee      	b.n	8006bf6 <__swhatbuf_r+0x1e>
 8006c18:	2340      	movs	r3, #64	; 0x40
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	b016      	add	sp, #88	; 0x58
 8006c20:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c24 <__smakebuf_r>:
 8006c24:	898b      	ldrh	r3, [r1, #12]
 8006c26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c28:	079d      	lsls	r5, r3, #30
 8006c2a:	4606      	mov	r6, r0
 8006c2c:	460c      	mov	r4, r1
 8006c2e:	d507      	bpl.n	8006c40 <__smakebuf_r+0x1c>
 8006c30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	6123      	str	r3, [r4, #16]
 8006c38:	2301      	movs	r3, #1
 8006c3a:	6163      	str	r3, [r4, #20]
 8006c3c:	b002      	add	sp, #8
 8006c3e:	bd70      	pop	{r4, r5, r6, pc}
 8006c40:	ab01      	add	r3, sp, #4
 8006c42:	466a      	mov	r2, sp
 8006c44:	f7ff ffc8 	bl	8006bd8 <__swhatbuf_r>
 8006c48:	9900      	ldr	r1, [sp, #0]
 8006c4a:	4605      	mov	r5, r0
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	f7ff f873 	bl	8005d38 <_malloc_r>
 8006c52:	b948      	cbnz	r0, 8006c68 <__smakebuf_r+0x44>
 8006c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c58:	059a      	lsls	r2, r3, #22
 8006c5a:	d4ef      	bmi.n	8006c3c <__smakebuf_r+0x18>
 8006c5c:	f023 0303 	bic.w	r3, r3, #3
 8006c60:	f043 0302 	orr.w	r3, r3, #2
 8006c64:	81a3      	strh	r3, [r4, #12]
 8006c66:	e7e3      	b.n	8006c30 <__smakebuf_r+0xc>
 8006c68:	4b0d      	ldr	r3, [pc, #52]	; (8006ca0 <__smakebuf_r+0x7c>)
 8006c6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c6c:	89a3      	ldrh	r3, [r4, #12]
 8006c6e:	6020      	str	r0, [r4, #0]
 8006c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c74:	81a3      	strh	r3, [r4, #12]
 8006c76:	9b00      	ldr	r3, [sp, #0]
 8006c78:	6163      	str	r3, [r4, #20]
 8006c7a:	9b01      	ldr	r3, [sp, #4]
 8006c7c:	6120      	str	r0, [r4, #16]
 8006c7e:	b15b      	cbz	r3, 8006c98 <__smakebuf_r+0x74>
 8006c80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c84:	4630      	mov	r0, r6
 8006c86:	f000 f92d 	bl	8006ee4 <_isatty_r>
 8006c8a:	b128      	cbz	r0, 8006c98 <__smakebuf_r+0x74>
 8006c8c:	89a3      	ldrh	r3, [r4, #12]
 8006c8e:	f023 0303 	bic.w	r3, r3, #3
 8006c92:	f043 0301 	orr.w	r3, r3, #1
 8006c96:	81a3      	strh	r3, [r4, #12]
 8006c98:	89a0      	ldrh	r0, [r4, #12]
 8006c9a:	4305      	orrs	r5, r0
 8006c9c:	81a5      	strh	r5, [r4, #12]
 8006c9e:	e7cd      	b.n	8006c3c <__smakebuf_r+0x18>
 8006ca0:	08006a31 	.word	0x08006a31

08006ca4 <memcpy>:
 8006ca4:	440a      	add	r2, r1
 8006ca6:	4291      	cmp	r1, r2
 8006ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cac:	d100      	bne.n	8006cb0 <memcpy+0xc>
 8006cae:	4770      	bx	lr
 8006cb0:	b510      	push	{r4, lr}
 8006cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cba:	4291      	cmp	r1, r2
 8006cbc:	d1f9      	bne.n	8006cb2 <memcpy+0xe>
 8006cbe:	bd10      	pop	{r4, pc}

08006cc0 <memmove>:
 8006cc0:	4288      	cmp	r0, r1
 8006cc2:	b510      	push	{r4, lr}
 8006cc4:	eb01 0402 	add.w	r4, r1, r2
 8006cc8:	d902      	bls.n	8006cd0 <memmove+0x10>
 8006cca:	4284      	cmp	r4, r0
 8006ccc:	4623      	mov	r3, r4
 8006cce:	d807      	bhi.n	8006ce0 <memmove+0x20>
 8006cd0:	1e43      	subs	r3, r0, #1
 8006cd2:	42a1      	cmp	r1, r4
 8006cd4:	d008      	beq.n	8006ce8 <memmove+0x28>
 8006cd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cde:	e7f8      	b.n	8006cd2 <memmove+0x12>
 8006ce0:	4402      	add	r2, r0
 8006ce2:	4601      	mov	r1, r0
 8006ce4:	428a      	cmp	r2, r1
 8006ce6:	d100      	bne.n	8006cea <memmove+0x2a>
 8006ce8:	bd10      	pop	{r4, pc}
 8006cea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cf2:	e7f7      	b.n	8006ce4 <memmove+0x24>

08006cf4 <__malloc_lock>:
 8006cf4:	4801      	ldr	r0, [pc, #4]	; (8006cfc <__malloc_lock+0x8>)
 8006cf6:	f7ff bf6d 	b.w	8006bd4 <__retarget_lock_acquire_recursive>
 8006cfa:	bf00      	nop
 8006cfc:	20000258 	.word	0x20000258

08006d00 <__malloc_unlock>:
 8006d00:	4801      	ldr	r0, [pc, #4]	; (8006d08 <__malloc_unlock+0x8>)
 8006d02:	f7ff bf68 	b.w	8006bd6 <__retarget_lock_release_recursive>
 8006d06:	bf00      	nop
 8006d08:	20000258 	.word	0x20000258

08006d0c <_realloc_r>:
 8006d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d10:	4680      	mov	r8, r0
 8006d12:	4614      	mov	r4, r2
 8006d14:	460e      	mov	r6, r1
 8006d16:	b921      	cbnz	r1, 8006d22 <_realloc_r+0x16>
 8006d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	f7ff b80b 	b.w	8005d38 <_malloc_r>
 8006d22:	b92a      	cbnz	r2, 8006d30 <_realloc_r+0x24>
 8006d24:	f7fe ff9c 	bl	8005c60 <_free_r>
 8006d28:	4625      	mov	r5, r4
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d30:	f000 f8fa 	bl	8006f28 <_malloc_usable_size_r>
 8006d34:	4284      	cmp	r4, r0
 8006d36:	4607      	mov	r7, r0
 8006d38:	d802      	bhi.n	8006d40 <_realloc_r+0x34>
 8006d3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d3e:	d812      	bhi.n	8006d66 <_realloc_r+0x5a>
 8006d40:	4621      	mov	r1, r4
 8006d42:	4640      	mov	r0, r8
 8006d44:	f7fe fff8 	bl	8005d38 <_malloc_r>
 8006d48:	4605      	mov	r5, r0
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	d0ed      	beq.n	8006d2a <_realloc_r+0x1e>
 8006d4e:	42bc      	cmp	r4, r7
 8006d50:	4622      	mov	r2, r4
 8006d52:	4631      	mov	r1, r6
 8006d54:	bf28      	it	cs
 8006d56:	463a      	movcs	r2, r7
 8006d58:	f7ff ffa4 	bl	8006ca4 <memcpy>
 8006d5c:	4631      	mov	r1, r6
 8006d5e:	4640      	mov	r0, r8
 8006d60:	f7fe ff7e 	bl	8005c60 <_free_r>
 8006d64:	e7e1      	b.n	8006d2a <_realloc_r+0x1e>
 8006d66:	4635      	mov	r5, r6
 8006d68:	e7df      	b.n	8006d2a <_realloc_r+0x1e>

08006d6a <_raise_r>:
 8006d6a:	291f      	cmp	r1, #31
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	4604      	mov	r4, r0
 8006d70:	460d      	mov	r5, r1
 8006d72:	d904      	bls.n	8006d7e <_raise_r+0x14>
 8006d74:	2316      	movs	r3, #22
 8006d76:	6003      	str	r3, [r0, #0]
 8006d78:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7c:	bd38      	pop	{r3, r4, r5, pc}
 8006d7e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d80:	b112      	cbz	r2, 8006d88 <_raise_r+0x1e>
 8006d82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d86:	b94b      	cbnz	r3, 8006d9c <_raise_r+0x32>
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f000 f831 	bl	8006df0 <_getpid_r>
 8006d8e:	462a      	mov	r2, r5
 8006d90:	4601      	mov	r1, r0
 8006d92:	4620      	mov	r0, r4
 8006d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d98:	f000 b818 	b.w	8006dcc <_kill_r>
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d00a      	beq.n	8006db6 <_raise_r+0x4c>
 8006da0:	1c59      	adds	r1, r3, #1
 8006da2:	d103      	bne.n	8006dac <_raise_r+0x42>
 8006da4:	2316      	movs	r3, #22
 8006da6:	6003      	str	r3, [r0, #0]
 8006da8:	2001      	movs	r0, #1
 8006daa:	e7e7      	b.n	8006d7c <_raise_r+0x12>
 8006dac:	2400      	movs	r4, #0
 8006dae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006db2:	4628      	mov	r0, r5
 8006db4:	4798      	blx	r3
 8006db6:	2000      	movs	r0, #0
 8006db8:	e7e0      	b.n	8006d7c <_raise_r+0x12>
	...

08006dbc <raise>:
 8006dbc:	4b02      	ldr	r3, [pc, #8]	; (8006dc8 <raise+0xc>)
 8006dbe:	4601      	mov	r1, r0
 8006dc0:	6818      	ldr	r0, [r3, #0]
 8006dc2:	f7ff bfd2 	b.w	8006d6a <_raise_r>
 8006dc6:	bf00      	nop
 8006dc8:	200000a4 	.word	0x200000a4

08006dcc <_kill_r>:
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	4d07      	ldr	r5, [pc, #28]	; (8006dec <_kill_r+0x20>)
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	4608      	mov	r0, r1
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	602b      	str	r3, [r5, #0]
 8006dda:	f7f9 fe3d 	bl	8000a58 <_kill>
 8006dde:	1c43      	adds	r3, r0, #1
 8006de0:	d102      	bne.n	8006de8 <_kill_r+0x1c>
 8006de2:	682b      	ldr	r3, [r5, #0]
 8006de4:	b103      	cbz	r3, 8006de8 <_kill_r+0x1c>
 8006de6:	6023      	str	r3, [r4, #0]
 8006de8:	bd38      	pop	{r3, r4, r5, pc}
 8006dea:	bf00      	nop
 8006dec:	2000025c 	.word	0x2000025c

08006df0 <_getpid_r>:
 8006df0:	f7f9 be2a 	b.w	8000a48 <_getpid>

08006df4 <__sread>:
 8006df4:	b510      	push	{r4, lr}
 8006df6:	460c      	mov	r4, r1
 8006df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dfc:	f000 f89c 	bl	8006f38 <_read_r>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	bfab      	itete	ge
 8006e04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e06:	89a3      	ldrhlt	r3, [r4, #12]
 8006e08:	181b      	addge	r3, r3, r0
 8006e0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e0e:	bfac      	ite	ge
 8006e10:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e12:	81a3      	strhlt	r3, [r4, #12]
 8006e14:	bd10      	pop	{r4, pc}

08006e16 <__swrite>:
 8006e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e1a:	461f      	mov	r7, r3
 8006e1c:	898b      	ldrh	r3, [r1, #12]
 8006e1e:	05db      	lsls	r3, r3, #23
 8006e20:	4605      	mov	r5, r0
 8006e22:	460c      	mov	r4, r1
 8006e24:	4616      	mov	r6, r2
 8006e26:	d505      	bpl.n	8006e34 <__swrite+0x1e>
 8006e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f000 f868 	bl	8006f04 <_lseek_r>
 8006e34:	89a3      	ldrh	r3, [r4, #12]
 8006e36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e3e:	81a3      	strh	r3, [r4, #12]
 8006e40:	4632      	mov	r2, r6
 8006e42:	463b      	mov	r3, r7
 8006e44:	4628      	mov	r0, r5
 8006e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e4a:	f000 b817 	b.w	8006e7c <_write_r>

08006e4e <__sseek>:
 8006e4e:	b510      	push	{r4, lr}
 8006e50:	460c      	mov	r4, r1
 8006e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e56:	f000 f855 	bl	8006f04 <_lseek_r>
 8006e5a:	1c43      	adds	r3, r0, #1
 8006e5c:	89a3      	ldrh	r3, [r4, #12]
 8006e5e:	bf15      	itete	ne
 8006e60:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e6a:	81a3      	strheq	r3, [r4, #12]
 8006e6c:	bf18      	it	ne
 8006e6e:	81a3      	strhne	r3, [r4, #12]
 8006e70:	bd10      	pop	{r4, pc}

08006e72 <__sclose>:
 8006e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e76:	f000 b813 	b.w	8006ea0 <_close_r>
	...

08006e7c <_write_r>:
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	4d07      	ldr	r5, [pc, #28]	; (8006e9c <_write_r+0x20>)
 8006e80:	4604      	mov	r4, r0
 8006e82:	4608      	mov	r0, r1
 8006e84:	4611      	mov	r1, r2
 8006e86:	2200      	movs	r2, #0
 8006e88:	602a      	str	r2, [r5, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f7f9 fe1b 	bl	8000ac6 <_write>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	d102      	bne.n	8006e9a <_write_r+0x1e>
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	b103      	cbz	r3, 8006e9a <_write_r+0x1e>
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}
 8006e9c:	2000025c 	.word	0x2000025c

08006ea0 <_close_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	4d06      	ldr	r5, [pc, #24]	; (8006ebc <_close_r+0x1c>)
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	4608      	mov	r0, r1
 8006eaa:	602b      	str	r3, [r5, #0]
 8006eac:	f7f9 fe27 	bl	8000afe <_close>
 8006eb0:	1c43      	adds	r3, r0, #1
 8006eb2:	d102      	bne.n	8006eba <_close_r+0x1a>
 8006eb4:	682b      	ldr	r3, [r5, #0]
 8006eb6:	b103      	cbz	r3, 8006eba <_close_r+0x1a>
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	bd38      	pop	{r3, r4, r5, pc}
 8006ebc:	2000025c 	.word	0x2000025c

08006ec0 <_fstat_r>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	4d07      	ldr	r5, [pc, #28]	; (8006ee0 <_fstat_r+0x20>)
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	4608      	mov	r0, r1
 8006eca:	4611      	mov	r1, r2
 8006ecc:	602b      	str	r3, [r5, #0]
 8006ece:	f7f9 fe22 	bl	8000b16 <_fstat>
 8006ed2:	1c43      	adds	r3, r0, #1
 8006ed4:	d102      	bne.n	8006edc <_fstat_r+0x1c>
 8006ed6:	682b      	ldr	r3, [r5, #0]
 8006ed8:	b103      	cbz	r3, 8006edc <_fstat_r+0x1c>
 8006eda:	6023      	str	r3, [r4, #0]
 8006edc:	bd38      	pop	{r3, r4, r5, pc}
 8006ede:	bf00      	nop
 8006ee0:	2000025c 	.word	0x2000025c

08006ee4 <_isatty_r>:
 8006ee4:	b538      	push	{r3, r4, r5, lr}
 8006ee6:	4d06      	ldr	r5, [pc, #24]	; (8006f00 <_isatty_r+0x1c>)
 8006ee8:	2300      	movs	r3, #0
 8006eea:	4604      	mov	r4, r0
 8006eec:	4608      	mov	r0, r1
 8006eee:	602b      	str	r3, [r5, #0]
 8006ef0:	f7f9 fe21 	bl	8000b36 <_isatty>
 8006ef4:	1c43      	adds	r3, r0, #1
 8006ef6:	d102      	bne.n	8006efe <_isatty_r+0x1a>
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	b103      	cbz	r3, 8006efe <_isatty_r+0x1a>
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	bd38      	pop	{r3, r4, r5, pc}
 8006f00:	2000025c 	.word	0x2000025c

08006f04 <_lseek_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4d07      	ldr	r5, [pc, #28]	; (8006f24 <_lseek_r+0x20>)
 8006f08:	4604      	mov	r4, r0
 8006f0a:	4608      	mov	r0, r1
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	2200      	movs	r2, #0
 8006f10:	602a      	str	r2, [r5, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	f7f9 fe1a 	bl	8000b4c <_lseek>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	d102      	bne.n	8006f22 <_lseek_r+0x1e>
 8006f1c:	682b      	ldr	r3, [r5, #0]
 8006f1e:	b103      	cbz	r3, 8006f22 <_lseek_r+0x1e>
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	bd38      	pop	{r3, r4, r5, pc}
 8006f24:	2000025c 	.word	0x2000025c

08006f28 <_malloc_usable_size_r>:
 8006f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f2c:	1f18      	subs	r0, r3, #4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bfbc      	itt	lt
 8006f32:	580b      	ldrlt	r3, [r1, r0]
 8006f34:	18c0      	addlt	r0, r0, r3
 8006f36:	4770      	bx	lr

08006f38 <_read_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	4d07      	ldr	r5, [pc, #28]	; (8006f58 <_read_r+0x20>)
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	4608      	mov	r0, r1
 8006f40:	4611      	mov	r1, r2
 8006f42:	2200      	movs	r2, #0
 8006f44:	602a      	str	r2, [r5, #0]
 8006f46:	461a      	mov	r2, r3
 8006f48:	f7f9 fda0 	bl	8000a8c <_read>
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	d102      	bne.n	8006f56 <_read_r+0x1e>
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	b103      	cbz	r3, 8006f56 <_read_r+0x1e>
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	bd38      	pop	{r3, r4, r5, pc}
 8006f58:	2000025c 	.word	0x2000025c

08006f5c <_init>:
 8006f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5e:	bf00      	nop
 8006f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f62:	bc08      	pop	{r3}
 8006f64:	469e      	mov	lr, r3
 8006f66:	4770      	bx	lr

08006f68 <_fini>:
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	bf00      	nop
 8006f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6e:	bc08      	pop	{r3}
 8006f70:	469e      	mov	lr, r3
 8006f72:	4770      	bx	lr
