
tp_actionneur_et_automatique_appliquee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eba0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f0  0800ed80  0800ed80  0001ed80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f670  0800f670  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  0800f670  0800f670  0001f670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f678  0800f678  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f678  0800f678  0001f678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f67c  0800f67c  0001f67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0800f680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000248  0800f8c8  00020248  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  0800f8c8  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c345  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035bc  00000000  00000000  0003c5bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  0003fb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  000411a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a682  00000000  00000000  00042658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae15  00000000  00000000  0006ccda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011404c  00000000  00000000  00087aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019bb3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007634  00000000  00000000  0019bb8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000248 	.word	0x20000248
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ed68 	.word	0x0800ed68

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000024c 	.word	0x2000024c
 800021c:	0800ed68 	.word	0x0800ed68

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9aa 	b.w	8001064 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	468e      	mov	lr, r1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d14d      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da2:	428a      	cmp	r2, r1
 8000da4:	4694      	mov	ip, r2
 8000da6:	d969      	bls.n	8000e7c <__udivmoddi4+0xe8>
 8000da8:	fab2 f282 	clz	r2, r2
 8000dac:	b152      	cbz	r2, 8000dc4 <__udivmoddi4+0x30>
 8000dae:	fa01 f302 	lsl.w	r3, r1, r2
 8000db2:	f1c2 0120 	rsb	r1, r2, #32
 8000db6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000dc2:	4094      	lsls	r4, r2
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	0c21      	lsrs	r1, r4, #16
 8000dca:	fbbe f6f8 	udiv	r6, lr, r8
 8000dce:	fa1f f78c 	uxth.w	r7, ip
 8000dd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dda:	fb06 f107 	mul.w	r1, r6, r7
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dea:	f080 811f 	bcs.w	800102c <__udivmoddi4+0x298>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 811c 	bls.w	800102c <__udivmoddi4+0x298>
 8000df4:	3e02      	subs	r6, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3310 	mls	r3, r8, r0, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb00 f707 	mul.w	r7, r0, r7
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	d90a      	bls.n	8000e26 <__udivmoddi4+0x92>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e18:	f080 810a 	bcs.w	8001030 <__udivmoddi4+0x29c>
 8000e1c:	42a7      	cmp	r7, r4
 8000e1e:	f240 8107 	bls.w	8001030 <__udivmoddi4+0x29c>
 8000e22:	4464      	add	r4, ip
 8000e24:	3802      	subs	r0, #2
 8000e26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2a:	1be4      	subs	r4, r4, r7
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	b11d      	cbz	r5, 8000e38 <__udivmoddi4+0xa4>
 8000e30:	40d4      	lsrs	r4, r2
 8000e32:	2300      	movs	r3, #0
 8000e34:	e9c5 4300 	strd	r4, r3, [r5]
 8000e38:	4631      	mov	r1, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0xc2>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80ef 	beq.w	8001026 <__udivmoddi4+0x292>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x160>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0xd4>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80f9 	bhi.w	800105a <__udivmoddi4+0x2c6>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	469e      	mov	lr, r3
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0e0      	beq.n	8000e38 <__udivmoddi4+0xa4>
 8000e76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e7a:	e7dd      	b.n	8000e38 <__udivmoddi4+0xa4>
 8000e7c:	b902      	cbnz	r2, 8000e80 <__udivmoddi4+0xec>
 8000e7e:	deff      	udf	#255	; 0xff
 8000e80:	fab2 f282 	clz	r2, r2
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	f040 8092 	bne.w	8000fae <__udivmoddi4+0x21a>
 8000e8a:	eba1 010c 	sub.w	r1, r1, ip
 8000e8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	2601      	movs	r6, #1
 8000e98:	0c20      	lsrs	r0, r4, #16
 8000e9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000ea2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea6:	fb0e f003 	mul.w	r0, lr, r3
 8000eaa:	4288      	cmp	r0, r1
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x12c>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x12a>
 8000eb8:	4288      	cmp	r0, r1
 8000eba:	f200 80cb 	bhi.w	8001054 <__udivmoddi4+0x2c0>
 8000ebe:	4643      	mov	r3, r8
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ecc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ed0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed4:	45a6      	cmp	lr, r4
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x156>
 8000ed8:	eb1c 0404 	adds.w	r4, ip, r4
 8000edc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee0:	d202      	bcs.n	8000ee8 <__udivmoddi4+0x154>
 8000ee2:	45a6      	cmp	lr, r4
 8000ee4:	f200 80bb 	bhi.w	800105e <__udivmoddi4+0x2ca>
 8000ee8:	4608      	mov	r0, r1
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ef2:	e79c      	b.n	8000e2e <__udivmoddi4+0x9a>
 8000ef4:	f1c6 0720 	rsb	r7, r6, #32
 8000ef8:	40b3      	lsls	r3, r6
 8000efa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f02:	fa20 f407 	lsr.w	r4, r0, r7
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	431c      	orrs	r4, r3
 8000f0c:	40f9      	lsrs	r1, r7
 8000f0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f12:	fa00 f306 	lsl.w	r3, r0, r6
 8000f16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f1a:	0c20      	lsrs	r0, r4, #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fb09 1118 	mls	r1, r9, r8, r1
 8000f24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f28:	fb08 f00e 	mul.w	r0, r8, lr
 8000f2c:	4288      	cmp	r0, r1
 8000f2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f32:	d90b      	bls.n	8000f4c <__udivmoddi4+0x1b8>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f3c:	f080 8088 	bcs.w	8001050 <__udivmoddi4+0x2bc>
 8000f40:	4288      	cmp	r0, r1
 8000f42:	f240 8085 	bls.w	8001050 <__udivmoddi4+0x2bc>
 8000f46:	f1a8 0802 	sub.w	r8, r8, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1a09      	subs	r1, r1, r0
 8000f4e:	b2a4      	uxth	r4, r4
 8000f50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f54:	fb09 1110 	mls	r1, r9, r0, r1
 8000f58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f60:	458e      	cmp	lr, r1
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x1e2>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f6c:	d26c      	bcs.n	8001048 <__udivmoddi4+0x2b4>
 8000f6e:	458e      	cmp	lr, r1
 8000f70:	d96a      	bls.n	8001048 <__udivmoddi4+0x2b4>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4461      	add	r1, ip
 8000f76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f7e:	eba1 010e 	sub.w	r1, r1, lr
 8000f82:	42a1      	cmp	r1, r4
 8000f84:	46c8      	mov	r8, r9
 8000f86:	46a6      	mov	lr, r4
 8000f88:	d356      	bcc.n	8001038 <__udivmoddi4+0x2a4>
 8000f8a:	d053      	beq.n	8001034 <__udivmoddi4+0x2a0>
 8000f8c:	b15d      	cbz	r5, 8000fa6 <__udivmoddi4+0x212>
 8000f8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f92:	eb61 010e 	sbc.w	r1, r1, lr
 8000f96:	fa01 f707 	lsl.w	r7, r1, r7
 8000f9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f9e:	40f1      	lsrs	r1, r6
 8000fa0:	431f      	orrs	r7, r3
 8000fa2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	4631      	mov	r1, r6
 8000faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fae:	f1c2 0320 	rsb	r3, r2, #32
 8000fb2:	40d8      	lsrs	r0, r3
 8000fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fbc:	4091      	lsls	r1, r2
 8000fbe:	4301      	orrs	r1, r0
 8000fc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc4:	fa1f fe8c 	uxth.w	lr, ip
 8000fc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fcc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fd0:	0c0b      	lsrs	r3, r1, #16
 8000fd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fd6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fda:	429e      	cmp	r6, r3
 8000fdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe0:	d908      	bls.n	8000ff4 <__udivmoddi4+0x260>
 8000fe2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fea:	d22f      	bcs.n	800104c <__udivmoddi4+0x2b8>
 8000fec:	429e      	cmp	r6, r3
 8000fee:	d92d      	bls.n	800104c <__udivmoddi4+0x2b8>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1b9b      	subs	r3, r3, r6
 8000ff6:	b289      	uxth	r1, r1
 8000ff8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ffc:	fb07 3316 	mls	r3, r7, r6, r3
 8001000:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001004:	fb06 f30e 	mul.w	r3, r6, lr
 8001008:	428b      	cmp	r3, r1
 800100a:	d908      	bls.n	800101e <__udivmoddi4+0x28a>
 800100c:	eb1c 0101 	adds.w	r1, ip, r1
 8001010:	f106 38ff 	add.w	r8, r6, #4294967295
 8001014:	d216      	bcs.n	8001044 <__udivmoddi4+0x2b0>
 8001016:	428b      	cmp	r3, r1
 8001018:	d914      	bls.n	8001044 <__udivmoddi4+0x2b0>
 800101a:	3e02      	subs	r6, #2
 800101c:	4461      	add	r1, ip
 800101e:	1ac9      	subs	r1, r1, r3
 8001020:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001024:	e738      	b.n	8000e98 <__udivmoddi4+0x104>
 8001026:	462e      	mov	r6, r5
 8001028:	4628      	mov	r0, r5
 800102a:	e705      	b.n	8000e38 <__udivmoddi4+0xa4>
 800102c:	4606      	mov	r6, r0
 800102e:	e6e3      	b.n	8000df8 <__udivmoddi4+0x64>
 8001030:	4618      	mov	r0, r3
 8001032:	e6f8      	b.n	8000e26 <__udivmoddi4+0x92>
 8001034:	454b      	cmp	r3, r9
 8001036:	d2a9      	bcs.n	8000f8c <__udivmoddi4+0x1f8>
 8001038:	ebb9 0802 	subs.w	r8, r9, r2
 800103c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001040:	3801      	subs	r0, #1
 8001042:	e7a3      	b.n	8000f8c <__udivmoddi4+0x1f8>
 8001044:	4646      	mov	r6, r8
 8001046:	e7ea      	b.n	800101e <__udivmoddi4+0x28a>
 8001048:	4620      	mov	r0, r4
 800104a:	e794      	b.n	8000f76 <__udivmoddi4+0x1e2>
 800104c:	4640      	mov	r0, r8
 800104e:	e7d1      	b.n	8000ff4 <__udivmoddi4+0x260>
 8001050:	46d0      	mov	r8, sl
 8001052:	e77b      	b.n	8000f4c <__udivmoddi4+0x1b8>
 8001054:	3b02      	subs	r3, #2
 8001056:	4461      	add	r1, ip
 8001058:	e732      	b.n	8000ec0 <__udivmoddi4+0x12c>
 800105a:	4630      	mov	r0, r6
 800105c:	e709      	b.n	8000e72 <__udivmoddi4+0xde>
 800105e:	4464      	add	r4, ip
 8001060:	3802      	subs	r0, #2
 8001062:	e742      	b.n	8000eea <__udivmoddi4+0x156>

08001064 <__aeabi_idiv0>:
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08c      	sub	sp, #48	; 0x30
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2220      	movs	r2, #32
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f008 fd55 	bl	8009b30 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001086:	4b33      	ldr	r3, [pc, #204]	; (8001154 <MX_ADC1_Init+0xec>)
 8001088:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800108c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800108e:	4b31      	ldr	r3, [pc, #196]	; (8001154 <MX_ADC1_Init+0xec>)
 8001090:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001094:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001096:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <MX_ADC1_Init+0xec>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800109c:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <MX_ADC1_Init+0xec>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010a2:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <MX_ADC1_Init+0xec>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010a8:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <MX_ADC1_Init+0xec>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ae:	4b29      	ldr	r3, [pc, #164]	; (8001154 <MX_ADC1_Init+0xec>)
 80010b0:	2204      	movs	r2, #4
 80010b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010b4:	4b27      	ldr	r3, [pc, #156]	; (8001154 <MX_ADC1_Init+0xec>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <MX_ADC1_Init+0xec>)
 80010bc:	2200      	movs	r2, #0
 80010be:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <MX_ADC1_Init+0xec>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c6:	4b23      	ldr	r3, [pc, #140]	; (8001154 <MX_ADC1_Init+0xec>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_ADC1_Init+0xec>)
 80010d0:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80010d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_ADC1_Init+0xec>)
 80010d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010dc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_ADC1_Init+0xec>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_ADC1_Init+0xec>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_ADC1_Init+0xec>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f4:	4817      	ldr	r0, [pc, #92]	; (8001154 <MX_ADC1_Init+0xec>)
 80010f6:	f001 fca3 	bl	8002a40 <HAL_ADC_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001100:	f000 fdac 	bl	8001c5c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110c:	4619      	mov	r1, r3
 800110e:	4811      	ldr	r0, [pc, #68]	; (8001154 <MX_ADC1_Init+0xec>)
 8001110:	f002 fc9c 	bl	8003a4c <HAL_ADCEx_MultiModeConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800111a:	f000 fd9f 	bl	8001c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_ADC1_Init+0xf0>)
 8001120:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001122:	2306      	movs	r3, #6
 8001124:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001126:	2305      	movs	r3, #5
 8001128:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800112a:	237f      	movs	r3, #127	; 0x7f
 800112c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800112e:	2304      	movs	r3, #4
 8001130:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_ADC1_Init+0xec>)
 800113c:	f001 ff2a 	bl	8002f94 <HAL_ADC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001146:	f000 fd89 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3730      	adds	r7, #48	; 0x30
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000264 	.word	0x20000264
 8001158:	04300002 	.word	0x04300002

0800115c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b09e      	sub	sp, #120	; 0x78
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	2254      	movs	r2, #84	; 0x54
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f008 fcd7 	bl	8009b30 <memset>
  if(adcHandle->Instance==ADC1)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800118a:	d15f      	bne.n	800124c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800118c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001190:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001192:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001196:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4618      	mov	r0, r3
 800119e:	f004 f945 	bl	800542c <HAL_RCCEx_PeriphCLKConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011a8:	f000 fd58 	bl	8001c5c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b0:	4a28      	ldr	r2, [pc, #160]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b8:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c8:	4a22      	ldr	r2, [pc, #136]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d0:	4b20      	ldr	r3, [pc, #128]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011dc:	2301      	movs	r3, #1
 80011de:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e0:	2303      	movs	r3, #3
 80011e2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f003 f975 	bl	80044e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 80011f8:	4a18      	ldr	r2, [pc, #96]	; (800125c <HAL_ADC_MspInit+0x100>)
 80011fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 80011fe:	2205      	movs	r2, #5
 8001200:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 800121e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001222:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001226:	2220      	movs	r2, #32
 8001228:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001232:	f002 fe23 	bl	8003e7c <HAL_DMA_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800123c:	f000 fd0e 	bl	8001c5c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001244:	655a      	str	r2, [r3, #84]	; 0x54
 8001246:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800124c:	bf00      	nop
 800124e:	3778      	adds	r7, #120	; 0x78
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40021000 	.word	0x40021000
 8001258:	200002d0 	.word	0x200002d0
 800125c:	40020008 	.word	0x40020008

08001260 <chopper_start>:
#include "chopper.h"

void chopper_start(void){
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, SET);
 8001264:	2201      	movs	r2, #1
 8001266:	2101      	movs	r1, #1
 8001268:	480f      	ldr	r0, [pc, #60]	; (80012a8 <chopper_start+0x48>)
 800126a:	f003 fabb 	bl	80047e4 <HAL_GPIO_WritePin>
	HAL_Delay(STARTING_TIME);
 800126e:	2001      	movs	r0, #1
 8001270:	f001 f9a2 	bl	80025b8 <HAL_Delay>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2101      	movs	r1, #1
 8001278:	480b      	ldr	r0, [pc, #44]	; (80012a8 <chopper_start+0x48>)
 800127a:	f003 fab3 	bl	80047e4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800127e:	2100      	movs	r1, #0
 8001280:	480a      	ldr	r0, [pc, #40]	; (80012ac <chopper_start+0x4c>)
 8001282:	f004 fcc3 	bl	8005c0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001286:	2104      	movs	r1, #4
 8001288:	4808      	ldr	r0, [pc, #32]	; (80012ac <chopper_start+0x4c>)
 800128a:	f004 fcbf 	bl	8005c0c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800128e:	2100      	movs	r1, #0
 8001290:	4806      	ldr	r0, [pc, #24]	; (80012ac <chopper_start+0x4c>)
 8001292:	f006 f803 	bl	800729c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001296:	2104      	movs	r1, #4
 8001298:	4804      	ldr	r0, [pc, #16]	; (80012ac <chopper_start+0x4c>)
 800129a:	f005 ffff 	bl	800729c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_Base_Start(&htim1);
 800129e:	4803      	ldr	r0, [pc, #12]	; (80012ac <chopper_start+0x4c>)
 80012a0:	f004 fb6a 	bl	8005978 <HAL_TIM_Base_Start>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	48000800 	.word	0x48000800
 80012ac:	20000398 	.word	0x20000398

080012b0 <chopper_stop>:

void chopper_stop(void){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint16_t) NO_SPEED);
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <chopper_stop+0x3c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f240 326b 	movw	r2, #875	; 0x36b
 80012bc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint16_t) NO_SPEED);
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <chopper_stop+0x3c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f240 326b 	movw	r2, #875	; 0x36b
 80012c6:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80012c8:	2100      	movs	r1, #0
 80012ca:	4808      	ldr	r0, [pc, #32]	; (80012ec <chopper_stop+0x3c>)
 80012cc:	f004 fdb0 	bl	8005e30 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80012d0:	2100      	movs	r1, #0
 80012d2:	4806      	ldr	r0, [pc, #24]	; (80012ec <chopper_stop+0x3c>)
 80012d4:	f006 f8a4 	bl	8007420 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80012d8:	2104      	movs	r1, #4
 80012da:	4804      	ldr	r0, [pc, #16]	; (80012ec <chopper_stop+0x3c>)
 80012dc:	f004 fda8 	bl	8005e30 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80012e0:	2104      	movs	r1, #4
 80012e2:	4802      	ldr	r0, [pc, #8]	; (80012ec <chopper_stop+0x3c>)
 80012e4:	f006 f89c 	bl	8007420 <HAL_TIMEx_PWMN_Stop>

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000398 	.word	0x20000398

080012f0 <chopper_restart>:

void chopper_restart(void){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	chopper_stop();
 80012f4:	f7ff ffdc 	bl	80012b0 <chopper_stop>
	chopper_start();
 80012f8:	f7ff ffb2 	bl	8001260 <chopper_start>
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}

08001300 <chopper_speed>:

int chopper_speed(uint16_t targetSpeed){
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	80fb      	strh	r3, [r7, #6]
	uint16_t currentSpeed = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1);
 800130a:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <chopper_speed+0xb4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001310:	81fb      	strh	r3, [r7, #14]
	uint16_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8001312:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <chopper_speed+0xb4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	81bb      	strh	r3, [r7, #12]
	uint16_t accelStep = 1;
 800131a:	2301      	movs	r3, #1
 800131c:	817b      	strh	r3, [r7, #10]

	if(targetSpeed > MAX_SPEED){
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001324:	4293      	cmp	r3, r2
 8001326:	d902      	bls.n	800132e <chopper_speed+0x2e>
		targetSpeed = MAX_SPEED;
 8001328:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800132c:	80fb      	strh	r3, [r7, #6]
	}
	if(targetSpeed < NO_SPEED){
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	f240 326a 	movw	r2, #874	; 0x36a
 8001334:	4293      	cmp	r3, r2
 8001336:	d802      	bhi.n	800133e <chopper_speed+0x3e>
		targetSpeed = NO_SPEED;
 8001338:	f240 336b 	movw	r3, #875	; 0x36b
 800133c:	80fb      	strh	r3, [r7, #6]
	}

	if(targetSpeed < currentSpeed){
 800133e:	88fa      	ldrh	r2, [r7, #6]
 8001340:	89fb      	ldrh	r3, [r7, #14]
 8001342:	429a      	cmp	r2, r3
 8001344:	d22a      	bcs.n	800139c <chopper_speed+0x9c>
			while(currentSpeed - accelStep > targetSpeed){
 8001346:	e010      	b.n	800136a <chopper_speed+0x6a>
				currentSpeed -= accelStep;
 8001348:	89fa      	ldrh	r2, [r7, #14]
 800134a:	897b      	ldrh	r3, [r7, #10]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	81fb      	strh	r3, [r7, #14]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint16_t) currentSpeed);
 8001350:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <chopper_speed+0xb4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	89fa      	ldrh	r2, [r7, #14]
 8001356:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint16_t) period-currentSpeed);
 8001358:	89ba      	ldrh	r2, [r7, #12]
 800135a:	89fb      	ldrh	r3, [r7, #14]
 800135c:	1ad2      	subs	r2, r2, r3
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <chopper_speed+0xb4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(10);
 8001364:	200a      	movs	r0, #10
 8001366:	f001 f927 	bl	80025b8 <HAL_Delay>
			while(currentSpeed - accelStep > targetSpeed){
 800136a:	89fa      	ldrh	r2, [r7, #14]
 800136c:	897b      	ldrh	r3, [r7, #10]
 800136e:	1ad2      	subs	r2, r2, r3
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	429a      	cmp	r2, r3
 8001374:	dce8      	bgt.n	8001348 <chopper_speed+0x48>
			}
			return 0;
 8001376:	2300      	movs	r3, #0
 8001378:	e017      	b.n	80013aa <chopper_speed+0xaa>
	}else {
		while(currentSpeed + accelStep < targetSpeed){
			currentSpeed += accelStep;
 800137a:	89fa      	ldrh	r2, [r7, #14]
 800137c:	897b      	ldrh	r3, [r7, #10]
 800137e:	4413      	add	r3, r2
 8001380:	81fb      	strh	r3, [r7, #14]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint16_t) currentSpeed);
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <chopper_speed+0xb4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	89fa      	ldrh	r2, [r7, #14]
 8001388:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint16_t) period-currentSpeed);
 800138a:	89ba      	ldrh	r2, [r7, #12]
 800138c:	89fb      	ldrh	r3, [r7, #14]
 800138e:	1ad2      	subs	r2, r2, r3
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <chopper_speed+0xb4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(10);
 8001396:	200a      	movs	r0, #10
 8001398:	f001 f90e 	bl	80025b8 <HAL_Delay>
		while(currentSpeed + accelStep < targetSpeed){
 800139c:	89fa      	ldrh	r2, [r7, #14]
 800139e:	897b      	ldrh	r3, [r7, #10]
 80013a0:	441a      	add	r2, r3
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	dbe8      	blt.n	800137a <chopper_speed+0x7a>
		}
		return 0;
 80013a8:	2300      	movs	r3, #0
	}
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000398 	.word	0x20000398

080013b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <MX_DMA_Init+0x50>)
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	4a11      	ldr	r2, [pc, #68]	; (8001408 <MX_DMA_Init+0x50>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6493      	str	r3, [r2, #72]	; 0x48
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <MX_DMA_Init+0x50>)
 80013cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_DMA_Init+0x50>)
 80013d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <MX_DMA_Init+0x50>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6493      	str	r3, [r2, #72]	; 0x48
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_DMA_Init+0x50>)
 80013e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	200b      	movs	r0, #11
 80013f4:	f002 fd0d 	bl	8003e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013f8:	200b      	movs	r0, #11
 80013fa:	f002 fd24 	bl	8003e46 <HAL_NVIC_EnableIRQ>

}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000

0800140c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	4a32      	ldr	r2, [pc, #200]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <MX_GPIO_Init+0xe4>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	4a2c      	ldr	r2, [pc, #176]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001440:	f043 0320 	orr.w	r3, r3, #32
 8001444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	f003 0320 	and.w	r3, r3, #32
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a26      	ldr	r2, [pc, #152]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2101      	movs	r1, #1
 800146e:	4821      	ldr	r0, [pc, #132]	; (80014f4 <MX_GPIO_Init+0xe8>)
 8001470:	f003 f9b8 	bl	80047e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2120      	movs	r1, #32
 8001478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147c:	f003 f9b2 	bl	80047e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001486:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800148a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	4817      	ldr	r0, [pc, #92]	; (80014f4 <MX_GPIO_Init+0xe8>)
 8001498:	f003 f822 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 800149c:	2301      	movs	r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	4619      	mov	r1, r3
 80014b2:	4810      	ldr	r0, [pc, #64]	; (80014f4 <MX_GPIO_Init+0xe8>)
 80014b4:	f003 f814 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80014b8:	2320      	movs	r3, #32
 80014ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	2301      	movs	r3, #1
 80014be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	4619      	mov	r1, r3
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d2:	f003 f805 	bl	80044e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	2028      	movs	r0, #40	; 0x28
 80014dc:	f002 fc99 	bl	8003e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014e0:	2028      	movs	r0, #40	; 0x28
 80014e2:	f002 fcb0 	bl	8003e46 <HAL_NVIC_EnableIRQ>

}
 80014e6:	bf00      	nop
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	48000800 	.word	0x48000800

080014f8 <serial_transmit>:
 *      Author: lucas
 */

#include <hal_abstraction.h>

int serial_transmit(const uint8_t *pData, uint16_t size, uint32_t timeout){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	460b      	mov	r3, r1
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	817b      	strh	r3, [r7, #10]
	HAL_UART_Transmit(SERIAL_PORT, pData, size, timeout);
 8001506:	897a      	ldrh	r2, [r7, #10]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68f9      	ldr	r1, [r7, #12]
 800150c:	4803      	ldr	r0, [pc, #12]	; (800151c <serial_transmit+0x24>)
 800150e:	f006 f9e8 	bl	80078e2 <HAL_UART_Transmit>

	return 0;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000047c 	.word	0x2000047c

08001520 <serial_receive>:

int serial_receive(uint8_t *pData, uint16_t size, uint32_t timeout){
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	460b      	mov	r3, r1
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	817b      	strh	r3, [r7, #10]
	HAL_UART_Receive(SERIAL_PORT, pData, size, timeout);
 800152e:	897a      	ldrh	r2, [r7, #10]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68f9      	ldr	r1, [r7, #12]
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <serial_receive+0x24>)
 8001536:	f006 fa6a 	bl	8007a0e <HAL_UART_Receive>

	return 0;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	2000047c 	.word	0x2000047c

08001548 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001550:	1d39      	adds	r1, r7, #4
 8001552:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001556:	2201      	movs	r2, #1
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <__io_putchar+0x20>)
 800155a:	f006 f9c2 	bl	80078e2 <HAL_UART_Transmit>
	return ch;
 800155e:	687b      	ldr	r3, [r7, #4]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	2000047c 	.word	0x2000047c
 800156c:	00000000 	.word	0x00000000

08001570 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b0a0      	sub	sp, #128	; 0x80
 8001574:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	shell.serial.transmit = serial_transmit;
 8001576:	4b9e      	ldr	r3, [pc, #632]	; (80017f0 <main+0x280>)
 8001578:	4a9e      	ldr	r2, [pc, #632]	; (80017f4 <main+0x284>)
 800157a:	601a      	str	r2, [r3, #0]
	shell.serial.receive = serial_receive;
 800157c:	4b9c      	ldr	r3, [pc, #624]	; (80017f0 <main+0x280>)
 800157e:	4a9e      	ldr	r2, [pc, #632]	; (80017f8 <main+0x288>)
 8001580:	605a      	str	r2, [r3, #4]


	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	67bb      	str	r3, [r7, #120]	; 0x78
	char*		token;
	int 		newCmdReady = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	673b      	str	r3, [r7, #112]	; 0x70
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800158a:	f000 ffa4 	bl	80024d6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800158e:	f000 fad1 	bl	8001b34 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001592:	f7ff ff3b 	bl	800140c <MX_GPIO_Init>
	MX_DMA_Init();
 8001596:	f7ff ff0f 	bl	80013b8 <MX_DMA_Init>
	MX_TIM1_Init();
 800159a:	f000 fcb1 	bl	8001f00 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 800159e:	f000 fec5 	bl	800232c <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80015a2:	f7ff fd61 	bl	8001068 <MX_ADC1_Init>
	MX_TIM3_Init();
 80015a6:	f000 fd69 	bl	800207c <MX_TIM3_Init>
	MX_TIM4_Init();
 80015aa:	f000 fdbd 	bl	8002128 <MX_TIM4_Init>
  	  MX_USART2_UART_Init();
  	  MX_ADC1_Init();
  	  MX_TIM3_Init();
  	  MX_TIM4_Init();
	 */
	memset(argv,(int) NULL,MAX_ARGS*sizeof(char*));
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	2224      	movs	r2, #36	; 0x24
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f008 faba 	bl	8009b30 <memset>
	memset(cmdBuffer,(int) NULL,CMD_BUFFER_SIZE*sizeof(char));
 80015bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c0:	2240      	movs	r2, #64	; 0x40
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f008 fab3 	bl	8009b30 <memset>
 80015ca:	4b89      	ldr	r3, [pc, #548]	; (80017f0 <main+0x280>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	731a      	strb	r2, [r3, #12]
	memset(shell.uartRxBuffer,(int) NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(shell.uartTxBuffer,(int) NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 80015d0:	2240      	movs	r2, #64	; 0x40
 80015d2:	2100      	movs	r1, #0
 80015d4:	4889      	ldr	r0, [pc, #548]	; (80017fc <main+0x28c>)
 80015d6:	f008 faab 	bl	8009b30 <memset>

	HAL_UART_Receive_IT(&huart2, shell.uartRxBuffer, UART_RX_BUFFER_SIZE);
 80015da:	2201      	movs	r2, #1
 80015dc:	4988      	ldr	r1, [pc, #544]	; (8001800 <main+0x290>)
 80015de:	4889      	ldr	r0, [pc, #548]	; (8001804 <main+0x294>)
 80015e0:	f006 fae8 	bl	8007bb4 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 80015e4:	200a      	movs	r0, #10
 80015e6:	f000 ffe7 	bl	80025b8 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	2266      	movs	r2, #102	; 0x66
 80015f0:	4985      	ldr	r1, [pc, #532]	; (8001808 <main+0x298>)
 80015f2:	4884      	ldr	r0, [pc, #528]	; (8001804 <main+0x294>)
 80015f4:	f006 f975 	bl	80078e2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295
 80015fc:	2218      	movs	r2, #24
 80015fe:	4983      	ldr	r1, [pc, #524]	; (800180c <main+0x29c>)
 8001600:	4880      	ldr	r0, [pc, #512]	; (8001804 <main+0x294>)
 8001602:	f006 f96e 	bl	80078e2 <HAL_UART_Transmit>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&rawCurrent, 1);
 8001606:	2201      	movs	r2, #1
 8001608:	4981      	ldr	r1, [pc, #516]	; (8001810 <main+0x2a0>)
 800160a:	4882      	ldr	r0, [pc, #520]	; (8001814 <main+0x2a4>)
 800160c:	f001 fbda 	bl	8002dc4 <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start(&htim1);
 8001610:	4881      	ldr	r0, [pc, #516]	; (8001818 <main+0x2a8>)
 8001612:	f004 f9b1 	bl	8005978 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 8001616:	4881      	ldr	r0, [pc, #516]	; (800181c <main+0x2ac>)
 8001618:	f004 fa1e 	bl	8005a58 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800161c:	213c      	movs	r1, #60	; 0x3c
 800161e:	4880      	ldr	r0, [pc, #512]	; (8001820 <main+0x2b0>)
 8001620:	f004 fd48 	bl	80060b4 <HAL_TIM_Encoder_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{	// uartRxReceived is set to 1 when a new character is received on uart 1
		if(shell.uartRxReceived){
 8001624:	4b72      	ldr	r3, [pc, #456]	; (80017f0 <main+0x280>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d056      	beq.n	80016da <main+0x16a>
			switch(shell.uartRxBuffer[0]){
 800162c:	4b70      	ldr	r3, [pc, #448]	; (80017f0 <main+0x280>)
 800162e:	7b1b      	ldrb	r3, [r3, #12]
 8001630:	2b0d      	cmp	r3, #13
 8001632:	d002      	beq.n	800163a <main+0xca>
 8001634:	2b7f      	cmp	r3, #127	; 0x7f
 8001636:	d02d      	beq.n	8001694 <main+0x124>
 8001638:	e03c      	b.n	80016b4 <main+0x144>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				shell.serial.transmit((uint8_t*) newline, sizeof(newline), HAL_MAX_DELAY);
 800163a:	4b6d      	ldr	r3, [pc, #436]	; (80017f0 <main+0x280>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f04f 32ff 	mov.w	r2, #4294967295
 8001642:	2103      	movs	r1, #3
 8001644:	4877      	ldr	r0, [pc, #476]	; (8001824 <main+0x2b4>)
 8001646:	4798      	blx	r3
				cmdBuffer[idx_cmd] = '\0';
 8001648:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800164c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800164e:	4413      	add	r3, r2
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
				argc = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	67bb      	str	r3, [r7, #120]	; 0x78
				token = strtok(cmdBuffer, " ");
 8001658:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800165c:	4972      	ldr	r1, [pc, #456]	; (8001828 <main+0x2b8>)
 800165e:	4618      	mov	r0, r3
 8001660:	f009 ffaa 	bl	800b5b8 <strtok>
 8001664:	6778      	str	r0, [r7, #116]	; 0x74
				while(token!=NULL){
 8001666:	e00d      	b.n	8001684 <main+0x114>
					argv[argc++] = token;
 8001668:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	67ba      	str	r2, [r7, #120]	; 0x78
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	3380      	adds	r3, #128	; 0x80
 8001672:	443b      	add	r3, r7
 8001674:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001676:	f843 2c78 	str.w	r2, [r3, #-120]
					token = strtok(NULL, " ");
 800167a:	496b      	ldr	r1, [pc, #428]	; (8001828 <main+0x2b8>)
 800167c:	2000      	movs	r0, #0
 800167e:	f009 ff9b 	bl	800b5b8 <strtok>
 8001682:	6778      	str	r0, [r7, #116]	; 0x74
				while(token!=NULL){
 8001684:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1ee      	bne.n	8001668 <main+0xf8>
				}

				idx_cmd = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	67fb      	str	r3, [r7, #124]	; 0x7c
				newCmdReady = 1;
 800168e:	2301      	movs	r3, #1
 8001690:	673b      	str	r3, [r7, #112]	; 0x70
				break;
 8001692:	e01f      	b.n	80016d4 <main+0x164>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 8001694:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001696:	1e5a      	subs	r2, r3, #1
 8001698:	67fa      	str	r2, [r7, #124]	; 0x7c
 800169a:	3380      	adds	r3, #128	; 0x80
 800169c:	443b      	add	r3, r7
 800169e:	2200      	movs	r2, #0
 80016a0:	f803 2c54 	strb.w	r2, [r3, #-84]
				shell.serial.transmit(shell.uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80016a4:	4b52      	ldr	r3, [pc, #328]	; (80017f0 <main+0x280>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ac:	2101      	movs	r1, #1
 80016ae:	4854      	ldr	r0, [pc, #336]	; (8001800 <main+0x290>)
 80016b0:	4798      	blx	r3
				break;
 80016b2:	e00f      	b.n	80016d4 <main+0x164>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = shell.uartRxBuffer[0];
 80016b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	67fa      	str	r2, [r7, #124]	; 0x7c
 80016ba:	4a4d      	ldr	r2, [pc, #308]	; (80017f0 <main+0x280>)
 80016bc:	7b12      	ldrb	r2, [r2, #12]
 80016be:	3380      	adds	r3, #128	; 0x80
 80016c0:	443b      	add	r3, r7
 80016c2:	f803 2c54 	strb.w	r2, [r3, #-84]
				shell.serial.transmit(shell.uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80016c6:	4b4a      	ldr	r3, [pc, #296]	; (80017f0 <main+0x280>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f04f 32ff 	mov.w	r2, #4294967295
 80016ce:	2101      	movs	r1, #1
 80016d0:	484b      	ldr	r0, [pc, #300]	; (8001800 <main+0x290>)
 80016d2:	4798      	blx	r3
			}
			shell.uartRxReceived = 0;
 80016d4:	4b46      	ldr	r3, [pc, #280]	; (80017f0 <main+0x280>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
		}

		if(newCmdReady){
 80016da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0a1      	beq.n	8001624 <main+0xb4>
			if(strcmp(argv[0],"set")==0){
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4952      	ldr	r1, [pc, #328]	; (800182c <main+0x2bc>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fd9b 	bl	8000220 <strcmp>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d12d      	bne.n	800174c <main+0x1dc>
				if(strcmp(argv[1],"PA5")==0){
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	494f      	ldr	r1, [pc, #316]	; (8001830 <main+0x2c0>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe fd93 	bl	8000220 <strcmp>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d11d      	bne.n	800173c <main+0x1cc>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4618      	mov	r0, r3
 8001704:	f008 f9e6 	bl	8009ad4 <atoi>
 8001708:	4603      	mov	r3, r0
 800170a:	b2db      	uxtb	r3, r3
 800170c:	461a      	mov	r2, r3
 800170e:	2120      	movs	r1, #32
 8001710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001714:	f003 f866 	bl	80047e4 <HAL_GPIO_WritePin>
					sprintf((char*) &(shell.uartTxBuffer),"Switch on/off led : %d\r\n",atoi(argv[2]));
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4618      	mov	r0, r3
 800171c:	f008 f9da 	bl	8009ad4 <atoi>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	4943      	ldr	r1, [pc, #268]	; (8001834 <main+0x2c4>)
 8001726:	4835      	ldr	r0, [pc, #212]	; (80017fc <main+0x28c>)
 8001728:	f009 f88a 	bl	800a840 <siprintf>
					shell.serial.transmit(shell.uartTxBuffer, 32, HAL_MAX_DELAY);
 800172c:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <main+0x280>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f04f 32ff 	mov.w	r2, #4294967295
 8001734:	2120      	movs	r1, #32
 8001736:	4831      	ldr	r0, [pc, #196]	; (80017fc <main+0x28c>)
 8001738:	4798      	blx	r3
 800173a:	e1b4      	b.n	8001aa6 <main+0x536>
				}
				else{
					shell.serial.transmit((uint8_t*)cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800173c:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <main+0x280>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	2114      	movs	r1, #20
 8001746:	483c      	ldr	r0, [pc, #240]	; (8001838 <main+0x2c8>)
 8001748:	4798      	blx	r3
 800174a:	e1ac      	b.n	8001aa6 <main+0x536>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	493b      	ldr	r1, [pc, #236]	; (800183c <main+0x2cc>)
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fd65 	bl	8000220 <strcmp>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	f040 80d0 	bne.w	80018fe <main+0x38e>
			{
				if(strcmp(argv[1],"current")==0){
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4937      	ldr	r1, [pc, #220]	; (8001840 <main+0x2d0>)
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fd5c 	bl	8000220 <strcmp>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d172      	bne.n	8001854 <main+0x2e4>
					current = (float)rawCurrent[0]*CURRENT_CONVERSION_FACTOR - CURRENT_OFFSET;
 800176e:	4b28      	ldr	r3, [pc, #160]	; (8001810 <main+0x2a0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	ee07 3a90 	vmov	s15, r3
 8001776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800177a:	ee17 0a90 	vmov	r0, s15
 800177e:	f7fe ff1b 	bl	80005b8 <__aeabi_f2d>
 8001782:	a319      	add	r3, pc, #100	; (adr r3, 80017e8 <main+0x278>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7fe ff6e 	bl	8000668 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <main+0x2d4>)
 800179a:	f7fe ff65 	bl	8000668 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	4b27      	ldr	r3, [pc, #156]	; (8001848 <main+0x2d8>)
 80017ac:	f7fe fda4 	bl	80002f8 <__aeabi_dsub>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff fa4e 	bl	8000c58 <__aeabi_d2f>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a23      	ldr	r2, [pc, #140]	; (800184c <main+0x2dc>)
 80017c0:	6013      	str	r3, [r2, #0]
					//current+=0.36;

					sprintf((char*) &(shell.uartTxBuffer), "current : %.2f A \r\n", current);
 80017c2:	4b22      	ldr	r3, [pc, #136]	; (800184c <main+0x2dc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fef6 	bl	80005b8 <__aeabi_f2d>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	491f      	ldr	r1, [pc, #124]	; (8001850 <main+0x2e0>)
 80017d2:	480a      	ldr	r0, [pc, #40]	; (80017fc <main+0x28c>)
 80017d4:	f009 f834 	bl	800a840 <siprintf>
					shell.serial.transmit(shell.uartTxBuffer, 32, HAL_MAX_DELAY);
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <main+0x280>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	2120      	movs	r1, #32
 80017e2:	4806      	ldr	r0, [pc, #24]	; (80017fc <main+0x28c>)
 80017e4:	4798      	blx	r3
 80017e6:	e15e      	b.n	8001aa6 <main+0x536>
 80017e8:	66666666 	.word	0x66666666
 80017ec:	3f4a6666 	.word	0x3f4a6666
 80017f0:	20000330 	.word	0x20000330
 80017f4:	080014f9 	.word	0x080014f9
 80017f8:	08001521 	.word	0x08001521
 80017fc:	2000033d 	.word	0x2000033d
 8001800:	2000033c 	.word	0x2000033c
 8001804:	2000047c 	.word	0x2000047c
 8001808:	20000000 	.word	0x20000000
 800180c:	0800ee34 	.word	0x0800ee34
 8001810:	20000380 	.word	0x20000380
 8001814:	20000264 	.word	0x20000264
 8001818:	20000398 	.word	0x20000398
 800181c:	20000430 	.word	0x20000430
 8001820:	200003e4 	.word	0x200003e4
 8001824:	0800ee4c 	.word	0x0800ee4c
 8001828:	0800ed80 	.word	0x0800ed80
 800182c:	0800ed84 	.word	0x0800ed84
 8001830:	0800ed88 	.word	0x0800ed88
 8001834:	0800ed8c 	.word	0x0800ed8c
 8001838:	0800ee50 	.word	0x0800ee50
 800183c:	0800eda8 	.word	0x0800eda8
 8001840:	0800edac 	.word	0x0800edac
 8001844:	40280000 	.word	0x40280000
 8001848:	403e0000 	.word	0x403e0000
 800184c:	20000384 	.word	0x20000384
 8001850:	0800edb4 	.word	0x0800edb4
				}else if(strcmp(argv[1],"speed")==0){
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4999      	ldr	r1, [pc, #612]	; (8001abc <main+0x54c>)
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fce1 	bl	8000220 <strcmp>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d134      	bne.n	80018ce <main+0x35e>
					float speed = diff/TICK_PER_ROTATION * MS_TO_MIN;
 8001864:	4b96      	ldr	r3, [pc, #600]	; (8001ac0 <main+0x550>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe83 	bl	8000574 <__aeabi_ui2d>
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	4b94      	ldr	r3, [pc, #592]	; (8001ac4 <main+0x554>)
 8001874:	f7ff f822 	bl	80008bc <__aeabi_ddiv>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	4b90      	ldr	r3, [pc, #576]	; (8001ac8 <main+0x558>)
 8001886:	f7fe feef 	bl	8000668 <__aeabi_dmul>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	4b8d      	ldr	r3, [pc, #564]	; (8001acc <main+0x55c>)
 8001898:	f7fe fee6 	bl	8000668 <__aeabi_dmul>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	f7ff f9d8 	bl	8000c58 <__aeabi_d2f>
 80018a8:	4603      	mov	r3, r0
 80018aa:	66fb      	str	r3, [r7, #108]	; 0x6c
					sprintf((char*) &(shell.uartTxBuffer), "speed : %.0f rpm\r\n", speed);
 80018ac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80018ae:	f7fe fe83 	bl	80005b8 <__aeabi_f2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4986      	ldr	r1, [pc, #536]	; (8001ad0 <main+0x560>)
 80018b8:	4886      	ldr	r0, [pc, #536]	; (8001ad4 <main+0x564>)
 80018ba:	f008 ffc1 	bl	800a840 <siprintf>
					shell.serial.transmit(shell.uartTxBuffer, 32, HAL_MAX_DELAY);
 80018be:	4b86      	ldr	r3, [pc, #536]	; (8001ad8 <main+0x568>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f04f 32ff 	mov.w	r2, #4294967295
 80018c6:	2120      	movs	r1, #32
 80018c8:	4882      	ldr	r0, [pc, #520]	; (8001ad4 <main+0x564>)
 80018ca:	4798      	blx	r3
 80018cc:	e0eb      	b.n	8001aa6 <main+0x536>
				}else if(strcmp(argv[1], "diff") == 0){
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4982      	ldr	r1, [pc, #520]	; (8001adc <main+0x56c>)
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fca4 	bl	8000220 <strcmp>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f040 80e3 	bne.w	8001aa6 <main+0x536>
					sprintf((char*) &(shell.uartTxBuffer), "diff : %ld\r\n", diff);
 80018e0:	4b77      	ldr	r3, [pc, #476]	; (8001ac0 <main+0x550>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	497e      	ldr	r1, [pc, #504]	; (8001ae0 <main+0x570>)
 80018e8:	487a      	ldr	r0, [pc, #488]	; (8001ad4 <main+0x564>)
 80018ea:	f008 ffa9 	bl	800a840 <siprintf>
					shell.serial.transmit(shell.uartTxBuffer, 32, HAL_MAX_DELAY);
 80018ee:	4b7a      	ldr	r3, [pc, #488]	; (8001ad8 <main+0x568>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f04f 32ff 	mov.w	r2, #4294967295
 80018f6:	2120      	movs	r1, #32
 80018f8:	4876      	ldr	r0, [pc, #472]	; (8001ad4 <main+0x564>)
 80018fa:	4798      	blx	r3
 80018fc:	e0d3      	b.n	8001aa6 <main+0x536>
				}
			}
			else if(strcmp(argv[0],"start")==0) {
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	4978      	ldr	r1, [pc, #480]	; (8001ae4 <main+0x574>)
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fc8c 	bl	8000220 <strcmp>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <main+0x3b2>
				chopper_start();
 800190e:	f7ff fca7 	bl	8001260 <chopper_start>

				shell.serial.transmit((uint8_t*)startmsg, sizeof(startmsg), HAL_MAX_DELAY);
 8001912:	4b71      	ldr	r3, [pc, #452]	; (8001ad8 <main+0x568>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f04f 32ff 	mov.w	r2, #4294967295
 800191a:	210b      	movs	r1, #11
 800191c:	4872      	ldr	r0, [pc, #456]	; (8001ae8 <main+0x578>)
 800191e:	4798      	blx	r3
 8001920:	e0c1      	b.n	8001aa6 <main+0x536>
			}
			else if(strcmp(argv[0],"stop")==0) {
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	4971      	ldr	r1, [pc, #452]	; (8001aec <main+0x57c>)
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fc7a 	bl	8000220 <strcmp>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d109      	bne.n	8001946 <main+0x3d6>
				chopper_stop();
 8001932:	f7ff fcbd 	bl	80012b0 <chopper_stop>

				shell.serial.transmit((uint8_t*)stopmsg, sizeof(stopmsg), HAL_MAX_DELAY);
 8001936:	4b68      	ldr	r3, [pc, #416]	; (8001ad8 <main+0x568>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f04f 32ff 	mov.w	r2, #4294967295
 800193e:	210c      	movs	r1, #12
 8001940:	486b      	ldr	r0, [pc, #428]	; (8001af0 <main+0x580>)
 8001942:	4798      	blx	r3
 8001944:	e0af      	b.n	8001aa6 <main+0x536>
			}
			else if(strcmp(argv[0],"restart")==0) {
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	496a      	ldr	r1, [pc, #424]	; (8001af4 <main+0x584>)
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fc68 	bl	8000220 <strcmp>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <main+0x3fa>
				chopper_restart();
 8001956:	f7ff fccb 	bl	80012f0 <chopper_restart>
				shell.serial.transmit((uint8_t*)&restartmsg, sizeof(restartmsg), HAL_MAX_DELAY);
 800195a:	4b5f      	ldr	r3, [pc, #380]	; (8001ad8 <main+0x568>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f04f 32ff 	mov.w	r2, #4294967295
 8001962:	211a      	movs	r1, #26
 8001964:	4864      	ldr	r0, [pc, #400]	; (8001af8 <main+0x588>)
 8001966:	4798      	blx	r3
 8001968:	e09d      	b.n	8001aa6 <main+0x536>
			}
			else if(strcmp(argv[0],"help")==0)
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	4963      	ldr	r1, [pc, #396]	; (8001afc <main+0x58c>)
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fc56 	bl	8000220 <strcmp>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d167      	bne.n	8001a4a <main+0x4da>
			{
				if(strcmp(argv[1], "set")==0){
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4960      	ldr	r1, [pc, #384]	; (8001b00 <main+0x590>)
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fc4e 	bl	8000220 <strcmp>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d107      	bne.n	800199a <main+0x42a>
					shell.serial.transmit((uint8_t*)&help[0], sizeof(help[0]), HAL_MAX_DELAY);
 800198a:	4b53      	ldr	r3, [pc, #332]	; (8001ad8 <main+0x568>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f04f 32ff 	mov.w	r2, #4294967295
 8001992:	2120      	movs	r1, #32
 8001994:	485b      	ldr	r0, [pc, #364]	; (8001b04 <main+0x594>)
 8001996:	4798      	blx	r3
 8001998:	e085      	b.n	8001aa6 <main+0x536>
				}
				else if(strcmp(argv[1], "get")==0){
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	495a      	ldr	r1, [pc, #360]	; (8001b08 <main+0x598>)
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fc3e 	bl	8000220 <strcmp>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d107      	bne.n	80019ba <main+0x44a>
					shell.serial.transmit((uint8_t*)&help[1], sizeof(help[1]), HAL_MAX_DELAY);
 80019aa:	4b4b      	ldr	r3, [pc, #300]	; (8001ad8 <main+0x568>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f04f 32ff 	mov.w	r2, #4294967295
 80019b2:	2120      	movs	r1, #32
 80019b4:	4855      	ldr	r0, [pc, #340]	; (8001b0c <main+0x59c>)
 80019b6:	4798      	blx	r3
 80019b8:	e075      	b.n	8001aa6 <main+0x536>
				}
				else if(strcmp(argv[1], "start")==0){
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4949      	ldr	r1, [pc, #292]	; (8001ae4 <main+0x574>)
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fc2e 	bl	8000220 <strcmp>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d107      	bne.n	80019da <main+0x46a>
					shell.serial.transmit((uint8_t*)&help[2], sizeof(help[2]), HAL_MAX_DELAY);
 80019ca:	4b43      	ldr	r3, [pc, #268]	; (8001ad8 <main+0x568>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f04f 32ff 	mov.w	r2, #4294967295
 80019d2:	2120      	movs	r1, #32
 80019d4:	484e      	ldr	r0, [pc, #312]	; (8001b10 <main+0x5a0>)
 80019d6:	4798      	blx	r3
 80019d8:	e065      	b.n	8001aa6 <main+0x536>
				}
				else if(strcmp(argv[1], "stop")==0){
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	4943      	ldr	r1, [pc, #268]	; (8001aec <main+0x57c>)
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fc1e 	bl	8000220 <strcmp>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d107      	bne.n	80019fa <main+0x48a>
					shell.serial.transmit((uint8_t*)&help[3], sizeof(help[3]), HAL_MAX_DELAY);
 80019ea:	4b3b      	ldr	r3, [pc, #236]	; (8001ad8 <main+0x568>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f04f 32ff 	mov.w	r2, #4294967295
 80019f2:	2120      	movs	r1, #32
 80019f4:	4847      	ldr	r0, [pc, #284]	; (8001b14 <main+0x5a4>)
 80019f6:	4798      	blx	r3
 80019f8:	e055      	b.n	8001aa6 <main+0x536>
				}
				else if(strcmp(argv[1], "pinout")==0){
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4946      	ldr	r1, [pc, #280]	; (8001b18 <main+0x5a8>)
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fc0e 	bl	8000220 <strcmp>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d107      	bne.n	8001a1a <main+0x4aa>

					shell.serial.transmit((uint8_t*)&help[4], sizeof(help[4]), HAL_MAX_DELAY);
 8001a0a:	4b33      	ldr	r3, [pc, #204]	; (8001ad8 <main+0x568>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a12:	2120      	movs	r1, #32
 8001a14:	4841      	ldr	r0, [pc, #260]	; (8001b1c <main+0x5ac>)
 8001a16:	4798      	blx	r3
 8001a18:	e045      	b.n	8001aa6 <main+0x536>
				}
				else if(strcmp(argv[1], "restart")==0){
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4935      	ldr	r1, [pc, #212]	; (8001af4 <main+0x584>)
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fbfe 	bl	8000220 <strcmp>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d107      	bne.n	8001a3a <main+0x4ca>
					shell.serial.transmit((uint8_t*)&help[5], sizeof(help[5]), HAL_MAX_DELAY);
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <main+0x568>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a32:	2120      	movs	r1, #32
 8001a34:	483a      	ldr	r0, [pc, #232]	; (8001b20 <main+0x5b0>)
 8001a36:	4798      	blx	r3
 8001a38:	e035      	b.n	8001aa6 <main+0x536>
				}
				else{
					shell.serial.transmit((uint8_t*)&help, sizeof(help), HAL_MAX_DELAY);
 8001a3a:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <main+0x568>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a42:	21c0      	movs	r1, #192	; 0xc0
 8001a44:	482f      	ldr	r0, [pc, #188]	; (8001b04 <main+0x594>)
 8001a46:	4798      	blx	r3
 8001a48:	e02d      	b.n	8001aa6 <main+0x536>
				}
			}
			else if(strcmp(argv[0],"pinout")==0) {
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	4932      	ldr	r1, [pc, #200]	; (8001b18 <main+0x5a8>)
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fbe6 	bl	8000220 <strcmp>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d108      	bne.n	8001a6c <main+0x4fc>
				shell.serial.transmit((uint8_t*)&pinoutmsg, sizeof(pinoutmsg), HAL_MAX_DELAY);
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <main+0x568>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a62:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001a66:	482f      	ldr	r0, [pc, #188]	; (8001b24 <main+0x5b4>)
 8001a68:	4798      	blx	r3
 8001a6a:	e01c      	b.n	8001aa6 <main+0x536>
			}
			else if(strcmp(argv[0],"speed")==0) {
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4913      	ldr	r1, [pc, #76]	; (8001abc <main+0x54c>)
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fbd5 	bl	8000220 <strcmp>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10d      	bne.n	8001a98 <main+0x528>
				if(argv[1] != NULL){
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d011      	beq.n	8001aa6 <main+0x536>
					uint16_t speed;
					sscanf(argv[1], "%hd", &speed);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1dba      	adds	r2, r7, #6
 8001a86:	4928      	ldr	r1, [pc, #160]	; (8001b28 <main+0x5b8>)
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f008 fef9 	bl	800a880 <siscanf>
					chopper_speed(speed);
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fc35 	bl	8001300 <chopper_speed>
 8001a96:	e006      	b.n	8001aa6 <main+0x536>
				}
			}
			else{
				shell.serial.transmit((uint8_t*)cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <main+0x568>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa0:	2114      	movs	r1, #20
 8001aa2:	4822      	ldr	r0, [pc, #136]	; (8001b2c <main+0x5bc>)
 8001aa4:	4798      	blx	r3
			}
			shell.serial.transmit((uint8_t*)prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <main+0x568>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8001aae:	2118      	movs	r1, #24
 8001ab0:	481f      	ldr	r0, [pc, #124]	; (8001b30 <main+0x5c0>)
 8001ab2:	4798      	blx	r3
			newCmdReady = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	673b      	str	r3, [r7, #112]	; 0x70
		if(shell.uartRxReceived){
 8001ab8:	e5b4      	b.n	8001624 <main+0xb4>
 8001aba:	bf00      	nop
 8001abc:	0800edc8 	.word	0x0800edc8
 8001ac0:	20000390 	.word	0x20000390
 8001ac4:	40b00000 	.word	0x40b00000
 8001ac8:	408f4000 	.word	0x408f4000
 8001acc:	404e0000 	.word	0x404e0000
 8001ad0:	0800edd0 	.word	0x0800edd0
 8001ad4:	2000033d 	.word	0x2000033d
 8001ad8:	20000330 	.word	0x20000330
 8001adc:	0800ede4 	.word	0x0800ede4
 8001ae0:	0800edec 	.word	0x0800edec
 8001ae4:	0800edfc 	.word	0x0800edfc
 8001ae8:	0800ee64 	.word	0x0800ee64
 8001aec:	0800ee04 	.word	0x0800ee04
 8001af0:	0800ee70 	.word	0x0800ee70
 8001af4:	0800ee0c 	.word	0x0800ee0c
 8001af8:	0800ee7c 	.word	0x0800ee7c
 8001afc:	0800ee14 	.word	0x0800ee14
 8001b00:	0800ed84 	.word	0x0800ed84
 8001b04:	0800ee98 	.word	0x0800ee98
 8001b08:	0800eda8 	.word	0x0800eda8
 8001b0c:	0800eeb8 	.word	0x0800eeb8
 8001b10:	0800eed8 	.word	0x0800eed8
 8001b14:	0800eef8 	.word	0x0800eef8
 8001b18:	0800ee1c 	.word	0x0800ee1c
 8001b1c:	0800ef18 	.word	0x0800ef18
 8001b20:	0800ef38 	.word	0x0800ef38
 8001b24:	0800ef58 	.word	0x0800ef58
 8001b28:	0800ee24 	.word	0x0800ee24
 8001b2c:	0800ee50 	.word	0x0800ee50
 8001b30:	0800ee34 	.word	0x0800ee34

08001b34 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b094      	sub	sp, #80	; 0x50
 8001b38:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b3a:	f107 0318 	add.w	r3, r7, #24
 8001b3e:	2238      	movs	r2, #56	; 0x38
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f007 fff4 	bl	8009b30 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
 8001b54:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001b56:	2000      	movs	r0, #0
 8001b58:	f002 fe80 	bl	800485c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b66:	2340      	movs	r3, #64	; 0x40
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001b72:	2304      	movs	r3, #4
 8001b74:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001b76:	2355      	movs	r3, #85	; 0x55
 8001b78:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b82:	2302      	movs	r3, #2
 8001b84:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b86:	f107 0318 	add.w	r3, r7, #24
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 ff1a 	bl	80049c4 <HAL_RCC_OscConfig>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001b96:	f000 f861 	bl	8001c5c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b9a:	230f      	movs	r3, #15
 8001b9c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2104      	movs	r1, #4
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 fa1e 	bl	8004ff4 <HAL_RCC_ClockConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8001bbe:	f000 f84d 	bl	8001c5c <Error_Handler>
	}
}
 8001bc2:	bf00      	nop
 8001bc4:	3750      	adds	r7, #80	; 0x50
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	shell.uartRxReceived = 1;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_UART_RxCpltCallback+0x20>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	609a      	str	r2, [r3, #8]
	HAL_UART_Receive_IT(&huart2, shell.uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4904      	ldr	r1, [pc, #16]	; (8001bf0 <HAL_UART_RxCpltCallback+0x24>)
 8001bde:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <HAL_UART_RxCpltCallback+0x28>)
 8001be0:	f005 ffe8 	bl	8007bb4 <HAL_UART_Receive_IT>
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000330 	.word	0x20000330
 8001bf0:	2000033c 	.word	0x2000033c
 8001bf4:	2000047c 	.word	0x2000047c

08001bf8 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d10e      	bne.n	8001c3c <HAL_TIM_PeriodElapsedCallback+0x30>
		previousCNT = currentCNT;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001c24:	6013      	str	r3, [r2, #0]
		currentCNT = TIM3->CNT;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	4a08      	ldr	r2, [pc, #32]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c2c:	6013      	str	r3, [r2, #0]
		diff = -(currentCNT-previousCNT);
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001c3a:	6013      	str	r3, [r2, #0]
	}
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40000800 	.word	0x40000800
 8001c4c:	20000388 	.word	0x20000388
 8001c50:	2000038c 	.word	0x2000038c
 8001c54:	40000400 	.word	0x40000400
 8001c58:	20000390 	.word	0x20000390

08001c5c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c60:	b672      	cpsid	i
}
 8001c62:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001c64:	e7fe      	b.n	8001c64 <Error_Handler+0x8>
	...

08001c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <HAL_MspInit+0x44>)
 8001c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c72:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <HAL_MspInit+0x44>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6613      	str	r3, [r2, #96]	; 0x60
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_MspInit+0x44>)
 8001c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_MspInit+0x44>)
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	4a08      	ldr	r2, [pc, #32]	; (8001cac <HAL_MspInit+0x44>)
 8001c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c90:	6593      	str	r3, [r2, #88]	; 0x58
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_MspInit+0x44>)
 8001c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c9e:	f002 fe81 	bl	80049a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000

08001cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <NMI_Handler+0x4>

08001cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <HardFault_Handler+0x4>

08001cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <MemManage_Handler+0x4>

08001cc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <BusFault_Handler+0x4>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <UsageFault_Handler+0x4>

08001cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cfc:	f000 fc3e 	bl	800257c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <DMA1_Channel1_IRQHandler+0x10>)
 8001d0a:	f002 fa9a 	bl	8004242 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200002d0 	.word	0x200002d0

08001d18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <TIM4_IRQHandler+0x10>)
 8001d1e:	f004 fa57 	bl	80061d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  /* USER CODE END TIM4_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000430 	.word	0x20000430

08001d2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <USART2_IRQHandler+0x10>)
 8001d32:	f005 ff95 	bl	8007c60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	2000047c 	.word	0x2000047c

08001d40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001d44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d48:	f002 fd64 	bl	8004814 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
	return 1;
 8001d54:	2301      	movs	r3, #1
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <_kill>:

int _kill(int pid, int sig)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d6a:	f007 feb7 	bl	8009adc <__errno>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2216      	movs	r2, #22
 8001d72:	601a      	str	r2, [r3, #0]
	return -1;
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <_exit>:

void _exit (int status)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d88:	f04f 31ff 	mov.w	r1, #4294967295
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ffe7 	bl	8001d60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d92:	e7fe      	b.n	8001d92 <_exit+0x12>

08001d94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	e00a      	b.n	8001dbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001da6:	f3af 8000 	nop.w
 8001daa:	4601      	mov	r1, r0
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	60ba      	str	r2, [r7, #8]
 8001db2:	b2ca      	uxtb	r2, r1
 8001db4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3301      	adds	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	dbf0      	blt.n	8001da6 <_read+0x12>
	}

return len;
 8001dc4:	687b      	ldr	r3, [r7, #4]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	e009      	b.n	8001df4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	60ba      	str	r2, [r7, #8]
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fbad 	bl	8001548 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	3301      	adds	r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	dbf1      	blt.n	8001de0 <_write+0x12>
	}
	return len;
 8001dfc:	687b      	ldr	r3, [r7, #4]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <_close>:

int _close(int file)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
	return -1;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e2e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <_isatty>:

int _isatty(int file)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
	return 1;
 8001e46:	2301      	movs	r3, #1
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
	return 0;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e78:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <_sbrk+0x5c>)
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <_sbrk+0x60>)
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <_sbrk+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d102      	bne.n	8001e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <_sbrk+0x64>)
 8001e8e:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <_sbrk+0x68>)
 8001e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <_sbrk+0x64>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d207      	bcs.n	8001eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea0:	f007 fe1c 	bl	8009adc <__errno>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	e009      	b.n	8001ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <_sbrk+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <_sbrk+0x64>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <_sbrk+0x64>)
 8001ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20020000 	.word	0x20020000
 8001ed0:	00000400 	.word	0x00000400
 8001ed4:	20000394 	.word	0x20000394
 8001ed8:	20000520 	.word	0x20000520

08001edc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <SystemInit+0x20>)
 8001ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee6:	4a05      	ldr	r2, [pc, #20]	; (8001efc <SystemInit+0x20>)
 8001ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b09c      	sub	sp, #112	; 0x70
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f06:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
 8001f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
 8001f30:	615a      	str	r2, [r3, #20]
 8001f32:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	2234      	movs	r2, #52	; 0x34
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f007 fdf8 	bl	8009b30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f40:	4b4c      	ldr	r3, [pc, #304]	; (8002074 <MX_TIM1_Init+0x174>)
 8001f42:	4a4d      	ldr	r2, [pc, #308]	; (8002078 <MX_TIM1_Init+0x178>)
 8001f44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3-1;
 8001f46:	4b4b      	ldr	r3, [pc, #300]	; (8002074 <MX_TIM1_Init+0x174>)
 8001f48:	2202      	movs	r2, #2
 8001f4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001f4c:	4b49      	ldr	r3, [pc, #292]	; (8002074 <MX_TIM1_Init+0x174>)
 8001f4e:	2220      	movs	r2, #32
 8001f50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1749;
 8001f52:	4b48      	ldr	r3, [pc, #288]	; (8002074 <MX_TIM1_Init+0x174>)
 8001f54:	f240 62d5 	movw	r2, #1749	; 0x6d5
 8001f58:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5a:	4b46      	ldr	r3, [pc, #280]	; (8002074 <MX_TIM1_Init+0x174>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f60:	4b44      	ldr	r3, [pc, #272]	; (8002074 <MX_TIM1_Init+0x174>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f66:	4b43      	ldr	r3, [pc, #268]	; (8002074 <MX_TIM1_Init+0x174>)
 8001f68:	2280      	movs	r2, #128	; 0x80
 8001f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f6c:	4841      	ldr	r0, [pc, #260]	; (8002074 <MX_TIM1_Init+0x174>)
 8001f6e:	f003 fcab 	bl	80058c8 <HAL_TIM_Base_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001f78:	f7ff fe70 	bl	8001c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f80:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f82:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f86:	4619      	mov	r1, r3
 8001f88:	483a      	ldr	r0, [pc, #232]	; (8002074 <MX_TIM1_Init+0x174>)
 8001f8a:	f004 fbb5 	bl	80066f8 <HAL_TIM_ConfigClockSource>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001f94:	f7ff fe62 	bl	8001c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f98:	4836      	ldr	r0, [pc, #216]	; (8002074 <MX_TIM1_Init+0x174>)
 8001f9a:	f003 fdd5 	bl	8005b48 <HAL_TIM_PWM_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001fa4:	f7ff fe5a 	bl	8001c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fa8:	2320      	movs	r3, #32
 8001faa:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fac:	2300      	movs	r3, #0
 8001fae:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fb8:	4619      	mov	r1, r3
 8001fba:	482e      	ldr	r0, [pc, #184]	; (8002074 <MX_TIM1_Init+0x174>)
 8001fbc:	f005 fa8e 	bl	80074dc <HAL_TIMEx_MasterConfigSynchronization>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001fc6:	f7ff fe49 	bl	8001c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fca:	2360      	movs	r3, #96	; 0x60
 8001fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 875;
 8001fce:	f240 336b 	movw	r3, #875	; 0x36b
 8001fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fe8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fec:	2200      	movs	r2, #0
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4820      	ldr	r0, [pc, #128]	; (8002074 <MX_TIM1_Init+0x174>)
 8001ff2:	f004 fa6d 	bl	80064d0 <HAL_TIM_PWM_ConfigChannel>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001ffc:	f7ff fe2e 	bl	8001c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002000:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002004:	2204      	movs	r2, #4
 8002006:	4619      	mov	r1, r3
 8002008:	481a      	ldr	r0, [pc, #104]	; (8002074 <MX_TIM1_Init+0x174>)
 800200a:	f004 fa61 	bl	80064d0 <HAL_TIM_PWM_ConfigChannel>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002014:	f7ff fe22 	bl	8001c5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 203;
 8002024:	23cb      	movs	r3, #203	; 0xcb
 8002026:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800202c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002030:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002036:	2300      	movs	r3, #0
 8002038:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800203e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002042:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002048:	2300      	movs	r3, #0
 800204a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	4619      	mov	r1, r3
 8002054:	4807      	ldr	r0, [pc, #28]	; (8002074 <MX_TIM1_Init+0x174>)
 8002056:	f005 fad7 	bl	8007608 <HAL_TIMEx_ConfigBreakDeadTime>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8002060:	f7ff fdfc 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002064:	4803      	ldr	r0, [pc, #12]	; (8002074 <MX_TIM1_Init+0x174>)
 8002066:	f000 f929 	bl	80022bc <HAL_TIM_MspPostInit>

}
 800206a:	bf00      	nop
 800206c:	3770      	adds	r7, #112	; 0x70
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000398 	.word	0x20000398
 8002078:	40012c00 	.word	0x40012c00

0800207c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08c      	sub	sp, #48	; 0x30
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002082:	f107 030c 	add.w	r3, r7, #12
 8002086:	2224      	movs	r2, #36	; 0x24
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f007 fd50 	bl	8009b30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002090:	463b      	mov	r3, r7
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800209a:	4b21      	ldr	r3, [pc, #132]	; (8002120 <MX_TIM3_Init+0xa4>)
 800209c:	4a21      	ldr	r2, [pc, #132]	; (8002124 <MX_TIM3_Init+0xa8>)
 800209e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020a0:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <MX_TIM3_Init+0xa4>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a6:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <MX_TIM3_Init+0xa4>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020ac:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <MX_TIM3_Init+0xa4>)
 80020ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <MX_TIM3_Init+0xa4>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ba:	4b19      	ldr	r3, [pc, #100]	; (8002120 <MX_TIM3_Init+0xa4>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020c0:	2303      	movs	r3, #3
 80020c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020c8:	2301      	movs	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020d8:	2301      	movs	r3, #1
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020dc:	2300      	movs	r3, #0
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	4619      	mov	r1, r3
 80020ea:	480d      	ldr	r0, [pc, #52]	; (8002120 <MX_TIM3_Init+0xa4>)
 80020ec:	f003 ff3c 	bl	8005f68 <HAL_TIM_Encoder_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80020f6:	f7ff fdb1 	bl	8001c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fa:	2300      	movs	r3, #0
 80020fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002102:	463b      	mov	r3, r7
 8002104:	4619      	mov	r1, r3
 8002106:	4806      	ldr	r0, [pc, #24]	; (8002120 <MX_TIM3_Init+0xa4>)
 8002108:	f005 f9e8 	bl	80074dc <HAL_TIMEx_MasterConfigSynchronization>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002112:	f7ff fda3 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002116:	bf00      	nop
 8002118:	3730      	adds	r7, #48	; 0x30
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200003e4 	.word	0x200003e4
 8002124:	40000400 	.word	0x40000400

08002128 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800212e:	f107 0310 	add.w	r3, r7, #16
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002146:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <MX_TIM4_Init+0x94>)
 8002148:	4a1d      	ldr	r2, [pc, #116]	; (80021c0 <MX_TIM4_Init+0x98>)
 800214a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 170;
 800214c:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <MX_TIM4_Init+0x94>)
 800214e:	22aa      	movs	r2, #170	; 0xaa
 8002150:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <MX_TIM4_Init+0x94>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8002158:	4b18      	ldr	r3, [pc, #96]	; (80021bc <MX_TIM4_Init+0x94>)
 800215a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800215e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002160:	4b16      	ldr	r3, [pc, #88]	; (80021bc <MX_TIM4_Init+0x94>)
 8002162:	2200      	movs	r2, #0
 8002164:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <MX_TIM4_Init+0x94>)
 8002168:	2280      	movs	r2, #128	; 0x80
 800216a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800216c:	4813      	ldr	r0, [pc, #76]	; (80021bc <MX_TIM4_Init+0x94>)
 800216e:	f003 fbab 	bl	80058c8 <HAL_TIM_Base_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002178:	f7ff fd70 	bl	8001c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800217c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002180:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002182:	f107 0310 	add.w	r3, r7, #16
 8002186:	4619      	mov	r1, r3
 8002188:	480c      	ldr	r0, [pc, #48]	; (80021bc <MX_TIM4_Init+0x94>)
 800218a:	f004 fab5 	bl	80066f8 <HAL_TIM_ConfigClockSource>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002194:	f7ff fd62 	bl	8001c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002198:	2300      	movs	r3, #0
 800219a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	4619      	mov	r1, r3
 80021a4:	4805      	ldr	r0, [pc, #20]	; (80021bc <MX_TIM4_Init+0x94>)
 80021a6:	f005 f999 	bl	80074dc <HAL_TIMEx_MasterConfigSynchronization>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80021b0:	f7ff fd54 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021b4:	bf00      	nop
 80021b6:	3720      	adds	r7, #32
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000430 	.word	0x20000430
 80021c0:	40000800 	.word	0x40000800

080021c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a16      	ldr	r2, [pc, #88]	; (800222c <HAL_TIM_Base_MspInit+0x68>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d10c      	bne.n	80021f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <HAL_TIM_Base_MspInit+0x6c>)
 80021d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021da:	4a15      	ldr	r2, [pc, #84]	; (8002230 <HAL_TIM_Base_MspInit+0x6c>)
 80021dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021e0:	6613      	str	r3, [r2, #96]	; 0x60
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <HAL_TIM_Base_MspInit+0x6c>)
 80021e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80021ee:	e018      	b.n	8002222 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0f      	ldr	r2, [pc, #60]	; (8002234 <HAL_TIM_Base_MspInit+0x70>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d113      	bne.n	8002222 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <HAL_TIM_Base_MspInit+0x6c>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fe:	4a0c      	ldr	r2, [pc, #48]	; (8002230 <HAL_TIM_Base_MspInit+0x6c>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	6593      	str	r3, [r2, #88]	; 0x58
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <HAL_TIM_Base_MspInit+0x6c>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	201e      	movs	r0, #30
 8002218:	f001 fdfb 	bl	8003e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800221c:	201e      	movs	r0, #30
 800221e:	f001 fe12 	bl	8003e46 <HAL_NVIC_EnableIRQ>
}
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40012c00 	.word	0x40012c00
 8002230:	40021000 	.word	0x40021000
 8002234:	40000800 	.word	0x40000800

08002238 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	; 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a17      	ldr	r2, [pc, #92]	; (80022b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d128      	bne.n	80022ac <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800225a:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x80>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	4a16      	ldr	r2, [pc, #88]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	6593      	str	r3, [r2, #88]	; 0x58
 8002266:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002276:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800228a:	2350      	movs	r3, #80	; 0x50
 800228c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800229a:	2302      	movs	r3, #2
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	4619      	mov	r1, r3
 80022a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a8:	f002 f91a 	bl	80044e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80022ac:	bf00      	nop
 80022ae:	3728      	adds	r7, #40	; 0x28
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40000400 	.word	0x40000400
 80022b8:	40021000 	.word	0x40021000

080022bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 030c 	add.w	r3, r7, #12
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a12      	ldr	r2, [pc, #72]	; (8002324 <HAL_TIM_MspPostInit+0x68>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d11d      	bne.n	800231a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_TIM_MspPostInit+0x6c>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	4a11      	ldr	r2, [pc, #68]	; (8002328 <HAL_TIM_MspPostInit+0x6c>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <HAL_TIM_MspPostInit+0x6c>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 80022f6:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80022fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002308:	2306      	movs	r3, #6
 800230a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230c:	f107 030c 	add.w	r3, r7, #12
 8002310:	4619      	mov	r1, r3
 8002312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002316:	f002 f8e3 	bl	80044e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800231a:	bf00      	nop
 800231c:	3720      	adds	r7, #32
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40021000 	.word	0x40021000

0800232c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002330:	4b22      	ldr	r3, [pc, #136]	; (80023bc <MX_USART2_UART_Init+0x90>)
 8002332:	4a23      	ldr	r2, [pc, #140]	; (80023c0 <MX_USART2_UART_Init+0x94>)
 8002334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002336:	4b21      	ldr	r3, [pc, #132]	; (80023bc <MX_USART2_UART_Init+0x90>)
 8002338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800233c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800233e:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <MX_USART2_UART_Init+0x90>)
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002344:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <MX_USART2_UART_Init+0x90>)
 8002346:	2200      	movs	r2, #0
 8002348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800234a:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <MX_USART2_UART_Init+0x90>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002350:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <MX_USART2_UART_Init+0x90>)
 8002352:	220c      	movs	r2, #12
 8002354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002356:	4b19      	ldr	r3, [pc, #100]	; (80023bc <MX_USART2_UART_Init+0x90>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800235c:	4b17      	ldr	r3, [pc, #92]	; (80023bc <MX_USART2_UART_Init+0x90>)
 800235e:	2200      	movs	r2, #0
 8002360:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <MX_USART2_UART_Init+0x90>)
 8002364:	2200      	movs	r2, #0
 8002366:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002368:	4b14      	ldr	r3, [pc, #80]	; (80023bc <MX_USART2_UART_Init+0x90>)
 800236a:	2200      	movs	r2, #0
 800236c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <MX_USART2_UART_Init+0x90>)
 8002370:	2200      	movs	r2, #0
 8002372:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002374:	4811      	ldr	r0, [pc, #68]	; (80023bc <MX_USART2_UART_Init+0x90>)
 8002376:	f005 fa64 	bl	8007842 <HAL_UART_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002380:	f7ff fc6c 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002384:	2100      	movs	r1, #0
 8002386:	480d      	ldr	r0, [pc, #52]	; (80023bc <MX_USART2_UART_Init+0x90>)
 8002388:	f007 fad9 	bl	800993e <HAL_UARTEx_SetTxFifoThreshold>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002392:	f7ff fc63 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002396:	2100      	movs	r1, #0
 8002398:	4808      	ldr	r0, [pc, #32]	; (80023bc <MX_USART2_UART_Init+0x90>)
 800239a:	f007 fb0e 	bl	80099ba <HAL_UARTEx_SetRxFifoThreshold>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80023a4:	f7ff fc5a 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80023a8:	4804      	ldr	r0, [pc, #16]	; (80023bc <MX_USART2_UART_Init+0x90>)
 80023aa:	f007 fa8f 	bl	80098cc <HAL_UARTEx_DisableFifoMode>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80023b4:	f7ff fc52 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	2000047c 	.word	0x2000047c
 80023c0:	40004400 	.word	0x40004400

080023c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b09e      	sub	sp, #120	; 0x78
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023dc:	f107 0310 	add.w	r3, r7, #16
 80023e0:	2254      	movs	r2, #84	; 0x54
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f007 fba3 	bl	8009b30 <memset>
  if(uartHandle->Instance==USART2)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a23      	ldr	r2, [pc, #140]	; (800247c <HAL_UART_MspInit+0xb8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d13e      	bne.n	8002472 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023f4:	2302      	movs	r3, #2
 80023f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023fc:	f107 0310 	add.w	r3, r7, #16
 8002400:	4618      	mov	r0, r3
 8002402:	f003 f813 	bl	800542c <HAL_RCCEx_PeriphCLKConfig>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800240c:	f7ff fc26 	bl	8001c5c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <HAL_UART_MspInit+0xbc>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002414:	4a1a      	ldr	r2, [pc, #104]	; (8002480 <HAL_UART_MspInit+0xbc>)
 8002416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241a:	6593      	str	r3, [r2, #88]	; 0x58
 800241c:	4b18      	ldr	r3, [pc, #96]	; (8002480 <HAL_UART_MspInit+0xbc>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <HAL_UART_MspInit+0xbc>)
 800242a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242c:	4a14      	ldr	r2, [pc, #80]	; (8002480 <HAL_UART_MspInit+0xbc>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002434:	4b12      	ldr	r3, [pc, #72]	; (8002480 <HAL_UART_MspInit+0xbc>)
 8002436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002440:	230c      	movs	r3, #12
 8002442:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244c:	2300      	movs	r3, #0
 800244e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002450:	2307      	movs	r3, #7
 8002452:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002454:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002458:	4619      	mov	r1, r3
 800245a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800245e:	f002 f83f 	bl	80044e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	2026      	movs	r0, #38	; 0x26
 8002468:	f001 fcd3 	bl	8003e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800246c:	2026      	movs	r0, #38	; 0x26
 800246e:	f001 fcea 	bl	8003e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002472:	bf00      	nop
 8002474:	3778      	adds	r7, #120	; 0x78
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40004400 	.word	0x40004400
 8002480:	40021000 	.word	0x40021000

08002484 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002484:	480d      	ldr	r0, [pc, #52]	; (80024bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002486:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002488:	480d      	ldr	r0, [pc, #52]	; (80024c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800248a:	490e      	ldr	r1, [pc, #56]	; (80024c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800248c:	4a0e      	ldr	r2, [pc, #56]	; (80024c8 <LoopForever+0xe>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002490:	e002      	b.n	8002498 <LoopCopyDataInit>

08002492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002496:	3304      	adds	r3, #4

08002498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800249a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800249c:	d3f9      	bcc.n	8002492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800249e:	4a0b      	ldr	r2, [pc, #44]	; (80024cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80024a0:	4c0b      	ldr	r4, [pc, #44]	; (80024d0 <LoopForever+0x16>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a4:	e001      	b.n	80024aa <LoopFillZerobss>

080024a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a8:	3204      	adds	r2, #4

080024aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024ac:	d3fb      	bcc.n	80024a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024ae:	f7ff fd15 	bl	8001edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024b2:	f007 fb19 	bl	8009ae8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024b6:	f7ff f85b 	bl	8001570 <main>

080024ba <LoopForever>:

LoopForever:
    b LoopForever
 80024ba:	e7fe      	b.n	80024ba <LoopForever>
  ldr   r0, =_estack
 80024bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024c4:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 80024c8:	0800f680 	.word	0x0800f680
  ldr r2, =_sbss
 80024cc:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 80024d0:	20000520 	.word	0x20000520

080024d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024d4:	e7fe      	b.n	80024d4 <ADC1_2_IRQHandler>

080024d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e0:	2003      	movs	r0, #3
 80024e2:	f001 fc8b 	bl	8003dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024e6:	2000      	movs	r0, #0
 80024e8:	f000 f80e 	bl	8002508 <HAL_InitTick>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	71fb      	strb	r3, [r7, #7]
 80024f6:	e001      	b.n	80024fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024f8:	f7ff fbb6 	bl	8001c68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024fc:	79fb      	ldrb	r3, [r7, #7]

}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002514:	4b16      	ldr	r3, [pc, #88]	; (8002570 <HAL_InitTick+0x68>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d022      	beq.n	8002562 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800251c:	4b15      	ldr	r3, [pc, #84]	; (8002574 <HAL_InitTick+0x6c>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b13      	ldr	r3, [pc, #76]	; (8002570 <HAL_InitTick+0x68>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002528:	fbb1 f3f3 	udiv	r3, r1, r3
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	4618      	mov	r0, r3
 8002532:	f001 fc96 	bl	8003e62 <HAL_SYSTICK_Config>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10f      	bne.n	800255c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b0f      	cmp	r3, #15
 8002540:	d809      	bhi.n	8002556 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002542:	2200      	movs	r2, #0
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	f04f 30ff 	mov.w	r0, #4294967295
 800254a:	f001 fc62 	bl	8003e12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800254e:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <HAL_InitTick+0x70>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	e007      	b.n	8002566 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	e004      	b.n	8002566 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
 8002560:	e001      	b.n	8002566 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000070 	.word	0x20000070
 8002574:	20000068 	.word	0x20000068
 8002578:	2000006c 	.word	0x2000006c

0800257c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_IncTick+0x1c>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_IncTick+0x20>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4413      	add	r3, r2
 800258a:	4a03      	ldr	r2, [pc, #12]	; (8002598 <HAL_IncTick+0x1c>)
 800258c:	6013      	str	r3, [r2, #0]
}
 800258e:	bf00      	nop
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	2000050c 	.word	0x2000050c
 800259c:	20000070 	.word	0x20000070

080025a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return uwTick;
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_GetTick+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	2000050c 	.word	0x2000050c

080025b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c0:	f7ff ffee 	bl	80025a0 <HAL_GetTick>
 80025c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d0:	d004      	beq.n	80025dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <HAL_Delay+0x40>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	4413      	add	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025dc:	bf00      	nop
 80025de:	f7ff ffdf 	bl	80025a0 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d8f7      	bhi.n	80025de <HAL_Delay+0x26>
  {
  }
}
 80025ee:	bf00      	nop
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000070 	.word	0x20000070

080025fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	609a      	str	r2, [r3, #8]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	609a      	str	r2, [r3, #8]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	3360      	adds	r3, #96	; 0x60
 8002676:	461a      	mov	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <LL_ADC_SetOffset+0x44>)
 8002686:	4013      	ands	r3, r2
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	4313      	orrs	r3, r2
 8002694:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800269c:	bf00      	nop
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	03fff000 	.word	0x03fff000

080026ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3360      	adds	r3, #96	; 0x60
 80026ba:	461a      	mov	r2, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	3360      	adds	r3, #96	; 0x60
 80026e8:	461a      	mov	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002702:	bf00      	nop
 8002704:	371c      	adds	r7, #28
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800270e:	b480      	push	{r7}
 8002710:	b087      	sub	sp, #28
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	3360      	adds	r3, #96	; 0x60
 800271e:	461a      	mov	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	431a      	orrs	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002738:	bf00      	nop
 800273a:	371c      	adds	r7, #28
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002744:	b480      	push	{r7}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3360      	adds	r3, #96	; 0x60
 8002754:	461a      	mov	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	431a      	orrs	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800276e:	bf00      	nop
 8002770:	371c      	adds	r7, #28
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	615a      	str	r2, [r3, #20]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b087      	sub	sp, #28
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3330      	adds	r3, #48	; 0x30
 80027d6:	461a      	mov	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	4413      	add	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	211f      	movs	r1, #31
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	401a      	ands	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	0e9b      	lsrs	r3, r3, #26
 80027fe:	f003 011f 	and.w	r1, r3, #31
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	431a      	orrs	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002812:	bf00      	nop
 8002814:	371c      	adds	r7, #28
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800281e:	b480      	push	{r7}
 8002820:	b087      	sub	sp, #28
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3314      	adds	r3, #20
 800282e:	461a      	mov	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	0e5b      	lsrs	r3, r3, #25
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	4413      	add	r3, r2
 800283c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	0d1b      	lsrs	r3, r3, #20
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	2107      	movs	r1, #7
 800284c:	fa01 f303 	lsl.w	r3, r1, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	401a      	ands	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	0d1b      	lsrs	r3, r3, #20
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	431a      	orrs	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002868:	bf00      	nop
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a0f      	ldr	r2, [pc, #60]	; (80028c0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d10a      	bne.n	800289e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002894:	431a      	orrs	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800289c:	e00a      	b.n	80028b4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028aa:	43db      	mvns	r3, r3
 80028ac:	401a      	ands	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	407f0000 	.word	0x407f0000

080028c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 031f 	and.w	r3, r3, #31
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80028f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6093      	str	r3, [r2, #8]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002918:	d101      	bne.n	800291e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800293c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002940:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002964:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002968:	d101      	bne.n	800296e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800298c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002990:	f043 0201 	orr.w	r2, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <LL_ADC_IsEnabled+0x18>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <LL_ADC_IsEnabled+0x1a>
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029de:	f043 0204 	orr.w	r2, r3, #4
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d101      	bne.n	8002a0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d101      	bne.n	8002a30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a40:	b590      	push	{r4, r7, lr}
 8002a42:	b089      	sub	sp, #36	; 0x24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e1af      	b.n	8002dba <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7fe fb77 	bl	800115c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff ff3f 	bl	8002904 <LL_ADC_IsDeepPowerDownEnabled>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d004      	beq.n	8002a96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff25 	bl	80028e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff ff5a 	bl	8002954 <LL_ADC_IsInternalRegulatorEnabled>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d115      	bne.n	8002ad2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ff3e 	bl	800292c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ab0:	4b9f      	ldr	r3, [pc, #636]	; (8002d30 <HAL_ADC_Init+0x2f0>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	099b      	lsrs	r3, r3, #6
 8002ab6:	4a9f      	ldr	r2, [pc, #636]	; (8002d34 <HAL_ADC_Init+0x2f4>)
 8002ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8002abc:	099b      	lsrs	r3, r3, #6
 8002abe:	3301      	adds	r3, #1
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ac4:	e002      	b.n	8002acc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f9      	bne.n	8002ac6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff3c 	bl	8002954 <LL_ADC_IsInternalRegulatorEnabled>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10d      	bne.n	8002afe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae6:	f043 0210 	orr.w	r2, r3, #16
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af2:	f043 0201 	orr.w	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff ff75 	bl	80029f2 <LL_ADC_REG_IsConversionOngoing>
 8002b08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f040 8148 	bne.w	8002da8 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f040 8144 	bne.w	8002da8 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b28:	f043 0202 	orr.w	r2, r3, #2
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff35 	bl	80029a4 <LL_ADC_IsEnabled>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d141      	bne.n	8002bc4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b48:	d004      	beq.n	8002b54 <HAL_ADC_Init+0x114>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a7a      	ldr	r2, [pc, #488]	; (8002d38 <HAL_ADC_Init+0x2f8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d10f      	bne.n	8002b74 <HAL_ADC_Init+0x134>
 8002b54:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b58:	f7ff ff24 	bl	80029a4 <LL_ADC_IsEnabled>
 8002b5c:	4604      	mov	r4, r0
 8002b5e:	4876      	ldr	r0, [pc, #472]	; (8002d38 <HAL_ADC_Init+0x2f8>)
 8002b60:	f7ff ff20 	bl	80029a4 <LL_ADC_IsEnabled>
 8002b64:	4603      	mov	r3, r0
 8002b66:	4323      	orrs	r3, r4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bf0c      	ite	eq
 8002b6c:	2301      	moveq	r3, #1
 8002b6e:	2300      	movne	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	e012      	b.n	8002b9a <HAL_ADC_Init+0x15a>
 8002b74:	4871      	ldr	r0, [pc, #452]	; (8002d3c <HAL_ADC_Init+0x2fc>)
 8002b76:	f7ff ff15 	bl	80029a4 <LL_ADC_IsEnabled>
 8002b7a:	4604      	mov	r4, r0
 8002b7c:	4870      	ldr	r0, [pc, #448]	; (8002d40 <HAL_ADC_Init+0x300>)
 8002b7e:	f7ff ff11 	bl	80029a4 <LL_ADC_IsEnabled>
 8002b82:	4603      	mov	r3, r0
 8002b84:	431c      	orrs	r4, r3
 8002b86:	486f      	ldr	r0, [pc, #444]	; (8002d44 <HAL_ADC_Init+0x304>)
 8002b88:	f7ff ff0c 	bl	80029a4 <LL_ADC_IsEnabled>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	4323      	orrs	r3, r4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d012      	beq.n	8002bc4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ba6:	d004      	beq.n	8002bb2 <HAL_ADC_Init+0x172>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a62      	ldr	r2, [pc, #392]	; (8002d38 <HAL_ADC_Init+0x2f8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d101      	bne.n	8002bb6 <HAL_ADC_Init+0x176>
 8002bb2:	4a65      	ldr	r2, [pc, #404]	; (8002d48 <HAL_ADC_Init+0x308>)
 8002bb4:	e000      	b.n	8002bb8 <HAL_ADC_Init+0x178>
 8002bb6:	4a65      	ldr	r2, [pc, #404]	; (8002d4c <HAL_ADC_Init+0x30c>)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	f7ff fd1c 	bl	80025fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	7f5b      	ldrb	r3, [r3, #29]
 8002bc8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bce:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002bd4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002bda:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002be2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d106      	bne.n	8002c00 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	045b      	lsls	r3, r3, #17
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d009      	beq.n	8002c1c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	4b4b      	ldr	r3, [pc, #300]	; (8002d50 <HAL_ADC_Init+0x310>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	69b9      	ldr	r1, [r7, #24]
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fed1 	bl	80029f2 <LL_ADC_REG_IsConversionOngoing>
 8002c50:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fede 	bl	8002a18 <LL_ADC_INJ_IsConversionOngoing>
 8002c5c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d17f      	bne.n	8002d64 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d17c      	bne.n	8002d64 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c6e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c76:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c86:	f023 0302 	bic.w	r3, r3, #2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6812      	ldr	r2, [r2, #0]
 8002c8e:	69b9      	ldr	r1, [r7, #24]
 8002c90:	430b      	orrs	r3, r1
 8002c92:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d017      	beq.n	8002ccc <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002caa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cb4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6911      	ldr	r1, [r2, #16]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002cca:	e013      	b.n	8002cf4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cda:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cf0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d12a      	bne.n	8002d54 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d08:	f023 0304 	bic.w	r3, r3, #4
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d14:	4311      	orrs	r1, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d1a:	4311      	orrs	r1, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d20:	430a      	orrs	r2, r1
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0201 	orr.w	r2, r2, #1
 8002d2c:	611a      	str	r2, [r3, #16]
 8002d2e:	e019      	b.n	8002d64 <HAL_ADC_Init+0x324>
 8002d30:	20000068 	.word	0x20000068
 8002d34:	053e2d63 	.word	0x053e2d63
 8002d38:	50000100 	.word	0x50000100
 8002d3c:	50000400 	.word	0x50000400
 8002d40:	50000500 	.word	0x50000500
 8002d44:	50000600 	.word	0x50000600
 8002d48:	50000300 	.word	0x50000300
 8002d4c:	50000700 	.word	0x50000700
 8002d50:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d10c      	bne.n	8002d86 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	f023 010f 	bic.w	r1, r3, #15
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	1e5a      	subs	r2, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
 8002d84:	e007      	b.n	8002d96 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 020f 	bic.w	r2, r2, #15
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9a:	f023 0303 	bic.w	r3, r3, #3
 8002d9e:	f043 0201 	orr.w	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002da6:	e007      	b.n	8002db8 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dac:	f043 0210 	orr.w	r2, r3, #16
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002db8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3724      	adds	r7, #36	; 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd90      	pop	{r4, r7, pc}
 8002dc2:	bf00      	nop

08002dc4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dd8:	d004      	beq.n	8002de4 <HAL_ADC_Start_DMA+0x20>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a5a      	ldr	r2, [pc, #360]	; (8002f48 <HAL_ADC_Start_DMA+0x184>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d101      	bne.n	8002de8 <HAL_ADC_Start_DMA+0x24>
 8002de4:	4b59      	ldr	r3, [pc, #356]	; (8002f4c <HAL_ADC_Start_DMA+0x188>)
 8002de6:	e000      	b.n	8002dea <HAL_ADC_Start_DMA+0x26>
 8002de8:	4b59      	ldr	r3, [pc, #356]	; (8002f50 <HAL_ADC_Start_DMA+0x18c>)
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fd6a 	bl	80028c4 <LL_ADC_GetMultimode>
 8002df0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fdfb 	bl	80029f2 <LL_ADC_REG_IsConversionOngoing>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f040 809b 	bne.w	8002f3a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_ADC_Start_DMA+0x4e>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e096      	b.n	8002f40 <HAL_ADC_Start_DMA+0x17c>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a4d      	ldr	r2, [pc, #308]	; (8002f54 <HAL_ADC_Start_DMA+0x190>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d008      	beq.n	8002e36 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d002      	beq.n	8002e36 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	2b09      	cmp	r3, #9
 8002e34:	d17a      	bne.n	8002f2c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 fcec 	bl	8003814 <ADC_Enable>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d16d      	bne.n	8002f22 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e4e:	f023 0301 	bic.w	r3, r3, #1
 8002e52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a3a      	ldr	r2, [pc, #232]	; (8002f48 <HAL_ADC_Start_DMA+0x184>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d009      	beq.n	8002e78 <HAL_ADC_Start_DMA+0xb4>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a3b      	ldr	r2, [pc, #236]	; (8002f58 <HAL_ADC_Start_DMA+0x194>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d002      	beq.n	8002e74 <HAL_ADC_Start_DMA+0xb0>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	e003      	b.n	8002e7c <HAL_ADC_Start_DMA+0xb8>
 8002e74:	4b39      	ldr	r3, [pc, #228]	; (8002f5c <HAL_ADC_Start_DMA+0x198>)
 8002e76:	e001      	b.n	8002e7c <HAL_ADC_Start_DMA+0xb8>
 8002e78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d002      	beq.n	8002e8a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d105      	bne.n	8002e96 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d006      	beq.n	8002eb0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea6:	f023 0206 	bic.w	r2, r3, #6
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	661a      	str	r2, [r3, #96]	; 0x60
 8002eae:	e002      	b.n	8002eb6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	4a29      	ldr	r2, [pc, #164]	; (8002f60 <HAL_ADC_Start_DMA+0x19c>)
 8002ebc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec2:	4a28      	ldr	r2, [pc, #160]	; (8002f64 <HAL_ADC_Start_DMA+0x1a0>)
 8002ec4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eca:	4a27      	ldr	r2, [pc, #156]	; (8002f68 <HAL_ADC_Start_DMA+0x1a4>)
 8002ecc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	221c      	movs	r2, #28
 8002ed4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0210 	orr.w	r2, r2, #16
 8002eec:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0201 	orr.w	r2, r2, #1
 8002efc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3340      	adds	r3, #64	; 0x40
 8002f08:	4619      	mov	r1, r3
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f001 f85d 	bl	8003fcc <HAL_DMA_Start_IT>
 8002f12:	4603      	mov	r3, r0
 8002f14:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fd55 	bl	80029ca <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002f20:	e00d      	b.n	8002f3e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002f2a:	e008      	b.n	8002f3e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002f38:	e001      	b.n	8002f3e <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	50000100 	.word	0x50000100
 8002f4c:	50000300 	.word	0x50000300
 8002f50:	50000700 	.word	0x50000700
 8002f54:	50000600 	.word	0x50000600
 8002f58:	50000500 	.word	0x50000500
 8002f5c:	50000400 	.word	0x50000400
 8002f60:	080038d9 	.word	0x080038d9
 8002f64:	080039b1 	.word	0x080039b1
 8002f68:	080039cd 	.word	0x080039cd

08002f6c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b0b6      	sub	sp, #216	; 0xd8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d102      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x24>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	f000 bc13 	b.w	80037de <HAL_ADC_ConfigChannel+0x84a>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fd14 	bl	80029f2 <LL_ADC_REG_IsConversionOngoing>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f040 83f3 	bne.w	80037b8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	6859      	ldr	r1, [r3, #4]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f7ff fbf1 	bl	80027c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fd02 	bl	80029f2 <LL_ADC_REG_IsConversionOngoing>
 8002fee:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fd0e 	bl	8002a18 <LL_ADC_INJ_IsConversionOngoing>
 8002ffc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003000:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003004:	2b00      	cmp	r3, #0
 8003006:	f040 81d9 	bne.w	80033bc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800300a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800300e:	2b00      	cmp	r3, #0
 8003010:	f040 81d4 	bne.w	80033bc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800301c:	d10f      	bne.n	800303e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2200      	movs	r2, #0
 8003028:	4619      	mov	r1, r3
 800302a:	f7ff fbf8 	bl	800281e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fb9f 	bl	800277a <LL_ADC_SetSamplingTimeCommonConfig>
 800303c:	e00e      	b.n	800305c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6819      	ldr	r1, [r3, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	461a      	mov	r2, r3
 800304c:	f7ff fbe7 	bl	800281e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2100      	movs	r1, #0
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fb8f 	bl	800277a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	695a      	ldr	r2, [r3, #20]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	08db      	lsrs	r3, r3, #3
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b04      	cmp	r3, #4
 800307c:	d022      	beq.n	80030c4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6919      	ldr	r1, [r3, #16]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800308e:	f7ff fae9 	bl	8002664 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	6919      	ldr	r1, [r3, #16]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	461a      	mov	r2, r3
 80030a0:	f7ff fb35 	bl	800270e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	6919      	ldr	r1, [r3, #16]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	7f1b      	ldrb	r3, [r3, #28]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d102      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x126>
 80030b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030b8:	e000      	b.n	80030bc <HAL_ADC_ConfigChannel+0x128>
 80030ba:	2300      	movs	r3, #0
 80030bc:	461a      	mov	r2, r3
 80030be:	f7ff fb41 	bl	8002744 <LL_ADC_SetOffsetSaturation>
 80030c2:	e17b      	b.n	80033bc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2100      	movs	r1, #0
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff faee 	bl	80026ac <LL_ADC_GetOffsetChannel>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10a      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x15c>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2100      	movs	r1, #0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fae3 	bl	80026ac <LL_ADC_GetOffsetChannel>
 80030e6:	4603      	mov	r3, r0
 80030e8:	0e9b      	lsrs	r3, r3, #26
 80030ea:	f003 021f 	and.w	r2, r3, #31
 80030ee:	e01e      	b.n	800312e <HAL_ADC_ConfigChannel+0x19a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2100      	movs	r1, #0
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fad8 	bl	80026ac <LL_ADC_GetOffsetChannel>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003106:	fa93 f3a3 	rbit	r3, r3
 800310a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800310e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003112:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003116:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800311e:	2320      	movs	r3, #32
 8003120:	e004      	b.n	800312c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003122:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003126:	fab3 f383 	clz	r3, r3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003136:	2b00      	cmp	r3, #0
 8003138:	d105      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x1b2>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	0e9b      	lsrs	r3, r3, #26
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	e018      	b.n	8003178 <HAL_ADC_ConfigChannel+0x1e4>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003152:	fa93 f3a3 	rbit	r3, r3
 8003156:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800315a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800315e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003162:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800316a:	2320      	movs	r3, #32
 800316c:	e004      	b.n	8003178 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800316e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003178:	429a      	cmp	r2, r3
 800317a:	d106      	bne.n	800318a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2200      	movs	r2, #0
 8003182:	2100      	movs	r1, #0
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff faa7 	bl	80026d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2101      	movs	r1, #1
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fa8b 	bl	80026ac <LL_ADC_GetOffsetChannel>
 8003196:	4603      	mov	r3, r0
 8003198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10a      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x222>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2101      	movs	r1, #1
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff fa80 	bl	80026ac <LL_ADC_GetOffsetChannel>
 80031ac:	4603      	mov	r3, r0
 80031ae:	0e9b      	lsrs	r3, r3, #26
 80031b0:	f003 021f 	and.w	r2, r3, #31
 80031b4:	e01e      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x260>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2101      	movs	r1, #1
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fa75 	bl	80026ac <LL_ADC_GetOffsetChannel>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031cc:	fa93 f3a3 	rbit	r3, r3
 80031d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80031d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80031dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80031e4:	2320      	movs	r3, #32
 80031e6:	e004      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80031e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031ec:	fab3 f383 	clz	r3, r3
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d105      	bne.n	800320c <HAL_ADC_ConfigChannel+0x278>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	0e9b      	lsrs	r3, r3, #26
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	e018      	b.n	800323e <HAL_ADC_ConfigChannel+0x2aa>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003220:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003224:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003228:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003230:	2320      	movs	r3, #32
 8003232:	e004      	b.n	800323e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003234:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003238:	fab3 f383 	clz	r3, r3
 800323c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800323e:	429a      	cmp	r2, r3
 8003240:	d106      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2200      	movs	r2, #0
 8003248:	2101      	movs	r1, #1
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fa44 	bl	80026d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2102      	movs	r1, #2
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff fa28 	bl	80026ac <LL_ADC_GetOffsetChannel>
 800325c:	4603      	mov	r3, r0
 800325e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10a      	bne.n	800327c <HAL_ADC_ConfigChannel+0x2e8>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2102      	movs	r1, #2
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fa1d 	bl	80026ac <LL_ADC_GetOffsetChannel>
 8003272:	4603      	mov	r3, r0
 8003274:	0e9b      	lsrs	r3, r3, #26
 8003276:	f003 021f 	and.w	r2, r3, #31
 800327a:	e01e      	b.n	80032ba <HAL_ADC_ConfigChannel+0x326>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2102      	movs	r1, #2
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fa12 	bl	80026ac <LL_ADC_GetOffsetChannel>
 8003288:	4603      	mov	r3, r0
 800328a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800329a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800329e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80032a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80032aa:	2320      	movs	r3, #32
 80032ac:	e004      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80032ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032b2:	fab3 f383 	clz	r3, r3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d105      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x33e>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	0e9b      	lsrs	r3, r3, #26
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	e016      	b.n	8003300 <HAL_ADC_ConfigChannel+0x36c>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80032e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80032ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80032f2:	2320      	movs	r3, #32
 80032f4:	e004      	b.n	8003300 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80032f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003300:	429a      	cmp	r2, r3
 8003302:	d106      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2200      	movs	r2, #0
 800330a:	2102      	movs	r1, #2
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff f9e3 	bl	80026d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2103      	movs	r1, #3
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff f9c7 	bl	80026ac <LL_ADC_GetOffsetChannel>
 800331e:	4603      	mov	r3, r0
 8003320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10a      	bne.n	800333e <HAL_ADC_ConfigChannel+0x3aa>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2103      	movs	r1, #3
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff f9bc 	bl	80026ac <LL_ADC_GetOffsetChannel>
 8003334:	4603      	mov	r3, r0
 8003336:	0e9b      	lsrs	r3, r3, #26
 8003338:	f003 021f 	and.w	r2, r3, #31
 800333c:	e017      	b.n	800336e <HAL_ADC_ConfigChannel+0x3da>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2103      	movs	r1, #3
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff f9b1 	bl	80026ac <LL_ADC_GetOffsetChannel>
 800334a:	4603      	mov	r3, r0
 800334c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003350:	fa93 f3a3 	rbit	r3, r3
 8003354:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003356:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003358:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800335a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003360:	2320      	movs	r3, #32
 8003362:	e003      	b.n	800336c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003376:	2b00      	cmp	r3, #0
 8003378:	d105      	bne.n	8003386 <HAL_ADC_ConfigChannel+0x3f2>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	0e9b      	lsrs	r3, r3, #26
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	e011      	b.n	80033aa <HAL_ADC_ConfigChannel+0x416>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003396:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800339e:	2320      	movs	r3, #32
 80033a0:	e003      	b.n	80033aa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80033a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a4:	fab3 f383 	clz	r3, r3
 80033a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d106      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2200      	movs	r2, #0
 80033b4:	2103      	movs	r1, #3
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff f98e 	bl	80026d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff faef 	bl	80029a4 <LL_ADC_IsEnabled>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f040 813d 	bne.w	8003648 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6819      	ldr	r1, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	461a      	mov	r2, r3
 80033dc:	f7ff fa4a 	bl	8002874 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4aa2      	ldr	r2, [pc, #648]	; (8003670 <HAL_ADC_ConfigChannel+0x6dc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	f040 812e 	bne.w	8003648 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10b      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x480>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	0e9b      	lsrs	r3, r3, #26
 8003402:	3301      	adds	r3, #1
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	2b09      	cmp	r3, #9
 800340a:	bf94      	ite	ls
 800340c:	2301      	movls	r3, #1
 800340e:	2300      	movhi	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	e019      	b.n	8003448 <HAL_ADC_ConfigChannel+0x4b4>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800341c:	fa93 f3a3 	rbit	r3, r3
 8003420:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003422:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003424:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800342c:	2320      	movs	r3, #32
 800342e:	e003      	b.n	8003438 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003430:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003432:	fab3 f383 	clz	r3, r3
 8003436:	b2db      	uxtb	r3, r3
 8003438:	3301      	adds	r3, #1
 800343a:	f003 031f 	and.w	r3, r3, #31
 800343e:	2b09      	cmp	r3, #9
 8003440:	bf94      	ite	ls
 8003442:	2301      	movls	r3, #1
 8003444:	2300      	movhi	r3, #0
 8003446:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003448:	2b00      	cmp	r3, #0
 800344a:	d079      	beq.n	8003540 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003454:	2b00      	cmp	r3, #0
 8003456:	d107      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x4d4>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	0e9b      	lsrs	r3, r3, #26
 800345e:	3301      	adds	r3, #1
 8003460:	069b      	lsls	r3, r3, #26
 8003462:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003466:	e015      	b.n	8003494 <HAL_ADC_ConfigChannel+0x500>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003470:	fa93 f3a3 	rbit	r3, r3
 8003474:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003478:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800347a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003480:	2320      	movs	r3, #32
 8003482:	e003      	b.n	800348c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003486:	fab3 f383 	clz	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	3301      	adds	r3, #1
 800348e:	069b      	lsls	r3, r3, #26
 8003490:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800349c:	2b00      	cmp	r3, #0
 800349e:	d109      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x520>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	0e9b      	lsrs	r3, r3, #26
 80034a6:	3301      	adds	r3, #1
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	2101      	movs	r1, #1
 80034ae:	fa01 f303 	lsl.w	r3, r1, r3
 80034b2:	e017      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x550>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034bc:	fa93 f3a3 	rbit	r3, r3
 80034c0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80034c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80034c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80034cc:	2320      	movs	r3, #32
 80034ce:	e003      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80034d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034d2:	fab3 f383 	clz	r3, r3
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	3301      	adds	r3, #1
 80034da:	f003 031f 	and.w	r3, r3, #31
 80034de:	2101      	movs	r1, #1
 80034e0:	fa01 f303 	lsl.w	r3, r1, r3
 80034e4:	ea42 0103 	orr.w	r1, r2, r3
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <HAL_ADC_ConfigChannel+0x576>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	0e9b      	lsrs	r3, r3, #26
 80034fa:	3301      	adds	r3, #1
 80034fc:	f003 021f 	and.w	r2, r3, #31
 8003500:	4613      	mov	r3, r2
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	4413      	add	r3, r2
 8003506:	051b      	lsls	r3, r3, #20
 8003508:	e018      	b.n	800353c <HAL_ADC_ConfigChannel+0x5a8>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003512:	fa93 f3a3 	rbit	r3, r3
 8003516:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800351c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003522:	2320      	movs	r3, #32
 8003524:	e003      	b.n	800352e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003528:	fab3 f383 	clz	r3, r3
 800352c:	b2db      	uxtb	r3, r3
 800352e:	3301      	adds	r3, #1
 8003530:	f003 021f 	and.w	r2, r3, #31
 8003534:	4613      	mov	r3, r2
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	4413      	add	r3, r2
 800353a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800353c:	430b      	orrs	r3, r1
 800353e:	e07e      	b.n	800363e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003548:	2b00      	cmp	r3, #0
 800354a:	d107      	bne.n	800355c <HAL_ADC_ConfigChannel+0x5c8>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	0e9b      	lsrs	r3, r3, #26
 8003552:	3301      	adds	r3, #1
 8003554:	069b      	lsls	r3, r3, #26
 8003556:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800355a:	e015      	b.n	8003588 <HAL_ADC_ConfigChannel+0x5f4>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	fa93 f3a3 	rbit	r3, r3
 8003568:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800356e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003574:	2320      	movs	r3, #32
 8003576:	e003      	b.n	8003580 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	fab3 f383 	clz	r3, r3
 800357e:	b2db      	uxtb	r3, r3
 8003580:	3301      	adds	r3, #1
 8003582:	069b      	lsls	r3, r3, #26
 8003584:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003590:	2b00      	cmp	r3, #0
 8003592:	d109      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x614>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	0e9b      	lsrs	r3, r3, #26
 800359a:	3301      	adds	r3, #1
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	2101      	movs	r1, #1
 80035a2:	fa01 f303 	lsl.w	r3, r1, r3
 80035a6:	e017      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x644>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	61fb      	str	r3, [r7, #28]
  return result;
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80035c0:	2320      	movs	r3, #32
 80035c2:	e003      	b.n	80035cc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	fab3 f383 	clz	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	3301      	adds	r3, #1
 80035ce:	f003 031f 	and.w	r3, r3, #31
 80035d2:	2101      	movs	r1, #1
 80035d4:	fa01 f303 	lsl.w	r3, r1, r3
 80035d8:	ea42 0103 	orr.w	r1, r2, r3
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10d      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x670>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	0e9b      	lsrs	r3, r3, #26
 80035ee:	3301      	adds	r3, #1
 80035f0:	f003 021f 	and.w	r2, r3, #31
 80035f4:	4613      	mov	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	4413      	add	r3, r2
 80035fa:	3b1e      	subs	r3, #30
 80035fc:	051b      	lsls	r3, r3, #20
 80035fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003602:	e01b      	b.n	800363c <HAL_ADC_ConfigChannel+0x6a8>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	fa93 f3a3 	rbit	r3, r3
 8003610:	613b      	str	r3, [r7, #16]
  return result;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800361c:	2320      	movs	r3, #32
 800361e:	e003      	b.n	8003628 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	fab3 f383 	clz	r3, r3
 8003626:	b2db      	uxtb	r3, r3
 8003628:	3301      	adds	r3, #1
 800362a:	f003 021f 	and.w	r2, r3, #31
 800362e:	4613      	mov	r3, r2
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	4413      	add	r3, r2
 8003634:	3b1e      	subs	r3, #30
 8003636:	051b      	lsls	r3, r3, #20
 8003638:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800363c:	430b      	orrs	r3, r1
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	6892      	ldr	r2, [r2, #8]
 8003642:	4619      	mov	r1, r3
 8003644:	f7ff f8eb 	bl	800281e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_ADC_ConfigChannel+0x6e0>)
 800364e:	4013      	ands	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 80be 	beq.w	80037d2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800365e:	d004      	beq.n	800366a <HAL_ADC_ConfigChannel+0x6d6>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a04      	ldr	r2, [pc, #16]	; (8003678 <HAL_ADC_ConfigChannel+0x6e4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d10a      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x6ec>
 800366a:	4b04      	ldr	r3, [pc, #16]	; (800367c <HAL_ADC_ConfigChannel+0x6e8>)
 800366c:	e009      	b.n	8003682 <HAL_ADC_ConfigChannel+0x6ee>
 800366e:	bf00      	nop
 8003670:	407f0000 	.word	0x407f0000
 8003674:	80080000 	.word	0x80080000
 8003678:	50000100 	.word	0x50000100
 800367c:	50000300 	.word	0x50000300
 8003680:	4b59      	ldr	r3, [pc, #356]	; (80037e8 <HAL_ADC_ConfigChannel+0x854>)
 8003682:	4618      	mov	r0, r3
 8003684:	f7fe ffe0 	bl	8002648 <LL_ADC_GetCommonPathInternalCh>
 8003688:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a56      	ldr	r2, [pc, #344]	; (80037ec <HAL_ADC_ConfigChannel+0x858>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d004      	beq.n	80036a0 <HAL_ADC_ConfigChannel+0x70c>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a55      	ldr	r2, [pc, #340]	; (80037f0 <HAL_ADC_ConfigChannel+0x85c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d13a      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d134      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036b4:	d005      	beq.n	80036c2 <HAL_ADC_ConfigChannel+0x72e>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a4e      	ldr	r2, [pc, #312]	; (80037f4 <HAL_ADC_ConfigChannel+0x860>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	f040 8085 	bne.w	80037cc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036ca:	d004      	beq.n	80036d6 <HAL_ADC_ConfigChannel+0x742>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a49      	ldr	r2, [pc, #292]	; (80037f8 <HAL_ADC_ConfigChannel+0x864>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d101      	bne.n	80036da <HAL_ADC_ConfigChannel+0x746>
 80036d6:	4a49      	ldr	r2, [pc, #292]	; (80037fc <HAL_ADC_ConfigChannel+0x868>)
 80036d8:	e000      	b.n	80036dc <HAL_ADC_ConfigChannel+0x748>
 80036da:	4a43      	ldr	r2, [pc, #268]	; (80037e8 <HAL_ADC_ConfigChannel+0x854>)
 80036dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f7fe ff9b 	bl	8002622 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036ec:	4b44      	ldr	r3, [pc, #272]	; (8003800 <HAL_ADC_ConfigChannel+0x86c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	099b      	lsrs	r3, r3, #6
 80036f2:	4a44      	ldr	r2, [pc, #272]	; (8003804 <HAL_ADC_ConfigChannel+0x870>)
 80036f4:	fba2 2303 	umull	r2, r3, r2, r3
 80036f8:	099b      	lsrs	r3, r3, #6
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	4613      	mov	r3, r2
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003706:	e002      	b.n	800370e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	3b01      	subs	r3, #1
 800370c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1f9      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003714:	e05a      	b.n	80037cc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a3b      	ldr	r2, [pc, #236]	; (8003808 <HAL_ADC_ConfigChannel+0x874>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d125      	bne.n	800376c <HAL_ADC_ConfigChannel+0x7d8>
 8003720:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d11f      	bne.n	800376c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a31      	ldr	r2, [pc, #196]	; (80037f8 <HAL_ADC_ConfigChannel+0x864>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d104      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x7ac>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a34      	ldr	r2, [pc, #208]	; (800380c <HAL_ADC_ConfigChannel+0x878>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d047      	beq.n	80037d0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003748:	d004      	beq.n	8003754 <HAL_ADC_ConfigChannel+0x7c0>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a2a      	ldr	r2, [pc, #168]	; (80037f8 <HAL_ADC_ConfigChannel+0x864>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d101      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x7c4>
 8003754:	4a29      	ldr	r2, [pc, #164]	; (80037fc <HAL_ADC_ConfigChannel+0x868>)
 8003756:	e000      	b.n	800375a <HAL_ADC_ConfigChannel+0x7c6>
 8003758:	4a23      	ldr	r2, [pc, #140]	; (80037e8 <HAL_ADC_ConfigChannel+0x854>)
 800375a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800375e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003762:	4619      	mov	r1, r3
 8003764:	4610      	mov	r0, r2
 8003766:	f7fe ff5c 	bl	8002622 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800376a:	e031      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a27      	ldr	r2, [pc, #156]	; (8003810 <HAL_ADC_ConfigChannel+0x87c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d12d      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003776:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800377a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d127      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a1c      	ldr	r2, [pc, #112]	; (80037f8 <HAL_ADC_ConfigChannel+0x864>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d022      	beq.n	80037d2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003794:	d004      	beq.n	80037a0 <HAL_ADC_ConfigChannel+0x80c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a17      	ldr	r2, [pc, #92]	; (80037f8 <HAL_ADC_ConfigChannel+0x864>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d101      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x810>
 80037a0:	4a16      	ldr	r2, [pc, #88]	; (80037fc <HAL_ADC_ConfigChannel+0x868>)
 80037a2:	e000      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x812>
 80037a4:	4a10      	ldr	r2, [pc, #64]	; (80037e8 <HAL_ADC_ConfigChannel+0x854>)
 80037a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037ae:	4619      	mov	r1, r3
 80037b0:	4610      	mov	r0, r2
 80037b2:	f7fe ff36 	bl	8002622 <LL_ADC_SetCommonPathInternalCh>
 80037b6:	e00c      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037bc:	f043 0220 	orr.w	r2, r3, #32
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80037ca:	e002      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037cc:	bf00      	nop
 80037ce:	e000      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80037da:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80037de:	4618      	mov	r0, r3
 80037e0:	37d8      	adds	r7, #216	; 0xd8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	50000700 	.word	0x50000700
 80037ec:	c3210000 	.word	0xc3210000
 80037f0:	90c00010 	.word	0x90c00010
 80037f4:	50000600 	.word	0x50000600
 80037f8:	50000100 	.word	0x50000100
 80037fc:	50000300 	.word	0x50000300
 8003800:	20000068 	.word	0x20000068
 8003804:	053e2d63 	.word	0x053e2d63
 8003808:	c7520000 	.word	0xc7520000
 800380c:	50000500 	.word	0x50000500
 8003810:	cb840000 	.word	0xcb840000

08003814 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff f8bf 	bl	80029a4 <LL_ADC_IsEnabled>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d14d      	bne.n	80038c8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	4b28      	ldr	r3, [pc, #160]	; (80038d4 <ADC_Enable+0xc0>)
 8003834:	4013      	ands	r3, r2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00d      	beq.n	8003856 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383e:	f043 0210 	orr.w	r2, r3, #16
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800384a:	f043 0201 	orr.w	r2, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e039      	b.n	80038ca <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff f88e 	bl	800297c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003860:	f7fe fe9e 	bl	80025a0 <HAL_GetTick>
 8003864:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003866:	e028      	b.n	80038ba <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff f899 	bl	80029a4 <LL_ADC_IsEnabled>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d104      	bne.n	8003882 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff f87d 	bl	800297c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003882:	f7fe fe8d 	bl	80025a0 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d914      	bls.n	80038ba <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b01      	cmp	r3, #1
 800389c:	d00d      	beq.n	80038ba <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a2:	f043 0210 	orr.w	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ae:	f043 0201 	orr.w	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e007      	b.n	80038ca <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d1cf      	bne.n	8003868 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	8000003f 	.word	0x8000003f

080038d8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d14b      	bne.n	800398a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d021      	beq.n	8003950 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7fe ff45 	bl	80027a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d032      	beq.n	8003982 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d12b      	bne.n	8003982 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d11f      	bne.n	8003982 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003946:	f043 0201 	orr.w	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	65da      	str	r2, [r3, #92]	; 0x5c
 800394e:	e018      	b.n	8003982 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d111      	bne.n	8003982 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003962:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d105      	bne.n	8003982 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397a:	f043 0201 	orr.w	r2, r3, #1
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f7fe f938 	bl	8001bf8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003988:	e00e      	b.n	80039a8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398e:	f003 0310 	and.w	r3, r3, #16
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f7ff faf2 	bl	8002f80 <HAL_ADC_ErrorCallback>
}
 800399c:	e004      	b.n	80039a8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	4798      	blx	r3
}
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f7ff fad4 	bl	8002f6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ea:	f043 0204 	orr.w	r2, r3, #4
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f7ff fac4 	bl	8002f80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039f8:	bf00      	nop
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <LL_ADC_IsEnabled>:
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <LL_ADC_IsEnabled+0x18>
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <LL_ADC_IsEnabled+0x1a>
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <LL_ADC_REG_IsConversionOngoing>:
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d101      	bne.n	8003a3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003a4c:	b590      	push	{r4, r7, lr}
 8003a4e:	b0a1      	sub	sp, #132	; 0x84
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e0e7      	b.n	8003c3a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003a72:	2300      	movs	r3, #0
 8003a74:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003a76:	2300      	movs	r3, #0
 8003a78:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a82:	d102      	bne.n	8003a8a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a84:	4b6f      	ldr	r3, [pc, #444]	; (8003c44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	e009      	b.n	8003a9e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a6e      	ldr	r2, [pc, #440]	; (8003c48 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d102      	bne.n	8003a9a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003a94:	4b6d      	ldr	r3, [pc, #436]	; (8003c4c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	e001      	b.n	8003a9e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10b      	bne.n	8003abc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa8:	f043 0220 	orr.w	r2, r3, #32
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0be      	b.n	8003c3a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff ffb1 	bl	8003a26 <LL_ADC_REG_IsConversionOngoing>
 8003ac4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff ffab 	bl	8003a26 <LL_ADC_REG_IsConversionOngoing>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f040 80a0 	bne.w	8003c18 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f040 809c 	bne.w	8003c18 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ae8:	d004      	beq.n	8003af4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a55      	ldr	r2, [pc, #340]	; (8003c44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d101      	bne.n	8003af8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003af4:	4b56      	ldr	r3, [pc, #344]	; (8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003af6:	e000      	b.n	8003afa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003af8:	4b56      	ldr	r3, [pc, #344]	; (8003c54 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003afa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d04b      	beq.n	8003b9c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	6859      	ldr	r1, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b16:	035b      	lsls	r3, r3, #13
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b1e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b28:	d004      	beq.n	8003b34 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a45      	ldr	r2, [pc, #276]	; (8003c44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d10f      	bne.n	8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003b34:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003b38:	f7ff ff62 	bl	8003a00 <LL_ADC_IsEnabled>
 8003b3c:	4604      	mov	r4, r0
 8003b3e:	4841      	ldr	r0, [pc, #260]	; (8003c44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b40:	f7ff ff5e 	bl	8003a00 <LL_ADC_IsEnabled>
 8003b44:	4603      	mov	r3, r0
 8003b46:	4323      	orrs	r3, r4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	bf0c      	ite	eq
 8003b4c:	2301      	moveq	r3, #1
 8003b4e:	2300      	movne	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	e012      	b.n	8003b7a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003b54:	483c      	ldr	r0, [pc, #240]	; (8003c48 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b56:	f7ff ff53 	bl	8003a00 <LL_ADC_IsEnabled>
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	483b      	ldr	r0, [pc, #236]	; (8003c4c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b5e:	f7ff ff4f 	bl	8003a00 <LL_ADC_IsEnabled>
 8003b62:	4603      	mov	r3, r0
 8003b64:	431c      	orrs	r4, r3
 8003b66:	483c      	ldr	r0, [pc, #240]	; (8003c58 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003b68:	f7ff ff4a 	bl	8003a00 <LL_ADC_IsEnabled>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	4323      	orrs	r3, r4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	bf0c      	ite	eq
 8003b74:	2301      	moveq	r3, #1
 8003b76:	2300      	movne	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d056      	beq.n	8003c2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b86:	f023 030f 	bic.w	r3, r3, #15
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	6811      	ldr	r1, [r2, #0]
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	6892      	ldr	r2, [r2, #8]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	431a      	orrs	r2, r3
 8003b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b98:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b9a:	e047      	b.n	8003c2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bb0:	d004      	beq.n	8003bbc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a23      	ldr	r2, [pc, #140]	; (8003c44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d10f      	bne.n	8003bdc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003bbc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003bc0:	f7ff ff1e 	bl	8003a00 <LL_ADC_IsEnabled>
 8003bc4:	4604      	mov	r4, r0
 8003bc6:	481f      	ldr	r0, [pc, #124]	; (8003c44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bc8:	f7ff ff1a 	bl	8003a00 <LL_ADC_IsEnabled>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	4323      	orrs	r3, r4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	e012      	b.n	8003c02 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003bdc:	481a      	ldr	r0, [pc, #104]	; (8003c48 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003bde:	f7ff ff0f 	bl	8003a00 <LL_ADC_IsEnabled>
 8003be2:	4604      	mov	r4, r0
 8003be4:	4819      	ldr	r0, [pc, #100]	; (8003c4c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003be6:	f7ff ff0b 	bl	8003a00 <LL_ADC_IsEnabled>
 8003bea:	4603      	mov	r3, r0
 8003bec:	431c      	orrs	r4, r3
 8003bee:	481a      	ldr	r0, [pc, #104]	; (8003c58 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003bf0:	f7ff ff06 	bl	8003a00 <LL_ADC_IsEnabled>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	4323      	orrs	r3, r4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d012      	beq.n	8003c2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c0e:	f023 030f 	bic.w	r3, r3, #15
 8003c12:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c14:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c16:	e009      	b.n	8003c2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1c:	f043 0220 	orr.w	r2, r3, #32
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003c2a:	e000      	b.n	8003c2e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c36:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3784      	adds	r7, #132	; 0x84
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd90      	pop	{r4, r7, pc}
 8003c42:	bf00      	nop
 8003c44:	50000100 	.word	0x50000100
 8003c48:	50000400 	.word	0x50000400
 8003c4c:	50000500 	.word	0x50000500
 8003c50:	50000300 	.word	0x50000300
 8003c54:	50000700 	.word	0x50000700
 8003c58:	50000600 	.word	0x50000600

08003c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c78:	4013      	ands	r3, r2
 8003c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c8e:	4a04      	ldr	r2, [pc, #16]	; (8003ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	60d3      	str	r3, [r2, #12]
}
 8003c94:	bf00      	nop
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	e000ed00 	.word	0xe000ed00

08003ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ca8:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <__NVIC_GetPriorityGrouping+0x18>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	0a1b      	lsrs	r3, r3, #8
 8003cae:	f003 0307 	and.w	r3, r3, #7
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	e000ed00 	.word	0xe000ed00

08003cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	db0b      	blt.n	8003cea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	f003 021f 	and.w	r2, r3, #31
 8003cd8:	4907      	ldr	r1, [pc, #28]	; (8003cf8 <__NVIC_EnableIRQ+0x38>)
 8003cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	2001      	movs	r0, #1
 8003ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	e000e100 	.word	0xe000e100

08003cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	6039      	str	r1, [r7, #0]
 8003d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	db0a      	blt.n	8003d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	490c      	ldr	r1, [pc, #48]	; (8003d48 <__NVIC_SetPriority+0x4c>)
 8003d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1a:	0112      	lsls	r2, r2, #4
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	440b      	add	r3, r1
 8003d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d24:	e00a      	b.n	8003d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	4908      	ldr	r1, [pc, #32]	; (8003d4c <__NVIC_SetPriority+0x50>)
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	3b04      	subs	r3, #4
 8003d34:	0112      	lsls	r2, r2, #4
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	440b      	add	r3, r1
 8003d3a:	761a      	strb	r2, [r3, #24]
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	e000e100 	.word	0xe000e100
 8003d4c:	e000ed00 	.word	0xe000ed00

08003d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b089      	sub	sp, #36	; 0x24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f1c3 0307 	rsb	r3, r3, #7
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	bf28      	it	cs
 8003d6e:	2304      	movcs	r3, #4
 8003d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	3304      	adds	r3, #4
 8003d76:	2b06      	cmp	r3, #6
 8003d78:	d902      	bls.n	8003d80 <NVIC_EncodePriority+0x30>
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	3b03      	subs	r3, #3
 8003d7e:	e000      	b.n	8003d82 <NVIC_EncodePriority+0x32>
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d84:	f04f 32ff 	mov.w	r2, #4294967295
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	43da      	mvns	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	401a      	ands	r2, r3
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d98:	f04f 31ff 	mov.w	r1, #4294967295
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003da2:	43d9      	mvns	r1, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003da8:	4313      	orrs	r3, r2
         );
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3724      	adds	r7, #36	; 0x24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dc8:	d301      	bcc.n	8003dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e00f      	b.n	8003dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dce:	4a0a      	ldr	r2, [pc, #40]	; (8003df8 <SysTick_Config+0x40>)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dd6:	210f      	movs	r1, #15
 8003dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ddc:	f7ff ff8e 	bl	8003cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003de0:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <SysTick_Config+0x40>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003de6:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <SysTick_Config+0x40>)
 8003de8:	2207      	movs	r2, #7
 8003dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	e000e010 	.word	0xe000e010

08003dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff ff29 	bl	8003c5c <__NVIC_SetPriorityGrouping>
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b086      	sub	sp, #24
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	4603      	mov	r3, r0
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e20:	f7ff ff40 	bl	8003ca4 <__NVIC_GetPriorityGrouping>
 8003e24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	6978      	ldr	r0, [r7, #20]
 8003e2c:	f7ff ff90 	bl	8003d50 <NVIC_EncodePriority>
 8003e30:	4602      	mov	r2, r0
 8003e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e36:	4611      	mov	r1, r2
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff ff5f 	bl	8003cfc <__NVIC_SetPriority>
}
 8003e3e:	bf00      	nop
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff ff33 	bl	8003cc0 <__NVIC_EnableIRQ>
}
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b082      	sub	sp, #8
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7ff ffa4 	bl	8003db8 <SysTick_Config>
 8003e70:	4603      	mov	r3, r0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e08d      	b.n	8003faa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b47      	ldr	r3, [pc, #284]	; (8003fb4 <HAL_DMA_Init+0x138>)
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d80f      	bhi.n	8003eba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	4b45      	ldr	r3, [pc, #276]	; (8003fb8 <HAL_DMA_Init+0x13c>)
 8003ea2:	4413      	add	r3, r2
 8003ea4:	4a45      	ldr	r2, [pc, #276]	; (8003fbc <HAL_DMA_Init+0x140>)
 8003ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	009a      	lsls	r2, r3, #2
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a42      	ldr	r2, [pc, #264]	; (8003fc0 <HAL_DMA_Init+0x144>)
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40
 8003eb8:	e00e      	b.n	8003ed8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	4b40      	ldr	r3, [pc, #256]	; (8003fc4 <HAL_DMA_Init+0x148>)
 8003ec2:	4413      	add	r3, r2
 8003ec4:	4a3d      	ldr	r2, [pc, #244]	; (8003fbc <HAL_DMA_Init+0x140>)
 8003ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eca:	091b      	lsrs	r3, r3, #4
 8003ecc:	009a      	lsls	r2, r3, #2
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a3c      	ldr	r2, [pc, #240]	; (8003fc8 <HAL_DMA_Init+0x14c>)
 8003ed6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fa76 	bl	800441c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f38:	d102      	bne.n	8003f40 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f54:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d010      	beq.n	8003f80 <HAL_DMA_Init+0x104>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d80c      	bhi.n	8003f80 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fa96 	bl	8004498 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f7c:	605a      	str	r2, [r3, #4]
 8003f7e:	e008      	b.n	8003f92 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40020407 	.word	0x40020407
 8003fb8:	bffdfff8 	.word	0xbffdfff8
 8003fbc:	cccccccd 	.word	0xcccccccd
 8003fc0:	40020000 	.word	0x40020000
 8003fc4:	bffdfbf8 	.word	0xbffdfbf8
 8003fc8:	40020400 	.word	0x40020400

08003fcc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_DMA_Start_IT+0x20>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e066      	b.n	80040ba <HAL_DMA_Start_IT+0xee>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d155      	bne.n	80040ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0201 	bic.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f9bb 	bl	80043a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 020e 	orr.w	r2, r2, #14
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e00f      	b.n	8004064 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0204 	bic.w	r2, r2, #4
 8004052:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 020a 	orr.w	r2, r2, #10
 8004062:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800407c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004080:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004098:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	e005      	b.n	80040b8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80040b4:	2302      	movs	r3, #2
 80040b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80040b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b085      	sub	sp, #20
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d005      	beq.n	80040e6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2204      	movs	r2, #4
 80040de:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
 80040e4:	e037      	b.n	8004156 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 020e 	bic.w	r2, r2, #14
 80040f4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004104:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0201 	bic.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	f003 021f 	and.w	r2, r3, #31
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	2101      	movs	r1, #1
 8004124:	fa01 f202 	lsl.w	r2, r1, r2
 8004128:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004132:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00c      	beq.n	8004156 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800414a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004154:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004166:	7bfb      	ldrb	r3, [r7, #15]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d00d      	beq.n	80041a8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2204      	movs	r2, #4
 8004190:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
 80041a6:	e047      	b.n	8004238 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 020e 	bic.w	r2, r2, #14
 80041b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041dc:	f003 021f 	and.w	r2, r3, #31
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	2101      	movs	r1, #1
 80041e6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00c      	beq.n	8004218 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004208:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800420c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004216:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	4798      	blx	r3
    }
  }
  return status;
 8004238:	7bfb      	ldrb	r3, [r7, #15]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	2204      	movs	r2, #4
 8004264:	409a      	lsls	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4013      	ands	r3, r2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d026      	beq.n	80042bc <HAL_DMA_IRQHandler+0x7a>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d021      	beq.n	80042bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d107      	bne.n	8004296 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0204 	bic.w	r2, r2, #4
 8004294:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	f003 021f 	and.w	r2, r3, #31
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	2104      	movs	r1, #4
 80042a4:	fa01 f202 	lsl.w	r2, r1, r2
 80042a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d071      	beq.n	8004396 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80042ba:	e06c      	b.n	8004396 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	2202      	movs	r2, #2
 80042c6:	409a      	lsls	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d02e      	beq.n	800432e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d029      	beq.n	800432e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10b      	bne.n	8004300 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 020a 	bic.w	r2, r2, #10
 80042f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004304:	f003 021f 	and.w	r2, r3, #31
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	2102      	movs	r1, #2
 800430e:	fa01 f202 	lsl.w	r2, r1, r2
 8004312:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	2b00      	cmp	r3, #0
 8004322:	d038      	beq.n	8004396 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800432c:	e033      	b.n	8004396 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	f003 031f 	and.w	r3, r3, #31
 8004336:	2208      	movs	r2, #8
 8004338:	409a      	lsls	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4013      	ands	r3, r2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d02a      	beq.n	8004398 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d025      	beq.n	8004398 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 020e 	bic.w	r2, r2, #14
 800435a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004360:	f003 021f 	and.w	r2, r3, #31
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	2101      	movs	r1, #1
 800436a:	fa01 f202 	lsl.w	r2, r1, r2
 800436e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438a:	2b00      	cmp	r3, #0
 800438c:	d004      	beq.n	8004398 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004396:	bf00      	nop
 8004398:	bf00      	nop
}
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d004      	beq.n	80043ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ce:	f003 021f 	and.w	r2, r3, #31
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	2101      	movs	r1, #1
 80043d8:	fa01 f202 	lsl.w	r2, r1, r2
 80043dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b10      	cmp	r3, #16
 80043ec:	d108      	bne.n	8004400 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043fe:	e007      	b.n	8004410 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	60da      	str	r2, [r3, #12]
}
 8004410:	bf00      	nop
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	4b16      	ldr	r3, [pc, #88]	; (8004484 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800442c:	429a      	cmp	r2, r3
 800442e:	d802      	bhi.n	8004436 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004430:	4b15      	ldr	r3, [pc, #84]	; (8004488 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	e001      	b.n	800443a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004436:	4b15      	ldr	r3, [pc, #84]	; (800448c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004438:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	3b08      	subs	r3, #8
 8004446:	4a12      	ldr	r2, [pc, #72]	; (8004490 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004448:	fba2 2303 	umull	r2, r3, r2, r3
 800444c:	091b      	lsrs	r3, r3, #4
 800444e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004454:	089b      	lsrs	r3, r3, #2
 8004456:	009a      	lsls	r2, r3, #2
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4413      	add	r3, r2
 800445c:	461a      	mov	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a0b      	ldr	r2, [pc, #44]	; (8004494 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004466:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	2201      	movs	r2, #1
 8004470:	409a      	lsls	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004476:	bf00      	nop
 8004478:	371c      	adds	r7, #28
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40020407 	.word	0x40020407
 8004488:	40020800 	.word	0x40020800
 800448c:	40020820 	.word	0x40020820
 8004490:	cccccccd 	.word	0xcccccccd
 8004494:	40020880 	.word	0x40020880

08004498 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044ac:	4413      	add	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	461a      	mov	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a08      	ldr	r2, [pc, #32]	; (80044dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80044ba:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	3b01      	subs	r3, #1
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	2201      	movs	r2, #1
 80044c6:	409a      	lsls	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	1000823f 	.word	0x1000823f
 80044dc:	40020940 	.word	0x40020940

080044e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044ee:	e15a      	b.n	80047a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	2101      	movs	r1, #1
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	fa01 f303 	lsl.w	r3, r1, r3
 80044fc:	4013      	ands	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 814c 	beq.w	80047a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d005      	beq.n	8004520 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800451c:	2b02      	cmp	r3, #2
 800451e:	d130      	bne.n	8004582 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	2203      	movs	r2, #3
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	43db      	mvns	r3, r3
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4013      	ands	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004556:	2201      	movs	r2, #1
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43db      	mvns	r3, r3
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4013      	ands	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	f003 0201 	and.w	r2, r3, #1
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	2b03      	cmp	r3, #3
 800458c:	d017      	beq.n	80045be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	2203      	movs	r2, #3
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d123      	bne.n	8004612 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	08da      	lsrs	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3208      	adds	r2, #8
 80045d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	220f      	movs	r2, #15
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43db      	mvns	r3, r3
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4013      	ands	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	08da      	lsrs	r2, r3, #3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3208      	adds	r2, #8
 800460c:	6939      	ldr	r1, [r7, #16]
 800460e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	2203      	movs	r2, #3
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43db      	mvns	r3, r3
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4013      	ands	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f003 0203 	and.w	r2, r3, #3
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 80a6 	beq.w	80047a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004654:	4b5b      	ldr	r3, [pc, #364]	; (80047c4 <HAL_GPIO_Init+0x2e4>)
 8004656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004658:	4a5a      	ldr	r2, [pc, #360]	; (80047c4 <HAL_GPIO_Init+0x2e4>)
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	6613      	str	r3, [r2, #96]	; 0x60
 8004660:	4b58      	ldr	r3, [pc, #352]	; (80047c4 <HAL_GPIO_Init+0x2e4>)
 8004662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800466c:	4a56      	ldr	r2, [pc, #344]	; (80047c8 <HAL_GPIO_Init+0x2e8>)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	089b      	lsrs	r3, r3, #2
 8004672:	3302      	adds	r3, #2
 8004674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004678:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	220f      	movs	r2, #15
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	43db      	mvns	r3, r3
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4013      	ands	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004696:	d01f      	beq.n	80046d8 <HAL_GPIO_Init+0x1f8>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a4c      	ldr	r2, [pc, #304]	; (80047cc <HAL_GPIO_Init+0x2ec>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d019      	beq.n	80046d4 <HAL_GPIO_Init+0x1f4>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a4b      	ldr	r2, [pc, #300]	; (80047d0 <HAL_GPIO_Init+0x2f0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d013      	beq.n	80046d0 <HAL_GPIO_Init+0x1f0>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a4a      	ldr	r2, [pc, #296]	; (80047d4 <HAL_GPIO_Init+0x2f4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00d      	beq.n	80046cc <HAL_GPIO_Init+0x1ec>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a49      	ldr	r2, [pc, #292]	; (80047d8 <HAL_GPIO_Init+0x2f8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d007      	beq.n	80046c8 <HAL_GPIO_Init+0x1e8>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a48      	ldr	r2, [pc, #288]	; (80047dc <HAL_GPIO_Init+0x2fc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d101      	bne.n	80046c4 <HAL_GPIO_Init+0x1e4>
 80046c0:	2305      	movs	r3, #5
 80046c2:	e00a      	b.n	80046da <HAL_GPIO_Init+0x1fa>
 80046c4:	2306      	movs	r3, #6
 80046c6:	e008      	b.n	80046da <HAL_GPIO_Init+0x1fa>
 80046c8:	2304      	movs	r3, #4
 80046ca:	e006      	b.n	80046da <HAL_GPIO_Init+0x1fa>
 80046cc:	2303      	movs	r3, #3
 80046ce:	e004      	b.n	80046da <HAL_GPIO_Init+0x1fa>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e002      	b.n	80046da <HAL_GPIO_Init+0x1fa>
 80046d4:	2301      	movs	r3, #1
 80046d6:	e000      	b.n	80046da <HAL_GPIO_Init+0x1fa>
 80046d8:	2300      	movs	r3, #0
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	f002 0203 	and.w	r2, r2, #3
 80046e0:	0092      	lsls	r2, r2, #2
 80046e2:	4093      	lsls	r3, r2
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046ea:	4937      	ldr	r1, [pc, #220]	; (80047c8 <HAL_GPIO_Init+0x2e8>)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	089b      	lsrs	r3, r3, #2
 80046f0:	3302      	adds	r3, #2
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046f8:	4b39      	ldr	r3, [pc, #228]	; (80047e0 <HAL_GPIO_Init+0x300>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	43db      	mvns	r3, r3
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4013      	ands	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800471c:	4a30      	ldr	r2, [pc, #192]	; (80047e0 <HAL_GPIO_Init+0x300>)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004722:	4b2f      	ldr	r3, [pc, #188]	; (80047e0 <HAL_GPIO_Init+0x300>)
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	43db      	mvns	r3, r3
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4013      	ands	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004746:	4a26      	ldr	r2, [pc, #152]	; (80047e0 <HAL_GPIO_Init+0x300>)
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800474c:	4b24      	ldr	r3, [pc, #144]	; (80047e0 <HAL_GPIO_Init+0x300>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	43db      	mvns	r3, r3
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4013      	ands	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004770:	4a1b      	ldr	r2, [pc, #108]	; (80047e0 <HAL_GPIO_Init+0x300>)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004776:	4b1a      	ldr	r3, [pc, #104]	; (80047e0 <HAL_GPIO_Init+0x300>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	43db      	mvns	r3, r3
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	4013      	ands	r3, r2
 8004784:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800479a:	4a11      	ldr	r2, [pc, #68]	; (80047e0 <HAL_GPIO_Init+0x300>)
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	3301      	adds	r3, #1
 80047a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f47f ae9d 	bne.w	80044f0 <HAL_GPIO_Init+0x10>
  }
}
 80047b6:	bf00      	nop
 80047b8:	bf00      	nop
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40010000 	.word	0x40010000
 80047cc:	48000400 	.word	0x48000400
 80047d0:	48000800 	.word	0x48000800
 80047d4:	48000c00 	.word	0x48000c00
 80047d8:	48001000 	.word	0x48001000
 80047dc:	48001400 	.word	0x48001400
 80047e0:	40010400 	.word	0x40010400

080047e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	807b      	strh	r3, [r7, #2]
 80047f0:	4613      	mov	r3, r2
 80047f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047f4:	787b      	ldrb	r3, [r7, #1]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047fa:	887a      	ldrh	r2, [r7, #2]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004800:	e002      	b.n	8004808 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004802:	887a      	ldrh	r2, [r7, #2]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800481e:	4b08      	ldr	r3, [pc, #32]	; (8004840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004820:	695a      	ldr	r2, [r3, #20]
 8004822:	88fb      	ldrh	r3, [r7, #6]
 8004824:	4013      	ands	r3, r2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d006      	beq.n	8004838 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800482a:	4a05      	ldr	r2, [pc, #20]	; (8004840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800482c:	88fb      	ldrh	r3, [r7, #6]
 800482e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004830:	88fb      	ldrh	r3, [r7, #6]
 8004832:	4618      	mov	r0, r3
 8004834:	f000 f806 	bl	8004844 <HAL_GPIO_EXTI_Callback>
  }
}
 8004838:	bf00      	nop
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40010400 	.word	0x40010400

08004844 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d141      	bne.n	80048ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800486a:	4b4b      	ldr	r3, [pc, #300]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004876:	d131      	bne.n	80048dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004878:	4b47      	ldr	r3, [pc, #284]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800487a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800487e:	4a46      	ldr	r2, [pc, #280]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004884:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004888:	4b43      	ldr	r3, [pc, #268]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004890:	4a41      	ldr	r2, [pc, #260]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004896:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004898:	4b40      	ldr	r3, [pc, #256]	; (800499c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2232      	movs	r2, #50	; 0x32
 800489e:	fb02 f303 	mul.w	r3, r2, r3
 80048a2:	4a3f      	ldr	r2, [pc, #252]	; (80049a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048a4:	fba2 2303 	umull	r2, r3, r2, r3
 80048a8:	0c9b      	lsrs	r3, r3, #18
 80048aa:	3301      	adds	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ae:	e002      	b.n	80048b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048b6:	4b38      	ldr	r3, [pc, #224]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c2:	d102      	bne.n	80048ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f2      	bne.n	80048b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048ca:	4b33      	ldr	r3, [pc, #204]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d6:	d158      	bne.n	800498a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e057      	b.n	800498c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048dc:	4b2e      	ldr	r3, [pc, #184]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048e2:	4a2d      	ldr	r2, [pc, #180]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80048ec:	e04d      	b.n	800498a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f4:	d141      	bne.n	800497a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048f6:	4b28      	ldr	r3, [pc, #160]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004902:	d131      	bne.n	8004968 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004904:	4b24      	ldr	r3, [pc, #144]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800490a:	4a23      	ldr	r2, [pc, #140]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800490c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004910:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004914:	4b20      	ldr	r3, [pc, #128]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800491c:	4a1e      	ldr	r2, [pc, #120]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800491e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004922:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004924:	4b1d      	ldr	r3, [pc, #116]	; (800499c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2232      	movs	r2, #50	; 0x32
 800492a:	fb02 f303 	mul.w	r3, r2, r3
 800492e:	4a1c      	ldr	r2, [pc, #112]	; (80049a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004930:	fba2 2303 	umull	r2, r3, r2, r3
 8004934:	0c9b      	lsrs	r3, r3, #18
 8004936:	3301      	adds	r3, #1
 8004938:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800493a:	e002      	b.n	8004942 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3b01      	subs	r3, #1
 8004940:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004942:	4b15      	ldr	r3, [pc, #84]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800494e:	d102      	bne.n	8004956 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f2      	bne.n	800493c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004956:	4b10      	ldr	r3, [pc, #64]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800495e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004962:	d112      	bne.n	800498a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e011      	b.n	800498c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800496a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800496e:	4a0a      	ldr	r2, [pc, #40]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004974:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004978:	e007      	b.n	800498a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800497a:	4b07      	ldr	r3, [pc, #28]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004982:	4a05      	ldr	r2, [pc, #20]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004984:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004988:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	40007000 	.word	0x40007000
 800499c:	20000068 	.word	0x20000068
 80049a0:	431bde83 	.word	0x431bde83

080049a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80049a8:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	4a04      	ldr	r2, [pc, #16]	; (80049c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049b2:	6093      	str	r3, [r2, #8]
}
 80049b4:	bf00      	nop
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40007000 	.word	0x40007000

080049c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e306      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d075      	beq.n	8004ace <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049e2:	4b97      	ldr	r3, [pc, #604]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
 80049ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049ec:	4b94      	ldr	r3, [pc, #592]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b0c      	cmp	r3, #12
 80049fa:	d102      	bne.n	8004a02 <HAL_RCC_OscConfig+0x3e>
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d002      	beq.n	8004a08 <HAL_RCC_OscConfig+0x44>
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d10b      	bne.n	8004a20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a08:	4b8d      	ldr	r3, [pc, #564]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d05b      	beq.n	8004acc <HAL_RCC_OscConfig+0x108>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d157      	bne.n	8004acc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e2e1      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a28:	d106      	bne.n	8004a38 <HAL_RCC_OscConfig+0x74>
 8004a2a:	4b85      	ldr	r3, [pc, #532]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a84      	ldr	r2, [pc, #528]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	e01d      	b.n	8004a74 <HAL_RCC_OscConfig+0xb0>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a40:	d10c      	bne.n	8004a5c <HAL_RCC_OscConfig+0x98>
 8004a42:	4b7f      	ldr	r3, [pc, #508]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a7e      	ldr	r2, [pc, #504]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	4b7c      	ldr	r3, [pc, #496]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a7b      	ldr	r2, [pc, #492]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e00b      	b.n	8004a74 <HAL_RCC_OscConfig+0xb0>
 8004a5c:	4b78      	ldr	r3, [pc, #480]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a77      	ldr	r2, [pc, #476]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	4b75      	ldr	r3, [pc, #468]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a74      	ldr	r2, [pc, #464]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d013      	beq.n	8004aa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7c:	f7fd fd90 	bl	80025a0 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a84:	f7fd fd8c 	bl	80025a0 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b64      	cmp	r3, #100	; 0x64
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e2a6      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a96:	4b6a      	ldr	r3, [pc, #424]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0f0      	beq.n	8004a84 <HAL_RCC_OscConfig+0xc0>
 8004aa2:	e014      	b.n	8004ace <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa4:	f7fd fd7c 	bl	80025a0 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aac:	f7fd fd78 	bl	80025a0 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b64      	cmp	r3, #100	; 0x64
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e292      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004abe:	4b60      	ldr	r3, [pc, #384]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0xe8>
 8004aca:	e000      	b.n	8004ace <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d075      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ada:	4b59      	ldr	r3, [pc, #356]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 030c 	and.w	r3, r3, #12
 8004ae2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ae4:	4b56      	ldr	r3, [pc, #344]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0303 	and.w	r3, r3, #3
 8004aec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b0c      	cmp	r3, #12
 8004af2:	d102      	bne.n	8004afa <HAL_RCC_OscConfig+0x136>
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d002      	beq.n	8004b00 <HAL_RCC_OscConfig+0x13c>
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d11f      	bne.n	8004b40 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b00:	4b4f      	ldr	r3, [pc, #316]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <HAL_RCC_OscConfig+0x154>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e265      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b18:	4b49      	ldr	r3, [pc, #292]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	061b      	lsls	r3, r3, #24
 8004b26:	4946      	ldr	r1, [pc, #280]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b2c:	4b45      	ldr	r3, [pc, #276]	; (8004c44 <HAL_RCC_OscConfig+0x280>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fd fce9 	bl	8002508 <HAL_InitTick>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d043      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e251      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d023      	beq.n	8004b90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b48:	4b3d      	ldr	r3, [pc, #244]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a3c      	ldr	r2, [pc, #240]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fd fd24 	bl	80025a0 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b5c:	f7fd fd20 	bl	80025a0 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e23a      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b6e:	4b34      	ldr	r3, [pc, #208]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b7a:	4b31      	ldr	r3, [pc, #196]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	061b      	lsls	r3, r3, #24
 8004b88:	492d      	ldr	r1, [pc, #180]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	604b      	str	r3, [r1, #4]
 8004b8e:	e01a      	b.n	8004bc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b90:	4b2b      	ldr	r3, [pc, #172]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a2a      	ldr	r2, [pc, #168]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004b96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9c:	f7fd fd00 	bl	80025a0 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba4:	f7fd fcfc 	bl	80025a0 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e216      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bb6:	4b22      	ldr	r3, [pc, #136]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x1e0>
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d041      	beq.n	8004c56 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d01c      	beq.n	8004c14 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bda:	4b19      	ldr	r3, [pc, #100]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be0:	4a17      	ldr	r2, [pc, #92]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bea:	f7fd fcd9 	bl	80025a0 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bf2:	f7fd fcd5 	bl	80025a0 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e1ef      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c04:	4b0e      	ldr	r3, [pc, #56]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0ef      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x22e>
 8004c12:	e020      	b.n	8004c56 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c14:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c1a:	4a09      	ldr	r2, [pc, #36]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004c1c:	f023 0301 	bic.w	r3, r3, #1
 8004c20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c24:	f7fd fcbc 	bl	80025a0 <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c2a:	e00d      	b.n	8004c48 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c2c:	f7fd fcb8 	bl	80025a0 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d906      	bls.n	8004c48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e1d2      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
 8004c3e:	bf00      	nop
 8004c40:	40021000 	.word	0x40021000
 8004c44:	2000006c 	.word	0x2000006c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c48:	4b8c      	ldr	r3, [pc, #560]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1ea      	bne.n	8004c2c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80a6 	beq.w	8004db0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c64:	2300      	movs	r3, #0
 8004c66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c68:	4b84      	ldr	r3, [pc, #528]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <HAL_RCC_OscConfig+0x2b4>
 8004c74:	2301      	movs	r3, #1
 8004c76:	e000      	b.n	8004c7a <HAL_RCC_OscConfig+0x2b6>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00d      	beq.n	8004c9a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c7e:	4b7f      	ldr	r3, [pc, #508]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c82:	4a7e      	ldr	r2, [pc, #504]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c88:	6593      	str	r3, [r2, #88]	; 0x58
 8004c8a:	4b7c      	ldr	r3, [pc, #496]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c96:	2301      	movs	r3, #1
 8004c98:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c9a:	4b79      	ldr	r3, [pc, #484]	; (8004e80 <HAL_RCC_OscConfig+0x4bc>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d118      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ca6:	4b76      	ldr	r3, [pc, #472]	; (8004e80 <HAL_RCC_OscConfig+0x4bc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a75      	ldr	r2, [pc, #468]	; (8004e80 <HAL_RCC_OscConfig+0x4bc>)
 8004cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cb2:	f7fd fc75 	bl	80025a0 <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cb8:	e008      	b.n	8004ccc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cba:	f7fd fc71 	bl	80025a0 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e18b      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ccc:	4b6c      	ldr	r3, [pc, #432]	; (8004e80 <HAL_RCC_OscConfig+0x4bc>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0f0      	beq.n	8004cba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d108      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x32e>
 8004ce0:	4b66      	ldr	r3, [pc, #408]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce6:	4a65      	ldr	r2, [pc, #404]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cf0:	e024      	b.n	8004d3c <HAL_RCC_OscConfig+0x378>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2b05      	cmp	r3, #5
 8004cf8:	d110      	bne.n	8004d1c <HAL_RCC_OscConfig+0x358>
 8004cfa:	4b60      	ldr	r3, [pc, #384]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d00:	4a5e      	ldr	r2, [pc, #376]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004d02:	f043 0304 	orr.w	r3, r3, #4
 8004d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d0a:	4b5c      	ldr	r3, [pc, #368]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d10:	4a5a      	ldr	r2, [pc, #360]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004d12:	f043 0301 	orr.w	r3, r3, #1
 8004d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d1a:	e00f      	b.n	8004d3c <HAL_RCC_OscConfig+0x378>
 8004d1c:	4b57      	ldr	r3, [pc, #348]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d22:	4a56      	ldr	r2, [pc, #344]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d2c:	4b53      	ldr	r3, [pc, #332]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d32:	4a52      	ldr	r2, [pc, #328]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004d34:	f023 0304 	bic.w	r3, r3, #4
 8004d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d016      	beq.n	8004d72 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d44:	f7fd fc2c 	bl	80025a0 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4c:	f7fd fc28 	bl	80025a0 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e140      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d62:	4b46      	ldr	r3, [pc, #280]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0ed      	beq.n	8004d4c <HAL_RCC_OscConfig+0x388>
 8004d70:	e015      	b.n	8004d9e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d72:	f7fd fc15 	bl	80025a0 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d78:	e00a      	b.n	8004d90 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fd fc11 	bl	80025a0 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e129      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d90:	4b3a      	ldr	r3, [pc, #232]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1ed      	bne.n	8004d7a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d9e:	7ffb      	ldrb	r3, [r7, #31]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d105      	bne.n	8004db0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da4:	4b35      	ldr	r3, [pc, #212]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da8:	4a34      	ldr	r2, [pc, #208]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d03c      	beq.n	8004e36 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01c      	beq.n	8004dfe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dc4:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004dc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dca:	4a2c      	ldr	r2, [pc, #176]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004dcc:	f043 0301 	orr.w	r3, r3, #1
 8004dd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd4:	f7fd fbe4 	bl	80025a0 <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ddc:	f7fd fbe0 	bl	80025a0 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e0fa      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dee:	4b23      	ldr	r3, [pc, #140]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004df0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0ef      	beq.n	8004ddc <HAL_RCC_OscConfig+0x418>
 8004dfc:	e01b      	b.n	8004e36 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dfe:	4b1f      	ldr	r3, [pc, #124]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e04:	4a1d      	ldr	r2, [pc, #116]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 8004e0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0e:	f7fd fbc7 	bl	80025a0 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e16:	f7fd fbc3 	bl	80025a0 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e0dd      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e28:	4b14      	ldr	r3, [pc, #80]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004e2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1ef      	bne.n	8004e16 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 80d1 	beq.w	8004fe2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e40:	4b0e      	ldr	r3, [pc, #56]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 030c 	and.w	r3, r3, #12
 8004e48:	2b0c      	cmp	r3, #12
 8004e4a:	f000 808b 	beq.w	8004f64 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d15e      	bne.n	8004f14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e56:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a08      	ldr	r2, [pc, #32]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004e5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e62:	f7fd fb9d 	bl	80025a0 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e68:	e00c      	b.n	8004e84 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e6a:	f7fd fb99 	bl	80025a0 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d905      	bls.n	8004e84 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e0b3      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e84:	4b59      	ldr	r3, [pc, #356]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1ec      	bne.n	8004e6a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e90:	4b56      	ldr	r3, [pc, #344]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	4b56      	ldr	r3, [pc, #344]	; (8004ff0 <HAL_RCC_OscConfig+0x62c>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6a11      	ldr	r1, [r2, #32]
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ea0:	3a01      	subs	r2, #1
 8004ea2:	0112      	lsls	r2, r2, #4
 8004ea4:	4311      	orrs	r1, r2
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004eaa:	0212      	lsls	r2, r2, #8
 8004eac:	4311      	orrs	r1, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004eb2:	0852      	lsrs	r2, r2, #1
 8004eb4:	3a01      	subs	r2, #1
 8004eb6:	0552      	lsls	r2, r2, #21
 8004eb8:	4311      	orrs	r1, r2
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ebe:	0852      	lsrs	r2, r2, #1
 8004ec0:	3a01      	subs	r2, #1
 8004ec2:	0652      	lsls	r2, r2, #25
 8004ec4:	4311      	orrs	r1, r2
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004eca:	06d2      	lsls	r2, r2, #27
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	4947      	ldr	r1, [pc, #284]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed4:	4b45      	ldr	r3, [pc, #276]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a44      	ldr	r2, [pc, #272]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ede:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ee0:	4b42      	ldr	r3, [pc, #264]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4a41      	ldr	r2, [pc, #260]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eec:	f7fd fb58 	bl	80025a0 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef4:	f7fd fb54 	bl	80025a0 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e06e      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f06:	4b39      	ldr	r3, [pc, #228]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0f0      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x530>
 8004f12:	e066      	b.n	8004fe2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f14:	4b35      	ldr	r3, [pc, #212]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a34      	ldr	r2, [pc, #208]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f1e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004f20:	4b32      	ldr	r3, [pc, #200]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	4a31      	ldr	r2, [pc, #196]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004f26:	f023 0303 	bic.w	r3, r3, #3
 8004f2a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f2c:	4b2f      	ldr	r3, [pc, #188]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	4a2e      	ldr	r2, [pc, #184]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004f32:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3c:	f7fd fb30 	bl	80025a0 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f44:	f7fd fb2c 	bl	80025a0 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e046      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f56:	4b25      	ldr	r3, [pc, #148]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0x580>
 8004f62:	e03e      	b.n	8004fe2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e039      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f70:	4b1e      	ldr	r3, [pc, #120]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f003 0203 	and.w	r2, r3, #3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d12c      	bne.n	8004fde <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d123      	bne.n	8004fde <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d11b      	bne.n	8004fde <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d113      	bne.n	8004fde <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d109      	bne.n	8004fde <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd4:	085b      	lsrs	r3, r3, #1
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3720      	adds	r7, #32
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	019f800c 	.word	0x019f800c

08004ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e11e      	b.n	800524a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800500c:	4b91      	ldr	r3, [pc, #580]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d910      	bls.n	800503c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501a:	4b8e      	ldr	r3, [pc, #568]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f023 020f 	bic.w	r2, r3, #15
 8005022:	498c      	ldr	r1, [pc, #560]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	4313      	orrs	r3, r2
 8005028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800502a:	4b8a      	ldr	r3, [pc, #552]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d001      	beq.n	800503c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e106      	b.n	800524a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d073      	beq.n	8005130 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b03      	cmp	r3, #3
 800504e:	d129      	bne.n	80050a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005050:	4b81      	ldr	r3, [pc, #516]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e0f4      	b.n	800524a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005060:	f000 f99e 	bl	80053a0 <RCC_GetSysClockFreqFromPLLSource>
 8005064:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	4a7c      	ldr	r2, [pc, #496]	; (800525c <HAL_RCC_ClockConfig+0x268>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d93f      	bls.n	80050ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800506e:	4b7a      	ldr	r3, [pc, #488]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d009      	beq.n	800508e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005082:	2b00      	cmp	r3, #0
 8005084:	d033      	beq.n	80050ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800508a:	2b00      	cmp	r3, #0
 800508c:	d12f      	bne.n	80050ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800508e:	4b72      	ldr	r3, [pc, #456]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005096:	4a70      	ldr	r2, [pc, #448]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 8005098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800509c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800509e:	2380      	movs	r3, #128	; 0x80
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	e024      	b.n	80050ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d107      	bne.n	80050bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ac:	4b6a      	ldr	r3, [pc, #424]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d109      	bne.n	80050cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e0c6      	b.n	800524a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050bc:	4b66      	ldr	r3, [pc, #408]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0be      	b.n	800524a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80050cc:	f000 f8ce 	bl	800526c <HAL_RCC_GetSysClockFreq>
 80050d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	4a61      	ldr	r2, [pc, #388]	; (800525c <HAL_RCC_ClockConfig+0x268>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d909      	bls.n	80050ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050da:	4b5f      	ldr	r3, [pc, #380]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e2:	4a5d      	ldr	r2, [pc, #372]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 80050e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80050ea:	2380      	movs	r3, #128	; 0x80
 80050ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050ee:	4b5a      	ldr	r3, [pc, #360]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f023 0203 	bic.w	r2, r3, #3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	4957      	ldr	r1, [pc, #348]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005100:	f7fd fa4e 	bl	80025a0 <HAL_GetTick>
 8005104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005106:	e00a      	b.n	800511e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005108:	f7fd fa4a 	bl	80025a0 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	f241 3288 	movw	r2, #5000	; 0x1388
 8005116:	4293      	cmp	r3, r2
 8005118:	d901      	bls.n	800511e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e095      	b.n	800524a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511e:	4b4e      	ldr	r3, [pc, #312]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 020c 	and.w	r2, r3, #12
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	429a      	cmp	r2, r3
 800512e:	d1eb      	bne.n	8005108 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d023      	beq.n	8005184 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005148:	4b43      	ldr	r3, [pc, #268]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	4a42      	ldr	r2, [pc, #264]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 800514e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005152:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d007      	beq.n	8005170 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005160:	4b3d      	ldr	r3, [pc, #244]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005168:	4a3b      	ldr	r2, [pc, #236]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 800516a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800516e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005170:	4b39      	ldr	r3, [pc, #228]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	4936      	ldr	r1, [pc, #216]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 800517e:	4313      	orrs	r3, r2
 8005180:	608b      	str	r3, [r1, #8]
 8005182:	e008      	b.n	8005196 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2b80      	cmp	r3, #128	; 0x80
 8005188:	d105      	bne.n	8005196 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800518a:	4b33      	ldr	r3, [pc, #204]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	4a32      	ldr	r2, [pc, #200]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 8005190:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005194:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005196:	4b2f      	ldr	r3, [pc, #188]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d21d      	bcs.n	80051e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a4:	4b2b      	ldr	r3, [pc, #172]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f023 020f 	bic.w	r2, r3, #15
 80051ac:	4929      	ldr	r1, [pc, #164]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051b4:	f7fd f9f4 	bl	80025a0 <HAL_GetTick>
 80051b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ba:	e00a      	b.n	80051d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051bc:	f7fd f9f0 	bl	80025a0 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e03b      	b.n	800524a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d2:	4b20      	ldr	r3, [pc, #128]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d1ed      	bne.n	80051bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051ec:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	4917      	ldr	r1, [pc, #92]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0308 	and.w	r3, r3, #8
 8005206:	2b00      	cmp	r3, #0
 8005208:	d009      	beq.n	800521e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800520a:	4b13      	ldr	r3, [pc, #76]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	490f      	ldr	r1, [pc, #60]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 800521a:	4313      	orrs	r3, r2
 800521c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800521e:	f000 f825 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8005222:	4602      	mov	r2, r0
 8005224:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	490c      	ldr	r1, [pc, #48]	; (8005260 <HAL_RCC_ClockConfig+0x26c>)
 8005230:	5ccb      	ldrb	r3, [r1, r3]
 8005232:	f003 031f 	and.w	r3, r3, #31
 8005236:	fa22 f303 	lsr.w	r3, r2, r3
 800523a:	4a0a      	ldr	r2, [pc, #40]	; (8005264 <HAL_RCC_ClockConfig+0x270>)
 800523c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800523e:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <HAL_RCC_ClockConfig+0x274>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f7fd f960 	bl	8002508 <HAL_InitTick>
 8005248:	4603      	mov	r3, r0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40022000 	.word	0x40022000
 8005258:	40021000 	.word	0x40021000
 800525c:	04c4b400 	.word	0x04c4b400
 8005260:	0800f118 	.word	0x0800f118
 8005264:	20000068 	.word	0x20000068
 8005268:	2000006c 	.word	0x2000006c

0800526c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005272:	4b2c      	ldr	r3, [pc, #176]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 030c 	and.w	r3, r3, #12
 800527a:	2b04      	cmp	r3, #4
 800527c:	d102      	bne.n	8005284 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800527e:	4b2a      	ldr	r3, [pc, #168]	; (8005328 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	e047      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005284:	4b27      	ldr	r3, [pc, #156]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f003 030c 	and.w	r3, r3, #12
 800528c:	2b08      	cmp	r3, #8
 800528e:	d102      	bne.n	8005296 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005290:	4b26      	ldr	r3, [pc, #152]	; (800532c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	e03e      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005296:	4b23      	ldr	r3, [pc, #140]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 030c 	and.w	r3, r3, #12
 800529e:	2b0c      	cmp	r3, #12
 80052a0:	d136      	bne.n	8005310 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052a2:	4b20      	ldr	r3, [pc, #128]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052ac:	4b1d      	ldr	r3, [pc, #116]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	091b      	lsrs	r3, r3, #4
 80052b2:	f003 030f 	and.w	r3, r3, #15
 80052b6:	3301      	adds	r3, #1
 80052b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d10c      	bne.n	80052da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052c0:	4a1a      	ldr	r2, [pc, #104]	; (800532c <HAL_RCC_GetSysClockFreq+0xc0>)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c8:	4a16      	ldr	r2, [pc, #88]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052ca:	68d2      	ldr	r2, [r2, #12]
 80052cc:	0a12      	lsrs	r2, r2, #8
 80052ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052d2:	fb02 f303 	mul.w	r3, r2, r3
 80052d6:	617b      	str	r3, [r7, #20]
      break;
 80052d8:	e00c      	b.n	80052f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052da:	4a13      	ldr	r2, [pc, #76]	; (8005328 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e2:	4a10      	ldr	r2, [pc, #64]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052e4:	68d2      	ldr	r2, [r2, #12]
 80052e6:	0a12      	lsrs	r2, r2, #8
 80052e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052ec:	fb02 f303 	mul.w	r3, r2, r3
 80052f0:	617b      	str	r3, [r7, #20]
      break;
 80052f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052f4:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	0e5b      	lsrs	r3, r3, #25
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	3301      	adds	r3, #1
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	fbb2 f3f3 	udiv	r3, r2, r3
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	e001      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005314:	693b      	ldr	r3, [r7, #16]
}
 8005316:	4618      	mov	r0, r3
 8005318:	371c      	adds	r7, #28
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40021000 	.word	0x40021000
 8005328:	00f42400 	.word	0x00f42400
 800532c:	016e3600 	.word	0x016e3600

08005330 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005334:	4b03      	ldr	r3, [pc, #12]	; (8005344 <HAL_RCC_GetHCLKFreq+0x14>)
 8005336:	681b      	ldr	r3, [r3, #0]
}
 8005338:	4618      	mov	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20000068 	.word	0x20000068

08005348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800534c:	f7ff fff0 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 8005350:	4602      	mov	r2, r0
 8005352:	4b06      	ldr	r3, [pc, #24]	; (800536c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	0a1b      	lsrs	r3, r3, #8
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	4904      	ldr	r1, [pc, #16]	; (8005370 <HAL_RCC_GetPCLK1Freq+0x28>)
 800535e:	5ccb      	ldrb	r3, [r1, r3]
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005368:	4618      	mov	r0, r3
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40021000 	.word	0x40021000
 8005370:	0800f128 	.word	0x0800f128

08005374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005378:	f7ff ffda 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 800537c:	4602      	mov	r2, r0
 800537e:	4b06      	ldr	r3, [pc, #24]	; (8005398 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	0adb      	lsrs	r3, r3, #11
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	4904      	ldr	r1, [pc, #16]	; (800539c <HAL_RCC_GetPCLK2Freq+0x28>)
 800538a:	5ccb      	ldrb	r3, [r1, r3]
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005394:	4618      	mov	r0, r3
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40021000 	.word	0x40021000
 800539c:	0800f128 	.word	0x0800f128

080053a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053a6:	4b1e      	ldr	r3, [pc, #120]	; (8005420 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053b0:	4b1b      	ldr	r3, [pc, #108]	; (8005420 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	091b      	lsrs	r3, r3, #4
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	3301      	adds	r3, #1
 80053bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d10c      	bne.n	80053de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053c4:	4a17      	ldr	r2, [pc, #92]	; (8005424 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053cc:	4a14      	ldr	r2, [pc, #80]	; (8005420 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053ce:	68d2      	ldr	r2, [r2, #12]
 80053d0:	0a12      	lsrs	r2, r2, #8
 80053d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053d6:	fb02 f303 	mul.w	r3, r2, r3
 80053da:	617b      	str	r3, [r7, #20]
    break;
 80053dc:	e00c      	b.n	80053f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053de:	4a12      	ldr	r2, [pc, #72]	; (8005428 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e6:	4a0e      	ldr	r2, [pc, #56]	; (8005420 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053e8:	68d2      	ldr	r2, [r2, #12]
 80053ea:	0a12      	lsrs	r2, r2, #8
 80053ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053f0:	fb02 f303 	mul.w	r3, r2, r3
 80053f4:	617b      	str	r3, [r7, #20]
    break;
 80053f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053f8:	4b09      	ldr	r3, [pc, #36]	; (8005420 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	0e5b      	lsrs	r3, r3, #25
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	3301      	adds	r3, #1
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005410:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005412:	687b      	ldr	r3, [r7, #4]
}
 8005414:	4618      	mov	r0, r3
 8005416:	371c      	adds	r7, #28
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	40021000 	.word	0x40021000
 8005424:	016e3600 	.word	0x016e3600
 8005428:	00f42400 	.word	0x00f42400

0800542c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005434:	2300      	movs	r3, #0
 8005436:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005438:	2300      	movs	r3, #0
 800543a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 8098 	beq.w	800557a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800544a:	2300      	movs	r3, #0
 800544c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800544e:	4b43      	ldr	r3, [pc, #268]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10d      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800545a:	4b40      	ldr	r3, [pc, #256]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800545c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545e:	4a3f      	ldr	r2, [pc, #252]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005464:	6593      	str	r3, [r2, #88]	; 0x58
 8005466:	4b3d      	ldr	r3, [pc, #244]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800546e:	60bb      	str	r3, [r7, #8]
 8005470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005472:	2301      	movs	r3, #1
 8005474:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005476:	4b3a      	ldr	r3, [pc, #232]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a39      	ldr	r2, [pc, #228]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800547c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005480:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005482:	f7fd f88d 	bl	80025a0 <HAL_GetTick>
 8005486:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005488:	e009      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800548a:	f7fd f889 	bl	80025a0 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d902      	bls.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	74fb      	strb	r3, [r7, #19]
        break;
 800549c:	e005      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800549e:	4b30      	ldr	r3, [pc, #192]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0ef      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80054aa:	7cfb      	ldrb	r3, [r7, #19]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d159      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054b0:	4b2a      	ldr	r3, [pc, #168]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d01e      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d019      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054cc:	4b23      	ldr	r3, [pc, #140]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054d8:	4b20      	ldr	r3, [pc, #128]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054de:	4a1f      	ldr	r2, [pc, #124]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054e8:	4b1c      	ldr	r3, [pc, #112]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ee:	4a1b      	ldr	r2, [pc, #108]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054f8:	4a18      	ldr	r2, [pc, #96]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d016      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550a:	f7fd f849 	bl	80025a0 <HAL_GetTick>
 800550e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005510:	e00b      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005512:	f7fd f845 	bl	80025a0 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005520:	4293      	cmp	r3, r2
 8005522:	d902      	bls.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	74fb      	strb	r3, [r7, #19]
            break;
 8005528:	e006      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800552a:	4b0c      	ldr	r3, [pc, #48]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800552c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0ec      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005538:	7cfb      	ldrb	r3, [r7, #19]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10b      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800553e:	4b07      	ldr	r3, [pc, #28]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005544:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800554c:	4903      	ldr	r1, [pc, #12]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005554:	e008      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005556:	7cfb      	ldrb	r3, [r7, #19]
 8005558:	74bb      	strb	r3, [r7, #18]
 800555a:	e005      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800555c:	40021000 	.word	0x40021000
 8005560:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005564:	7cfb      	ldrb	r3, [r7, #19]
 8005566:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005568:	7c7b      	ldrb	r3, [r7, #17]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d105      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800556e:	4ba7      	ldr	r3, [pc, #668]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005572:	4aa6      	ldr	r2, [pc, #664]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005578:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005586:	4ba1      	ldr	r3, [pc, #644]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558c:	f023 0203 	bic.w	r2, r3, #3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	499d      	ldr	r1, [pc, #628]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055a8:	4b98      	ldr	r3, [pc, #608]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ae:	f023 020c 	bic.w	r2, r3, #12
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	4995      	ldr	r1, [pc, #596]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055ca:	4b90      	ldr	r3, [pc, #576]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	498c      	ldr	r1, [pc, #560]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00a      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055ec:	4b87      	ldr	r3, [pc, #540]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	4984      	ldr	r1, [pc, #528]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800560e:	4b7f      	ldr	r3, [pc, #508]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005614:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	497b      	ldr	r1, [pc, #492]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800561e:	4313      	orrs	r3, r2
 8005620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00a      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005630:	4b76      	ldr	r3, [pc, #472]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005636:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	4973      	ldr	r1, [pc, #460]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005640:	4313      	orrs	r3, r2
 8005642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005652:	4b6e      	ldr	r3, [pc, #440]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005658:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	496a      	ldr	r1, [pc, #424]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00a      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005674:	4b65      	ldr	r3, [pc, #404]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	4962      	ldr	r1, [pc, #392]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005696:	4b5d      	ldr	r3, [pc, #372]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	4959      	ldr	r1, [pc, #356]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056b8:	4b54      	ldr	r3, [pc, #336]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056be:	f023 0203 	bic.w	r2, r3, #3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	4951      	ldr	r1, [pc, #324]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056da:	4b4c      	ldr	r3, [pc, #304]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	4948      	ldr	r1, [pc, #288]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d015      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056fc:	4b43      	ldr	r3, [pc, #268]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005702:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570a:	4940      	ldr	r1, [pc, #256]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800570c:	4313      	orrs	r3, r2
 800570e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800571a:	d105      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800571c:	4b3b      	ldr	r3, [pc, #236]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	4a3a      	ldr	r2, [pc, #232]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005726:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005730:	2b00      	cmp	r3, #0
 8005732:	d015      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005734:	4b35      	ldr	r3, [pc, #212]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005742:	4932      	ldr	r1, [pc, #200]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005744:	4313      	orrs	r3, r2
 8005746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005752:	d105      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005754:	4b2d      	ldr	r3, [pc, #180]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	4a2c      	ldr	r2, [pc, #176]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800575a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800575e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d015      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800576c:	4b27      	ldr	r3, [pc, #156]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800576e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005772:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577a:	4924      	ldr	r1, [pc, #144]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800578a:	d105      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800578c:	4b1f      	ldr	r3, [pc, #124]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	4a1e      	ldr	r2, [pc, #120]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005796:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d015      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057a4:	4b19      	ldr	r3, [pc, #100]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	4916      	ldr	r1, [pc, #88]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057c2:	d105      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057c4:	4b11      	ldr	r3, [pc, #68]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	4a10      	ldr	r2, [pc, #64]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d019      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057dc:	4b0b      	ldr	r3, [pc, #44]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	4908      	ldr	r1, [pc, #32]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057fa:	d109      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057fc:	4b03      	ldr	r3, [pc, #12]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	4a02      	ldr	r2, [pc, #8]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005806:	60d3      	str	r3, [r2, #12]
 8005808:	e002      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800580a:	bf00      	nop
 800580c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d015      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800581c:	4b29      	ldr	r3, [pc, #164]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800581e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005822:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582a:	4926      	ldr	r1, [pc, #152]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800583a:	d105      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800583c:	4b21      	ldr	r3, [pc, #132]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	4a20      	ldr	r2, [pc, #128]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005846:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d015      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005854:	4b1b      	ldr	r3, [pc, #108]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005862:	4918      	ldr	r1, [pc, #96]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005864:	4313      	orrs	r3, r2
 8005866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800586e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005872:	d105      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005874:	4b13      	ldr	r3, [pc, #76]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	4a12      	ldr	r2, [pc, #72]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800587a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800587e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d015      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800588c:	4b0d      	ldr	r3, [pc, #52]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800588e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005892:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800589a:	490a      	ldr	r1, [pc, #40]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058aa:	d105      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058ac:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	4a04      	ldr	r2, [pc, #16]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80058b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	40021000 	.word	0x40021000

080058c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e049      	b.n	800596e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d106      	bne.n	80058f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fc fc68 	bl	80021c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3304      	adds	r3, #4
 8005904:	4619      	mov	r1, r3
 8005906:	4610      	mov	r0, r2
 8005908:	f001 f834 	bl	8006974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b01      	cmp	r3, #1
 800598a:	d001      	beq.n	8005990 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e04c      	b.n	8005a2a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a26      	ldr	r2, [pc, #152]	; (8005a38 <HAL_TIM_Base_Start+0xc0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d022      	beq.n	80059e8 <HAL_TIM_Base_Start+0x70>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059aa:	d01d      	beq.n	80059e8 <HAL_TIM_Base_Start+0x70>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a22      	ldr	r2, [pc, #136]	; (8005a3c <HAL_TIM_Base_Start+0xc4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d018      	beq.n	80059e8 <HAL_TIM_Base_Start+0x70>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a21      	ldr	r2, [pc, #132]	; (8005a40 <HAL_TIM_Base_Start+0xc8>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d013      	beq.n	80059e8 <HAL_TIM_Base_Start+0x70>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1f      	ldr	r2, [pc, #124]	; (8005a44 <HAL_TIM_Base_Start+0xcc>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00e      	beq.n	80059e8 <HAL_TIM_Base_Start+0x70>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a1e      	ldr	r2, [pc, #120]	; (8005a48 <HAL_TIM_Base_Start+0xd0>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d009      	beq.n	80059e8 <HAL_TIM_Base_Start+0x70>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1c      	ldr	r2, [pc, #112]	; (8005a4c <HAL_TIM_Base_Start+0xd4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d004      	beq.n	80059e8 <HAL_TIM_Base_Start+0x70>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1b      	ldr	r2, [pc, #108]	; (8005a50 <HAL_TIM_Base_Start+0xd8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d115      	bne.n	8005a14 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	4b19      	ldr	r3, [pc, #100]	; (8005a54 <HAL_TIM_Base_Start+0xdc>)
 80059f0:	4013      	ands	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b06      	cmp	r3, #6
 80059f8:	d015      	beq.n	8005a26 <HAL_TIM_Base_Start+0xae>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a00:	d011      	beq.n	8005a26 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f042 0201 	orr.w	r2, r2, #1
 8005a10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a12:	e008      	b.n	8005a26 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0201 	orr.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	e000      	b.n	8005a28 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40012c00 	.word	0x40012c00
 8005a3c:	40000400 	.word	0x40000400
 8005a40:	40000800 	.word	0x40000800
 8005a44:	40000c00 	.word	0x40000c00
 8005a48:	40013400 	.word	0x40013400
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40015000 	.word	0x40015000
 8005a54:	00010007 	.word	0x00010007

08005a58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d001      	beq.n	8005a70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e054      	b.n	8005b1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a26      	ldr	r2, [pc, #152]	; (8005b28 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d022      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a9a:	d01d      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a22      	ldr	r2, [pc, #136]	; (8005b2c <HAL_TIM_Base_Start_IT+0xd4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d018      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a21      	ldr	r2, [pc, #132]	; (8005b30 <HAL_TIM_Base_Start_IT+0xd8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d013      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a1f      	ldr	r2, [pc, #124]	; (8005b34 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00e      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1e      	ldr	r2, [pc, #120]	; (8005b38 <HAL_TIM_Base_Start_IT+0xe0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d009      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1c      	ldr	r2, [pc, #112]	; (8005b3c <HAL_TIM_Base_Start_IT+0xe4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d004      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a1b      	ldr	r2, [pc, #108]	; (8005b40 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d115      	bne.n	8005b04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689a      	ldr	r2, [r3, #8]
 8005ade:	4b19      	ldr	r3, [pc, #100]	; (8005b44 <HAL_TIM_Base_Start_IT+0xec>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b06      	cmp	r3, #6
 8005ae8:	d015      	beq.n	8005b16 <HAL_TIM_Base_Start_IT+0xbe>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af0:	d011      	beq.n	8005b16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f042 0201 	orr.w	r2, r2, #1
 8005b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b02:	e008      	b.n	8005b16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0201 	orr.w	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	e000      	b.n	8005b18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40012c00 	.word	0x40012c00
 8005b2c:	40000400 	.word	0x40000400
 8005b30:	40000800 	.word	0x40000800
 8005b34:	40000c00 	.word	0x40000c00
 8005b38:	40013400 	.word	0x40013400
 8005b3c:	40014000 	.word	0x40014000
 8005b40:	40015000 	.word	0x40015000
 8005b44:	00010007 	.word	0x00010007

08005b48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e049      	b.n	8005bee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d106      	bne.n	8005b74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f841 	bl	8005bf6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3304      	adds	r3, #4
 8005b84:	4619      	mov	r1, r3
 8005b86:	4610      	mov	r0, r2
 8005b88:	f000 fef4 	bl	8006974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
	...

08005c0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d109      	bne.n	8005c30 <HAL_TIM_PWM_Start+0x24>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	bf14      	ite	ne
 8005c28:	2301      	movne	r3, #1
 8005c2a:	2300      	moveq	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	e03c      	b.n	8005caa <HAL_TIM_PWM_Start+0x9e>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d109      	bne.n	8005c4a <HAL_TIM_PWM_Start+0x3e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	bf14      	ite	ne
 8005c42:	2301      	movne	r3, #1
 8005c44:	2300      	moveq	r3, #0
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	e02f      	b.n	8005caa <HAL_TIM_PWM_Start+0x9e>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d109      	bne.n	8005c64 <HAL_TIM_PWM_Start+0x58>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	bf14      	ite	ne
 8005c5c:	2301      	movne	r3, #1
 8005c5e:	2300      	moveq	r3, #0
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	e022      	b.n	8005caa <HAL_TIM_PWM_Start+0x9e>
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2b0c      	cmp	r3, #12
 8005c68:	d109      	bne.n	8005c7e <HAL_TIM_PWM_Start+0x72>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	bf14      	ite	ne
 8005c76:	2301      	movne	r3, #1
 8005c78:	2300      	moveq	r3, #0
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	e015      	b.n	8005caa <HAL_TIM_PWM_Start+0x9e>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b10      	cmp	r3, #16
 8005c82:	d109      	bne.n	8005c98 <HAL_TIM_PWM_Start+0x8c>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	bf14      	ite	ne
 8005c90:	2301      	movne	r3, #1
 8005c92:	2300      	moveq	r3, #0
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	e008      	b.n	8005caa <HAL_TIM_PWM_Start+0x9e>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	bf14      	ite	ne
 8005ca4:	2301      	movne	r3, #1
 8005ca6:	2300      	moveq	r3, #0
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e0a6      	b.n	8005e00 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d104      	bne.n	8005cc2 <HAL_TIM_PWM_Start+0xb6>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cc0:	e023      	b.n	8005d0a <HAL_TIM_PWM_Start+0xfe>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d104      	bne.n	8005cd2 <HAL_TIM_PWM_Start+0xc6>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cd0:	e01b      	b.n	8005d0a <HAL_TIM_PWM_Start+0xfe>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b08      	cmp	r3, #8
 8005cd6:	d104      	bne.n	8005ce2 <HAL_TIM_PWM_Start+0xd6>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ce0:	e013      	b.n	8005d0a <HAL_TIM_PWM_Start+0xfe>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b0c      	cmp	r3, #12
 8005ce6:	d104      	bne.n	8005cf2 <HAL_TIM_PWM_Start+0xe6>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cf0:	e00b      	b.n	8005d0a <HAL_TIM_PWM_Start+0xfe>
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b10      	cmp	r3, #16
 8005cf6:	d104      	bne.n	8005d02 <HAL_TIM_PWM_Start+0xf6>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d00:	e003      	b.n	8005d0a <HAL_TIM_PWM_Start+0xfe>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2202      	movs	r2, #2
 8005d06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f001 fa9c 	bl	8007250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a3a      	ldr	r2, [pc, #232]	; (8005e08 <HAL_TIM_PWM_Start+0x1fc>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d018      	beq.n	8005d54 <HAL_TIM_PWM_Start+0x148>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a39      	ldr	r2, [pc, #228]	; (8005e0c <HAL_TIM_PWM_Start+0x200>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d013      	beq.n	8005d54 <HAL_TIM_PWM_Start+0x148>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a37      	ldr	r2, [pc, #220]	; (8005e10 <HAL_TIM_PWM_Start+0x204>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d00e      	beq.n	8005d54 <HAL_TIM_PWM_Start+0x148>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a36      	ldr	r2, [pc, #216]	; (8005e14 <HAL_TIM_PWM_Start+0x208>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d009      	beq.n	8005d54 <HAL_TIM_PWM_Start+0x148>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a34      	ldr	r2, [pc, #208]	; (8005e18 <HAL_TIM_PWM_Start+0x20c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d004      	beq.n	8005d54 <HAL_TIM_PWM_Start+0x148>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a33      	ldr	r2, [pc, #204]	; (8005e1c <HAL_TIM_PWM_Start+0x210>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d101      	bne.n	8005d58 <HAL_TIM_PWM_Start+0x14c>
 8005d54:	2301      	movs	r3, #1
 8005d56:	e000      	b.n	8005d5a <HAL_TIM_PWM_Start+0x14e>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d007      	beq.n	8005d6e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a25      	ldr	r2, [pc, #148]	; (8005e08 <HAL_TIM_PWM_Start+0x1fc>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d022      	beq.n	8005dbe <HAL_TIM_PWM_Start+0x1b2>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d80:	d01d      	beq.n	8005dbe <HAL_TIM_PWM_Start+0x1b2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a26      	ldr	r2, [pc, #152]	; (8005e20 <HAL_TIM_PWM_Start+0x214>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d018      	beq.n	8005dbe <HAL_TIM_PWM_Start+0x1b2>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a24      	ldr	r2, [pc, #144]	; (8005e24 <HAL_TIM_PWM_Start+0x218>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d013      	beq.n	8005dbe <HAL_TIM_PWM_Start+0x1b2>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a23      	ldr	r2, [pc, #140]	; (8005e28 <HAL_TIM_PWM_Start+0x21c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00e      	beq.n	8005dbe <HAL_TIM_PWM_Start+0x1b2>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a19      	ldr	r2, [pc, #100]	; (8005e0c <HAL_TIM_PWM_Start+0x200>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d009      	beq.n	8005dbe <HAL_TIM_PWM_Start+0x1b2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a18      	ldr	r2, [pc, #96]	; (8005e10 <HAL_TIM_PWM_Start+0x204>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d004      	beq.n	8005dbe <HAL_TIM_PWM_Start+0x1b2>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a18      	ldr	r2, [pc, #96]	; (8005e1c <HAL_TIM_PWM_Start+0x210>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d115      	bne.n	8005dea <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	4b19      	ldr	r3, [pc, #100]	; (8005e2c <HAL_TIM_PWM_Start+0x220>)
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b06      	cmp	r3, #6
 8005dce:	d015      	beq.n	8005dfc <HAL_TIM_PWM_Start+0x1f0>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd6:	d011      	beq.n	8005dfc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0201 	orr.w	r2, r2, #1
 8005de6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de8:	e008      	b.n	8005dfc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f042 0201 	orr.w	r2, r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	e000      	b.n	8005dfe <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	40012c00 	.word	0x40012c00
 8005e0c:	40013400 	.word	0x40013400
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40014400 	.word	0x40014400
 8005e18:	40014800 	.word	0x40014800
 8005e1c:	40015000 	.word	0x40015000
 8005e20:	40000400 	.word	0x40000400
 8005e24:	40000800 	.word	0x40000800
 8005e28:	40000c00 	.word	0x40000c00
 8005e2c:	00010007 	.word	0x00010007

08005e30 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	6839      	ldr	r1, [r7, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f001 fa04 	bl	8007250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a40      	ldr	r2, [pc, #256]	; (8005f50 <HAL_TIM_PWM_Stop+0x120>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d018      	beq.n	8005e84 <HAL_TIM_PWM_Stop+0x54>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a3f      	ldr	r2, [pc, #252]	; (8005f54 <HAL_TIM_PWM_Stop+0x124>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d013      	beq.n	8005e84 <HAL_TIM_PWM_Stop+0x54>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a3d      	ldr	r2, [pc, #244]	; (8005f58 <HAL_TIM_PWM_Stop+0x128>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d00e      	beq.n	8005e84 <HAL_TIM_PWM_Stop+0x54>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a3c      	ldr	r2, [pc, #240]	; (8005f5c <HAL_TIM_PWM_Stop+0x12c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d009      	beq.n	8005e84 <HAL_TIM_PWM_Stop+0x54>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a3a      	ldr	r2, [pc, #232]	; (8005f60 <HAL_TIM_PWM_Stop+0x130>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d004      	beq.n	8005e84 <HAL_TIM_PWM_Stop+0x54>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a39      	ldr	r2, [pc, #228]	; (8005f64 <HAL_TIM_PWM_Stop+0x134>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d101      	bne.n	8005e88 <HAL_TIM_PWM_Stop+0x58>
 8005e84:	2301      	movs	r3, #1
 8005e86:	e000      	b.n	8005e8a <HAL_TIM_PWM_Stop+0x5a>
 8005e88:	2300      	movs	r3, #0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d017      	beq.n	8005ebe <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6a1a      	ldr	r2, [r3, #32]
 8005e94:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e98:	4013      	ands	r3, r2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10f      	bne.n	8005ebe <HAL_TIM_PWM_Stop+0x8e>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6a1a      	ldr	r2, [r3, #32]
 8005ea4:	f244 4344 	movw	r3, #17476	; 0x4444
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d107      	bne.n	8005ebe <HAL_TIM_PWM_Stop+0x8e>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ebc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6a1a      	ldr	r2, [r3, #32]
 8005ec4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ec8:	4013      	ands	r3, r2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10f      	bne.n	8005eee <HAL_TIM_PWM_Stop+0xbe>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6a1a      	ldr	r2, [r3, #32]
 8005ed4:	f244 4344 	movw	r3, #17476	; 0x4444
 8005ed8:	4013      	ands	r3, r2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d107      	bne.n	8005eee <HAL_TIM_PWM_Stop+0xbe>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0201 	bic.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d104      	bne.n	8005efe <HAL_TIM_PWM_Stop+0xce>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005efc:	e023      	b.n	8005f46 <HAL_TIM_PWM_Stop+0x116>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d104      	bne.n	8005f0e <HAL_TIM_PWM_Stop+0xde>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f0c:	e01b      	b.n	8005f46 <HAL_TIM_PWM_Stop+0x116>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d104      	bne.n	8005f1e <HAL_TIM_PWM_Stop+0xee>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f1c:	e013      	b.n	8005f46 <HAL_TIM_PWM_Stop+0x116>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b0c      	cmp	r3, #12
 8005f22:	d104      	bne.n	8005f2e <HAL_TIM_PWM_Stop+0xfe>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f2c:	e00b      	b.n	8005f46 <HAL_TIM_PWM_Stop+0x116>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b10      	cmp	r3, #16
 8005f32:	d104      	bne.n	8005f3e <HAL_TIM_PWM_Stop+0x10e>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f3c:	e003      	b.n	8005f46 <HAL_TIM_PWM_Stop+0x116>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	40012c00 	.word	0x40012c00
 8005f54:	40013400 	.word	0x40013400
 8005f58:	40014000 	.word	0x40014000
 8005f5c:	40014400 	.word	0x40014400
 8005f60:	40014800 	.word	0x40014800
 8005f64:	40015000 	.word	0x40015000

08005f68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e097      	b.n	80060ac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d106      	bne.n	8005f96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7fc f951 	bl	8002238 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2202      	movs	r2, #2
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	6812      	ldr	r2, [r2, #0]
 8005fa8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005fac:	f023 0307 	bic.w	r3, r3, #7
 8005fb0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	f000 fcd9 	bl	8006974 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fea:	f023 0303 	bic.w	r3, r3, #3
 8005fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006008:	f023 030c 	bic.w	r3, r3, #12
 800600c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006014:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006018:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	021b      	lsls	r3, r3, #8
 8006024:	4313      	orrs	r3, r2
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	4313      	orrs	r3, r2
 800602a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	011a      	lsls	r2, r3, #4
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	031b      	lsls	r3, r3, #12
 8006038:	4313      	orrs	r3, r2
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	4313      	orrs	r3, r2
 800603e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006046:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800604e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	4313      	orrs	r3, r2
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d110      	bne.n	8006106 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d102      	bne.n	80060f0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80060ea:	7b7b      	ldrb	r3, [r7, #13]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d001      	beq.n	80060f4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e069      	b.n	80061c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006104:	e031      	b.n	800616a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b04      	cmp	r3, #4
 800610a:	d110      	bne.n	800612e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800610c:	7bbb      	ldrb	r3, [r7, #14]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d102      	bne.n	8006118 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006112:	7b3b      	ldrb	r3, [r7, #12]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d001      	beq.n	800611c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e055      	b.n	80061c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800612c:	e01d      	b.n	800616a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800612e:	7bfb      	ldrb	r3, [r7, #15]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d108      	bne.n	8006146 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006134:	7bbb      	ldrb	r3, [r7, #14]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d105      	bne.n	8006146 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800613a:	7b7b      	ldrb	r3, [r7, #13]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d102      	bne.n	8006146 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006140:	7b3b      	ldrb	r3, [r7, #12]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d001      	beq.n	800614a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e03e      	b.n	80061c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2202      	movs	r2, #2
 800614e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2202      	movs	r2, #2
 8006156:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2202      	movs	r2, #2
 800615e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2202      	movs	r2, #2
 8006166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <HAL_TIM_Encoder_Start+0xc4>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b04      	cmp	r3, #4
 8006174:	d008      	beq.n	8006188 <HAL_TIM_Encoder_Start+0xd4>
 8006176:	e00f      	b.n	8006198 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2201      	movs	r2, #1
 800617e:	2100      	movs	r1, #0
 8006180:	4618      	mov	r0, r3
 8006182:	f001 f865 	bl	8007250 <TIM_CCxChannelCmd>
      break;
 8006186:	e016      	b.n	80061b6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2201      	movs	r2, #1
 800618e:	2104      	movs	r1, #4
 8006190:	4618      	mov	r0, r3
 8006192:	f001 f85d 	bl	8007250 <TIM_CCxChannelCmd>
      break;
 8006196:	e00e      	b.n	80061b6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2201      	movs	r2, #1
 800619e:	2100      	movs	r1, #0
 80061a0:	4618      	mov	r0, r3
 80061a2:	f001 f855 	bl	8007250 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2201      	movs	r2, #1
 80061ac:	2104      	movs	r1, #4
 80061ae:	4618      	mov	r0, r3
 80061b0:	f001 f84e 	bl	8007250 <TIM_CCxChannelCmd>
      break;
 80061b4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f042 0201 	orr.w	r2, r2, #1
 80061c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d122      	bne.n	800622c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d11b      	bne.n	800622c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f06f 0202 	mvn.w	r2, #2
 80061fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	f003 0303 	and.w	r3, r3, #3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fb90 	bl	8006938 <HAL_TIM_IC_CaptureCallback>
 8006218:	e005      	b.n	8006226 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fb82 	bl	8006924 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fb93 	bl	800694c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f003 0304 	and.w	r3, r3, #4
 8006236:	2b04      	cmp	r3, #4
 8006238:	d122      	bne.n	8006280 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b04      	cmp	r3, #4
 8006246:	d11b      	bne.n	8006280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f06f 0204 	mvn.w	r2, #4
 8006250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2202      	movs	r2, #2
 8006256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fb66 	bl	8006938 <HAL_TIM_IC_CaptureCallback>
 800626c:	e005      	b.n	800627a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fb58 	bl	8006924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fb69 	bl	800694c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0308 	and.w	r3, r3, #8
 800628a:	2b08      	cmp	r3, #8
 800628c:	d122      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b08      	cmp	r3, #8
 800629a:	d11b      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0208 	mvn.w	r2, #8
 80062a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2204      	movs	r2, #4
 80062aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fb3c 	bl	8006938 <HAL_TIM_IC_CaptureCallback>
 80062c0:	e005      	b.n	80062ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fb2e 	bl	8006924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fb3f 	bl	800694c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	f003 0310 	and.w	r3, r3, #16
 80062de:	2b10      	cmp	r3, #16
 80062e0:	d122      	bne.n	8006328 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f003 0310 	and.w	r3, r3, #16
 80062ec:	2b10      	cmp	r3, #16
 80062ee:	d11b      	bne.n	8006328 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f06f 0210 	mvn.w	r2, #16
 80062f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2208      	movs	r2, #8
 80062fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fb12 	bl	8006938 <HAL_TIM_IC_CaptureCallback>
 8006314:	e005      	b.n	8006322 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fb04 	bl	8006924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fb15 	bl	800694c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b01      	cmp	r3, #1
 8006334:	d10e      	bne.n	8006354 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b01      	cmp	r3, #1
 8006342:	d107      	bne.n	8006354 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f06f 0201 	mvn.w	r2, #1
 800634c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7fb fc5c 	bl	8001c0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635e:	2b80      	cmp	r3, #128	; 0x80
 8006360:	d10e      	bne.n	8006380 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636c:	2b80      	cmp	r3, #128	; 0x80
 800636e:	d107      	bne.n	8006380 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 fa00 	bl	8007780 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800638e:	d10e      	bne.n	80063ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639a:	2b80      	cmp	r3, #128	; 0x80
 800639c:	d107      	bne.n	80063ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80063a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f001 f9f3 	bl	8007794 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b8:	2b40      	cmp	r3, #64	; 0x40
 80063ba:	d10e      	bne.n	80063da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c6:	2b40      	cmp	r3, #64	; 0x40
 80063c8:	d107      	bne.n	80063da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fac3 	bl	8006960 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	f003 0320 	and.w	r3, r3, #32
 80063e4:	2b20      	cmp	r3, #32
 80063e6:	d10e      	bne.n	8006406 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b20      	cmp	r3, #32
 80063f4:	d107      	bne.n	8006406 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f06f 0220 	mvn.w	r2, #32
 80063fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f001 f9b3 	bl	800776c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006414:	d10f      	bne.n	8006436 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006424:	d107      	bne.n	8006436 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800642e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f001 f9b9 	bl	80077a8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006440:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006444:	d10f      	bne.n	8006466 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006454:	d107      	bne.n	8006466 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800645e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f001 f9ab 	bl	80077bc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006474:	d10f      	bne.n	8006496 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006484:	d107      	bne.n	8006496 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800648e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f001 f99d 	bl	80077d0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064a4:	d10f      	bne.n	80064c6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064b4:	d107      	bne.n	80064c6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80064be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f001 f98f 	bl	80077e4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064c6:	bf00      	nop
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d101      	bne.n	80064ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064ea:	2302      	movs	r3, #2
 80064ec:	e0ff      	b.n	80066ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b14      	cmp	r3, #20
 80064fa:	f200 80f0 	bhi.w	80066de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80064fe:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006504:	08006559 	.word	0x08006559
 8006508:	080066df 	.word	0x080066df
 800650c:	080066df 	.word	0x080066df
 8006510:	080066df 	.word	0x080066df
 8006514:	08006599 	.word	0x08006599
 8006518:	080066df 	.word	0x080066df
 800651c:	080066df 	.word	0x080066df
 8006520:	080066df 	.word	0x080066df
 8006524:	080065db 	.word	0x080065db
 8006528:	080066df 	.word	0x080066df
 800652c:	080066df 	.word	0x080066df
 8006530:	080066df 	.word	0x080066df
 8006534:	0800661b 	.word	0x0800661b
 8006538:	080066df 	.word	0x080066df
 800653c:	080066df 	.word	0x080066df
 8006540:	080066df 	.word	0x080066df
 8006544:	0800665d 	.word	0x0800665d
 8006548:	080066df 	.word	0x080066df
 800654c:	080066df 	.word	0x080066df
 8006550:	080066df 	.word	0x080066df
 8006554:	0800669d 	.word	0x0800669d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68b9      	ldr	r1, [r7, #8]
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fab0 	bl	8006ac4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	699a      	ldr	r2, [r3, #24]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0208 	orr.w	r2, r2, #8
 8006572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699a      	ldr	r2, [r3, #24]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0204 	bic.w	r2, r2, #4
 8006582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6999      	ldr	r1, [r3, #24]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	691a      	ldr	r2, [r3, #16]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	619a      	str	r2, [r3, #24]
      break;
 8006596:	e0a5      	b.n	80066e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68b9      	ldr	r1, [r7, #8]
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 fb2a 	bl	8006bf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699a      	ldr	r2, [r3, #24]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	699a      	ldr	r2, [r3, #24]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6999      	ldr	r1, [r3, #24]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	021a      	lsls	r2, r3, #8
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	619a      	str	r2, [r3, #24]
      break;
 80065d8:	e084      	b.n	80066e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68b9      	ldr	r1, [r7, #8]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 fb9d 	bl	8006d20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	69da      	ldr	r2, [r3, #28]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f042 0208 	orr.w	r2, r2, #8
 80065f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69da      	ldr	r2, [r3, #28]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 0204 	bic.w	r2, r2, #4
 8006604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69d9      	ldr	r1, [r3, #28]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	691a      	ldr	r2, [r3, #16]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	61da      	str	r2, [r3, #28]
      break;
 8006618:	e064      	b.n	80066e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68b9      	ldr	r1, [r7, #8]
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fc0f 	bl	8006e44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	69da      	ldr	r2, [r3, #28]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	69da      	ldr	r2, [r3, #28]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	69d9      	ldr	r1, [r3, #28]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	021a      	lsls	r2, r3, #8
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	61da      	str	r2, [r3, #28]
      break;
 800665a:	e043      	b.n	80066e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68b9      	ldr	r1, [r7, #8]
 8006662:	4618      	mov	r0, r3
 8006664:	f000 fc82 	bl	8006f6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f042 0208 	orr.w	r2, r2, #8
 8006676:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f022 0204 	bic.w	r2, r2, #4
 8006686:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	691a      	ldr	r2, [r3, #16]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800669a:	e023      	b.n	80066e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68b9      	ldr	r1, [r7, #8]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 fccc 	bl	8007040 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066c6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	021a      	lsls	r2, r3, #8
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	430a      	orrs	r2, r1
 80066da:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80066dc:	e002      	b.n	80066e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	75fb      	strb	r3, [r7, #23]
      break;
 80066e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3718      	adds	r7, #24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop

080066f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006702:	2300      	movs	r3, #0
 8006704:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800670c:	2b01      	cmp	r3, #1
 800670e:	d101      	bne.n	8006714 <HAL_TIM_ConfigClockSource+0x1c>
 8006710:	2302      	movs	r3, #2
 8006712:	e0f6      	b.n	8006902 <HAL_TIM_ConfigClockSource+0x20a>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2202      	movs	r2, #2
 8006720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006732:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800673e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a6f      	ldr	r2, [pc, #444]	; (800690c <HAL_TIM_ConfigClockSource+0x214>)
 800674e:	4293      	cmp	r3, r2
 8006750:	f000 80c1 	beq.w	80068d6 <HAL_TIM_ConfigClockSource+0x1de>
 8006754:	4a6d      	ldr	r2, [pc, #436]	; (800690c <HAL_TIM_ConfigClockSource+0x214>)
 8006756:	4293      	cmp	r3, r2
 8006758:	f200 80c6 	bhi.w	80068e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800675c:	4a6c      	ldr	r2, [pc, #432]	; (8006910 <HAL_TIM_ConfigClockSource+0x218>)
 800675e:	4293      	cmp	r3, r2
 8006760:	f000 80b9 	beq.w	80068d6 <HAL_TIM_ConfigClockSource+0x1de>
 8006764:	4a6a      	ldr	r2, [pc, #424]	; (8006910 <HAL_TIM_ConfigClockSource+0x218>)
 8006766:	4293      	cmp	r3, r2
 8006768:	f200 80be 	bhi.w	80068e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800676c:	4a69      	ldr	r2, [pc, #420]	; (8006914 <HAL_TIM_ConfigClockSource+0x21c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	f000 80b1 	beq.w	80068d6 <HAL_TIM_ConfigClockSource+0x1de>
 8006774:	4a67      	ldr	r2, [pc, #412]	; (8006914 <HAL_TIM_ConfigClockSource+0x21c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	f200 80b6 	bhi.w	80068e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800677c:	4a66      	ldr	r2, [pc, #408]	; (8006918 <HAL_TIM_ConfigClockSource+0x220>)
 800677e:	4293      	cmp	r3, r2
 8006780:	f000 80a9 	beq.w	80068d6 <HAL_TIM_ConfigClockSource+0x1de>
 8006784:	4a64      	ldr	r2, [pc, #400]	; (8006918 <HAL_TIM_ConfigClockSource+0x220>)
 8006786:	4293      	cmp	r3, r2
 8006788:	f200 80ae 	bhi.w	80068e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800678c:	4a63      	ldr	r2, [pc, #396]	; (800691c <HAL_TIM_ConfigClockSource+0x224>)
 800678e:	4293      	cmp	r3, r2
 8006790:	f000 80a1 	beq.w	80068d6 <HAL_TIM_ConfigClockSource+0x1de>
 8006794:	4a61      	ldr	r2, [pc, #388]	; (800691c <HAL_TIM_ConfigClockSource+0x224>)
 8006796:	4293      	cmp	r3, r2
 8006798:	f200 80a6 	bhi.w	80068e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800679c:	4a60      	ldr	r2, [pc, #384]	; (8006920 <HAL_TIM_ConfigClockSource+0x228>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	f000 8099 	beq.w	80068d6 <HAL_TIM_ConfigClockSource+0x1de>
 80067a4:	4a5e      	ldr	r2, [pc, #376]	; (8006920 <HAL_TIM_ConfigClockSource+0x228>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	f200 809e 	bhi.w	80068e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80067ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80067b0:	f000 8091 	beq.w	80068d6 <HAL_TIM_ConfigClockSource+0x1de>
 80067b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80067b8:	f200 8096 	bhi.w	80068e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80067bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067c0:	f000 8089 	beq.w	80068d6 <HAL_TIM_ConfigClockSource+0x1de>
 80067c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067c8:	f200 808e 	bhi.w	80068e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80067cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067d0:	d03e      	beq.n	8006850 <HAL_TIM_ConfigClockSource+0x158>
 80067d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067d6:	f200 8087 	bhi.w	80068e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80067da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067de:	f000 8086 	beq.w	80068ee <HAL_TIM_ConfigClockSource+0x1f6>
 80067e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e6:	d87f      	bhi.n	80068e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80067e8:	2b70      	cmp	r3, #112	; 0x70
 80067ea:	d01a      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x12a>
 80067ec:	2b70      	cmp	r3, #112	; 0x70
 80067ee:	d87b      	bhi.n	80068e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80067f0:	2b60      	cmp	r3, #96	; 0x60
 80067f2:	d050      	beq.n	8006896 <HAL_TIM_ConfigClockSource+0x19e>
 80067f4:	2b60      	cmp	r3, #96	; 0x60
 80067f6:	d877      	bhi.n	80068e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80067f8:	2b50      	cmp	r3, #80	; 0x50
 80067fa:	d03c      	beq.n	8006876 <HAL_TIM_ConfigClockSource+0x17e>
 80067fc:	2b50      	cmp	r3, #80	; 0x50
 80067fe:	d873      	bhi.n	80068e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006800:	2b40      	cmp	r3, #64	; 0x40
 8006802:	d058      	beq.n	80068b6 <HAL_TIM_ConfigClockSource+0x1be>
 8006804:	2b40      	cmp	r3, #64	; 0x40
 8006806:	d86f      	bhi.n	80068e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006808:	2b30      	cmp	r3, #48	; 0x30
 800680a:	d064      	beq.n	80068d6 <HAL_TIM_ConfigClockSource+0x1de>
 800680c:	2b30      	cmp	r3, #48	; 0x30
 800680e:	d86b      	bhi.n	80068e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006810:	2b20      	cmp	r3, #32
 8006812:	d060      	beq.n	80068d6 <HAL_TIM_ConfigClockSource+0x1de>
 8006814:	2b20      	cmp	r3, #32
 8006816:	d867      	bhi.n	80068e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006818:	2b00      	cmp	r3, #0
 800681a:	d05c      	beq.n	80068d6 <HAL_TIM_ConfigClockSource+0x1de>
 800681c:	2b10      	cmp	r3, #16
 800681e:	d05a      	beq.n	80068d6 <HAL_TIM_ConfigClockSource+0x1de>
 8006820:	e062      	b.n	80068e8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6818      	ldr	r0, [r3, #0]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	6899      	ldr	r1, [r3, #8]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f000 fced 	bl	8007210 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006844:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	609a      	str	r2, [r3, #8]
      break;
 800684e:	e04f      	b.n	80068f0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6818      	ldr	r0, [r3, #0]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	6899      	ldr	r1, [r3, #8]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f000 fcd6 	bl	8007210 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689a      	ldr	r2, [r3, #8]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006872:	609a      	str	r2, [r3, #8]
      break;
 8006874:	e03c      	b.n	80068f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6818      	ldr	r0, [r3, #0]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	6859      	ldr	r1, [r3, #4]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	461a      	mov	r2, r3
 8006884:	f000 fc48 	bl	8007118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2150      	movs	r1, #80	; 0x50
 800688e:	4618      	mov	r0, r3
 8006890:	f000 fca1 	bl	80071d6 <TIM_ITRx_SetConfig>
      break;
 8006894:	e02c      	b.n	80068f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6818      	ldr	r0, [r3, #0]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	6859      	ldr	r1, [r3, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	461a      	mov	r2, r3
 80068a4:	f000 fc67 	bl	8007176 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2160      	movs	r1, #96	; 0x60
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 fc91 	bl	80071d6 <TIM_ITRx_SetConfig>
      break;
 80068b4:	e01c      	b.n	80068f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6818      	ldr	r0, [r3, #0]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	6859      	ldr	r1, [r3, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	461a      	mov	r2, r3
 80068c4:	f000 fc28 	bl	8007118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2140      	movs	r1, #64	; 0x40
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 fc81 	bl	80071d6 <TIM_ITRx_SetConfig>
      break;
 80068d4:	e00c      	b.n	80068f0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4619      	mov	r1, r3
 80068e0:	4610      	mov	r0, r2
 80068e2:	f000 fc78 	bl	80071d6 <TIM_ITRx_SetConfig>
      break;
 80068e6:	e003      	b.n	80068f0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	73fb      	strb	r3, [r7, #15]
      break;
 80068ec:	e000      	b.n	80068f0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80068ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006900:	7bfb      	ldrb	r3, [r7, #15]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	00100070 	.word	0x00100070
 8006910:	00100060 	.word	0x00100060
 8006914:	00100050 	.word	0x00100050
 8006918:	00100040 	.word	0x00100040
 800691c:	00100030 	.word	0x00100030
 8006920:	00100020 	.word	0x00100020

08006924 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a46      	ldr	r2, [pc, #280]	; (8006aa0 <TIM_Base_SetConfig+0x12c>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d017      	beq.n	80069bc <TIM_Base_SetConfig+0x48>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006992:	d013      	beq.n	80069bc <TIM_Base_SetConfig+0x48>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a43      	ldr	r2, [pc, #268]	; (8006aa4 <TIM_Base_SetConfig+0x130>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d00f      	beq.n	80069bc <TIM_Base_SetConfig+0x48>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a42      	ldr	r2, [pc, #264]	; (8006aa8 <TIM_Base_SetConfig+0x134>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00b      	beq.n	80069bc <TIM_Base_SetConfig+0x48>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a41      	ldr	r2, [pc, #260]	; (8006aac <TIM_Base_SetConfig+0x138>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d007      	beq.n	80069bc <TIM_Base_SetConfig+0x48>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a40      	ldr	r2, [pc, #256]	; (8006ab0 <TIM_Base_SetConfig+0x13c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d003      	beq.n	80069bc <TIM_Base_SetConfig+0x48>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a3f      	ldr	r2, [pc, #252]	; (8006ab4 <TIM_Base_SetConfig+0x140>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d108      	bne.n	80069ce <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a33      	ldr	r2, [pc, #204]	; (8006aa0 <TIM_Base_SetConfig+0x12c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d023      	beq.n	8006a1e <TIM_Base_SetConfig+0xaa>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069dc:	d01f      	beq.n	8006a1e <TIM_Base_SetConfig+0xaa>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a30      	ldr	r2, [pc, #192]	; (8006aa4 <TIM_Base_SetConfig+0x130>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d01b      	beq.n	8006a1e <TIM_Base_SetConfig+0xaa>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a2f      	ldr	r2, [pc, #188]	; (8006aa8 <TIM_Base_SetConfig+0x134>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d017      	beq.n	8006a1e <TIM_Base_SetConfig+0xaa>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a2e      	ldr	r2, [pc, #184]	; (8006aac <TIM_Base_SetConfig+0x138>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d013      	beq.n	8006a1e <TIM_Base_SetConfig+0xaa>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a2d      	ldr	r2, [pc, #180]	; (8006ab0 <TIM_Base_SetConfig+0x13c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00f      	beq.n	8006a1e <TIM_Base_SetConfig+0xaa>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a2d      	ldr	r2, [pc, #180]	; (8006ab8 <TIM_Base_SetConfig+0x144>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00b      	beq.n	8006a1e <TIM_Base_SetConfig+0xaa>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a2c      	ldr	r2, [pc, #176]	; (8006abc <TIM_Base_SetConfig+0x148>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d007      	beq.n	8006a1e <TIM_Base_SetConfig+0xaa>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a2b      	ldr	r2, [pc, #172]	; (8006ac0 <TIM_Base_SetConfig+0x14c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d003      	beq.n	8006a1e <TIM_Base_SetConfig+0xaa>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a26      	ldr	r2, [pc, #152]	; (8006ab4 <TIM_Base_SetConfig+0x140>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d108      	bne.n	8006a30 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a12      	ldr	r2, [pc, #72]	; (8006aa0 <TIM_Base_SetConfig+0x12c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d013      	beq.n	8006a84 <TIM_Base_SetConfig+0x110>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a14      	ldr	r2, [pc, #80]	; (8006ab0 <TIM_Base_SetConfig+0x13c>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d00f      	beq.n	8006a84 <TIM_Base_SetConfig+0x110>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a14      	ldr	r2, [pc, #80]	; (8006ab8 <TIM_Base_SetConfig+0x144>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00b      	beq.n	8006a84 <TIM_Base_SetConfig+0x110>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a13      	ldr	r2, [pc, #76]	; (8006abc <TIM_Base_SetConfig+0x148>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d007      	beq.n	8006a84 <TIM_Base_SetConfig+0x110>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a12      	ldr	r2, [pc, #72]	; (8006ac0 <TIM_Base_SetConfig+0x14c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d003      	beq.n	8006a84 <TIM_Base_SetConfig+0x110>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a0d      	ldr	r2, [pc, #52]	; (8006ab4 <TIM_Base_SetConfig+0x140>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d103      	bne.n	8006a8c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	691a      	ldr	r2, [r3, #16]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	615a      	str	r2, [r3, #20]
}
 8006a92:	bf00      	nop
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	40012c00 	.word	0x40012c00
 8006aa4:	40000400 	.word	0x40000400
 8006aa8:	40000800 	.word	0x40000800
 8006aac:	40000c00 	.word	0x40000c00
 8006ab0:	40013400 	.word	0x40013400
 8006ab4:	40015000 	.word	0x40015000
 8006ab8:	40014000 	.word	0x40014000
 8006abc:	40014400 	.word	0x40014400
 8006ac0:	40014800 	.word	0x40014800

08006ac4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	f023 0201 	bic.w	r2, r3, #1
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f023 0303 	bic.w	r3, r3, #3
 8006afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f023 0302 	bic.w	r3, r3, #2
 8006b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a30      	ldr	r2, [pc, #192]	; (8006be0 <TIM_OC1_SetConfig+0x11c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d013      	beq.n	8006b4c <TIM_OC1_SetConfig+0x88>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a2f      	ldr	r2, [pc, #188]	; (8006be4 <TIM_OC1_SetConfig+0x120>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d00f      	beq.n	8006b4c <TIM_OC1_SetConfig+0x88>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a2e      	ldr	r2, [pc, #184]	; (8006be8 <TIM_OC1_SetConfig+0x124>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00b      	beq.n	8006b4c <TIM_OC1_SetConfig+0x88>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a2d      	ldr	r2, [pc, #180]	; (8006bec <TIM_OC1_SetConfig+0x128>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d007      	beq.n	8006b4c <TIM_OC1_SetConfig+0x88>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a2c      	ldr	r2, [pc, #176]	; (8006bf0 <TIM_OC1_SetConfig+0x12c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d003      	beq.n	8006b4c <TIM_OC1_SetConfig+0x88>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a2b      	ldr	r2, [pc, #172]	; (8006bf4 <TIM_OC1_SetConfig+0x130>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d10c      	bne.n	8006b66 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f023 0308 	bic.w	r3, r3, #8
 8006b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f023 0304 	bic.w	r3, r3, #4
 8006b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a1d      	ldr	r2, [pc, #116]	; (8006be0 <TIM_OC1_SetConfig+0x11c>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d013      	beq.n	8006b96 <TIM_OC1_SetConfig+0xd2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a1c      	ldr	r2, [pc, #112]	; (8006be4 <TIM_OC1_SetConfig+0x120>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00f      	beq.n	8006b96 <TIM_OC1_SetConfig+0xd2>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a1b      	ldr	r2, [pc, #108]	; (8006be8 <TIM_OC1_SetConfig+0x124>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00b      	beq.n	8006b96 <TIM_OC1_SetConfig+0xd2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a1a      	ldr	r2, [pc, #104]	; (8006bec <TIM_OC1_SetConfig+0x128>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d007      	beq.n	8006b96 <TIM_OC1_SetConfig+0xd2>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a19      	ldr	r2, [pc, #100]	; (8006bf0 <TIM_OC1_SetConfig+0x12c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d003      	beq.n	8006b96 <TIM_OC1_SetConfig+0xd2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a18      	ldr	r2, [pc, #96]	; (8006bf4 <TIM_OC1_SetConfig+0x130>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d111      	bne.n	8006bba <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	621a      	str	r2, [r3, #32]
}
 8006bd4:	bf00      	nop
 8006bd6:	371c      	adds	r7, #28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	40012c00 	.word	0x40012c00
 8006be4:	40013400 	.word	0x40013400
 8006be8:	40014000 	.word	0x40014000
 8006bec:	40014400 	.word	0x40014400
 8006bf0:	40014800 	.word	0x40014800
 8006bf4:	40015000 	.word	0x40015000

08006bf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	f023 0210 	bic.w	r2, r3, #16
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	021b      	lsls	r3, r3, #8
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f023 0320 	bic.w	r3, r3, #32
 8006c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a2c      	ldr	r2, [pc, #176]	; (8006d08 <TIM_OC2_SetConfig+0x110>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d007      	beq.n	8006c6c <TIM_OC2_SetConfig+0x74>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a2b      	ldr	r2, [pc, #172]	; (8006d0c <TIM_OC2_SetConfig+0x114>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d003      	beq.n	8006c6c <TIM_OC2_SetConfig+0x74>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a2a      	ldr	r2, [pc, #168]	; (8006d10 <TIM_OC2_SetConfig+0x118>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d10d      	bne.n	8006c88 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	011b      	lsls	r3, r3, #4
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a1f      	ldr	r2, [pc, #124]	; (8006d08 <TIM_OC2_SetConfig+0x110>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d013      	beq.n	8006cb8 <TIM_OC2_SetConfig+0xc0>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a1e      	ldr	r2, [pc, #120]	; (8006d0c <TIM_OC2_SetConfig+0x114>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00f      	beq.n	8006cb8 <TIM_OC2_SetConfig+0xc0>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a1e      	ldr	r2, [pc, #120]	; (8006d14 <TIM_OC2_SetConfig+0x11c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00b      	beq.n	8006cb8 <TIM_OC2_SetConfig+0xc0>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a1d      	ldr	r2, [pc, #116]	; (8006d18 <TIM_OC2_SetConfig+0x120>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d007      	beq.n	8006cb8 <TIM_OC2_SetConfig+0xc0>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a1c      	ldr	r2, [pc, #112]	; (8006d1c <TIM_OC2_SetConfig+0x124>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d003      	beq.n	8006cb8 <TIM_OC2_SetConfig+0xc0>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a17      	ldr	r2, [pc, #92]	; (8006d10 <TIM_OC2_SetConfig+0x118>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d113      	bne.n	8006ce0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	621a      	str	r2, [r3, #32]
}
 8006cfa:	bf00      	nop
 8006cfc:	371c      	adds	r7, #28
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	40012c00 	.word	0x40012c00
 8006d0c:	40013400 	.word	0x40013400
 8006d10:	40015000 	.word	0x40015000
 8006d14:	40014000 	.word	0x40014000
 8006d18:	40014400 	.word	0x40014400
 8006d1c:	40014800 	.word	0x40014800

08006d20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f023 0303 	bic.w	r3, r3, #3
 8006d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	021b      	lsls	r3, r3, #8
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a2b      	ldr	r2, [pc, #172]	; (8006e2c <TIM_OC3_SetConfig+0x10c>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d007      	beq.n	8006d92 <TIM_OC3_SetConfig+0x72>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a2a      	ldr	r2, [pc, #168]	; (8006e30 <TIM_OC3_SetConfig+0x110>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d003      	beq.n	8006d92 <TIM_OC3_SetConfig+0x72>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a29      	ldr	r2, [pc, #164]	; (8006e34 <TIM_OC3_SetConfig+0x114>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d10d      	bne.n	8006dae <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	021b      	lsls	r3, r3, #8
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a1e      	ldr	r2, [pc, #120]	; (8006e2c <TIM_OC3_SetConfig+0x10c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d013      	beq.n	8006dde <TIM_OC3_SetConfig+0xbe>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a1d      	ldr	r2, [pc, #116]	; (8006e30 <TIM_OC3_SetConfig+0x110>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d00f      	beq.n	8006dde <TIM_OC3_SetConfig+0xbe>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a1d      	ldr	r2, [pc, #116]	; (8006e38 <TIM_OC3_SetConfig+0x118>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d00b      	beq.n	8006dde <TIM_OC3_SetConfig+0xbe>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a1c      	ldr	r2, [pc, #112]	; (8006e3c <TIM_OC3_SetConfig+0x11c>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d007      	beq.n	8006dde <TIM_OC3_SetConfig+0xbe>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a1b      	ldr	r2, [pc, #108]	; (8006e40 <TIM_OC3_SetConfig+0x120>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d003      	beq.n	8006dde <TIM_OC3_SetConfig+0xbe>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a16      	ldr	r2, [pc, #88]	; (8006e34 <TIM_OC3_SetConfig+0x114>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d113      	bne.n	8006e06 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	011b      	lsls	r3, r3, #4
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	011b      	lsls	r3, r3, #4
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	621a      	str	r2, [r3, #32]
}
 8006e20:	bf00      	nop
 8006e22:	371c      	adds	r7, #28
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	40012c00 	.word	0x40012c00
 8006e30:	40013400 	.word	0x40013400
 8006e34:	40015000 	.word	0x40015000
 8006e38:	40014000 	.word	0x40014000
 8006e3c:	40014400 	.word	0x40014400
 8006e40:	40014800 	.word	0x40014800

08006e44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	021b      	lsls	r3, r3, #8
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	031b      	lsls	r3, r3, #12
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a2c      	ldr	r2, [pc, #176]	; (8006f54 <TIM_OC4_SetConfig+0x110>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d007      	beq.n	8006eb8 <TIM_OC4_SetConfig+0x74>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a2b      	ldr	r2, [pc, #172]	; (8006f58 <TIM_OC4_SetConfig+0x114>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d003      	beq.n	8006eb8 <TIM_OC4_SetConfig+0x74>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a2a      	ldr	r2, [pc, #168]	; (8006f5c <TIM_OC4_SetConfig+0x118>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d10d      	bne.n	8006ed4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	031b      	lsls	r3, r3, #12
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ed2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a1f      	ldr	r2, [pc, #124]	; (8006f54 <TIM_OC4_SetConfig+0x110>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d013      	beq.n	8006f04 <TIM_OC4_SetConfig+0xc0>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a1e      	ldr	r2, [pc, #120]	; (8006f58 <TIM_OC4_SetConfig+0x114>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d00f      	beq.n	8006f04 <TIM_OC4_SetConfig+0xc0>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a1e      	ldr	r2, [pc, #120]	; (8006f60 <TIM_OC4_SetConfig+0x11c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d00b      	beq.n	8006f04 <TIM_OC4_SetConfig+0xc0>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a1d      	ldr	r2, [pc, #116]	; (8006f64 <TIM_OC4_SetConfig+0x120>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d007      	beq.n	8006f04 <TIM_OC4_SetConfig+0xc0>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a1c      	ldr	r2, [pc, #112]	; (8006f68 <TIM_OC4_SetConfig+0x124>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d003      	beq.n	8006f04 <TIM_OC4_SetConfig+0xc0>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a17      	ldr	r2, [pc, #92]	; (8006f5c <TIM_OC4_SetConfig+0x118>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d113      	bne.n	8006f2c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f0a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f12:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	019b      	lsls	r3, r3, #6
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	019b      	lsls	r3, r3, #6
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	621a      	str	r2, [r3, #32]
}
 8006f46:	bf00      	nop
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	40013400 	.word	0x40013400
 8006f5c:	40015000 	.word	0x40015000
 8006f60:	40014000 	.word	0x40014000
 8006f64:	40014400 	.word	0x40014400
 8006f68:	40014800 	.word	0x40014800

08006f6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006fb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	041b      	lsls	r3, r3, #16
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a19      	ldr	r2, [pc, #100]	; (8007028 <TIM_OC5_SetConfig+0xbc>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d013      	beq.n	8006fee <TIM_OC5_SetConfig+0x82>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a18      	ldr	r2, [pc, #96]	; (800702c <TIM_OC5_SetConfig+0xc0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00f      	beq.n	8006fee <TIM_OC5_SetConfig+0x82>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a17      	ldr	r2, [pc, #92]	; (8007030 <TIM_OC5_SetConfig+0xc4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d00b      	beq.n	8006fee <TIM_OC5_SetConfig+0x82>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a16      	ldr	r2, [pc, #88]	; (8007034 <TIM_OC5_SetConfig+0xc8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d007      	beq.n	8006fee <TIM_OC5_SetConfig+0x82>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a15      	ldr	r2, [pc, #84]	; (8007038 <TIM_OC5_SetConfig+0xcc>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d003      	beq.n	8006fee <TIM_OC5_SetConfig+0x82>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a14      	ldr	r2, [pc, #80]	; (800703c <TIM_OC5_SetConfig+0xd0>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d109      	bne.n	8007002 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	021b      	lsls	r3, r3, #8
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	621a      	str	r2, [r3, #32]
}
 800701c:	bf00      	nop
 800701e:	371c      	adds	r7, #28
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	40012c00 	.word	0x40012c00
 800702c:	40013400 	.word	0x40013400
 8007030:	40014000 	.word	0x40014000
 8007034:	40014400 	.word	0x40014400
 8007038:	40014800 	.word	0x40014800
 800703c:	40015000 	.word	0x40015000

08007040 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007040:	b480      	push	{r7}
 8007042:	b087      	sub	sp, #28
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800706e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	021b      	lsls	r3, r3, #8
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	4313      	orrs	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	051b      	lsls	r3, r3, #20
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	4313      	orrs	r3, r2
 8007092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a1a      	ldr	r2, [pc, #104]	; (8007100 <TIM_OC6_SetConfig+0xc0>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d013      	beq.n	80070c4 <TIM_OC6_SetConfig+0x84>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a19      	ldr	r2, [pc, #100]	; (8007104 <TIM_OC6_SetConfig+0xc4>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d00f      	beq.n	80070c4 <TIM_OC6_SetConfig+0x84>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a18      	ldr	r2, [pc, #96]	; (8007108 <TIM_OC6_SetConfig+0xc8>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d00b      	beq.n	80070c4 <TIM_OC6_SetConfig+0x84>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a17      	ldr	r2, [pc, #92]	; (800710c <TIM_OC6_SetConfig+0xcc>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d007      	beq.n	80070c4 <TIM_OC6_SetConfig+0x84>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a16      	ldr	r2, [pc, #88]	; (8007110 <TIM_OC6_SetConfig+0xd0>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d003      	beq.n	80070c4 <TIM_OC6_SetConfig+0x84>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a15      	ldr	r2, [pc, #84]	; (8007114 <TIM_OC6_SetConfig+0xd4>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d109      	bne.n	80070d8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	029b      	lsls	r3, r3, #10
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	621a      	str	r2, [r3, #32]
}
 80070f2:	bf00      	nop
 80070f4:	371c      	adds	r7, #28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	40012c00 	.word	0x40012c00
 8007104:	40013400 	.word	0x40013400
 8007108:	40014000 	.word	0x40014000
 800710c:	40014400 	.word	0x40014400
 8007110:	40014800 	.word	0x40014800
 8007114:	40015000 	.word	0x40015000

08007118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007118:	b480      	push	{r7}
 800711a:	b087      	sub	sp, #28
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	f023 0201 	bic.w	r2, r3, #1
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	011b      	lsls	r3, r3, #4
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	4313      	orrs	r3, r2
 800714c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f023 030a 	bic.w	r3, r3, #10
 8007154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	4313      	orrs	r3, r2
 800715c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	621a      	str	r2, [r3, #32]
}
 800716a:	bf00      	nop
 800716c:	371c      	adds	r7, #28
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007176:	b480      	push	{r7}
 8007178:	b087      	sub	sp, #28
 800717a:	af00      	add	r7, sp, #0
 800717c:	60f8      	str	r0, [r7, #12]
 800717e:	60b9      	str	r1, [r7, #8]
 8007180:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	f023 0210 	bic.w	r2, r3, #16
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	031b      	lsls	r3, r3, #12
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	621a      	str	r2, [r3, #32]
}
 80071ca:	bf00      	nop
 80071cc:	371c      	adds	r7, #28
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b085      	sub	sp, #20
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80071ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	f043 0307 	orr.w	r3, r3, #7
 80071fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	609a      	str	r2, [r3, #8]
}
 8007204:	bf00      	nop
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
 800721c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800722a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	021a      	lsls	r2, r3, #8
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	431a      	orrs	r2, r3
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4313      	orrs	r3, r2
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	4313      	orrs	r3, r2
 800723c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	609a      	str	r2, [r3, #8]
}
 8007244:	bf00      	nop
 8007246:	371c      	adds	r7, #28
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007250:	b480      	push	{r7}
 8007252:	b087      	sub	sp, #28
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f003 031f 	and.w	r3, r3, #31
 8007262:	2201      	movs	r2, #1
 8007264:	fa02 f303 	lsl.w	r3, r2, r3
 8007268:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6a1a      	ldr	r2, [r3, #32]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	43db      	mvns	r3, r3
 8007272:	401a      	ands	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a1a      	ldr	r2, [r3, #32]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f003 031f 	and.w	r3, r3, #31
 8007282:	6879      	ldr	r1, [r7, #4]
 8007284:	fa01 f303 	lsl.w	r3, r1, r3
 8007288:	431a      	orrs	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	621a      	str	r2, [r3, #32]
}
 800728e:	bf00      	nop
 8007290:	371c      	adds	r7, #28
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
	...

0800729c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d109      	bne.n	80072c0 <HAL_TIMEx_PWMN_Start+0x24>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	bf14      	ite	ne
 80072b8:	2301      	movne	r3, #1
 80072ba:	2300      	moveq	r3, #0
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	e022      	b.n	8007306 <HAL_TIMEx_PWMN_Start+0x6a>
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b04      	cmp	r3, #4
 80072c4:	d109      	bne.n	80072da <HAL_TIMEx_PWMN_Start+0x3e>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	bf14      	ite	ne
 80072d2:	2301      	movne	r3, #1
 80072d4:	2300      	moveq	r3, #0
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	e015      	b.n	8007306 <HAL_TIMEx_PWMN_Start+0x6a>
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2b08      	cmp	r3, #8
 80072de:	d109      	bne.n	80072f4 <HAL_TIMEx_PWMN_Start+0x58>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	bf14      	ite	ne
 80072ec:	2301      	movne	r3, #1
 80072ee:	2300      	moveq	r3, #0
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	e008      	b.n	8007306 <HAL_TIMEx_PWMN_Start+0x6a>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	bf14      	ite	ne
 8007300:	2301      	movne	r3, #1
 8007302:	2300      	moveq	r3, #0
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e073      	b.n	80073f6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d104      	bne.n	800731e <HAL_TIMEx_PWMN_Start+0x82>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800731c:	e013      	b.n	8007346 <HAL_TIMEx_PWMN_Start+0xaa>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b04      	cmp	r3, #4
 8007322:	d104      	bne.n	800732e <HAL_TIMEx_PWMN_Start+0x92>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800732c:	e00b      	b.n	8007346 <HAL_TIMEx_PWMN_Start+0xaa>
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	2b08      	cmp	r3, #8
 8007332:	d104      	bne.n	800733e <HAL_TIMEx_PWMN_Start+0xa2>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2202      	movs	r2, #2
 8007338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800733c:	e003      	b.n	8007346 <HAL_TIMEx_PWMN_Start+0xaa>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2202      	movs	r2, #2
 8007342:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2204      	movs	r2, #4
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fa52 	bl	80077f8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007362:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a25      	ldr	r2, [pc, #148]	; (8007400 <HAL_TIMEx_PWMN_Start+0x164>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d022      	beq.n	80073b4 <HAL_TIMEx_PWMN_Start+0x118>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007376:	d01d      	beq.n	80073b4 <HAL_TIMEx_PWMN_Start+0x118>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a21      	ldr	r2, [pc, #132]	; (8007404 <HAL_TIMEx_PWMN_Start+0x168>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d018      	beq.n	80073b4 <HAL_TIMEx_PWMN_Start+0x118>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a20      	ldr	r2, [pc, #128]	; (8007408 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d013      	beq.n	80073b4 <HAL_TIMEx_PWMN_Start+0x118>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a1e      	ldr	r2, [pc, #120]	; (800740c <HAL_TIMEx_PWMN_Start+0x170>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d00e      	beq.n	80073b4 <HAL_TIMEx_PWMN_Start+0x118>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a1d      	ldr	r2, [pc, #116]	; (8007410 <HAL_TIMEx_PWMN_Start+0x174>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d009      	beq.n	80073b4 <HAL_TIMEx_PWMN_Start+0x118>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a1b      	ldr	r2, [pc, #108]	; (8007414 <HAL_TIMEx_PWMN_Start+0x178>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d004      	beq.n	80073b4 <HAL_TIMEx_PWMN_Start+0x118>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a1a      	ldr	r2, [pc, #104]	; (8007418 <HAL_TIMEx_PWMN_Start+0x17c>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d115      	bne.n	80073e0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689a      	ldr	r2, [r3, #8]
 80073ba:	4b18      	ldr	r3, [pc, #96]	; (800741c <HAL_TIMEx_PWMN_Start+0x180>)
 80073bc:	4013      	ands	r3, r2
 80073be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2b06      	cmp	r3, #6
 80073c4:	d015      	beq.n	80073f2 <HAL_TIMEx_PWMN_Start+0x156>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073cc:	d011      	beq.n	80073f2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f042 0201 	orr.w	r2, r2, #1
 80073dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073de:	e008      	b.n	80073f2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f042 0201 	orr.w	r2, r2, #1
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	e000      	b.n	80073f4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	40012c00 	.word	0x40012c00
 8007404:	40000400 	.word	0x40000400
 8007408:	40000800 	.word	0x40000800
 800740c:	40000c00 	.word	0x40000c00
 8007410:	40013400 	.word	0x40013400
 8007414:	40014000 	.word	0x40014000
 8007418:	40015000 	.word	0x40015000
 800741c:	00010007 	.word	0x00010007

08007420 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2200      	movs	r2, #0
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	4618      	mov	r0, r3
 8007434:	f000 f9e0 	bl	80077f8 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6a1a      	ldr	r2, [r3, #32]
 800743e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007442:	4013      	ands	r3, r2
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10f      	bne.n	8007468 <HAL_TIMEx_PWMN_Stop+0x48>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	6a1a      	ldr	r2, [r3, #32]
 800744e:	f244 4344 	movw	r3, #17476	; 0x4444
 8007452:	4013      	ands	r3, r2
 8007454:	2b00      	cmp	r3, #0
 8007456:	d107      	bne.n	8007468 <HAL_TIMEx_PWMN_Stop+0x48>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007466:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6a1a      	ldr	r2, [r3, #32]
 800746e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007472:	4013      	ands	r3, r2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10f      	bne.n	8007498 <HAL_TIMEx_PWMN_Stop+0x78>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6a1a      	ldr	r2, [r3, #32]
 800747e:	f244 4344 	movw	r3, #17476	; 0x4444
 8007482:	4013      	ands	r3, r2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d107      	bne.n	8007498 <HAL_TIMEx_PWMN_Stop+0x78>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 0201 	bic.w	r2, r2, #1
 8007496:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d104      	bne.n	80074a8 <HAL_TIMEx_PWMN_Stop+0x88>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074a6:	e013      	b.n	80074d0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2b04      	cmp	r3, #4
 80074ac:	d104      	bne.n	80074b8 <HAL_TIMEx_PWMN_Stop+0x98>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074b6:	e00b      	b.n	80074d0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b08      	cmp	r3, #8
 80074bc:	d104      	bne.n	80074c8 <HAL_TIMEx_PWMN_Stop+0xa8>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074c6:	e003      	b.n	80074d0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
	...

080074dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d101      	bne.n	80074f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074f0:	2302      	movs	r3, #2
 80074f2:	e074      	b.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a34      	ldr	r2, [pc, #208]	; (80075ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d009      	beq.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a33      	ldr	r2, [pc, #204]	; (80075f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d004      	beq.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a31      	ldr	r2, [pc, #196]	; (80075f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d108      	bne.n	8007544 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007538:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	4313      	orrs	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800754a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a21      	ldr	r2, [pc, #132]	; (80075ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d022      	beq.n	80075b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007574:	d01d      	beq.n	80075b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a1f      	ldr	r2, [pc, #124]	; (80075f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d018      	beq.n	80075b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a1d      	ldr	r2, [pc, #116]	; (80075fc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d013      	beq.n	80075b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a1c      	ldr	r2, [pc, #112]	; (8007600 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d00e      	beq.n	80075b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a15      	ldr	r2, [pc, #84]	; (80075f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d009      	beq.n	80075b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a18      	ldr	r2, [pc, #96]	; (8007604 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d004      	beq.n	80075b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a11      	ldr	r2, [pc, #68]	; (80075f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d10c      	bne.n	80075cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	40012c00 	.word	0x40012c00
 80075f0:	40013400 	.word	0x40013400
 80075f4:	40015000 	.word	0x40015000
 80075f8:	40000400 	.word	0x40000400
 80075fc:	40000800 	.word	0x40000800
 8007600:	40000c00 	.word	0x40000c00
 8007604:	40014000 	.word	0x40014000

08007608 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007612:	2300      	movs	r3, #0
 8007614:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800761c:	2b01      	cmp	r3, #1
 800761e:	d101      	bne.n	8007624 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007620:	2302      	movs	r3, #2
 8007622:	e096      	b.n	8007752 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	4313      	orrs	r3, r2
 8007638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	4313      	orrs	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	4313      	orrs	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4313      	orrs	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	4313      	orrs	r3, r2
 8007670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768a:	4313      	orrs	r3, r2
 800768c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	041b      	lsls	r3, r3, #16
 800769a:	4313      	orrs	r3, r2
 800769c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a2f      	ldr	r2, [pc, #188]	; (8007760 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d009      	beq.n	80076bc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a2d      	ldr	r2, [pc, #180]	; (8007764 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d004      	beq.n	80076bc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a2c      	ldr	r2, [pc, #176]	; (8007768 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d106      	bne.n	80076ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a24      	ldr	r2, [pc, #144]	; (8007760 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d009      	beq.n	80076e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a22      	ldr	r2, [pc, #136]	; (8007764 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d004      	beq.n	80076e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a21      	ldr	r2, [pc, #132]	; (8007768 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d12b      	bne.n	8007740 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f2:	051b      	lsls	r3, r3, #20
 80076f4:	4313      	orrs	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	4313      	orrs	r3, r2
 8007704:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	4313      	orrs	r3, r2
 8007712:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a11      	ldr	r2, [pc, #68]	; (8007760 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d009      	beq.n	8007732 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a10      	ldr	r2, [pc, #64]	; (8007764 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d004      	beq.n	8007732 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a0e      	ldr	r2, [pc, #56]	; (8007768 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d106      	bne.n	8007740 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773c:	4313      	orrs	r3, r2
 800773e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	40012c00 	.word	0x40012c00
 8007764:	40013400 	.word	0x40013400
 8007768:	40015000 	.word	0x40015000

0800776c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b087      	sub	sp, #28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f003 031f 	and.w	r3, r3, #31
 800780a:	2204      	movs	r2, #4
 800780c:	fa02 f303 	lsl.w	r3, r2, r3
 8007810:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6a1a      	ldr	r2, [r3, #32]
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	43db      	mvns	r3, r3
 800781a:	401a      	ands	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6a1a      	ldr	r2, [r3, #32]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f003 031f 	and.w	r3, r3, #31
 800782a:	6879      	ldr	r1, [r7, #4]
 800782c:	fa01 f303 	lsl.w	r3, r1, r3
 8007830:	431a      	orrs	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	621a      	str	r2, [r3, #32]
}
 8007836:	bf00      	nop
 8007838:	371c      	adds	r7, #28
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b082      	sub	sp, #8
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e042      	b.n	80078da <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7fa fdac 	bl	80023c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2224      	movs	r2, #36	; 0x24
 8007870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 0201 	bic.w	r2, r2, #1
 8007882:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fd23 	bl	80082d0 <UART_SetConfig>
 800788a:	4603      	mov	r3, r0
 800788c:	2b01      	cmp	r3, #1
 800788e:	d101      	bne.n	8007894 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e022      	b.n	80078da <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f001 f813 	bl	80088c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f042 0201 	orr.w	r2, r2, #1
 80078d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 f89a 	bl	8008a0c <UART_CheckIdleState>
 80078d8:	4603      	mov	r3, r0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b08a      	sub	sp, #40	; 0x28
 80078e6:	af02      	add	r7, sp, #8
 80078e8:	60f8      	str	r0, [r7, #12]
 80078ea:	60b9      	str	r1, [r7, #8]
 80078ec:	603b      	str	r3, [r7, #0]
 80078ee:	4613      	mov	r3, r2
 80078f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078f8:	2b20      	cmp	r3, #32
 80078fa:	f040 8083 	bne.w	8007a04 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <HAL_UART_Transmit+0x28>
 8007904:	88fb      	ldrh	r3, [r7, #6]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e07b      	b.n	8007a06 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007914:	2b01      	cmp	r3, #1
 8007916:	d101      	bne.n	800791c <HAL_UART_Transmit+0x3a>
 8007918:	2302      	movs	r3, #2
 800791a:	e074      	b.n	8007a06 <HAL_UART_Transmit+0x124>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2221      	movs	r2, #33	; 0x21
 8007930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007934:	f7fa fe34 	bl	80025a0 <HAL_GetTick>
 8007938:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	88fa      	ldrh	r2, [r7, #6]
 800793e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	88fa      	ldrh	r2, [r7, #6]
 8007946:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007952:	d108      	bne.n	8007966 <HAL_UART_Transmit+0x84>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d104      	bne.n	8007966 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800795c:	2300      	movs	r3, #0
 800795e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	61bb      	str	r3, [r7, #24]
 8007964:	e003      	b.n	800796e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800796a:	2300      	movs	r3, #0
 800796c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007976:	e02c      	b.n	80079d2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	2200      	movs	r2, #0
 8007980:	2180      	movs	r1, #128	; 0x80
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f001 f88d 	bl	8008aa2 <UART_WaitOnFlagUntilTimeout>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e039      	b.n	8007a06 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10b      	bne.n	80079b0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	461a      	mov	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	3302      	adds	r3, #2
 80079ac:	61bb      	str	r3, [r7, #24]
 80079ae:	e007      	b.n	80079c0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	781a      	ldrb	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	3301      	adds	r3, #1
 80079be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	3b01      	subs	r3, #1
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1cc      	bne.n	8007978 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2200      	movs	r2, #0
 80079e6:	2140      	movs	r1, #64	; 0x40
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f001 f85a 	bl	8008aa2 <UART_WaitOnFlagUntilTimeout>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e006      	b.n	8007a06 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2220      	movs	r2, #32
 80079fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007a00:	2300      	movs	r3, #0
 8007a02:	e000      	b.n	8007a06 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007a04:	2302      	movs	r3, #2
  }
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3720      	adds	r7, #32
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b08a      	sub	sp, #40	; 0x28
 8007a12:	af02      	add	r7, sp, #8
 8007a14:	60f8      	str	r0, [r7, #12]
 8007a16:	60b9      	str	r1, [r7, #8]
 8007a18:	603b      	str	r3, [r7, #0]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a24:	2b20      	cmp	r3, #32
 8007a26:	f040 80c0 	bne.w	8007baa <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <HAL_UART_Receive+0x28>
 8007a30:	88fb      	ldrh	r3, [r7, #6]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e0b8      	b.n	8007bac <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d101      	bne.n	8007a48 <HAL_UART_Receive+0x3a>
 8007a44:	2302      	movs	r3, #2
 8007a46:	e0b1      	b.n	8007bac <HAL_UART_Receive+0x19e>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2222      	movs	r2, #34	; 0x22
 8007a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a66:	f7fa fd9b 	bl	80025a0 <HAL_GetTick>
 8007a6a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	88fa      	ldrh	r2, [r7, #6]
 8007a70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	88fa      	ldrh	r2, [r7, #6]
 8007a78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a84:	d10e      	bne.n	8007aa4 <HAL_UART_Receive+0x96>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d105      	bne.n	8007a9a <HAL_UART_Receive+0x8c>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a98:	e02d      	b.n	8007af6 <HAL_UART_Receive+0xe8>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	22ff      	movs	r2, #255	; 0xff
 8007a9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007aa2:	e028      	b.n	8007af6 <HAL_UART_Receive+0xe8>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10d      	bne.n	8007ac8 <HAL_UART_Receive+0xba>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d104      	bne.n	8007abe <HAL_UART_Receive+0xb0>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	22ff      	movs	r2, #255	; 0xff
 8007ab8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007abc:	e01b      	b.n	8007af6 <HAL_UART_Receive+0xe8>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	227f      	movs	r2, #127	; 0x7f
 8007ac2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ac6:	e016      	b.n	8007af6 <HAL_UART_Receive+0xe8>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ad0:	d10d      	bne.n	8007aee <HAL_UART_Receive+0xe0>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d104      	bne.n	8007ae4 <HAL_UART_Receive+0xd6>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	227f      	movs	r2, #127	; 0x7f
 8007ade:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ae2:	e008      	b.n	8007af6 <HAL_UART_Receive+0xe8>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	223f      	movs	r2, #63	; 0x3f
 8007ae8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007aec:	e003      	b.n	8007af6 <HAL_UART_Receive+0xe8>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007afc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b06:	d108      	bne.n	8007b1a <HAL_UART_Receive+0x10c>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d104      	bne.n	8007b1a <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8007b10:	2300      	movs	r3, #0
 8007b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	61bb      	str	r3, [r7, #24]
 8007b18:	e003      	b.n	8007b22 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007b2a:	e032      	b.n	8007b92 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	2200      	movs	r2, #0
 8007b34:	2120      	movs	r1, #32
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 ffb3 	bl	8008aa2 <UART_WaitOnFlagUntilTimeout>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d001      	beq.n	8007b46 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e032      	b.n	8007bac <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10c      	bne.n	8007b66 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	8a7b      	ldrh	r3, [r7, #18]
 8007b56:	4013      	ands	r3, r2
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	3302      	adds	r3, #2
 8007b62:	61bb      	str	r3, [r7, #24]
 8007b64:	e00c      	b.n	8007b80 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	b2da      	uxtb	r2, r3
 8007b6e:	8a7b      	ldrh	r3, [r7, #18]
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	4013      	ands	r3, r2
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1c6      	bne.n	8007b2c <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e000      	b.n	8007bac <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8007baa:	2302      	movs	r3, #2
  }
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3720      	adds	r7, #32
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b08a      	sub	sp, #40	; 0x28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc8:	2b20      	cmp	r3, #32
 8007bca:	d142      	bne.n	8007c52 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d002      	beq.n	8007bd8 <HAL_UART_Receive_IT+0x24>
 8007bd2:	88fb      	ldrh	r3, [r7, #6]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e03b      	b.n	8007c54 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d101      	bne.n	8007bea <HAL_UART_Receive_IT+0x36>
 8007be6:	2302      	movs	r3, #2
 8007be8:	e034      	b.n	8007c54 <HAL_UART_Receive_IT+0xa0>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a17      	ldr	r2, [pc, #92]	; (8007c5c <HAL_UART_Receive_IT+0xa8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d01f      	beq.n	8007c42 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d018      	beq.n	8007c42 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	e853 3f00 	ldrex	r3, [r3]
 8007c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c24:	627b      	str	r3, [r7, #36]	; 0x24
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	623b      	str	r3, [r7, #32]
 8007c30:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c32:	69f9      	ldr	r1, [r7, #28]
 8007c34:	6a3a      	ldr	r2, [r7, #32]
 8007c36:	e841 2300 	strex	r3, r2, [r1]
 8007c3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1e6      	bne.n	8007c10 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007c42:	88fb      	ldrh	r3, [r7, #6]
 8007c44:	461a      	mov	r2, r3
 8007c46:	68b9      	ldr	r1, [r7, #8]
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 fff3 	bl	8008c34 <UART_Start_Receive_IT>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	e000      	b.n	8007c54 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007c52:	2302      	movs	r3, #2
  }
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3728      	adds	r7, #40	; 0x28
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	40008000 	.word	0x40008000

08007c60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b0ba      	sub	sp, #232	; 0xe8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007c8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8007c8e:	4013      	ands	r3, r2
 8007c90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007c94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d11b      	bne.n	8007cd4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ca0:	f003 0320 	and.w	r3, r3, #32
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d015      	beq.n	8007cd4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cac:	f003 0320 	and.w	r3, r3, #32
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d105      	bne.n	8007cc0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d009      	beq.n	8007cd4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 82d6 	beq.w	8008276 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	4798      	blx	r3
      }
      return;
 8007cd2:	e2d0      	b.n	8008276 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007cd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 811f 	beq.w	8007f1c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007cde:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007ce2:	4b8b      	ldr	r3, [pc, #556]	; (8007f10 <HAL_UART_IRQHandler+0x2b0>)
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d106      	bne.n	8007cf8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007cea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007cee:	4b89      	ldr	r3, [pc, #548]	; (8007f14 <HAL_UART_IRQHandler+0x2b4>)
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f000 8112 	beq.w	8007f1c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d011      	beq.n	8007d28 <HAL_UART_IRQHandler+0xc8>
 8007d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00b      	beq.n	8007d28 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2201      	movs	r2, #1
 8007d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d1e:	f043 0201 	orr.w	r2, r3, #1
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d011      	beq.n	8007d58 <HAL_UART_IRQHandler+0xf8>
 8007d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00b      	beq.n	8007d58 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2202      	movs	r2, #2
 8007d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d4e:	f043 0204 	orr.w	r2, r3, #4
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d5c:	f003 0304 	and.w	r3, r3, #4
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d011      	beq.n	8007d88 <HAL_UART_IRQHandler+0x128>
 8007d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00b      	beq.n	8007d88 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2204      	movs	r2, #4
 8007d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d7e:	f043 0202 	orr.w	r2, r3, #2
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d8c:	f003 0308 	and.w	r3, r3, #8
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d017      	beq.n	8007dc4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d98:	f003 0320 	and.w	r3, r3, #32
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d105      	bne.n	8007dac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007da0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007da4:	4b5a      	ldr	r3, [pc, #360]	; (8007f10 <HAL_UART_IRQHandler+0x2b0>)
 8007da6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00b      	beq.n	8007dc4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2208      	movs	r2, #8
 8007db2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dba:	f043 0208 	orr.w	r2, r3, #8
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d012      	beq.n	8007df6 <HAL_UART_IRQHandler+0x196>
 8007dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00c      	beq.n	8007df6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007de4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dec:	f043 0220 	orr.w	r2, r3, #32
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 823c 	beq.w	800827a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e06:	f003 0320 	and.w	r3, r3, #32
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d013      	beq.n	8007e36 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e12:	f003 0320 	and.w	r3, r3, #32
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d105      	bne.n	8007e26 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d007      	beq.n	8007e36 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d003      	beq.n	8007e36 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4a:	2b40      	cmp	r3, #64	; 0x40
 8007e4c:	d005      	beq.n	8007e5a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007e4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d04f      	beq.n	8007efa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f001 f814 	bl	8008e88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6a:	2b40      	cmp	r3, #64	; 0x40
 8007e6c:	d141      	bne.n	8007ef2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	3308      	adds	r3, #8
 8007e74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e7c:	e853 3f00 	ldrex	r3, [r3]
 8007e80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	3308      	adds	r3, #8
 8007e96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007e9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ea6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007eaa:	e841 2300 	strex	r3, r2, [r1]
 8007eae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007eb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1d9      	bne.n	8007e6e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d013      	beq.n	8007eea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ec6:	4a14      	ldr	r2, [pc, #80]	; (8007f18 <HAL_UART_IRQHandler+0x2b8>)
 8007ec8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fc f950 	bl	8004174 <HAL_DMA_Abort_IT>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d017      	beq.n	8007f0a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ee8:	e00f      	b.n	8007f0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f9da 	bl	80082a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef0:	e00b      	b.n	8007f0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f9d6 	bl	80082a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef8:	e007      	b.n	8007f0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f9d2 	bl	80082a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007f08:	e1b7      	b.n	800827a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f0a:	bf00      	nop
    return;
 8007f0c:	e1b5      	b.n	800827a <HAL_UART_IRQHandler+0x61a>
 8007f0e:	bf00      	nop
 8007f10:	10000001 	.word	0x10000001
 8007f14:	04000120 	.word	0x04000120
 8007f18:	08008f55 	.word	0x08008f55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	f040 814a 	bne.w	80081ba <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f2a:	f003 0310 	and.w	r3, r3, #16
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f000 8143 	beq.w	80081ba <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f38:	f003 0310 	and.w	r3, r3, #16
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 813c 	beq.w	80081ba <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2210      	movs	r2, #16
 8007f48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f54:	2b40      	cmp	r3, #64	; 0x40
 8007f56:	f040 80b5 	bne.w	80080c4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f000 8187 	beq.w	800827e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	f080 817f 	bcs.w	800827e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0320 	and.w	r3, r3, #32
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f040 8086 	bne.w	80080a8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007fca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007fd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007fd6:	e841 2300 	strex	r3, r2, [r1]
 8007fda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1da      	bne.n	8007f9c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3308      	adds	r3, #8
 8007fec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ff0:	e853 3f00 	ldrex	r3, [r3]
 8007ff4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ff8:	f023 0301 	bic.w	r3, r3, #1
 8007ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	3308      	adds	r3, #8
 8008006:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800800a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800800e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008010:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008012:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008016:	e841 2300 	strex	r3, r2, [r1]
 800801a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800801c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1e1      	bne.n	8007fe6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3308      	adds	r3, #8
 8008028:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800802c:	e853 3f00 	ldrex	r3, [r3]
 8008030:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3308      	adds	r3, #8
 8008042:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008046:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008048:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800804c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800804e:	e841 2300 	strex	r3, r2, [r1]
 8008052:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1e3      	bne.n	8008022 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2220      	movs	r2, #32
 800805e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008070:	e853 3f00 	ldrex	r3, [r3]
 8008074:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008078:	f023 0310 	bic.w	r3, r3, #16
 800807c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	461a      	mov	r2, r3
 8008086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800808a:	65bb      	str	r3, [r7, #88]	; 0x58
 800808c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008090:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008092:	e841 2300 	strex	r3, r2, [r1]
 8008096:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1e4      	bne.n	8008068 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fc f80d 	bl	80040c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f8fb 	bl	80082b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80080c2:	e0dc      	b.n	800827e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080de:	b29b      	uxth	r3, r3
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 80ce 	beq.w	8008282 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80080e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f000 80c9 	beq.w	8008282 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f8:	e853 3f00 	ldrex	r3, [r3]
 80080fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008100:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008104:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	461a      	mov	r2, r3
 800810e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008112:	647b      	str	r3, [r7, #68]	; 0x44
 8008114:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008116:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008118:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800811a:	e841 2300 	strex	r3, r2, [r1]
 800811e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1e4      	bne.n	80080f0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3308      	adds	r3, #8
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	e853 3f00 	ldrex	r3, [r3]
 8008134:	623b      	str	r3, [r7, #32]
   return(result);
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800813c:	f023 0301 	bic.w	r3, r3, #1
 8008140:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	3308      	adds	r3, #8
 800814a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800814e:	633a      	str	r2, [r7, #48]	; 0x30
 8008150:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008156:	e841 2300 	strex	r3, r2, [r1]
 800815a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800815c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1e1      	bne.n	8008126 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2220      	movs	r2, #32
 8008166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	e853 3f00 	ldrex	r3, [r3]
 8008182:	60fb      	str	r3, [r7, #12]
   return(result);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f023 0310 	bic.w	r3, r3, #16
 800818a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008198:	61fb      	str	r3, [r7, #28]
 800819a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819c:	69b9      	ldr	r1, [r7, #24]
 800819e:	69fa      	ldr	r2, [r7, #28]
 80081a0:	e841 2300 	strex	r3, r2, [r1]
 80081a4:	617b      	str	r3, [r7, #20]
   return(result);
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e4      	bne.n	8008176 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f880 	bl	80082b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081b8:	e063      	b.n	8008282 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80081ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00e      	beq.n	80081e4 <HAL_UART_IRQHandler+0x584>
 80081c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d008      	beq.n	80081e4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80081da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f001 fb57 	bl	8009890 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081e2:	e051      	b.n	8008288 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80081e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d014      	beq.n	800821a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80081f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d105      	bne.n	8008208 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80081fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008200:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d008      	beq.n	800821a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800820c:	2b00      	cmp	r3, #0
 800820e:	d03a      	beq.n	8008286 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	4798      	blx	r3
    }
    return;
 8008218:	e035      	b.n	8008286 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800821a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800821e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008222:	2b00      	cmp	r3, #0
 8008224:	d009      	beq.n	800823a <HAL_UART_IRQHandler+0x5da>
 8008226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800822a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fea4 	bl	8008f80 <UART_EndTransmit_IT>
    return;
 8008238:	e026      	b.n	8008288 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800823a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800823e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d009      	beq.n	800825a <HAL_UART_IRQHandler+0x5fa>
 8008246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800824a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f001 fb30 	bl	80098b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008258:	e016      	b.n	8008288 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800825a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800825e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d010      	beq.n	8008288 <HAL_UART_IRQHandler+0x628>
 8008266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800826a:	2b00      	cmp	r3, #0
 800826c:	da0c      	bge.n	8008288 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f001 fb18 	bl	80098a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008274:	e008      	b.n	8008288 <HAL_UART_IRQHandler+0x628>
      return;
 8008276:	bf00      	nop
 8008278:	e006      	b.n	8008288 <HAL_UART_IRQHandler+0x628>
    return;
 800827a:	bf00      	nop
 800827c:	e004      	b.n	8008288 <HAL_UART_IRQHandler+0x628>
      return;
 800827e:	bf00      	nop
 8008280:	e002      	b.n	8008288 <HAL_UART_IRQHandler+0x628>
      return;
 8008282:	bf00      	nop
 8008284:	e000      	b.n	8008288 <HAL_UART_IRQHandler+0x628>
    return;
 8008286:	bf00      	nop
  }
}
 8008288:	37e8      	adds	r7, #232	; 0xe8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop

08008290 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	460b      	mov	r3, r1
 80082c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082d4:	b08c      	sub	sp, #48	; 0x30
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	689a      	ldr	r2, [r3, #8]
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	431a      	orrs	r2, r3
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	431a      	orrs	r2, r3
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	69db      	ldr	r3, [r3, #28]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	4baa      	ldr	r3, [pc, #680]	; (80085a8 <UART_SetConfig+0x2d8>)
 8008300:	4013      	ands	r3, r2
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	6812      	ldr	r2, [r2, #0]
 8008306:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008308:	430b      	orrs	r3, r1
 800830a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	68da      	ldr	r2, [r3, #12]
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	430a      	orrs	r2, r1
 8008320:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a9f      	ldr	r2, [pc, #636]	; (80085ac <UART_SetConfig+0x2dc>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d004      	beq.n	800833c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008338:	4313      	orrs	r3, r2
 800833a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008346:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	6812      	ldr	r2, [r2, #0]
 800834e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008350:	430b      	orrs	r3, r1
 8008352:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835a:	f023 010f 	bic.w	r1, r3, #15
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a90      	ldr	r2, [pc, #576]	; (80085b0 <UART_SetConfig+0x2e0>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d125      	bne.n	80083c0 <UART_SetConfig+0xf0>
 8008374:	4b8f      	ldr	r3, [pc, #572]	; (80085b4 <UART_SetConfig+0x2e4>)
 8008376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800837a:	f003 0303 	and.w	r3, r3, #3
 800837e:	2b03      	cmp	r3, #3
 8008380:	d81a      	bhi.n	80083b8 <UART_SetConfig+0xe8>
 8008382:	a201      	add	r2, pc, #4	; (adr r2, 8008388 <UART_SetConfig+0xb8>)
 8008384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008388:	08008399 	.word	0x08008399
 800838c:	080083a9 	.word	0x080083a9
 8008390:	080083a1 	.word	0x080083a1
 8008394:	080083b1 	.word	0x080083b1
 8008398:	2301      	movs	r3, #1
 800839a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800839e:	e116      	b.n	80085ce <UART_SetConfig+0x2fe>
 80083a0:	2302      	movs	r3, #2
 80083a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083a6:	e112      	b.n	80085ce <UART_SetConfig+0x2fe>
 80083a8:	2304      	movs	r3, #4
 80083aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ae:	e10e      	b.n	80085ce <UART_SetConfig+0x2fe>
 80083b0:	2308      	movs	r3, #8
 80083b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083b6:	e10a      	b.n	80085ce <UART_SetConfig+0x2fe>
 80083b8:	2310      	movs	r3, #16
 80083ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083be:	e106      	b.n	80085ce <UART_SetConfig+0x2fe>
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a7c      	ldr	r2, [pc, #496]	; (80085b8 <UART_SetConfig+0x2e8>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d138      	bne.n	800843c <UART_SetConfig+0x16c>
 80083ca:	4b7a      	ldr	r3, [pc, #488]	; (80085b4 <UART_SetConfig+0x2e4>)
 80083cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083d0:	f003 030c 	and.w	r3, r3, #12
 80083d4:	2b0c      	cmp	r3, #12
 80083d6:	d82d      	bhi.n	8008434 <UART_SetConfig+0x164>
 80083d8:	a201      	add	r2, pc, #4	; (adr r2, 80083e0 <UART_SetConfig+0x110>)
 80083da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083de:	bf00      	nop
 80083e0:	08008415 	.word	0x08008415
 80083e4:	08008435 	.word	0x08008435
 80083e8:	08008435 	.word	0x08008435
 80083ec:	08008435 	.word	0x08008435
 80083f0:	08008425 	.word	0x08008425
 80083f4:	08008435 	.word	0x08008435
 80083f8:	08008435 	.word	0x08008435
 80083fc:	08008435 	.word	0x08008435
 8008400:	0800841d 	.word	0x0800841d
 8008404:	08008435 	.word	0x08008435
 8008408:	08008435 	.word	0x08008435
 800840c:	08008435 	.word	0x08008435
 8008410:	0800842d 	.word	0x0800842d
 8008414:	2300      	movs	r3, #0
 8008416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800841a:	e0d8      	b.n	80085ce <UART_SetConfig+0x2fe>
 800841c:	2302      	movs	r3, #2
 800841e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008422:	e0d4      	b.n	80085ce <UART_SetConfig+0x2fe>
 8008424:	2304      	movs	r3, #4
 8008426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800842a:	e0d0      	b.n	80085ce <UART_SetConfig+0x2fe>
 800842c:	2308      	movs	r3, #8
 800842e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008432:	e0cc      	b.n	80085ce <UART_SetConfig+0x2fe>
 8008434:	2310      	movs	r3, #16
 8008436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800843a:	e0c8      	b.n	80085ce <UART_SetConfig+0x2fe>
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a5e      	ldr	r2, [pc, #376]	; (80085bc <UART_SetConfig+0x2ec>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d125      	bne.n	8008492 <UART_SetConfig+0x1c2>
 8008446:	4b5b      	ldr	r3, [pc, #364]	; (80085b4 <UART_SetConfig+0x2e4>)
 8008448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800844c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008450:	2b30      	cmp	r3, #48	; 0x30
 8008452:	d016      	beq.n	8008482 <UART_SetConfig+0x1b2>
 8008454:	2b30      	cmp	r3, #48	; 0x30
 8008456:	d818      	bhi.n	800848a <UART_SetConfig+0x1ba>
 8008458:	2b20      	cmp	r3, #32
 800845a:	d00a      	beq.n	8008472 <UART_SetConfig+0x1a2>
 800845c:	2b20      	cmp	r3, #32
 800845e:	d814      	bhi.n	800848a <UART_SetConfig+0x1ba>
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <UART_SetConfig+0x19a>
 8008464:	2b10      	cmp	r3, #16
 8008466:	d008      	beq.n	800847a <UART_SetConfig+0x1aa>
 8008468:	e00f      	b.n	800848a <UART_SetConfig+0x1ba>
 800846a:	2300      	movs	r3, #0
 800846c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008470:	e0ad      	b.n	80085ce <UART_SetConfig+0x2fe>
 8008472:	2302      	movs	r3, #2
 8008474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008478:	e0a9      	b.n	80085ce <UART_SetConfig+0x2fe>
 800847a:	2304      	movs	r3, #4
 800847c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008480:	e0a5      	b.n	80085ce <UART_SetConfig+0x2fe>
 8008482:	2308      	movs	r3, #8
 8008484:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008488:	e0a1      	b.n	80085ce <UART_SetConfig+0x2fe>
 800848a:	2310      	movs	r3, #16
 800848c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008490:	e09d      	b.n	80085ce <UART_SetConfig+0x2fe>
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a4a      	ldr	r2, [pc, #296]	; (80085c0 <UART_SetConfig+0x2f0>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d125      	bne.n	80084e8 <UART_SetConfig+0x218>
 800849c:	4b45      	ldr	r3, [pc, #276]	; (80085b4 <UART_SetConfig+0x2e4>)
 800849e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80084a6:	2bc0      	cmp	r3, #192	; 0xc0
 80084a8:	d016      	beq.n	80084d8 <UART_SetConfig+0x208>
 80084aa:	2bc0      	cmp	r3, #192	; 0xc0
 80084ac:	d818      	bhi.n	80084e0 <UART_SetConfig+0x210>
 80084ae:	2b80      	cmp	r3, #128	; 0x80
 80084b0:	d00a      	beq.n	80084c8 <UART_SetConfig+0x1f8>
 80084b2:	2b80      	cmp	r3, #128	; 0x80
 80084b4:	d814      	bhi.n	80084e0 <UART_SetConfig+0x210>
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d002      	beq.n	80084c0 <UART_SetConfig+0x1f0>
 80084ba:	2b40      	cmp	r3, #64	; 0x40
 80084bc:	d008      	beq.n	80084d0 <UART_SetConfig+0x200>
 80084be:	e00f      	b.n	80084e0 <UART_SetConfig+0x210>
 80084c0:	2300      	movs	r3, #0
 80084c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084c6:	e082      	b.n	80085ce <UART_SetConfig+0x2fe>
 80084c8:	2302      	movs	r3, #2
 80084ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ce:	e07e      	b.n	80085ce <UART_SetConfig+0x2fe>
 80084d0:	2304      	movs	r3, #4
 80084d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084d6:	e07a      	b.n	80085ce <UART_SetConfig+0x2fe>
 80084d8:	2308      	movs	r3, #8
 80084da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084de:	e076      	b.n	80085ce <UART_SetConfig+0x2fe>
 80084e0:	2310      	movs	r3, #16
 80084e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084e6:	e072      	b.n	80085ce <UART_SetConfig+0x2fe>
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a35      	ldr	r2, [pc, #212]	; (80085c4 <UART_SetConfig+0x2f4>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d12a      	bne.n	8008548 <UART_SetConfig+0x278>
 80084f2:	4b30      	ldr	r3, [pc, #192]	; (80085b4 <UART_SetConfig+0x2e4>)
 80084f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008500:	d01a      	beq.n	8008538 <UART_SetConfig+0x268>
 8008502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008506:	d81b      	bhi.n	8008540 <UART_SetConfig+0x270>
 8008508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800850c:	d00c      	beq.n	8008528 <UART_SetConfig+0x258>
 800850e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008512:	d815      	bhi.n	8008540 <UART_SetConfig+0x270>
 8008514:	2b00      	cmp	r3, #0
 8008516:	d003      	beq.n	8008520 <UART_SetConfig+0x250>
 8008518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800851c:	d008      	beq.n	8008530 <UART_SetConfig+0x260>
 800851e:	e00f      	b.n	8008540 <UART_SetConfig+0x270>
 8008520:	2300      	movs	r3, #0
 8008522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008526:	e052      	b.n	80085ce <UART_SetConfig+0x2fe>
 8008528:	2302      	movs	r3, #2
 800852a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800852e:	e04e      	b.n	80085ce <UART_SetConfig+0x2fe>
 8008530:	2304      	movs	r3, #4
 8008532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008536:	e04a      	b.n	80085ce <UART_SetConfig+0x2fe>
 8008538:	2308      	movs	r3, #8
 800853a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800853e:	e046      	b.n	80085ce <UART_SetConfig+0x2fe>
 8008540:	2310      	movs	r3, #16
 8008542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008546:	e042      	b.n	80085ce <UART_SetConfig+0x2fe>
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a17      	ldr	r2, [pc, #92]	; (80085ac <UART_SetConfig+0x2dc>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d13a      	bne.n	80085c8 <UART_SetConfig+0x2f8>
 8008552:	4b18      	ldr	r3, [pc, #96]	; (80085b4 <UART_SetConfig+0x2e4>)
 8008554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008558:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800855c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008560:	d01a      	beq.n	8008598 <UART_SetConfig+0x2c8>
 8008562:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008566:	d81b      	bhi.n	80085a0 <UART_SetConfig+0x2d0>
 8008568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800856c:	d00c      	beq.n	8008588 <UART_SetConfig+0x2b8>
 800856e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008572:	d815      	bhi.n	80085a0 <UART_SetConfig+0x2d0>
 8008574:	2b00      	cmp	r3, #0
 8008576:	d003      	beq.n	8008580 <UART_SetConfig+0x2b0>
 8008578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800857c:	d008      	beq.n	8008590 <UART_SetConfig+0x2c0>
 800857e:	e00f      	b.n	80085a0 <UART_SetConfig+0x2d0>
 8008580:	2300      	movs	r3, #0
 8008582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008586:	e022      	b.n	80085ce <UART_SetConfig+0x2fe>
 8008588:	2302      	movs	r3, #2
 800858a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800858e:	e01e      	b.n	80085ce <UART_SetConfig+0x2fe>
 8008590:	2304      	movs	r3, #4
 8008592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008596:	e01a      	b.n	80085ce <UART_SetConfig+0x2fe>
 8008598:	2308      	movs	r3, #8
 800859a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800859e:	e016      	b.n	80085ce <UART_SetConfig+0x2fe>
 80085a0:	2310      	movs	r3, #16
 80085a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085a6:	e012      	b.n	80085ce <UART_SetConfig+0x2fe>
 80085a8:	cfff69f3 	.word	0xcfff69f3
 80085ac:	40008000 	.word	0x40008000
 80085b0:	40013800 	.word	0x40013800
 80085b4:	40021000 	.word	0x40021000
 80085b8:	40004400 	.word	0x40004400
 80085bc:	40004800 	.word	0x40004800
 80085c0:	40004c00 	.word	0x40004c00
 80085c4:	40005000 	.word	0x40005000
 80085c8:	2310      	movs	r3, #16
 80085ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4aae      	ldr	r2, [pc, #696]	; (800888c <UART_SetConfig+0x5bc>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	f040 8097 	bne.w	8008708 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085de:	2b08      	cmp	r3, #8
 80085e0:	d823      	bhi.n	800862a <UART_SetConfig+0x35a>
 80085e2:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <UART_SetConfig+0x318>)
 80085e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e8:	0800860d 	.word	0x0800860d
 80085ec:	0800862b 	.word	0x0800862b
 80085f0:	08008615 	.word	0x08008615
 80085f4:	0800862b 	.word	0x0800862b
 80085f8:	0800861b 	.word	0x0800861b
 80085fc:	0800862b 	.word	0x0800862b
 8008600:	0800862b 	.word	0x0800862b
 8008604:	0800862b 	.word	0x0800862b
 8008608:	08008623 	.word	0x08008623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800860c:	f7fc fe9c 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 8008610:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008612:	e010      	b.n	8008636 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008614:	4b9e      	ldr	r3, [pc, #632]	; (8008890 <UART_SetConfig+0x5c0>)
 8008616:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008618:	e00d      	b.n	8008636 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800861a:	f7fc fe27 	bl	800526c <HAL_RCC_GetSysClockFreq>
 800861e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008620:	e009      	b.n	8008636 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008626:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008628:	e005      	b.n	8008636 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800862a:	2300      	movs	r3, #0
 800862c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008634:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 8130 	beq.w	800889e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008642:	4a94      	ldr	r2, [pc, #592]	; (8008894 <UART_SetConfig+0x5c4>)
 8008644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008648:	461a      	mov	r2, r3
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008650:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	685a      	ldr	r2, [r3, #4]
 8008656:	4613      	mov	r3, r2
 8008658:	005b      	lsls	r3, r3, #1
 800865a:	4413      	add	r3, r2
 800865c:	69ba      	ldr	r2, [r7, #24]
 800865e:	429a      	cmp	r2, r3
 8008660:	d305      	bcc.n	800866e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	429a      	cmp	r2, r3
 800866c:	d903      	bls.n	8008676 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008674:	e113      	b.n	800889e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008678:	2200      	movs	r2, #0
 800867a:	60bb      	str	r3, [r7, #8]
 800867c:	60fa      	str	r2, [r7, #12]
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008682:	4a84      	ldr	r2, [pc, #528]	; (8008894 <UART_SetConfig+0x5c4>)
 8008684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008688:	b29b      	uxth	r3, r3
 800868a:	2200      	movs	r2, #0
 800868c:	603b      	str	r3, [r7, #0]
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008694:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008698:	f7f8 fb2e 	bl	8000cf8 <__aeabi_uldivmod>
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	4610      	mov	r0, r2
 80086a2:	4619      	mov	r1, r3
 80086a4:	f04f 0200 	mov.w	r2, #0
 80086a8:	f04f 0300 	mov.w	r3, #0
 80086ac:	020b      	lsls	r3, r1, #8
 80086ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086b2:	0202      	lsls	r2, r0, #8
 80086b4:	6979      	ldr	r1, [r7, #20]
 80086b6:	6849      	ldr	r1, [r1, #4]
 80086b8:	0849      	lsrs	r1, r1, #1
 80086ba:	2000      	movs	r0, #0
 80086bc:	460c      	mov	r4, r1
 80086be:	4605      	mov	r5, r0
 80086c0:	eb12 0804 	adds.w	r8, r2, r4
 80086c4:	eb43 0905 	adc.w	r9, r3, r5
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	469a      	mov	sl, r3
 80086d0:	4693      	mov	fp, r2
 80086d2:	4652      	mov	r2, sl
 80086d4:	465b      	mov	r3, fp
 80086d6:	4640      	mov	r0, r8
 80086d8:	4649      	mov	r1, r9
 80086da:	f7f8 fb0d 	bl	8000cf8 <__aeabi_uldivmod>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	4613      	mov	r3, r2
 80086e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086ec:	d308      	bcc.n	8008700 <UART_SetConfig+0x430>
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086f4:	d204      	bcs.n	8008700 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	6a3a      	ldr	r2, [r7, #32]
 80086fc:	60da      	str	r2, [r3, #12]
 80086fe:	e0ce      	b.n	800889e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008706:	e0ca      	b.n	800889e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008710:	d166      	bne.n	80087e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008712:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008716:	2b08      	cmp	r3, #8
 8008718:	d827      	bhi.n	800876a <UART_SetConfig+0x49a>
 800871a:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <UART_SetConfig+0x450>)
 800871c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008720:	08008745 	.word	0x08008745
 8008724:	0800874d 	.word	0x0800874d
 8008728:	08008755 	.word	0x08008755
 800872c:	0800876b 	.word	0x0800876b
 8008730:	0800875b 	.word	0x0800875b
 8008734:	0800876b 	.word	0x0800876b
 8008738:	0800876b 	.word	0x0800876b
 800873c:	0800876b 	.word	0x0800876b
 8008740:	08008763 	.word	0x08008763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008744:	f7fc fe00 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 8008748:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800874a:	e014      	b.n	8008776 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800874c:	f7fc fe12 	bl	8005374 <HAL_RCC_GetPCLK2Freq>
 8008750:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008752:	e010      	b.n	8008776 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008754:	4b4e      	ldr	r3, [pc, #312]	; (8008890 <UART_SetConfig+0x5c0>)
 8008756:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008758:	e00d      	b.n	8008776 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800875a:	f7fc fd87 	bl	800526c <HAL_RCC_GetSysClockFreq>
 800875e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008760:	e009      	b.n	8008776 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008766:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008768:	e005      	b.n	8008776 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800876a:	2300      	movs	r3, #0
 800876c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008774:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	2b00      	cmp	r3, #0
 800877a:	f000 8090 	beq.w	800889e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008782:	4a44      	ldr	r2, [pc, #272]	; (8008894 <UART_SetConfig+0x5c4>)
 8008784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008788:	461a      	mov	r2, r3
 800878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008790:	005a      	lsls	r2, r3, #1
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	085b      	lsrs	r3, r3, #1
 8008798:	441a      	add	r2, r3
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	fbb2 f3f3 	udiv	r3, r2, r3
 80087a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087a4:	6a3b      	ldr	r3, [r7, #32]
 80087a6:	2b0f      	cmp	r3, #15
 80087a8:	d916      	bls.n	80087d8 <UART_SetConfig+0x508>
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087b0:	d212      	bcs.n	80087d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	f023 030f 	bic.w	r3, r3, #15
 80087ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087bc:	6a3b      	ldr	r3, [r7, #32]
 80087be:	085b      	lsrs	r3, r3, #1
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	f003 0307 	and.w	r3, r3, #7
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	8bfb      	ldrh	r3, [r7, #30]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	8bfa      	ldrh	r2, [r7, #30]
 80087d4:	60da      	str	r2, [r3, #12]
 80087d6:	e062      	b.n	800889e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80087de:	e05e      	b.n	800889e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087e4:	2b08      	cmp	r3, #8
 80087e6:	d828      	bhi.n	800883a <UART_SetConfig+0x56a>
 80087e8:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <UART_SetConfig+0x520>)
 80087ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ee:	bf00      	nop
 80087f0:	08008815 	.word	0x08008815
 80087f4:	0800881d 	.word	0x0800881d
 80087f8:	08008825 	.word	0x08008825
 80087fc:	0800883b 	.word	0x0800883b
 8008800:	0800882b 	.word	0x0800882b
 8008804:	0800883b 	.word	0x0800883b
 8008808:	0800883b 	.word	0x0800883b
 800880c:	0800883b 	.word	0x0800883b
 8008810:	08008833 	.word	0x08008833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008814:	f7fc fd98 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 8008818:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800881a:	e014      	b.n	8008846 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800881c:	f7fc fdaa 	bl	8005374 <HAL_RCC_GetPCLK2Freq>
 8008820:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008822:	e010      	b.n	8008846 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008824:	4b1a      	ldr	r3, [pc, #104]	; (8008890 <UART_SetConfig+0x5c0>)
 8008826:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008828:	e00d      	b.n	8008846 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800882a:	f7fc fd1f 	bl	800526c <HAL_RCC_GetSysClockFreq>
 800882e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008830:	e009      	b.n	8008846 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008836:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008838:	e005      	b.n	8008846 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800883a:	2300      	movs	r3, #0
 800883c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008844:	bf00      	nop
    }

    if (pclk != 0U)
 8008846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008848:	2b00      	cmp	r3, #0
 800884a:	d028      	beq.n	800889e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	4a10      	ldr	r2, [pc, #64]	; (8008894 <UART_SetConfig+0x5c4>)
 8008852:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008856:	461a      	mov	r2, r3
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	fbb3 f2f2 	udiv	r2, r3, r2
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	085b      	lsrs	r3, r3, #1
 8008864:	441a      	add	r2, r3
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	fbb2 f3f3 	udiv	r3, r2, r3
 800886e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	2b0f      	cmp	r3, #15
 8008874:	d910      	bls.n	8008898 <UART_SetConfig+0x5c8>
 8008876:	6a3b      	ldr	r3, [r7, #32]
 8008878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800887c:	d20c      	bcs.n	8008898 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800887e:	6a3b      	ldr	r3, [r7, #32]
 8008880:	b29a      	uxth	r2, r3
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	60da      	str	r2, [r3, #12]
 8008888:	e009      	b.n	800889e <UART_SetConfig+0x5ce>
 800888a:	bf00      	nop
 800888c:	40008000 	.word	0x40008000
 8008890:	00f42400 	.word	0x00f42400
 8008894:	0800f130 	.word	0x0800f130
      }
      else
      {
        ret = HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2200      	movs	r2, #0
 80088b2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	2200      	movs	r2, #0
 80088b8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80088ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3730      	adds	r7, #48	; 0x30
 80088c2:	46bd      	mov	sp, r7
 80088c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080088c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d4:	f003 0301 	and.w	r3, r3, #1
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00a      	beq.n	80088f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	430a      	orrs	r2, r1
 80088f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f6:	f003 0302 	and.w	r3, r3, #2
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00a      	beq.n	8008914 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	430a      	orrs	r2, r1
 8008912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008918:	f003 0304 	and.w	r3, r3, #4
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00a      	beq.n	8008936 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	430a      	orrs	r2, r1
 8008934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893a:	f003 0308 	and.w	r3, r3, #8
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00a      	beq.n	8008958 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	430a      	orrs	r2, r1
 8008956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895c:	f003 0310 	and.w	r3, r3, #16
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00a      	beq.n	800897a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	430a      	orrs	r2, r1
 8008978:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897e:	f003 0320 	and.w	r3, r3, #32
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00a      	beq.n	800899c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	430a      	orrs	r2, r1
 800899a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d01a      	beq.n	80089de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	430a      	orrs	r2, r1
 80089bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089c6:	d10a      	bne.n	80089de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	430a      	orrs	r2, r1
 80089dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00a      	beq.n	8008a00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	430a      	orrs	r2, r1
 80089fe:	605a      	str	r2, [r3, #4]
  }
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af02      	add	r7, sp, #8
 8008a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a1c:	f7f9 fdc0 	bl	80025a0 <HAL_GetTick>
 8008a20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0308 	and.w	r3, r3, #8
 8008a2c:	2b08      	cmp	r3, #8
 8008a2e:	d10e      	bne.n	8008a4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f82f 	bl	8008aa2 <UART_WaitOnFlagUntilTimeout>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e025      	b.n	8008a9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0304 	and.w	r3, r3, #4
 8008a58:	2b04      	cmp	r3, #4
 8008a5a:	d10e      	bne.n	8008a7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f819 	bl	8008aa2 <UART_WaitOnFlagUntilTimeout>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e00f      	b.n	8008a9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2220      	movs	r2, #32
 8008a86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b09c      	sub	sp, #112	; 0x70
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	60f8      	str	r0, [r7, #12]
 8008aaa:	60b9      	str	r1, [r7, #8]
 8008aac:	603b      	str	r3, [r7, #0]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ab2:	e0a9      	b.n	8008c08 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aba:	f000 80a5 	beq.w	8008c08 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008abe:	f7f9 fd6f 	bl	80025a0 <HAL_GetTick>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d302      	bcc.n	8008ad4 <UART_WaitOnFlagUntilTimeout+0x32>
 8008ace:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d140      	bne.n	8008b56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008adc:	e853 3f00 	ldrex	r3, [r3]
 8008ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ae4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ae8:	667b      	str	r3, [r7, #100]	; 0x64
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	461a      	mov	r2, r3
 8008af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008af2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008af4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008af8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008afa:	e841 2300 	strex	r3, r2, [r1]
 8008afe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1e6      	bne.n	8008ad4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b10:	e853 3f00 	ldrex	r3, [r3]
 8008b14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b18:	f023 0301 	bic.w	r3, r3, #1
 8008b1c:	663b      	str	r3, [r7, #96]	; 0x60
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	3308      	adds	r3, #8
 8008b24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b26:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b2e:	e841 2300 	strex	r3, r2, [r1]
 8008b32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1e5      	bne.n	8008b06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2220      	movs	r2, #32
 8008b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2220      	movs	r2, #32
 8008b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e069      	b.n	8008c2a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0304 	and.w	r3, r3, #4
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d051      	beq.n	8008c08 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b72:	d149      	bne.n	8008c08 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b86:	e853 3f00 	ldrex	r3, [r3]
 8008b8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ba4:	e841 2300 	strex	r3, r2, [r1]
 8008ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1e6      	bne.n	8008b7e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	3308      	adds	r3, #8
 8008bb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	e853 3f00 	ldrex	r3, [r3]
 8008bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	f023 0301 	bic.w	r3, r3, #1
 8008bc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3308      	adds	r3, #8
 8008bce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008bd0:	623a      	str	r2, [r7, #32]
 8008bd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd4:	69f9      	ldr	r1, [r7, #28]
 8008bd6:	6a3a      	ldr	r2, [r7, #32]
 8008bd8:	e841 2300 	strex	r3, r2, [r1]
 8008bdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1e5      	bne.n	8008bb0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2220      	movs	r2, #32
 8008be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2220      	movs	r2, #32
 8008bf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e010      	b.n	8008c2a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	69da      	ldr	r2, [r3, #28]
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	4013      	ands	r3, r2
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	bf0c      	ite	eq
 8008c18:	2301      	moveq	r3, #1
 8008c1a:	2300      	movne	r3, #0
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	461a      	mov	r2, r3
 8008c20:	79fb      	ldrb	r3, [r7, #7]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	f43f af46 	beq.w	8008ab4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3770      	adds	r7, #112	; 0x70
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
	...

08008c34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b0a3      	sub	sp, #140	; 0x8c
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	88fa      	ldrh	r2, [r7, #6]
 8008c4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	88fa      	ldrh	r2, [r7, #6]
 8008c54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c66:	d10e      	bne.n	8008c86 <UART_Start_Receive_IT+0x52>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d105      	bne.n	8008c7c <UART_Start_Receive_IT+0x48>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008c76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008c7a:	e02d      	b.n	8008cd8 <UART_Start_Receive_IT+0xa4>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	22ff      	movs	r2, #255	; 0xff
 8008c80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008c84:	e028      	b.n	8008cd8 <UART_Start_Receive_IT+0xa4>
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10d      	bne.n	8008caa <UART_Start_Receive_IT+0x76>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d104      	bne.n	8008ca0 <UART_Start_Receive_IT+0x6c>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	22ff      	movs	r2, #255	; 0xff
 8008c9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008c9e:	e01b      	b.n	8008cd8 <UART_Start_Receive_IT+0xa4>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	227f      	movs	r2, #127	; 0x7f
 8008ca4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ca8:	e016      	b.n	8008cd8 <UART_Start_Receive_IT+0xa4>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cb2:	d10d      	bne.n	8008cd0 <UART_Start_Receive_IT+0x9c>
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d104      	bne.n	8008cc6 <UART_Start_Receive_IT+0x92>
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	227f      	movs	r2, #127	; 0x7f
 8008cc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cc4:	e008      	b.n	8008cd8 <UART_Start_Receive_IT+0xa4>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	223f      	movs	r2, #63	; 0x3f
 8008cca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cce:	e003      	b.n	8008cd8 <UART_Start_Receive_IT+0xa4>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2222      	movs	r2, #34	; 0x22
 8008ce4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	3308      	adds	r3, #8
 8008cee:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cf2:	e853 3f00 	ldrex	r3, [r3]
 8008cf6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008cf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cfa:	f043 0301 	orr.w	r3, r3, #1
 8008cfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3308      	adds	r3, #8
 8008d08:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008d0c:	673a      	str	r2, [r7, #112]	; 0x70
 8008d0e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d10:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008d12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008d14:	e841 2300 	strex	r3, r2, [r1]
 8008d18:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008d1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1e3      	bne.n	8008ce8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d28:	d153      	bne.n	8008dd2 <UART_Start_Receive_IT+0x19e>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d30:	88fa      	ldrh	r2, [r7, #6]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d34d      	bcc.n	8008dd2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d3e:	d107      	bne.n	8008d50 <UART_Start_Receive_IT+0x11c>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d103      	bne.n	8008d50 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	4a4b      	ldr	r2, [pc, #300]	; (8008e78 <UART_Start_Receive_IT+0x244>)
 8008d4c:	671a      	str	r2, [r3, #112]	; 0x70
 8008d4e:	e002      	b.n	8008d56 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	4a4a      	ldr	r2, [pc, #296]	; (8008e7c <UART_Start_Receive_IT+0x248>)
 8008d54:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d01a      	beq.n	8008d9c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d6e:	e853 3f00 	ldrex	r3, [r3]
 8008d72:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	461a      	mov	r2, r3
 8008d84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d8a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d90:	e841 2300 	strex	r3, r2, [r1]
 8008d94:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1e4      	bne.n	8008d66 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3308      	adds	r3, #8
 8008da2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da6:	e853 3f00 	ldrex	r3, [r3]
 8008daa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008db2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3308      	adds	r3, #8
 8008dba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008dbc:	64ba      	str	r2, [r7, #72]	; 0x48
 8008dbe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008dc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dc4:	e841 2300 	strex	r3, r2, [r1]
 8008dc8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1e5      	bne.n	8008d9c <UART_Start_Receive_IT+0x168>
 8008dd0:	e04a      	b.n	8008e68 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dda:	d107      	bne.n	8008dec <UART_Start_Receive_IT+0x1b8>
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d103      	bne.n	8008dec <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4a26      	ldr	r2, [pc, #152]	; (8008e80 <UART_Start_Receive_IT+0x24c>)
 8008de8:	671a      	str	r2, [r3, #112]	; 0x70
 8008dea:	e002      	b.n	8008df2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4a25      	ldr	r2, [pc, #148]	; (8008e84 <UART_Start_Receive_IT+0x250>)
 8008df0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d019      	beq.n	8008e36 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0a:	e853 3f00 	ldrex	r3, [r3]
 8008e0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e12:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008e16:	677b      	str	r3, [r7, #116]	; 0x74
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e20:	637b      	str	r3, [r7, #52]	; 0x34
 8008e22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e28:	e841 2300 	strex	r3, r2, [r1]
 8008e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1e6      	bne.n	8008e02 <UART_Start_Receive_IT+0x1ce>
 8008e34:	e018      	b.n	8008e68 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	e853 3f00 	ldrex	r3, [r3]
 8008e42:	613b      	str	r3, [r7, #16]
   return(result);
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	f043 0320 	orr.w	r3, r3, #32
 8008e4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	461a      	mov	r2, r3
 8008e52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e54:	623b      	str	r3, [r7, #32]
 8008e56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e58:	69f9      	ldr	r1, [r7, #28]
 8008e5a:	6a3a      	ldr	r2, [r7, #32]
 8008e5c:	e841 2300 	strex	r3, r2, [r1]
 8008e60:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1e6      	bne.n	8008e36 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	378c      	adds	r7, #140	; 0x8c
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	08009591 	.word	0x08009591
 8008e7c:	08009299 	.word	0x08009299
 8008e80:	08009137 	.word	0x08009137
 8008e84:	08008fd7 	.word	0x08008fd7

08008e88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b095      	sub	sp, #84	; 0x54
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eae:	643b      	str	r3, [r7, #64]	; 0x40
 8008eb0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008eb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1e6      	bne.n	8008e90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3308      	adds	r3, #8
 8008ec8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	e853 3f00 	ldrex	r3, [r3]
 8008ed0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ed8:	f023 0301 	bic.w	r3, r3, #1
 8008edc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	3308      	adds	r3, #8
 8008ee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ee6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ee8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e3      	bne.n	8008ec2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d118      	bne.n	8008f34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	e853 3f00 	ldrex	r3, [r3]
 8008f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	f023 0310 	bic.w	r3, r3, #16
 8008f16:	647b      	str	r3, [r7, #68]	; 0x44
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f20:	61bb      	str	r3, [r7, #24]
 8008f22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f24:	6979      	ldr	r1, [r7, #20]
 8008f26:	69ba      	ldr	r2, [r7, #24]
 8008f28:	e841 2300 	strex	r3, r2, [r1]
 8008f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1e6      	bne.n	8008f02 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2220      	movs	r2, #32
 8008f38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008f48:	bf00      	nop
 8008f4a:	3754      	adds	r7, #84	; 0x54
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2200      	movs	r2, #0
 8008f66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f7ff f996 	bl	80082a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f78:	bf00      	nop
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	e853 3f00 	ldrex	r3, [r3]
 8008f94:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f9c:	61fb      	str	r3, [r7, #28]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	61bb      	str	r3, [r7, #24]
 8008fa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008faa:	6979      	ldr	r1, [r7, #20]
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	e841 2300 	strex	r3, r2, [r1]
 8008fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1e6      	bne.n	8008f88 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2220      	movs	r2, #32
 8008fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7ff f961 	bl	8008290 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fce:	bf00      	nop
 8008fd0:	3720      	adds	r7, #32
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b096      	sub	sp, #88	; 0x58
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008fe4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fee:	2b22      	cmp	r3, #34	; 0x22
 8008ff0:	f040 8095 	bne.w	800911e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ffe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009002:	b2d9      	uxtb	r1, r3
 8009004:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009008:	b2da      	uxtb	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800900e:	400a      	ands	r2, r1
 8009010:	b2d2      	uxtb	r2, r2
 8009012:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009018:	1c5a      	adds	r2, r3, #1
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009024:	b29b      	uxth	r3, r3
 8009026:	3b01      	subs	r3, #1
 8009028:	b29a      	uxth	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009036:	b29b      	uxth	r3, r3
 8009038:	2b00      	cmp	r3, #0
 800903a:	d178      	bne.n	800912e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009044:	e853 3f00 	ldrex	r3, [r3]
 8009048:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800904a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009050:	653b      	str	r3, [r7, #80]	; 0x50
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	461a      	mov	r2, r3
 8009058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800905a:	647b      	str	r3, [r7, #68]	; 0x44
 800905c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009060:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009062:	e841 2300 	strex	r3, r2, [r1]
 8009066:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1e6      	bne.n	800903c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3308      	adds	r3, #8
 8009074:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009078:	e853 3f00 	ldrex	r3, [r3]
 800907c:	623b      	str	r3, [r7, #32]
   return(result);
 800907e:	6a3b      	ldr	r3, [r7, #32]
 8009080:	f023 0301 	bic.w	r3, r3, #1
 8009084:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3308      	adds	r3, #8
 800908c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800908e:	633a      	str	r2, [r7, #48]	; 0x30
 8009090:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009096:	e841 2300 	strex	r3, r2, [r1]
 800909a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1e5      	bne.n	800906e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2220      	movs	r2, #32
 80090a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d12e      	bne.n	8009116 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	e853 3f00 	ldrex	r3, [r3]
 80090ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f023 0310 	bic.w	r3, r3, #16
 80090d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	461a      	mov	r2, r3
 80090da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090dc:	61fb      	str	r3, [r7, #28]
 80090de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e0:	69b9      	ldr	r1, [r7, #24]
 80090e2:	69fa      	ldr	r2, [r7, #28]
 80090e4:	e841 2300 	strex	r3, r2, [r1]
 80090e8:	617b      	str	r3, [r7, #20]
   return(result);
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1e6      	bne.n	80090be <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	69db      	ldr	r3, [r3, #28]
 80090f6:	f003 0310 	and.w	r3, r3, #16
 80090fa:	2b10      	cmp	r3, #16
 80090fc:	d103      	bne.n	8009106 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2210      	movs	r2, #16
 8009104:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7ff f8d2 	bl	80082b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009114:	e00b      	b.n	800912e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f7f8 fd58 	bl	8001bcc <HAL_UART_RxCpltCallback>
}
 800911c:	e007      	b.n	800912e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	699a      	ldr	r2, [r3, #24]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f042 0208 	orr.w	r2, r2, #8
 800912c:	619a      	str	r2, [r3, #24]
}
 800912e:	bf00      	nop
 8009130:	3758      	adds	r7, #88	; 0x58
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b096      	sub	sp, #88	; 0x58
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009144:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800914e:	2b22      	cmp	r3, #34	; 0x22
 8009150:	f040 8095 	bne.w	800927e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009162:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009164:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009168:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800916c:	4013      	ands	r3, r2
 800916e:	b29a      	uxth	r2, r3
 8009170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009172:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009178:	1c9a      	adds	r2, r3, #2
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009184:	b29b      	uxth	r3, r3
 8009186:	3b01      	subs	r3, #1
 8009188:	b29a      	uxth	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009196:	b29b      	uxth	r3, r3
 8009198:	2b00      	cmp	r3, #0
 800919a:	d178      	bne.n	800928e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a4:	e853 3f00 	ldrex	r3, [r3]
 80091a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	461a      	mov	r2, r3
 80091b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ba:	643b      	str	r3, [r7, #64]	; 0x40
 80091bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091c2:	e841 2300 	strex	r3, r2, [r1]
 80091c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1e6      	bne.n	800919c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	3308      	adds	r3, #8
 80091d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d6:	6a3b      	ldr	r3, [r7, #32]
 80091d8:	e853 3f00 	ldrex	r3, [r3]
 80091dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	f023 0301 	bic.w	r3, r3, #1
 80091e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3308      	adds	r3, #8
 80091ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091f6:	e841 2300 	strex	r3, r2, [r1]
 80091fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1e5      	bne.n	80091ce <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2220      	movs	r2, #32
 8009206:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009214:	2b01      	cmp	r3, #1
 8009216:	d12e      	bne.n	8009276 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	e853 3f00 	ldrex	r3, [r3]
 800922a:	60bb      	str	r3, [r7, #8]
   return(result);
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	f023 0310 	bic.w	r3, r3, #16
 8009232:	647b      	str	r3, [r7, #68]	; 0x44
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	461a      	mov	r2, r3
 800923a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800923c:	61bb      	str	r3, [r7, #24]
 800923e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009240:	6979      	ldr	r1, [r7, #20]
 8009242:	69ba      	ldr	r2, [r7, #24]
 8009244:	e841 2300 	strex	r3, r2, [r1]
 8009248:	613b      	str	r3, [r7, #16]
   return(result);
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1e6      	bne.n	800921e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	69db      	ldr	r3, [r3, #28]
 8009256:	f003 0310 	and.w	r3, r3, #16
 800925a:	2b10      	cmp	r3, #16
 800925c:	d103      	bne.n	8009266 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2210      	movs	r2, #16
 8009264:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800926c:	4619      	mov	r1, r3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f7ff f822 	bl	80082b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009274:	e00b      	b.n	800928e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f7f8 fca8 	bl	8001bcc <HAL_UART_RxCpltCallback>
}
 800927c:	e007      	b.n	800928e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	699a      	ldr	r2, [r3, #24]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f042 0208 	orr.w	r2, r2, #8
 800928c:	619a      	str	r2, [r3, #24]
}
 800928e:	bf00      	nop
 8009290:	3758      	adds	r7, #88	; 0x58
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
	...

08009298 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b0a6      	sub	sp, #152	; 0x98
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092a6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	69db      	ldr	r3, [r3, #28]
 80092b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092ce:	2b22      	cmp	r3, #34	; 0x22
 80092d0:	f040 814f 	bne.w	8009572 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80092da:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092de:	e0f6      	b.n	80094ce <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80092ea:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80092ee:	b2d9      	uxtb	r1, r3
 80092f0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092fa:	400a      	ands	r2, r1
 80092fc:	b2d2      	uxtb	r2, r2
 80092fe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009304:	1c5a      	adds	r2, r3, #1
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009310:	b29b      	uxth	r3, r3
 8009312:	3b01      	subs	r3, #1
 8009314:	b29a      	uxth	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009326:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800932a:	f003 0307 	and.w	r3, r3, #7
 800932e:	2b00      	cmp	r3, #0
 8009330:	d053      	beq.n	80093da <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009332:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	2b00      	cmp	r3, #0
 800933c:	d011      	beq.n	8009362 <UART_RxISR_8BIT_FIFOEN+0xca>
 800933e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00b      	beq.n	8009362 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2201      	movs	r2, #1
 8009350:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009358:	f043 0201 	orr.w	r2, r3, #1
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009362:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009366:	f003 0302 	and.w	r3, r3, #2
 800936a:	2b00      	cmp	r3, #0
 800936c:	d011      	beq.n	8009392 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800936e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00b      	beq.n	8009392 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2202      	movs	r2, #2
 8009380:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009388:	f043 0204 	orr.w	r2, r3, #4
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009392:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009396:	f003 0304 	and.w	r3, r3, #4
 800939a:	2b00      	cmp	r3, #0
 800939c:	d011      	beq.n	80093c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800939e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00b      	beq.n	80093c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2204      	movs	r2, #4
 80093b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093b8:	f043 0202 	orr.w	r2, r3, #2
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d006      	beq.n	80093da <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f7fe ff69 	bl	80082a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d173      	bne.n	80094ce <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093ee:	e853 3f00 	ldrex	r3, [r3]
 80093f2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80093f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	461a      	mov	r2, r3
 8009404:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009408:	66bb      	str	r3, [r7, #104]	; 0x68
 800940a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800940e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009410:	e841 2300 	strex	r3, r2, [r1]
 8009414:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1e4      	bne.n	80093e6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	3308      	adds	r3, #8
 8009422:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009426:	e853 3f00 	ldrex	r3, [r3]
 800942a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800942c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800942e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009432:	f023 0301 	bic.w	r3, r3, #1
 8009436:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3308      	adds	r3, #8
 800943e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009440:	657a      	str	r2, [r7, #84]	; 0x54
 8009442:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009444:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009446:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009448:	e841 2300 	strex	r3, r2, [r1]
 800944c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800944e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009450:	2b00      	cmp	r3, #0
 8009452:	d1e3      	bne.n	800941c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2220      	movs	r2, #32
 8009458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009466:	2b01      	cmp	r3, #1
 8009468:	d12e      	bne.n	80094c8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009478:	e853 3f00 	ldrex	r3, [r3]
 800947c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800947e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009480:	f023 0310 	bic.w	r3, r3, #16
 8009484:	67bb      	str	r3, [r7, #120]	; 0x78
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	461a      	mov	r2, r3
 800948c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800948e:	643b      	str	r3, [r7, #64]	; 0x40
 8009490:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009492:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009494:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009496:	e841 2300 	strex	r3, r2, [r1]
 800949a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800949c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1e6      	bne.n	8009470 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	69db      	ldr	r3, [r3, #28]
 80094a8:	f003 0310 	and.w	r3, r3, #16
 80094ac:	2b10      	cmp	r3, #16
 80094ae:	d103      	bne.n	80094b8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2210      	movs	r2, #16
 80094b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80094be:	4619      	mov	r1, r3
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f7fe fef9 	bl	80082b8 <HAL_UARTEx_RxEventCallback>
 80094c6:	e002      	b.n	80094ce <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f7f8 fb7f 	bl	8001bcc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d006      	beq.n	80094e4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80094d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094da:	f003 0320 	and.w	r3, r3, #32
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f47f aefe 	bne.w	80092e0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80094ee:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d045      	beq.n	8009582 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009500:	429a      	cmp	r2, r3
 8009502:	d23e      	bcs.n	8009582 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	3308      	adds	r3, #8
 800950a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950c:	6a3b      	ldr	r3, [r7, #32]
 800950e:	e853 3f00 	ldrex	r3, [r3]
 8009512:	61fb      	str	r3, [r7, #28]
   return(result);
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800951a:	673b      	str	r3, [r7, #112]	; 0x70
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	3308      	adds	r3, #8
 8009522:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009524:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009526:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800952a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800952c:	e841 2300 	strex	r3, r2, [r1]
 8009530:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1e5      	bne.n	8009504 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a14      	ldr	r2, [pc, #80]	; (800958c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800953c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	e853 3f00 	ldrex	r3, [r3]
 800954a:	60bb      	str	r3, [r7, #8]
   return(result);
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	f043 0320 	orr.w	r3, r3, #32
 8009552:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	461a      	mov	r2, r3
 800955a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800955c:	61bb      	str	r3, [r7, #24]
 800955e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009560:	6979      	ldr	r1, [r7, #20]
 8009562:	69ba      	ldr	r2, [r7, #24]
 8009564:	e841 2300 	strex	r3, r2, [r1]
 8009568:	613b      	str	r3, [r7, #16]
   return(result);
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1e6      	bne.n	800953e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009570:	e007      	b.n	8009582 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	699a      	ldr	r2, [r3, #24]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f042 0208 	orr.w	r2, r2, #8
 8009580:	619a      	str	r2, [r3, #24]
}
 8009582:	bf00      	nop
 8009584:	3798      	adds	r7, #152	; 0x98
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	08008fd7 	.word	0x08008fd7

08009590 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b0a8      	sub	sp, #160	; 0xa0
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800959e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	69db      	ldr	r3, [r3, #28]
 80095a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095c6:	2b22      	cmp	r3, #34	; 0x22
 80095c8:	f040 8153 	bne.w	8009872 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80095d2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095d6:	e0fa      	b.n	80097ce <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095de:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80095ea:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80095ee:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80095f2:	4013      	ands	r3, r2
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009600:	1c9a      	adds	r2, r3, #2
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800960c:	b29b      	uxth	r3, r3
 800960e:	3b01      	subs	r3, #1
 8009610:	b29a      	uxth	r2, r3
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	69db      	ldr	r3, [r3, #28]
 800961e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009622:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009626:	f003 0307 	and.w	r3, r3, #7
 800962a:	2b00      	cmp	r3, #0
 800962c:	d053      	beq.n	80096d6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800962e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	d011      	beq.n	800965e <UART_RxISR_16BIT_FIFOEN+0xce>
 800963a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800963e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00b      	beq.n	800965e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2201      	movs	r2, #1
 800964c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009654:	f043 0201 	orr.w	r2, r3, #1
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800965e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009662:	f003 0302 	and.w	r3, r3, #2
 8009666:	2b00      	cmp	r3, #0
 8009668:	d011      	beq.n	800968e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800966a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00b      	beq.n	800968e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2202      	movs	r2, #2
 800967c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009684:	f043 0204 	orr.w	r2, r3, #4
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800968e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009692:	f003 0304 	and.w	r3, r3, #4
 8009696:	2b00      	cmp	r3, #0
 8009698:	d011      	beq.n	80096be <UART_RxISR_16BIT_FIFOEN+0x12e>
 800969a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00b      	beq.n	80096be <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2204      	movs	r2, #4
 80096ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096b4:	f043 0202 	orr.w	r2, r3, #2
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d006      	beq.n	80096d6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f7fe fdeb 	bl	80082a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096dc:	b29b      	uxth	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d175      	bne.n	80097ce <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096ea:	e853 3f00 	ldrex	r3, [r3]
 80096ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80096f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	461a      	mov	r2, r3
 8009700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009704:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009706:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009708:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800970a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800970c:	e841 2300 	strex	r3, r2, [r1]
 8009710:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1e4      	bne.n	80096e2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	3308      	adds	r3, #8
 800971e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009722:	e853 3f00 	ldrex	r3, [r3]
 8009726:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800972a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800972e:	f023 0301 	bic.w	r3, r3, #1
 8009732:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	3308      	adds	r3, #8
 800973c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009740:	65ba      	str	r2, [r7, #88]	; 0x58
 8009742:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009744:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009746:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009748:	e841 2300 	strex	r3, r2, [r1]
 800974c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800974e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1e1      	bne.n	8009718 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2220      	movs	r2, #32
 8009758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009766:	2b01      	cmp	r3, #1
 8009768:	d12e      	bne.n	80097c8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009778:	e853 3f00 	ldrex	r3, [r3]
 800977c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800977e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009780:	f023 0310 	bic.w	r3, r3, #16
 8009784:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800978e:	647b      	str	r3, [r7, #68]	; 0x44
 8009790:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009792:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009794:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009796:	e841 2300 	strex	r3, r2, [r1]
 800979a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800979c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1e6      	bne.n	8009770 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	69db      	ldr	r3, [r3, #28]
 80097a8:	f003 0310 	and.w	r3, r3, #16
 80097ac:	2b10      	cmp	r3, #16
 80097ae:	d103      	bne.n	80097b8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2210      	movs	r2, #16
 80097b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80097be:	4619      	mov	r1, r3
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f7fe fd79 	bl	80082b8 <HAL_UARTEx_RxEventCallback>
 80097c6:	e002      	b.n	80097ce <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f7f8 f9ff 	bl	8001bcc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80097ce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d006      	beq.n	80097e4 <UART_RxISR_16BIT_FIFOEN+0x254>
 80097d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097da:	f003 0320 	and.w	r3, r3, #32
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f47f aefa 	bne.w	80095d8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097ea:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80097ee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d045      	beq.n	8009882 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80097fc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009800:	429a      	cmp	r2, r3
 8009802:	d23e      	bcs.n	8009882 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3308      	adds	r3, #8
 800980a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	e853 3f00 	ldrex	r3, [r3]
 8009812:	623b      	str	r3, [r7, #32]
   return(result);
 8009814:	6a3b      	ldr	r3, [r7, #32]
 8009816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800981a:	677b      	str	r3, [r7, #116]	; 0x74
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3308      	adds	r3, #8
 8009822:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009824:	633a      	str	r2, [r7, #48]	; 0x30
 8009826:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800982a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800982c:	e841 2300 	strex	r3, r2, [r1]
 8009830:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1e5      	bne.n	8009804 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a14      	ldr	r2, [pc, #80]	; (800988c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800983c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	e853 3f00 	ldrex	r3, [r3]
 800984a:	60fb      	str	r3, [r7, #12]
   return(result);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f043 0320 	orr.w	r3, r3, #32
 8009852:	673b      	str	r3, [r7, #112]	; 0x70
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	461a      	mov	r2, r3
 800985a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800985c:	61fb      	str	r3, [r7, #28]
 800985e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009860:	69b9      	ldr	r1, [r7, #24]
 8009862:	69fa      	ldr	r2, [r7, #28]
 8009864:	e841 2300 	strex	r3, r2, [r1]
 8009868:	617b      	str	r3, [r7, #20]
   return(result);
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1e6      	bne.n	800983e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009870:	e007      	b.n	8009882 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	699a      	ldr	r2, [r3, #24]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f042 0208 	orr.w	r2, r2, #8
 8009880:	619a      	str	r2, [r3, #24]
}
 8009882:	bf00      	nop
 8009884:	37a0      	adds	r7, #160	; 0xa0
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	08009137 	.word	0x08009137

08009890 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d101      	bne.n	80098e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80098de:	2302      	movs	r3, #2
 80098e0:	e027      	b.n	8009932 <HAL_UARTEx_DisableFifoMode+0x66>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2224      	movs	r2, #36	; 0x24
 80098ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f022 0201 	bic.w	r2, r2, #1
 8009908:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009910:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2220      	movs	r2, #32
 8009924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3714      	adds	r7, #20
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800994e:	2b01      	cmp	r3, #1
 8009950:	d101      	bne.n	8009956 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009952:	2302      	movs	r3, #2
 8009954:	e02d      	b.n	80099b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2224      	movs	r2, #36	; 0x24
 8009962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f022 0201 	bic.w	r2, r2, #1
 800997c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	430a      	orrs	r2, r1
 8009990:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f850 	bl	8009a38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2220      	movs	r2, #32
 80099a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d101      	bne.n	80099d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80099ce:	2302      	movs	r3, #2
 80099d0:	e02d      	b.n	8009a2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2224      	movs	r2, #36	; 0x24
 80099de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f022 0201 	bic.w	r2, r2, #1
 80099f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	683a      	ldr	r2, [r7, #0]
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f812 	bl	8009a38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2220      	movs	r2, #32
 8009a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
	...

08009a38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d108      	bne.n	8009a5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a58:	e031      	b.n	8009abe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a5a:	2308      	movs	r3, #8
 8009a5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a5e:	2308      	movs	r3, #8
 8009a60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	0e5b      	lsrs	r3, r3, #25
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	f003 0307 	and.w	r3, r3, #7
 8009a70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	0f5b      	lsrs	r3, r3, #29
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	f003 0307 	and.w	r3, r3, #7
 8009a80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a82:	7bbb      	ldrb	r3, [r7, #14]
 8009a84:	7b3a      	ldrb	r2, [r7, #12]
 8009a86:	4911      	ldr	r1, [pc, #68]	; (8009acc <UARTEx_SetNbDataToProcess+0x94>)
 8009a88:	5c8a      	ldrb	r2, [r1, r2]
 8009a8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a8e:	7b3a      	ldrb	r2, [r7, #12]
 8009a90:	490f      	ldr	r1, [pc, #60]	; (8009ad0 <UARTEx_SetNbDataToProcess+0x98>)
 8009a92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a94:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
 8009aa2:	7b7a      	ldrb	r2, [r7, #13]
 8009aa4:	4909      	ldr	r1, [pc, #36]	; (8009acc <UARTEx_SetNbDataToProcess+0x94>)
 8009aa6:	5c8a      	ldrb	r2, [r1, r2]
 8009aa8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009aac:	7b7a      	ldrb	r2, [r7, #13]
 8009aae:	4908      	ldr	r1, [pc, #32]	; (8009ad0 <UARTEx_SetNbDataToProcess+0x98>)
 8009ab0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ab2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009abe:	bf00      	nop
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	0800f148 	.word	0x0800f148
 8009ad0:	0800f150 	.word	0x0800f150

08009ad4 <atoi>:
 8009ad4:	220a      	movs	r2, #10
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	f001 be4e 	b.w	800b778 <strtol>

08009adc <__errno>:
 8009adc:	4b01      	ldr	r3, [pc, #4]	; (8009ae4 <__errno+0x8>)
 8009ade:	6818      	ldr	r0, [r3, #0]
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	20000074 	.word	0x20000074

08009ae8 <__libc_init_array>:
 8009ae8:	b570      	push	{r4, r5, r6, lr}
 8009aea:	4d0d      	ldr	r5, [pc, #52]	; (8009b20 <__libc_init_array+0x38>)
 8009aec:	4c0d      	ldr	r4, [pc, #52]	; (8009b24 <__libc_init_array+0x3c>)
 8009aee:	1b64      	subs	r4, r4, r5
 8009af0:	10a4      	asrs	r4, r4, #2
 8009af2:	2600      	movs	r6, #0
 8009af4:	42a6      	cmp	r6, r4
 8009af6:	d109      	bne.n	8009b0c <__libc_init_array+0x24>
 8009af8:	4d0b      	ldr	r5, [pc, #44]	; (8009b28 <__libc_init_array+0x40>)
 8009afa:	4c0c      	ldr	r4, [pc, #48]	; (8009b2c <__libc_init_array+0x44>)
 8009afc:	f005 f934 	bl	800ed68 <_init>
 8009b00:	1b64      	subs	r4, r4, r5
 8009b02:	10a4      	asrs	r4, r4, #2
 8009b04:	2600      	movs	r6, #0
 8009b06:	42a6      	cmp	r6, r4
 8009b08:	d105      	bne.n	8009b16 <__libc_init_array+0x2e>
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b10:	4798      	blx	r3
 8009b12:	3601      	adds	r6, #1
 8009b14:	e7ee      	b.n	8009af4 <__libc_init_array+0xc>
 8009b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b1a:	4798      	blx	r3
 8009b1c:	3601      	adds	r6, #1
 8009b1e:	e7f2      	b.n	8009b06 <__libc_init_array+0x1e>
 8009b20:	0800f678 	.word	0x0800f678
 8009b24:	0800f678 	.word	0x0800f678
 8009b28:	0800f678 	.word	0x0800f678
 8009b2c:	0800f67c 	.word	0x0800f67c

08009b30 <memset>:
 8009b30:	4402      	add	r2, r0
 8009b32:	4603      	mov	r3, r0
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d100      	bne.n	8009b3a <memset+0xa>
 8009b38:	4770      	bx	lr
 8009b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b3e:	e7f9      	b.n	8009b34 <memset+0x4>

08009b40 <__cvt>:
 8009b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b44:	ec55 4b10 	vmov	r4, r5, d0
 8009b48:	2d00      	cmp	r5, #0
 8009b4a:	460e      	mov	r6, r1
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	462b      	mov	r3, r5
 8009b50:	bfbb      	ittet	lt
 8009b52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b56:	461d      	movlt	r5, r3
 8009b58:	2300      	movge	r3, #0
 8009b5a:	232d      	movlt	r3, #45	; 0x2d
 8009b5c:	700b      	strb	r3, [r1, #0]
 8009b5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009b64:	4691      	mov	r9, r2
 8009b66:	f023 0820 	bic.w	r8, r3, #32
 8009b6a:	bfbc      	itt	lt
 8009b6c:	4622      	movlt	r2, r4
 8009b6e:	4614      	movlt	r4, r2
 8009b70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b74:	d005      	beq.n	8009b82 <__cvt+0x42>
 8009b76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009b7a:	d100      	bne.n	8009b7e <__cvt+0x3e>
 8009b7c:	3601      	adds	r6, #1
 8009b7e:	2102      	movs	r1, #2
 8009b80:	e000      	b.n	8009b84 <__cvt+0x44>
 8009b82:	2103      	movs	r1, #3
 8009b84:	ab03      	add	r3, sp, #12
 8009b86:	9301      	str	r3, [sp, #4]
 8009b88:	ab02      	add	r3, sp, #8
 8009b8a:	9300      	str	r3, [sp, #0]
 8009b8c:	ec45 4b10 	vmov	d0, r4, r5
 8009b90:	4653      	mov	r3, sl
 8009b92:	4632      	mov	r2, r6
 8009b94:	f001 fec8 	bl	800b928 <_dtoa_r>
 8009b98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009b9c:	4607      	mov	r7, r0
 8009b9e:	d102      	bne.n	8009ba6 <__cvt+0x66>
 8009ba0:	f019 0f01 	tst.w	r9, #1
 8009ba4:	d022      	beq.n	8009bec <__cvt+0xac>
 8009ba6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009baa:	eb07 0906 	add.w	r9, r7, r6
 8009bae:	d110      	bne.n	8009bd2 <__cvt+0x92>
 8009bb0:	783b      	ldrb	r3, [r7, #0]
 8009bb2:	2b30      	cmp	r3, #48	; 0x30
 8009bb4:	d10a      	bne.n	8009bcc <__cvt+0x8c>
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	2300      	movs	r3, #0
 8009bba:	4620      	mov	r0, r4
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	f7f6 ffbb 	bl	8000b38 <__aeabi_dcmpeq>
 8009bc2:	b918      	cbnz	r0, 8009bcc <__cvt+0x8c>
 8009bc4:	f1c6 0601 	rsb	r6, r6, #1
 8009bc8:	f8ca 6000 	str.w	r6, [sl]
 8009bcc:	f8da 3000 	ldr.w	r3, [sl]
 8009bd0:	4499      	add	r9, r3
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	4629      	mov	r1, r5
 8009bda:	f7f6 ffad 	bl	8000b38 <__aeabi_dcmpeq>
 8009bde:	b108      	cbz	r0, 8009be4 <__cvt+0xa4>
 8009be0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009be4:	2230      	movs	r2, #48	; 0x30
 8009be6:	9b03      	ldr	r3, [sp, #12]
 8009be8:	454b      	cmp	r3, r9
 8009bea:	d307      	bcc.n	8009bfc <__cvt+0xbc>
 8009bec:	9b03      	ldr	r3, [sp, #12]
 8009bee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bf0:	1bdb      	subs	r3, r3, r7
 8009bf2:	4638      	mov	r0, r7
 8009bf4:	6013      	str	r3, [r2, #0]
 8009bf6:	b004      	add	sp, #16
 8009bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bfc:	1c59      	adds	r1, r3, #1
 8009bfe:	9103      	str	r1, [sp, #12]
 8009c00:	701a      	strb	r2, [r3, #0]
 8009c02:	e7f0      	b.n	8009be6 <__cvt+0xa6>

08009c04 <__exponent>:
 8009c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c06:	4603      	mov	r3, r0
 8009c08:	2900      	cmp	r1, #0
 8009c0a:	bfb8      	it	lt
 8009c0c:	4249      	neglt	r1, r1
 8009c0e:	f803 2b02 	strb.w	r2, [r3], #2
 8009c12:	bfb4      	ite	lt
 8009c14:	222d      	movlt	r2, #45	; 0x2d
 8009c16:	222b      	movge	r2, #43	; 0x2b
 8009c18:	2909      	cmp	r1, #9
 8009c1a:	7042      	strb	r2, [r0, #1]
 8009c1c:	dd2a      	ble.n	8009c74 <__exponent+0x70>
 8009c1e:	f10d 0407 	add.w	r4, sp, #7
 8009c22:	46a4      	mov	ip, r4
 8009c24:	270a      	movs	r7, #10
 8009c26:	46a6      	mov	lr, r4
 8009c28:	460a      	mov	r2, r1
 8009c2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8009c2e:	fb07 1516 	mls	r5, r7, r6, r1
 8009c32:	3530      	adds	r5, #48	; 0x30
 8009c34:	2a63      	cmp	r2, #99	; 0x63
 8009c36:	f104 34ff 	add.w	r4, r4, #4294967295
 8009c3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009c3e:	4631      	mov	r1, r6
 8009c40:	dcf1      	bgt.n	8009c26 <__exponent+0x22>
 8009c42:	3130      	adds	r1, #48	; 0x30
 8009c44:	f1ae 0502 	sub.w	r5, lr, #2
 8009c48:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009c4c:	1c44      	adds	r4, r0, #1
 8009c4e:	4629      	mov	r1, r5
 8009c50:	4561      	cmp	r1, ip
 8009c52:	d30a      	bcc.n	8009c6a <__exponent+0x66>
 8009c54:	f10d 0209 	add.w	r2, sp, #9
 8009c58:	eba2 020e 	sub.w	r2, r2, lr
 8009c5c:	4565      	cmp	r5, ip
 8009c5e:	bf88      	it	hi
 8009c60:	2200      	movhi	r2, #0
 8009c62:	4413      	add	r3, r2
 8009c64:	1a18      	subs	r0, r3, r0
 8009c66:	b003      	add	sp, #12
 8009c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009c72:	e7ed      	b.n	8009c50 <__exponent+0x4c>
 8009c74:	2330      	movs	r3, #48	; 0x30
 8009c76:	3130      	adds	r1, #48	; 0x30
 8009c78:	7083      	strb	r3, [r0, #2]
 8009c7a:	70c1      	strb	r1, [r0, #3]
 8009c7c:	1d03      	adds	r3, r0, #4
 8009c7e:	e7f1      	b.n	8009c64 <__exponent+0x60>

08009c80 <_printf_float>:
 8009c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c84:	ed2d 8b02 	vpush	{d8}
 8009c88:	b08d      	sub	sp, #52	; 0x34
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009c90:	4616      	mov	r6, r2
 8009c92:	461f      	mov	r7, r3
 8009c94:	4605      	mov	r5, r0
 8009c96:	f002 ffb7 	bl	800cc08 <_localeconv_r>
 8009c9a:	f8d0 a000 	ldr.w	sl, [r0]
 8009c9e:	4650      	mov	r0, sl
 8009ca0:	f7f6 fac8 	bl	8000234 <strlen>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	9305      	str	r3, [sp, #20]
 8009cac:	f8d8 3000 	ldr.w	r3, [r8]
 8009cb0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009cb4:	3307      	adds	r3, #7
 8009cb6:	f023 0307 	bic.w	r3, r3, #7
 8009cba:	f103 0208 	add.w	r2, r3, #8
 8009cbe:	f8c8 2000 	str.w	r2, [r8]
 8009cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009cca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009cce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009cd2:	9307      	str	r3, [sp, #28]
 8009cd4:	f8cd 8018 	str.w	r8, [sp, #24]
 8009cd8:	ee08 0a10 	vmov	s16, r0
 8009cdc:	4b9f      	ldr	r3, [pc, #636]	; (8009f5c <_printf_float+0x2dc>)
 8009cde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce6:	f7f6 ff59 	bl	8000b9c <__aeabi_dcmpun>
 8009cea:	bb88      	cbnz	r0, 8009d50 <_printf_float+0xd0>
 8009cec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cf0:	4b9a      	ldr	r3, [pc, #616]	; (8009f5c <_printf_float+0x2dc>)
 8009cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf6:	f7f6 ff33 	bl	8000b60 <__aeabi_dcmple>
 8009cfa:	bb48      	cbnz	r0, 8009d50 <_printf_float+0xd0>
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2300      	movs	r3, #0
 8009d00:	4640      	mov	r0, r8
 8009d02:	4649      	mov	r1, r9
 8009d04:	f7f6 ff22 	bl	8000b4c <__aeabi_dcmplt>
 8009d08:	b110      	cbz	r0, 8009d10 <_printf_float+0x90>
 8009d0a:	232d      	movs	r3, #45	; 0x2d
 8009d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d10:	4b93      	ldr	r3, [pc, #588]	; (8009f60 <_printf_float+0x2e0>)
 8009d12:	4894      	ldr	r0, [pc, #592]	; (8009f64 <_printf_float+0x2e4>)
 8009d14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d18:	bf94      	ite	ls
 8009d1a:	4698      	movls	r8, r3
 8009d1c:	4680      	movhi	r8, r0
 8009d1e:	2303      	movs	r3, #3
 8009d20:	6123      	str	r3, [r4, #16]
 8009d22:	9b05      	ldr	r3, [sp, #20]
 8009d24:	f023 0204 	bic.w	r2, r3, #4
 8009d28:	6022      	str	r2, [r4, #0]
 8009d2a:	f04f 0900 	mov.w	r9, #0
 8009d2e:	9700      	str	r7, [sp, #0]
 8009d30:	4633      	mov	r3, r6
 8009d32:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d34:	4621      	mov	r1, r4
 8009d36:	4628      	mov	r0, r5
 8009d38:	f000 f9d8 	bl	800a0ec <_printf_common>
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	f040 8090 	bne.w	8009e62 <_printf_float+0x1e2>
 8009d42:	f04f 30ff 	mov.w	r0, #4294967295
 8009d46:	b00d      	add	sp, #52	; 0x34
 8009d48:	ecbd 8b02 	vpop	{d8}
 8009d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d50:	4642      	mov	r2, r8
 8009d52:	464b      	mov	r3, r9
 8009d54:	4640      	mov	r0, r8
 8009d56:	4649      	mov	r1, r9
 8009d58:	f7f6 ff20 	bl	8000b9c <__aeabi_dcmpun>
 8009d5c:	b140      	cbz	r0, 8009d70 <_printf_float+0xf0>
 8009d5e:	464b      	mov	r3, r9
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	bfbc      	itt	lt
 8009d64:	232d      	movlt	r3, #45	; 0x2d
 8009d66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d6a:	487f      	ldr	r0, [pc, #508]	; (8009f68 <_printf_float+0x2e8>)
 8009d6c:	4b7f      	ldr	r3, [pc, #508]	; (8009f6c <_printf_float+0x2ec>)
 8009d6e:	e7d1      	b.n	8009d14 <_printf_float+0x94>
 8009d70:	6863      	ldr	r3, [r4, #4]
 8009d72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009d76:	9206      	str	r2, [sp, #24]
 8009d78:	1c5a      	adds	r2, r3, #1
 8009d7a:	d13f      	bne.n	8009dfc <_printf_float+0x17c>
 8009d7c:	2306      	movs	r3, #6
 8009d7e:	6063      	str	r3, [r4, #4]
 8009d80:	9b05      	ldr	r3, [sp, #20]
 8009d82:	6861      	ldr	r1, [r4, #4]
 8009d84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009d88:	2300      	movs	r3, #0
 8009d8a:	9303      	str	r3, [sp, #12]
 8009d8c:	ab0a      	add	r3, sp, #40	; 0x28
 8009d8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009d92:	ab09      	add	r3, sp, #36	; 0x24
 8009d94:	ec49 8b10 	vmov	d0, r8, r9
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	6022      	str	r2, [r4, #0]
 8009d9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009da0:	4628      	mov	r0, r5
 8009da2:	f7ff fecd 	bl	8009b40 <__cvt>
 8009da6:	9b06      	ldr	r3, [sp, #24]
 8009da8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009daa:	2b47      	cmp	r3, #71	; 0x47
 8009dac:	4680      	mov	r8, r0
 8009dae:	d108      	bne.n	8009dc2 <_printf_float+0x142>
 8009db0:	1cc8      	adds	r0, r1, #3
 8009db2:	db02      	blt.n	8009dba <_printf_float+0x13a>
 8009db4:	6863      	ldr	r3, [r4, #4]
 8009db6:	4299      	cmp	r1, r3
 8009db8:	dd41      	ble.n	8009e3e <_printf_float+0x1be>
 8009dba:	f1ab 0b02 	sub.w	fp, fp, #2
 8009dbe:	fa5f fb8b 	uxtb.w	fp, fp
 8009dc2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009dc6:	d820      	bhi.n	8009e0a <_printf_float+0x18a>
 8009dc8:	3901      	subs	r1, #1
 8009dca:	465a      	mov	r2, fp
 8009dcc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009dd0:	9109      	str	r1, [sp, #36]	; 0x24
 8009dd2:	f7ff ff17 	bl	8009c04 <__exponent>
 8009dd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dd8:	1813      	adds	r3, r2, r0
 8009dda:	2a01      	cmp	r2, #1
 8009ddc:	4681      	mov	r9, r0
 8009dde:	6123      	str	r3, [r4, #16]
 8009de0:	dc02      	bgt.n	8009de8 <_printf_float+0x168>
 8009de2:	6822      	ldr	r2, [r4, #0]
 8009de4:	07d2      	lsls	r2, r2, #31
 8009de6:	d501      	bpl.n	8009dec <_printf_float+0x16c>
 8009de8:	3301      	adds	r3, #1
 8009dea:	6123      	str	r3, [r4, #16]
 8009dec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d09c      	beq.n	8009d2e <_printf_float+0xae>
 8009df4:	232d      	movs	r3, #45	; 0x2d
 8009df6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dfa:	e798      	b.n	8009d2e <_printf_float+0xae>
 8009dfc:	9a06      	ldr	r2, [sp, #24]
 8009dfe:	2a47      	cmp	r2, #71	; 0x47
 8009e00:	d1be      	bne.n	8009d80 <_printf_float+0x100>
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1bc      	bne.n	8009d80 <_printf_float+0x100>
 8009e06:	2301      	movs	r3, #1
 8009e08:	e7b9      	b.n	8009d7e <_printf_float+0xfe>
 8009e0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e0e:	d118      	bne.n	8009e42 <_printf_float+0x1c2>
 8009e10:	2900      	cmp	r1, #0
 8009e12:	6863      	ldr	r3, [r4, #4]
 8009e14:	dd0b      	ble.n	8009e2e <_printf_float+0x1ae>
 8009e16:	6121      	str	r1, [r4, #16]
 8009e18:	b913      	cbnz	r3, 8009e20 <_printf_float+0x1a0>
 8009e1a:	6822      	ldr	r2, [r4, #0]
 8009e1c:	07d0      	lsls	r0, r2, #31
 8009e1e:	d502      	bpl.n	8009e26 <_printf_float+0x1a6>
 8009e20:	3301      	adds	r3, #1
 8009e22:	440b      	add	r3, r1
 8009e24:	6123      	str	r3, [r4, #16]
 8009e26:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e28:	f04f 0900 	mov.w	r9, #0
 8009e2c:	e7de      	b.n	8009dec <_printf_float+0x16c>
 8009e2e:	b913      	cbnz	r3, 8009e36 <_printf_float+0x1b6>
 8009e30:	6822      	ldr	r2, [r4, #0]
 8009e32:	07d2      	lsls	r2, r2, #31
 8009e34:	d501      	bpl.n	8009e3a <_printf_float+0x1ba>
 8009e36:	3302      	adds	r3, #2
 8009e38:	e7f4      	b.n	8009e24 <_printf_float+0x1a4>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e7f2      	b.n	8009e24 <_printf_float+0x1a4>
 8009e3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e44:	4299      	cmp	r1, r3
 8009e46:	db05      	blt.n	8009e54 <_printf_float+0x1d4>
 8009e48:	6823      	ldr	r3, [r4, #0]
 8009e4a:	6121      	str	r1, [r4, #16]
 8009e4c:	07d8      	lsls	r0, r3, #31
 8009e4e:	d5ea      	bpl.n	8009e26 <_printf_float+0x1a6>
 8009e50:	1c4b      	adds	r3, r1, #1
 8009e52:	e7e7      	b.n	8009e24 <_printf_float+0x1a4>
 8009e54:	2900      	cmp	r1, #0
 8009e56:	bfd4      	ite	le
 8009e58:	f1c1 0202 	rsble	r2, r1, #2
 8009e5c:	2201      	movgt	r2, #1
 8009e5e:	4413      	add	r3, r2
 8009e60:	e7e0      	b.n	8009e24 <_printf_float+0x1a4>
 8009e62:	6823      	ldr	r3, [r4, #0]
 8009e64:	055a      	lsls	r2, r3, #21
 8009e66:	d407      	bmi.n	8009e78 <_printf_float+0x1f8>
 8009e68:	6923      	ldr	r3, [r4, #16]
 8009e6a:	4642      	mov	r2, r8
 8009e6c:	4631      	mov	r1, r6
 8009e6e:	4628      	mov	r0, r5
 8009e70:	47b8      	blx	r7
 8009e72:	3001      	adds	r0, #1
 8009e74:	d12c      	bne.n	8009ed0 <_printf_float+0x250>
 8009e76:	e764      	b.n	8009d42 <_printf_float+0xc2>
 8009e78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e7c:	f240 80e0 	bls.w	800a040 <_printf_float+0x3c0>
 8009e80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e84:	2200      	movs	r2, #0
 8009e86:	2300      	movs	r3, #0
 8009e88:	f7f6 fe56 	bl	8000b38 <__aeabi_dcmpeq>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	d034      	beq.n	8009efa <_printf_float+0x27a>
 8009e90:	4a37      	ldr	r2, [pc, #220]	; (8009f70 <_printf_float+0x2f0>)
 8009e92:	2301      	movs	r3, #1
 8009e94:	4631      	mov	r1, r6
 8009e96:	4628      	mov	r0, r5
 8009e98:	47b8      	blx	r7
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	f43f af51 	beq.w	8009d42 <_printf_float+0xc2>
 8009ea0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	db02      	blt.n	8009eae <_printf_float+0x22e>
 8009ea8:	6823      	ldr	r3, [r4, #0]
 8009eaa:	07d8      	lsls	r0, r3, #31
 8009eac:	d510      	bpl.n	8009ed0 <_printf_float+0x250>
 8009eae:	ee18 3a10 	vmov	r3, s16
 8009eb2:	4652      	mov	r2, sl
 8009eb4:	4631      	mov	r1, r6
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	47b8      	blx	r7
 8009eba:	3001      	adds	r0, #1
 8009ebc:	f43f af41 	beq.w	8009d42 <_printf_float+0xc2>
 8009ec0:	f04f 0800 	mov.w	r8, #0
 8009ec4:	f104 091a 	add.w	r9, r4, #26
 8009ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	4543      	cmp	r3, r8
 8009ece:	dc09      	bgt.n	8009ee4 <_printf_float+0x264>
 8009ed0:	6823      	ldr	r3, [r4, #0]
 8009ed2:	079b      	lsls	r3, r3, #30
 8009ed4:	f100 8105 	bmi.w	800a0e2 <_printf_float+0x462>
 8009ed8:	68e0      	ldr	r0, [r4, #12]
 8009eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009edc:	4298      	cmp	r0, r3
 8009ede:	bfb8      	it	lt
 8009ee0:	4618      	movlt	r0, r3
 8009ee2:	e730      	b.n	8009d46 <_printf_float+0xc6>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	464a      	mov	r2, r9
 8009ee8:	4631      	mov	r1, r6
 8009eea:	4628      	mov	r0, r5
 8009eec:	47b8      	blx	r7
 8009eee:	3001      	adds	r0, #1
 8009ef0:	f43f af27 	beq.w	8009d42 <_printf_float+0xc2>
 8009ef4:	f108 0801 	add.w	r8, r8, #1
 8009ef8:	e7e6      	b.n	8009ec8 <_printf_float+0x248>
 8009efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	dc39      	bgt.n	8009f74 <_printf_float+0x2f4>
 8009f00:	4a1b      	ldr	r2, [pc, #108]	; (8009f70 <_printf_float+0x2f0>)
 8009f02:	2301      	movs	r3, #1
 8009f04:	4631      	mov	r1, r6
 8009f06:	4628      	mov	r0, r5
 8009f08:	47b8      	blx	r7
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	f43f af19 	beq.w	8009d42 <_printf_float+0xc2>
 8009f10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f14:	4313      	orrs	r3, r2
 8009f16:	d102      	bne.n	8009f1e <_printf_float+0x29e>
 8009f18:	6823      	ldr	r3, [r4, #0]
 8009f1a:	07d9      	lsls	r1, r3, #31
 8009f1c:	d5d8      	bpl.n	8009ed0 <_printf_float+0x250>
 8009f1e:	ee18 3a10 	vmov	r3, s16
 8009f22:	4652      	mov	r2, sl
 8009f24:	4631      	mov	r1, r6
 8009f26:	4628      	mov	r0, r5
 8009f28:	47b8      	blx	r7
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	f43f af09 	beq.w	8009d42 <_printf_float+0xc2>
 8009f30:	f04f 0900 	mov.w	r9, #0
 8009f34:	f104 0a1a 	add.w	sl, r4, #26
 8009f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f3a:	425b      	negs	r3, r3
 8009f3c:	454b      	cmp	r3, r9
 8009f3e:	dc01      	bgt.n	8009f44 <_printf_float+0x2c4>
 8009f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f42:	e792      	b.n	8009e6a <_printf_float+0x1ea>
 8009f44:	2301      	movs	r3, #1
 8009f46:	4652      	mov	r2, sl
 8009f48:	4631      	mov	r1, r6
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	47b8      	blx	r7
 8009f4e:	3001      	adds	r0, #1
 8009f50:	f43f aef7 	beq.w	8009d42 <_printf_float+0xc2>
 8009f54:	f109 0901 	add.w	r9, r9, #1
 8009f58:	e7ee      	b.n	8009f38 <_printf_float+0x2b8>
 8009f5a:	bf00      	nop
 8009f5c:	7fefffff 	.word	0x7fefffff
 8009f60:	0800f15c 	.word	0x0800f15c
 8009f64:	0800f160 	.word	0x0800f160
 8009f68:	0800f168 	.word	0x0800f168
 8009f6c:	0800f164 	.word	0x0800f164
 8009f70:	0800f5f9 	.word	0x0800f5f9
 8009f74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	bfa8      	it	ge
 8009f7c:	461a      	movge	r2, r3
 8009f7e:	2a00      	cmp	r2, #0
 8009f80:	4691      	mov	r9, r2
 8009f82:	dc37      	bgt.n	8009ff4 <_printf_float+0x374>
 8009f84:	f04f 0b00 	mov.w	fp, #0
 8009f88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f8c:	f104 021a 	add.w	r2, r4, #26
 8009f90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f92:	9305      	str	r3, [sp, #20]
 8009f94:	eba3 0309 	sub.w	r3, r3, r9
 8009f98:	455b      	cmp	r3, fp
 8009f9a:	dc33      	bgt.n	800a004 <_printf_float+0x384>
 8009f9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	db3b      	blt.n	800a01c <_printf_float+0x39c>
 8009fa4:	6823      	ldr	r3, [r4, #0]
 8009fa6:	07da      	lsls	r2, r3, #31
 8009fa8:	d438      	bmi.n	800a01c <_printf_float+0x39c>
 8009faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fac:	9a05      	ldr	r2, [sp, #20]
 8009fae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fb0:	1a9a      	subs	r2, r3, r2
 8009fb2:	eba3 0901 	sub.w	r9, r3, r1
 8009fb6:	4591      	cmp	r9, r2
 8009fb8:	bfa8      	it	ge
 8009fba:	4691      	movge	r9, r2
 8009fbc:	f1b9 0f00 	cmp.w	r9, #0
 8009fc0:	dc35      	bgt.n	800a02e <_printf_float+0x3ae>
 8009fc2:	f04f 0800 	mov.w	r8, #0
 8009fc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fca:	f104 0a1a 	add.w	sl, r4, #26
 8009fce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fd2:	1a9b      	subs	r3, r3, r2
 8009fd4:	eba3 0309 	sub.w	r3, r3, r9
 8009fd8:	4543      	cmp	r3, r8
 8009fda:	f77f af79 	ble.w	8009ed0 <_printf_float+0x250>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	4652      	mov	r2, sl
 8009fe2:	4631      	mov	r1, r6
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	47b8      	blx	r7
 8009fe8:	3001      	adds	r0, #1
 8009fea:	f43f aeaa 	beq.w	8009d42 <_printf_float+0xc2>
 8009fee:	f108 0801 	add.w	r8, r8, #1
 8009ff2:	e7ec      	b.n	8009fce <_printf_float+0x34e>
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	4631      	mov	r1, r6
 8009ff8:	4642      	mov	r2, r8
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	47b8      	blx	r7
 8009ffe:	3001      	adds	r0, #1
 800a000:	d1c0      	bne.n	8009f84 <_printf_float+0x304>
 800a002:	e69e      	b.n	8009d42 <_printf_float+0xc2>
 800a004:	2301      	movs	r3, #1
 800a006:	4631      	mov	r1, r6
 800a008:	4628      	mov	r0, r5
 800a00a:	9205      	str	r2, [sp, #20]
 800a00c:	47b8      	blx	r7
 800a00e:	3001      	adds	r0, #1
 800a010:	f43f ae97 	beq.w	8009d42 <_printf_float+0xc2>
 800a014:	9a05      	ldr	r2, [sp, #20]
 800a016:	f10b 0b01 	add.w	fp, fp, #1
 800a01a:	e7b9      	b.n	8009f90 <_printf_float+0x310>
 800a01c:	ee18 3a10 	vmov	r3, s16
 800a020:	4652      	mov	r2, sl
 800a022:	4631      	mov	r1, r6
 800a024:	4628      	mov	r0, r5
 800a026:	47b8      	blx	r7
 800a028:	3001      	adds	r0, #1
 800a02a:	d1be      	bne.n	8009faa <_printf_float+0x32a>
 800a02c:	e689      	b.n	8009d42 <_printf_float+0xc2>
 800a02e:	9a05      	ldr	r2, [sp, #20]
 800a030:	464b      	mov	r3, r9
 800a032:	4442      	add	r2, r8
 800a034:	4631      	mov	r1, r6
 800a036:	4628      	mov	r0, r5
 800a038:	47b8      	blx	r7
 800a03a:	3001      	adds	r0, #1
 800a03c:	d1c1      	bne.n	8009fc2 <_printf_float+0x342>
 800a03e:	e680      	b.n	8009d42 <_printf_float+0xc2>
 800a040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a042:	2a01      	cmp	r2, #1
 800a044:	dc01      	bgt.n	800a04a <_printf_float+0x3ca>
 800a046:	07db      	lsls	r3, r3, #31
 800a048:	d538      	bpl.n	800a0bc <_printf_float+0x43c>
 800a04a:	2301      	movs	r3, #1
 800a04c:	4642      	mov	r2, r8
 800a04e:	4631      	mov	r1, r6
 800a050:	4628      	mov	r0, r5
 800a052:	47b8      	blx	r7
 800a054:	3001      	adds	r0, #1
 800a056:	f43f ae74 	beq.w	8009d42 <_printf_float+0xc2>
 800a05a:	ee18 3a10 	vmov	r3, s16
 800a05e:	4652      	mov	r2, sl
 800a060:	4631      	mov	r1, r6
 800a062:	4628      	mov	r0, r5
 800a064:	47b8      	blx	r7
 800a066:	3001      	adds	r0, #1
 800a068:	f43f ae6b 	beq.w	8009d42 <_printf_float+0xc2>
 800a06c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a070:	2200      	movs	r2, #0
 800a072:	2300      	movs	r3, #0
 800a074:	f7f6 fd60 	bl	8000b38 <__aeabi_dcmpeq>
 800a078:	b9d8      	cbnz	r0, 800a0b2 <_printf_float+0x432>
 800a07a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a07c:	f108 0201 	add.w	r2, r8, #1
 800a080:	3b01      	subs	r3, #1
 800a082:	4631      	mov	r1, r6
 800a084:	4628      	mov	r0, r5
 800a086:	47b8      	blx	r7
 800a088:	3001      	adds	r0, #1
 800a08a:	d10e      	bne.n	800a0aa <_printf_float+0x42a>
 800a08c:	e659      	b.n	8009d42 <_printf_float+0xc2>
 800a08e:	2301      	movs	r3, #1
 800a090:	4652      	mov	r2, sl
 800a092:	4631      	mov	r1, r6
 800a094:	4628      	mov	r0, r5
 800a096:	47b8      	blx	r7
 800a098:	3001      	adds	r0, #1
 800a09a:	f43f ae52 	beq.w	8009d42 <_printf_float+0xc2>
 800a09e:	f108 0801 	add.w	r8, r8, #1
 800a0a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	4543      	cmp	r3, r8
 800a0a8:	dcf1      	bgt.n	800a08e <_printf_float+0x40e>
 800a0aa:	464b      	mov	r3, r9
 800a0ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a0b0:	e6dc      	b.n	8009e6c <_printf_float+0x1ec>
 800a0b2:	f04f 0800 	mov.w	r8, #0
 800a0b6:	f104 0a1a 	add.w	sl, r4, #26
 800a0ba:	e7f2      	b.n	800a0a2 <_printf_float+0x422>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	4642      	mov	r2, r8
 800a0c0:	e7df      	b.n	800a082 <_printf_float+0x402>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	464a      	mov	r2, r9
 800a0c6:	4631      	mov	r1, r6
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	47b8      	blx	r7
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	f43f ae38 	beq.w	8009d42 <_printf_float+0xc2>
 800a0d2:	f108 0801 	add.w	r8, r8, #1
 800a0d6:	68e3      	ldr	r3, [r4, #12]
 800a0d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0da:	1a5b      	subs	r3, r3, r1
 800a0dc:	4543      	cmp	r3, r8
 800a0de:	dcf0      	bgt.n	800a0c2 <_printf_float+0x442>
 800a0e0:	e6fa      	b.n	8009ed8 <_printf_float+0x258>
 800a0e2:	f04f 0800 	mov.w	r8, #0
 800a0e6:	f104 0919 	add.w	r9, r4, #25
 800a0ea:	e7f4      	b.n	800a0d6 <_printf_float+0x456>

0800a0ec <_printf_common>:
 800a0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f0:	4616      	mov	r6, r2
 800a0f2:	4699      	mov	r9, r3
 800a0f4:	688a      	ldr	r2, [r1, #8]
 800a0f6:	690b      	ldr	r3, [r1, #16]
 800a0f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	bfb8      	it	lt
 800a100:	4613      	movlt	r3, r2
 800a102:	6033      	str	r3, [r6, #0]
 800a104:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a108:	4607      	mov	r7, r0
 800a10a:	460c      	mov	r4, r1
 800a10c:	b10a      	cbz	r2, 800a112 <_printf_common+0x26>
 800a10e:	3301      	adds	r3, #1
 800a110:	6033      	str	r3, [r6, #0]
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	0699      	lsls	r1, r3, #26
 800a116:	bf42      	ittt	mi
 800a118:	6833      	ldrmi	r3, [r6, #0]
 800a11a:	3302      	addmi	r3, #2
 800a11c:	6033      	strmi	r3, [r6, #0]
 800a11e:	6825      	ldr	r5, [r4, #0]
 800a120:	f015 0506 	ands.w	r5, r5, #6
 800a124:	d106      	bne.n	800a134 <_printf_common+0x48>
 800a126:	f104 0a19 	add.w	sl, r4, #25
 800a12a:	68e3      	ldr	r3, [r4, #12]
 800a12c:	6832      	ldr	r2, [r6, #0]
 800a12e:	1a9b      	subs	r3, r3, r2
 800a130:	42ab      	cmp	r3, r5
 800a132:	dc26      	bgt.n	800a182 <_printf_common+0x96>
 800a134:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a138:	1e13      	subs	r3, r2, #0
 800a13a:	6822      	ldr	r2, [r4, #0]
 800a13c:	bf18      	it	ne
 800a13e:	2301      	movne	r3, #1
 800a140:	0692      	lsls	r2, r2, #26
 800a142:	d42b      	bmi.n	800a19c <_printf_common+0xb0>
 800a144:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a148:	4649      	mov	r1, r9
 800a14a:	4638      	mov	r0, r7
 800a14c:	47c0      	blx	r8
 800a14e:	3001      	adds	r0, #1
 800a150:	d01e      	beq.n	800a190 <_printf_common+0xa4>
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	68e5      	ldr	r5, [r4, #12]
 800a156:	6832      	ldr	r2, [r6, #0]
 800a158:	f003 0306 	and.w	r3, r3, #6
 800a15c:	2b04      	cmp	r3, #4
 800a15e:	bf08      	it	eq
 800a160:	1aad      	subeq	r5, r5, r2
 800a162:	68a3      	ldr	r3, [r4, #8]
 800a164:	6922      	ldr	r2, [r4, #16]
 800a166:	bf0c      	ite	eq
 800a168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a16c:	2500      	movne	r5, #0
 800a16e:	4293      	cmp	r3, r2
 800a170:	bfc4      	itt	gt
 800a172:	1a9b      	subgt	r3, r3, r2
 800a174:	18ed      	addgt	r5, r5, r3
 800a176:	2600      	movs	r6, #0
 800a178:	341a      	adds	r4, #26
 800a17a:	42b5      	cmp	r5, r6
 800a17c:	d11a      	bne.n	800a1b4 <_printf_common+0xc8>
 800a17e:	2000      	movs	r0, #0
 800a180:	e008      	b.n	800a194 <_printf_common+0xa8>
 800a182:	2301      	movs	r3, #1
 800a184:	4652      	mov	r2, sl
 800a186:	4649      	mov	r1, r9
 800a188:	4638      	mov	r0, r7
 800a18a:	47c0      	blx	r8
 800a18c:	3001      	adds	r0, #1
 800a18e:	d103      	bne.n	800a198 <_printf_common+0xac>
 800a190:	f04f 30ff 	mov.w	r0, #4294967295
 800a194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a198:	3501      	adds	r5, #1
 800a19a:	e7c6      	b.n	800a12a <_printf_common+0x3e>
 800a19c:	18e1      	adds	r1, r4, r3
 800a19e:	1c5a      	adds	r2, r3, #1
 800a1a0:	2030      	movs	r0, #48	; 0x30
 800a1a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1a6:	4422      	add	r2, r4
 800a1a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1b0:	3302      	adds	r3, #2
 800a1b2:	e7c7      	b.n	800a144 <_printf_common+0x58>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	4622      	mov	r2, r4
 800a1b8:	4649      	mov	r1, r9
 800a1ba:	4638      	mov	r0, r7
 800a1bc:	47c0      	blx	r8
 800a1be:	3001      	adds	r0, #1
 800a1c0:	d0e6      	beq.n	800a190 <_printf_common+0xa4>
 800a1c2:	3601      	adds	r6, #1
 800a1c4:	e7d9      	b.n	800a17a <_printf_common+0x8e>
	...

0800a1c8 <_printf_i>:
 800a1c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1cc:	7e0f      	ldrb	r7, [r1, #24]
 800a1ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1d0:	2f78      	cmp	r7, #120	; 0x78
 800a1d2:	4691      	mov	r9, r2
 800a1d4:	4680      	mov	r8, r0
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	469a      	mov	sl, r3
 800a1da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a1de:	d807      	bhi.n	800a1f0 <_printf_i+0x28>
 800a1e0:	2f62      	cmp	r7, #98	; 0x62
 800a1e2:	d80a      	bhi.n	800a1fa <_printf_i+0x32>
 800a1e4:	2f00      	cmp	r7, #0
 800a1e6:	f000 80d8 	beq.w	800a39a <_printf_i+0x1d2>
 800a1ea:	2f58      	cmp	r7, #88	; 0x58
 800a1ec:	f000 80a3 	beq.w	800a336 <_printf_i+0x16e>
 800a1f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1f8:	e03a      	b.n	800a270 <_printf_i+0xa8>
 800a1fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1fe:	2b15      	cmp	r3, #21
 800a200:	d8f6      	bhi.n	800a1f0 <_printf_i+0x28>
 800a202:	a101      	add	r1, pc, #4	; (adr r1, 800a208 <_printf_i+0x40>)
 800a204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a208:	0800a261 	.word	0x0800a261
 800a20c:	0800a275 	.word	0x0800a275
 800a210:	0800a1f1 	.word	0x0800a1f1
 800a214:	0800a1f1 	.word	0x0800a1f1
 800a218:	0800a1f1 	.word	0x0800a1f1
 800a21c:	0800a1f1 	.word	0x0800a1f1
 800a220:	0800a275 	.word	0x0800a275
 800a224:	0800a1f1 	.word	0x0800a1f1
 800a228:	0800a1f1 	.word	0x0800a1f1
 800a22c:	0800a1f1 	.word	0x0800a1f1
 800a230:	0800a1f1 	.word	0x0800a1f1
 800a234:	0800a381 	.word	0x0800a381
 800a238:	0800a2a5 	.word	0x0800a2a5
 800a23c:	0800a363 	.word	0x0800a363
 800a240:	0800a1f1 	.word	0x0800a1f1
 800a244:	0800a1f1 	.word	0x0800a1f1
 800a248:	0800a3a3 	.word	0x0800a3a3
 800a24c:	0800a1f1 	.word	0x0800a1f1
 800a250:	0800a2a5 	.word	0x0800a2a5
 800a254:	0800a1f1 	.word	0x0800a1f1
 800a258:	0800a1f1 	.word	0x0800a1f1
 800a25c:	0800a36b 	.word	0x0800a36b
 800a260:	682b      	ldr	r3, [r5, #0]
 800a262:	1d1a      	adds	r2, r3, #4
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	602a      	str	r2, [r5, #0]
 800a268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a26c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a270:	2301      	movs	r3, #1
 800a272:	e0a3      	b.n	800a3bc <_printf_i+0x1f4>
 800a274:	6820      	ldr	r0, [r4, #0]
 800a276:	6829      	ldr	r1, [r5, #0]
 800a278:	0606      	lsls	r6, r0, #24
 800a27a:	f101 0304 	add.w	r3, r1, #4
 800a27e:	d50a      	bpl.n	800a296 <_printf_i+0xce>
 800a280:	680e      	ldr	r6, [r1, #0]
 800a282:	602b      	str	r3, [r5, #0]
 800a284:	2e00      	cmp	r6, #0
 800a286:	da03      	bge.n	800a290 <_printf_i+0xc8>
 800a288:	232d      	movs	r3, #45	; 0x2d
 800a28a:	4276      	negs	r6, r6
 800a28c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a290:	485e      	ldr	r0, [pc, #376]	; (800a40c <_printf_i+0x244>)
 800a292:	230a      	movs	r3, #10
 800a294:	e019      	b.n	800a2ca <_printf_i+0x102>
 800a296:	680e      	ldr	r6, [r1, #0]
 800a298:	602b      	str	r3, [r5, #0]
 800a29a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a29e:	bf18      	it	ne
 800a2a0:	b236      	sxthne	r6, r6
 800a2a2:	e7ef      	b.n	800a284 <_printf_i+0xbc>
 800a2a4:	682b      	ldr	r3, [r5, #0]
 800a2a6:	6820      	ldr	r0, [r4, #0]
 800a2a8:	1d19      	adds	r1, r3, #4
 800a2aa:	6029      	str	r1, [r5, #0]
 800a2ac:	0601      	lsls	r1, r0, #24
 800a2ae:	d501      	bpl.n	800a2b4 <_printf_i+0xec>
 800a2b0:	681e      	ldr	r6, [r3, #0]
 800a2b2:	e002      	b.n	800a2ba <_printf_i+0xf2>
 800a2b4:	0646      	lsls	r6, r0, #25
 800a2b6:	d5fb      	bpl.n	800a2b0 <_printf_i+0xe8>
 800a2b8:	881e      	ldrh	r6, [r3, #0]
 800a2ba:	4854      	ldr	r0, [pc, #336]	; (800a40c <_printf_i+0x244>)
 800a2bc:	2f6f      	cmp	r7, #111	; 0x6f
 800a2be:	bf0c      	ite	eq
 800a2c0:	2308      	moveq	r3, #8
 800a2c2:	230a      	movne	r3, #10
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2ca:	6865      	ldr	r5, [r4, #4]
 800a2cc:	60a5      	str	r5, [r4, #8]
 800a2ce:	2d00      	cmp	r5, #0
 800a2d0:	bfa2      	ittt	ge
 800a2d2:	6821      	ldrge	r1, [r4, #0]
 800a2d4:	f021 0104 	bicge.w	r1, r1, #4
 800a2d8:	6021      	strge	r1, [r4, #0]
 800a2da:	b90e      	cbnz	r6, 800a2e0 <_printf_i+0x118>
 800a2dc:	2d00      	cmp	r5, #0
 800a2de:	d04d      	beq.n	800a37c <_printf_i+0x1b4>
 800a2e0:	4615      	mov	r5, r2
 800a2e2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a2e6:	fb03 6711 	mls	r7, r3, r1, r6
 800a2ea:	5dc7      	ldrb	r7, [r0, r7]
 800a2ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a2f0:	4637      	mov	r7, r6
 800a2f2:	42bb      	cmp	r3, r7
 800a2f4:	460e      	mov	r6, r1
 800a2f6:	d9f4      	bls.n	800a2e2 <_printf_i+0x11a>
 800a2f8:	2b08      	cmp	r3, #8
 800a2fa:	d10b      	bne.n	800a314 <_printf_i+0x14c>
 800a2fc:	6823      	ldr	r3, [r4, #0]
 800a2fe:	07de      	lsls	r6, r3, #31
 800a300:	d508      	bpl.n	800a314 <_printf_i+0x14c>
 800a302:	6923      	ldr	r3, [r4, #16]
 800a304:	6861      	ldr	r1, [r4, #4]
 800a306:	4299      	cmp	r1, r3
 800a308:	bfde      	ittt	le
 800a30a:	2330      	movle	r3, #48	; 0x30
 800a30c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a310:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a314:	1b52      	subs	r2, r2, r5
 800a316:	6122      	str	r2, [r4, #16]
 800a318:	f8cd a000 	str.w	sl, [sp]
 800a31c:	464b      	mov	r3, r9
 800a31e:	aa03      	add	r2, sp, #12
 800a320:	4621      	mov	r1, r4
 800a322:	4640      	mov	r0, r8
 800a324:	f7ff fee2 	bl	800a0ec <_printf_common>
 800a328:	3001      	adds	r0, #1
 800a32a:	d14c      	bne.n	800a3c6 <_printf_i+0x1fe>
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	b004      	add	sp, #16
 800a332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a336:	4835      	ldr	r0, [pc, #212]	; (800a40c <_printf_i+0x244>)
 800a338:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a33c:	6829      	ldr	r1, [r5, #0]
 800a33e:	6823      	ldr	r3, [r4, #0]
 800a340:	f851 6b04 	ldr.w	r6, [r1], #4
 800a344:	6029      	str	r1, [r5, #0]
 800a346:	061d      	lsls	r5, r3, #24
 800a348:	d514      	bpl.n	800a374 <_printf_i+0x1ac>
 800a34a:	07df      	lsls	r7, r3, #31
 800a34c:	bf44      	itt	mi
 800a34e:	f043 0320 	orrmi.w	r3, r3, #32
 800a352:	6023      	strmi	r3, [r4, #0]
 800a354:	b91e      	cbnz	r6, 800a35e <_printf_i+0x196>
 800a356:	6823      	ldr	r3, [r4, #0]
 800a358:	f023 0320 	bic.w	r3, r3, #32
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	2310      	movs	r3, #16
 800a360:	e7b0      	b.n	800a2c4 <_printf_i+0xfc>
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	f043 0320 	orr.w	r3, r3, #32
 800a368:	6023      	str	r3, [r4, #0]
 800a36a:	2378      	movs	r3, #120	; 0x78
 800a36c:	4828      	ldr	r0, [pc, #160]	; (800a410 <_printf_i+0x248>)
 800a36e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a372:	e7e3      	b.n	800a33c <_printf_i+0x174>
 800a374:	0659      	lsls	r1, r3, #25
 800a376:	bf48      	it	mi
 800a378:	b2b6      	uxthmi	r6, r6
 800a37a:	e7e6      	b.n	800a34a <_printf_i+0x182>
 800a37c:	4615      	mov	r5, r2
 800a37e:	e7bb      	b.n	800a2f8 <_printf_i+0x130>
 800a380:	682b      	ldr	r3, [r5, #0]
 800a382:	6826      	ldr	r6, [r4, #0]
 800a384:	6961      	ldr	r1, [r4, #20]
 800a386:	1d18      	adds	r0, r3, #4
 800a388:	6028      	str	r0, [r5, #0]
 800a38a:	0635      	lsls	r5, r6, #24
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	d501      	bpl.n	800a394 <_printf_i+0x1cc>
 800a390:	6019      	str	r1, [r3, #0]
 800a392:	e002      	b.n	800a39a <_printf_i+0x1d2>
 800a394:	0670      	lsls	r0, r6, #25
 800a396:	d5fb      	bpl.n	800a390 <_printf_i+0x1c8>
 800a398:	8019      	strh	r1, [r3, #0]
 800a39a:	2300      	movs	r3, #0
 800a39c:	6123      	str	r3, [r4, #16]
 800a39e:	4615      	mov	r5, r2
 800a3a0:	e7ba      	b.n	800a318 <_printf_i+0x150>
 800a3a2:	682b      	ldr	r3, [r5, #0]
 800a3a4:	1d1a      	adds	r2, r3, #4
 800a3a6:	602a      	str	r2, [r5, #0]
 800a3a8:	681d      	ldr	r5, [r3, #0]
 800a3aa:	6862      	ldr	r2, [r4, #4]
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	f7f5 ff4e 	bl	8000250 <memchr>
 800a3b4:	b108      	cbz	r0, 800a3ba <_printf_i+0x1f2>
 800a3b6:	1b40      	subs	r0, r0, r5
 800a3b8:	6060      	str	r0, [r4, #4]
 800a3ba:	6863      	ldr	r3, [r4, #4]
 800a3bc:	6123      	str	r3, [r4, #16]
 800a3be:	2300      	movs	r3, #0
 800a3c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3c4:	e7a8      	b.n	800a318 <_printf_i+0x150>
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	462a      	mov	r2, r5
 800a3ca:	4649      	mov	r1, r9
 800a3cc:	4640      	mov	r0, r8
 800a3ce:	47d0      	blx	sl
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	d0ab      	beq.n	800a32c <_printf_i+0x164>
 800a3d4:	6823      	ldr	r3, [r4, #0]
 800a3d6:	079b      	lsls	r3, r3, #30
 800a3d8:	d413      	bmi.n	800a402 <_printf_i+0x23a>
 800a3da:	68e0      	ldr	r0, [r4, #12]
 800a3dc:	9b03      	ldr	r3, [sp, #12]
 800a3de:	4298      	cmp	r0, r3
 800a3e0:	bfb8      	it	lt
 800a3e2:	4618      	movlt	r0, r3
 800a3e4:	e7a4      	b.n	800a330 <_printf_i+0x168>
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	4632      	mov	r2, r6
 800a3ea:	4649      	mov	r1, r9
 800a3ec:	4640      	mov	r0, r8
 800a3ee:	47d0      	blx	sl
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	d09b      	beq.n	800a32c <_printf_i+0x164>
 800a3f4:	3501      	adds	r5, #1
 800a3f6:	68e3      	ldr	r3, [r4, #12]
 800a3f8:	9903      	ldr	r1, [sp, #12]
 800a3fa:	1a5b      	subs	r3, r3, r1
 800a3fc:	42ab      	cmp	r3, r5
 800a3fe:	dcf2      	bgt.n	800a3e6 <_printf_i+0x21e>
 800a400:	e7eb      	b.n	800a3da <_printf_i+0x212>
 800a402:	2500      	movs	r5, #0
 800a404:	f104 0619 	add.w	r6, r4, #25
 800a408:	e7f5      	b.n	800a3f6 <_printf_i+0x22e>
 800a40a:	bf00      	nop
 800a40c:	0800f16c 	.word	0x0800f16c
 800a410:	0800f17d 	.word	0x0800f17d

0800a414 <_scanf_float>:
 800a414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a418:	b087      	sub	sp, #28
 800a41a:	4617      	mov	r7, r2
 800a41c:	9303      	str	r3, [sp, #12]
 800a41e:	688b      	ldr	r3, [r1, #8]
 800a420:	1e5a      	subs	r2, r3, #1
 800a422:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a426:	bf83      	ittte	hi
 800a428:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a42c:	195b      	addhi	r3, r3, r5
 800a42e:	9302      	strhi	r3, [sp, #8]
 800a430:	2300      	movls	r3, #0
 800a432:	bf86      	itte	hi
 800a434:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a438:	608b      	strhi	r3, [r1, #8]
 800a43a:	9302      	strls	r3, [sp, #8]
 800a43c:	680b      	ldr	r3, [r1, #0]
 800a43e:	468b      	mov	fp, r1
 800a440:	2500      	movs	r5, #0
 800a442:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a446:	f84b 3b1c 	str.w	r3, [fp], #28
 800a44a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a44e:	4680      	mov	r8, r0
 800a450:	460c      	mov	r4, r1
 800a452:	465e      	mov	r6, fp
 800a454:	46aa      	mov	sl, r5
 800a456:	46a9      	mov	r9, r5
 800a458:	9501      	str	r5, [sp, #4]
 800a45a:	68a2      	ldr	r2, [r4, #8]
 800a45c:	b152      	cbz	r2, 800a474 <_scanf_float+0x60>
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	2b4e      	cmp	r3, #78	; 0x4e
 800a464:	d864      	bhi.n	800a530 <_scanf_float+0x11c>
 800a466:	2b40      	cmp	r3, #64	; 0x40
 800a468:	d83c      	bhi.n	800a4e4 <_scanf_float+0xd0>
 800a46a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a46e:	b2c8      	uxtb	r0, r1
 800a470:	280e      	cmp	r0, #14
 800a472:	d93a      	bls.n	800a4ea <_scanf_float+0xd6>
 800a474:	f1b9 0f00 	cmp.w	r9, #0
 800a478:	d003      	beq.n	800a482 <_scanf_float+0x6e>
 800a47a:	6823      	ldr	r3, [r4, #0]
 800a47c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a480:	6023      	str	r3, [r4, #0]
 800a482:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a486:	f1ba 0f01 	cmp.w	sl, #1
 800a48a:	f200 8113 	bhi.w	800a6b4 <_scanf_float+0x2a0>
 800a48e:	455e      	cmp	r6, fp
 800a490:	f200 8105 	bhi.w	800a69e <_scanf_float+0x28a>
 800a494:	2501      	movs	r5, #1
 800a496:	4628      	mov	r0, r5
 800a498:	b007      	add	sp, #28
 800a49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a49e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a4a2:	2a0d      	cmp	r2, #13
 800a4a4:	d8e6      	bhi.n	800a474 <_scanf_float+0x60>
 800a4a6:	a101      	add	r1, pc, #4	; (adr r1, 800a4ac <_scanf_float+0x98>)
 800a4a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a4ac:	0800a5eb 	.word	0x0800a5eb
 800a4b0:	0800a475 	.word	0x0800a475
 800a4b4:	0800a475 	.word	0x0800a475
 800a4b8:	0800a475 	.word	0x0800a475
 800a4bc:	0800a64b 	.word	0x0800a64b
 800a4c0:	0800a623 	.word	0x0800a623
 800a4c4:	0800a475 	.word	0x0800a475
 800a4c8:	0800a475 	.word	0x0800a475
 800a4cc:	0800a5f9 	.word	0x0800a5f9
 800a4d0:	0800a475 	.word	0x0800a475
 800a4d4:	0800a475 	.word	0x0800a475
 800a4d8:	0800a475 	.word	0x0800a475
 800a4dc:	0800a475 	.word	0x0800a475
 800a4e0:	0800a5b1 	.word	0x0800a5b1
 800a4e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a4e8:	e7db      	b.n	800a4a2 <_scanf_float+0x8e>
 800a4ea:	290e      	cmp	r1, #14
 800a4ec:	d8c2      	bhi.n	800a474 <_scanf_float+0x60>
 800a4ee:	a001      	add	r0, pc, #4	; (adr r0, 800a4f4 <_scanf_float+0xe0>)
 800a4f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a4f4:	0800a5a3 	.word	0x0800a5a3
 800a4f8:	0800a475 	.word	0x0800a475
 800a4fc:	0800a5a3 	.word	0x0800a5a3
 800a500:	0800a637 	.word	0x0800a637
 800a504:	0800a475 	.word	0x0800a475
 800a508:	0800a551 	.word	0x0800a551
 800a50c:	0800a58d 	.word	0x0800a58d
 800a510:	0800a58d 	.word	0x0800a58d
 800a514:	0800a58d 	.word	0x0800a58d
 800a518:	0800a58d 	.word	0x0800a58d
 800a51c:	0800a58d 	.word	0x0800a58d
 800a520:	0800a58d 	.word	0x0800a58d
 800a524:	0800a58d 	.word	0x0800a58d
 800a528:	0800a58d 	.word	0x0800a58d
 800a52c:	0800a58d 	.word	0x0800a58d
 800a530:	2b6e      	cmp	r3, #110	; 0x6e
 800a532:	d809      	bhi.n	800a548 <_scanf_float+0x134>
 800a534:	2b60      	cmp	r3, #96	; 0x60
 800a536:	d8b2      	bhi.n	800a49e <_scanf_float+0x8a>
 800a538:	2b54      	cmp	r3, #84	; 0x54
 800a53a:	d077      	beq.n	800a62c <_scanf_float+0x218>
 800a53c:	2b59      	cmp	r3, #89	; 0x59
 800a53e:	d199      	bne.n	800a474 <_scanf_float+0x60>
 800a540:	2d07      	cmp	r5, #7
 800a542:	d197      	bne.n	800a474 <_scanf_float+0x60>
 800a544:	2508      	movs	r5, #8
 800a546:	e029      	b.n	800a59c <_scanf_float+0x188>
 800a548:	2b74      	cmp	r3, #116	; 0x74
 800a54a:	d06f      	beq.n	800a62c <_scanf_float+0x218>
 800a54c:	2b79      	cmp	r3, #121	; 0x79
 800a54e:	e7f6      	b.n	800a53e <_scanf_float+0x12a>
 800a550:	6821      	ldr	r1, [r4, #0]
 800a552:	05c8      	lsls	r0, r1, #23
 800a554:	d51a      	bpl.n	800a58c <_scanf_float+0x178>
 800a556:	9b02      	ldr	r3, [sp, #8]
 800a558:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a55c:	6021      	str	r1, [r4, #0]
 800a55e:	f109 0901 	add.w	r9, r9, #1
 800a562:	b11b      	cbz	r3, 800a56c <_scanf_float+0x158>
 800a564:	3b01      	subs	r3, #1
 800a566:	3201      	adds	r2, #1
 800a568:	9302      	str	r3, [sp, #8]
 800a56a:	60a2      	str	r2, [r4, #8]
 800a56c:	68a3      	ldr	r3, [r4, #8]
 800a56e:	3b01      	subs	r3, #1
 800a570:	60a3      	str	r3, [r4, #8]
 800a572:	6923      	ldr	r3, [r4, #16]
 800a574:	3301      	adds	r3, #1
 800a576:	6123      	str	r3, [r4, #16]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	3b01      	subs	r3, #1
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	607b      	str	r3, [r7, #4]
 800a580:	f340 8084 	ble.w	800a68c <_scanf_float+0x278>
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	3301      	adds	r3, #1
 800a588:	603b      	str	r3, [r7, #0]
 800a58a:	e766      	b.n	800a45a <_scanf_float+0x46>
 800a58c:	eb1a 0f05 	cmn.w	sl, r5
 800a590:	f47f af70 	bne.w	800a474 <_scanf_float+0x60>
 800a594:	6822      	ldr	r2, [r4, #0]
 800a596:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a59a:	6022      	str	r2, [r4, #0]
 800a59c:	f806 3b01 	strb.w	r3, [r6], #1
 800a5a0:	e7e4      	b.n	800a56c <_scanf_float+0x158>
 800a5a2:	6822      	ldr	r2, [r4, #0]
 800a5a4:	0610      	lsls	r0, r2, #24
 800a5a6:	f57f af65 	bpl.w	800a474 <_scanf_float+0x60>
 800a5aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5ae:	e7f4      	b.n	800a59a <_scanf_float+0x186>
 800a5b0:	f1ba 0f00 	cmp.w	sl, #0
 800a5b4:	d10e      	bne.n	800a5d4 <_scanf_float+0x1c0>
 800a5b6:	f1b9 0f00 	cmp.w	r9, #0
 800a5ba:	d10e      	bne.n	800a5da <_scanf_float+0x1c6>
 800a5bc:	6822      	ldr	r2, [r4, #0]
 800a5be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a5c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a5c6:	d108      	bne.n	800a5da <_scanf_float+0x1c6>
 800a5c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a5cc:	6022      	str	r2, [r4, #0]
 800a5ce:	f04f 0a01 	mov.w	sl, #1
 800a5d2:	e7e3      	b.n	800a59c <_scanf_float+0x188>
 800a5d4:	f1ba 0f02 	cmp.w	sl, #2
 800a5d8:	d055      	beq.n	800a686 <_scanf_float+0x272>
 800a5da:	2d01      	cmp	r5, #1
 800a5dc:	d002      	beq.n	800a5e4 <_scanf_float+0x1d0>
 800a5de:	2d04      	cmp	r5, #4
 800a5e0:	f47f af48 	bne.w	800a474 <_scanf_float+0x60>
 800a5e4:	3501      	adds	r5, #1
 800a5e6:	b2ed      	uxtb	r5, r5
 800a5e8:	e7d8      	b.n	800a59c <_scanf_float+0x188>
 800a5ea:	f1ba 0f01 	cmp.w	sl, #1
 800a5ee:	f47f af41 	bne.w	800a474 <_scanf_float+0x60>
 800a5f2:	f04f 0a02 	mov.w	sl, #2
 800a5f6:	e7d1      	b.n	800a59c <_scanf_float+0x188>
 800a5f8:	b97d      	cbnz	r5, 800a61a <_scanf_float+0x206>
 800a5fa:	f1b9 0f00 	cmp.w	r9, #0
 800a5fe:	f47f af3c 	bne.w	800a47a <_scanf_float+0x66>
 800a602:	6822      	ldr	r2, [r4, #0]
 800a604:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a608:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a60c:	f47f af39 	bne.w	800a482 <_scanf_float+0x6e>
 800a610:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a614:	6022      	str	r2, [r4, #0]
 800a616:	2501      	movs	r5, #1
 800a618:	e7c0      	b.n	800a59c <_scanf_float+0x188>
 800a61a:	2d03      	cmp	r5, #3
 800a61c:	d0e2      	beq.n	800a5e4 <_scanf_float+0x1d0>
 800a61e:	2d05      	cmp	r5, #5
 800a620:	e7de      	b.n	800a5e0 <_scanf_float+0x1cc>
 800a622:	2d02      	cmp	r5, #2
 800a624:	f47f af26 	bne.w	800a474 <_scanf_float+0x60>
 800a628:	2503      	movs	r5, #3
 800a62a:	e7b7      	b.n	800a59c <_scanf_float+0x188>
 800a62c:	2d06      	cmp	r5, #6
 800a62e:	f47f af21 	bne.w	800a474 <_scanf_float+0x60>
 800a632:	2507      	movs	r5, #7
 800a634:	e7b2      	b.n	800a59c <_scanf_float+0x188>
 800a636:	6822      	ldr	r2, [r4, #0]
 800a638:	0591      	lsls	r1, r2, #22
 800a63a:	f57f af1b 	bpl.w	800a474 <_scanf_float+0x60>
 800a63e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a642:	6022      	str	r2, [r4, #0]
 800a644:	f8cd 9004 	str.w	r9, [sp, #4]
 800a648:	e7a8      	b.n	800a59c <_scanf_float+0x188>
 800a64a:	6822      	ldr	r2, [r4, #0]
 800a64c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a650:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a654:	d006      	beq.n	800a664 <_scanf_float+0x250>
 800a656:	0550      	lsls	r0, r2, #21
 800a658:	f57f af0c 	bpl.w	800a474 <_scanf_float+0x60>
 800a65c:	f1b9 0f00 	cmp.w	r9, #0
 800a660:	f43f af0f 	beq.w	800a482 <_scanf_float+0x6e>
 800a664:	0591      	lsls	r1, r2, #22
 800a666:	bf58      	it	pl
 800a668:	9901      	ldrpl	r1, [sp, #4]
 800a66a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a66e:	bf58      	it	pl
 800a670:	eba9 0101 	subpl.w	r1, r9, r1
 800a674:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a678:	bf58      	it	pl
 800a67a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a67e:	6022      	str	r2, [r4, #0]
 800a680:	f04f 0900 	mov.w	r9, #0
 800a684:	e78a      	b.n	800a59c <_scanf_float+0x188>
 800a686:	f04f 0a03 	mov.w	sl, #3
 800a68a:	e787      	b.n	800a59c <_scanf_float+0x188>
 800a68c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a690:	4639      	mov	r1, r7
 800a692:	4640      	mov	r0, r8
 800a694:	4798      	blx	r3
 800a696:	2800      	cmp	r0, #0
 800a698:	f43f aedf 	beq.w	800a45a <_scanf_float+0x46>
 800a69c:	e6ea      	b.n	800a474 <_scanf_float+0x60>
 800a69e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6a6:	463a      	mov	r2, r7
 800a6a8:	4640      	mov	r0, r8
 800a6aa:	4798      	blx	r3
 800a6ac:	6923      	ldr	r3, [r4, #16]
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	6123      	str	r3, [r4, #16]
 800a6b2:	e6ec      	b.n	800a48e <_scanf_float+0x7a>
 800a6b4:	1e6b      	subs	r3, r5, #1
 800a6b6:	2b06      	cmp	r3, #6
 800a6b8:	d825      	bhi.n	800a706 <_scanf_float+0x2f2>
 800a6ba:	2d02      	cmp	r5, #2
 800a6bc:	d836      	bhi.n	800a72c <_scanf_float+0x318>
 800a6be:	455e      	cmp	r6, fp
 800a6c0:	f67f aee8 	bls.w	800a494 <_scanf_float+0x80>
 800a6c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6cc:	463a      	mov	r2, r7
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	4798      	blx	r3
 800a6d2:	6923      	ldr	r3, [r4, #16]
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	6123      	str	r3, [r4, #16]
 800a6d8:	e7f1      	b.n	800a6be <_scanf_float+0x2aa>
 800a6da:	9802      	ldr	r0, [sp, #8]
 800a6dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a6e4:	9002      	str	r0, [sp, #8]
 800a6e6:	463a      	mov	r2, r7
 800a6e8:	4640      	mov	r0, r8
 800a6ea:	4798      	blx	r3
 800a6ec:	6923      	ldr	r3, [r4, #16]
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	6123      	str	r3, [r4, #16]
 800a6f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6f6:	fa5f fa8a 	uxtb.w	sl, sl
 800a6fa:	f1ba 0f02 	cmp.w	sl, #2
 800a6fe:	d1ec      	bne.n	800a6da <_scanf_float+0x2c6>
 800a700:	3d03      	subs	r5, #3
 800a702:	b2ed      	uxtb	r5, r5
 800a704:	1b76      	subs	r6, r6, r5
 800a706:	6823      	ldr	r3, [r4, #0]
 800a708:	05da      	lsls	r2, r3, #23
 800a70a:	d52f      	bpl.n	800a76c <_scanf_float+0x358>
 800a70c:	055b      	lsls	r3, r3, #21
 800a70e:	d510      	bpl.n	800a732 <_scanf_float+0x31e>
 800a710:	455e      	cmp	r6, fp
 800a712:	f67f aebf 	bls.w	800a494 <_scanf_float+0x80>
 800a716:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a71a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a71e:	463a      	mov	r2, r7
 800a720:	4640      	mov	r0, r8
 800a722:	4798      	blx	r3
 800a724:	6923      	ldr	r3, [r4, #16]
 800a726:	3b01      	subs	r3, #1
 800a728:	6123      	str	r3, [r4, #16]
 800a72a:	e7f1      	b.n	800a710 <_scanf_float+0x2fc>
 800a72c:	46aa      	mov	sl, r5
 800a72e:	9602      	str	r6, [sp, #8]
 800a730:	e7df      	b.n	800a6f2 <_scanf_float+0x2de>
 800a732:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a736:	6923      	ldr	r3, [r4, #16]
 800a738:	2965      	cmp	r1, #101	; 0x65
 800a73a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a73e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a742:	6123      	str	r3, [r4, #16]
 800a744:	d00c      	beq.n	800a760 <_scanf_float+0x34c>
 800a746:	2945      	cmp	r1, #69	; 0x45
 800a748:	d00a      	beq.n	800a760 <_scanf_float+0x34c>
 800a74a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a74e:	463a      	mov	r2, r7
 800a750:	4640      	mov	r0, r8
 800a752:	4798      	blx	r3
 800a754:	6923      	ldr	r3, [r4, #16]
 800a756:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a75a:	3b01      	subs	r3, #1
 800a75c:	1eb5      	subs	r5, r6, #2
 800a75e:	6123      	str	r3, [r4, #16]
 800a760:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a764:	463a      	mov	r2, r7
 800a766:	4640      	mov	r0, r8
 800a768:	4798      	blx	r3
 800a76a:	462e      	mov	r6, r5
 800a76c:	6825      	ldr	r5, [r4, #0]
 800a76e:	f015 0510 	ands.w	r5, r5, #16
 800a772:	d159      	bne.n	800a828 <_scanf_float+0x414>
 800a774:	7035      	strb	r5, [r6, #0]
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a77c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a780:	d11b      	bne.n	800a7ba <_scanf_float+0x3a6>
 800a782:	9b01      	ldr	r3, [sp, #4]
 800a784:	454b      	cmp	r3, r9
 800a786:	eba3 0209 	sub.w	r2, r3, r9
 800a78a:	d123      	bne.n	800a7d4 <_scanf_float+0x3c0>
 800a78c:	2200      	movs	r2, #0
 800a78e:	4659      	mov	r1, fp
 800a790:	4640      	mov	r0, r8
 800a792:	f000 ff0b 	bl	800b5ac <_strtod_r>
 800a796:	6822      	ldr	r2, [r4, #0]
 800a798:	9b03      	ldr	r3, [sp, #12]
 800a79a:	f012 0f02 	tst.w	r2, #2
 800a79e:	ec57 6b10 	vmov	r6, r7, d0
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	d021      	beq.n	800a7ea <_scanf_float+0x3d6>
 800a7a6:	9903      	ldr	r1, [sp, #12]
 800a7a8:	1d1a      	adds	r2, r3, #4
 800a7aa:	600a      	str	r2, [r1, #0]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	e9c3 6700 	strd	r6, r7, [r3]
 800a7b2:	68e3      	ldr	r3, [r4, #12]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	60e3      	str	r3, [r4, #12]
 800a7b8:	e66d      	b.n	800a496 <_scanf_float+0x82>
 800a7ba:	9b04      	ldr	r3, [sp, #16]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d0e5      	beq.n	800a78c <_scanf_float+0x378>
 800a7c0:	9905      	ldr	r1, [sp, #20]
 800a7c2:	230a      	movs	r3, #10
 800a7c4:	462a      	mov	r2, r5
 800a7c6:	3101      	adds	r1, #1
 800a7c8:	4640      	mov	r0, r8
 800a7ca:	f000 ffd3 	bl	800b774 <_strtol_r>
 800a7ce:	9b04      	ldr	r3, [sp, #16]
 800a7d0:	9e05      	ldr	r6, [sp, #20]
 800a7d2:	1ac2      	subs	r2, r0, r3
 800a7d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a7d8:	429e      	cmp	r6, r3
 800a7da:	bf28      	it	cs
 800a7dc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a7e0:	4912      	ldr	r1, [pc, #72]	; (800a82c <_scanf_float+0x418>)
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	f000 f82c 	bl	800a840 <siprintf>
 800a7e8:	e7d0      	b.n	800a78c <_scanf_float+0x378>
 800a7ea:	9903      	ldr	r1, [sp, #12]
 800a7ec:	f012 0f04 	tst.w	r2, #4
 800a7f0:	f103 0204 	add.w	r2, r3, #4
 800a7f4:	600a      	str	r2, [r1, #0]
 800a7f6:	d1d9      	bne.n	800a7ac <_scanf_float+0x398>
 800a7f8:	f8d3 8000 	ldr.w	r8, [r3]
 800a7fc:	ee10 2a10 	vmov	r2, s0
 800a800:	ee10 0a10 	vmov	r0, s0
 800a804:	463b      	mov	r3, r7
 800a806:	4639      	mov	r1, r7
 800a808:	f7f6 f9c8 	bl	8000b9c <__aeabi_dcmpun>
 800a80c:	b128      	cbz	r0, 800a81a <_scanf_float+0x406>
 800a80e:	4808      	ldr	r0, [pc, #32]	; (800a830 <_scanf_float+0x41c>)
 800a810:	f000 f810 	bl	800a834 <nanf>
 800a814:	ed88 0a00 	vstr	s0, [r8]
 800a818:	e7cb      	b.n	800a7b2 <_scanf_float+0x39e>
 800a81a:	4630      	mov	r0, r6
 800a81c:	4639      	mov	r1, r7
 800a81e:	f7f6 fa1b 	bl	8000c58 <__aeabi_d2f>
 800a822:	f8c8 0000 	str.w	r0, [r8]
 800a826:	e7c4      	b.n	800a7b2 <_scanf_float+0x39e>
 800a828:	2500      	movs	r5, #0
 800a82a:	e634      	b.n	800a496 <_scanf_float+0x82>
 800a82c:	0800f18e 	.word	0x0800f18e
 800a830:	0800f297 	.word	0x0800f297

0800a834 <nanf>:
 800a834:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a83c <nanf+0x8>
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	7fc00000 	.word	0x7fc00000

0800a840 <siprintf>:
 800a840:	b40e      	push	{r1, r2, r3}
 800a842:	b500      	push	{lr}
 800a844:	b09c      	sub	sp, #112	; 0x70
 800a846:	ab1d      	add	r3, sp, #116	; 0x74
 800a848:	9002      	str	r0, [sp, #8]
 800a84a:	9006      	str	r0, [sp, #24]
 800a84c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a850:	4809      	ldr	r0, [pc, #36]	; (800a878 <siprintf+0x38>)
 800a852:	9107      	str	r1, [sp, #28]
 800a854:	9104      	str	r1, [sp, #16]
 800a856:	4909      	ldr	r1, [pc, #36]	; (800a87c <siprintf+0x3c>)
 800a858:	f853 2b04 	ldr.w	r2, [r3], #4
 800a85c:	9105      	str	r1, [sp, #20]
 800a85e:	6800      	ldr	r0, [r0, #0]
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	a902      	add	r1, sp, #8
 800a864:	f003 f822 	bl	800d8ac <_svfiprintf_r>
 800a868:	9b02      	ldr	r3, [sp, #8]
 800a86a:	2200      	movs	r2, #0
 800a86c:	701a      	strb	r2, [r3, #0]
 800a86e:	b01c      	add	sp, #112	; 0x70
 800a870:	f85d eb04 	ldr.w	lr, [sp], #4
 800a874:	b003      	add	sp, #12
 800a876:	4770      	bx	lr
 800a878:	20000074 	.word	0x20000074
 800a87c:	ffff0208 	.word	0xffff0208

0800a880 <siscanf>:
 800a880:	b40e      	push	{r1, r2, r3}
 800a882:	b510      	push	{r4, lr}
 800a884:	b09f      	sub	sp, #124	; 0x7c
 800a886:	ac21      	add	r4, sp, #132	; 0x84
 800a888:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a88c:	f854 2b04 	ldr.w	r2, [r4], #4
 800a890:	9201      	str	r2, [sp, #4]
 800a892:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a896:	9004      	str	r0, [sp, #16]
 800a898:	9008      	str	r0, [sp, #32]
 800a89a:	f7f5 fccb 	bl	8000234 <strlen>
 800a89e:	4b0c      	ldr	r3, [pc, #48]	; (800a8d0 <siscanf+0x50>)
 800a8a0:	9005      	str	r0, [sp, #20]
 800a8a2:	9009      	str	r0, [sp, #36]	; 0x24
 800a8a4:	930d      	str	r3, [sp, #52]	; 0x34
 800a8a6:	480b      	ldr	r0, [pc, #44]	; (800a8d4 <siscanf+0x54>)
 800a8a8:	9a01      	ldr	r2, [sp, #4]
 800a8aa:	6800      	ldr	r0, [r0, #0]
 800a8ac:	9403      	str	r4, [sp, #12]
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	9311      	str	r3, [sp, #68]	; 0x44
 800a8b2:	9316      	str	r3, [sp, #88]	; 0x58
 800a8b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8b8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a8bc:	a904      	add	r1, sp, #16
 800a8be:	4623      	mov	r3, r4
 800a8c0:	f003 f94e 	bl	800db60 <__ssvfiscanf_r>
 800a8c4:	b01f      	add	sp, #124	; 0x7c
 800a8c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8ca:	b003      	add	sp, #12
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	0800a8fb 	.word	0x0800a8fb
 800a8d4:	20000074 	.word	0x20000074

0800a8d8 <__sread>:
 800a8d8:	b510      	push	{r4, lr}
 800a8da:	460c      	mov	r4, r1
 800a8dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8e0:	f003 fd62 	bl	800e3a8 <_read_r>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	bfab      	itete	ge
 800a8e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8ea:	89a3      	ldrhlt	r3, [r4, #12]
 800a8ec:	181b      	addge	r3, r3, r0
 800a8ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8f2:	bfac      	ite	ge
 800a8f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8f6:	81a3      	strhlt	r3, [r4, #12]
 800a8f8:	bd10      	pop	{r4, pc}

0800a8fa <__seofread>:
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	4770      	bx	lr

0800a8fe <__swrite>:
 800a8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a902:	461f      	mov	r7, r3
 800a904:	898b      	ldrh	r3, [r1, #12]
 800a906:	05db      	lsls	r3, r3, #23
 800a908:	4605      	mov	r5, r0
 800a90a:	460c      	mov	r4, r1
 800a90c:	4616      	mov	r6, r2
 800a90e:	d505      	bpl.n	800a91c <__swrite+0x1e>
 800a910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a914:	2302      	movs	r3, #2
 800a916:	2200      	movs	r2, #0
 800a918:	f002 f97a 	bl	800cc10 <_lseek_r>
 800a91c:	89a3      	ldrh	r3, [r4, #12]
 800a91e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a922:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a926:	81a3      	strh	r3, [r4, #12]
 800a928:	4632      	mov	r2, r6
 800a92a:	463b      	mov	r3, r7
 800a92c:	4628      	mov	r0, r5
 800a92e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a932:	f000 bf2b 	b.w	800b78c <_write_r>

0800a936 <__sseek>:
 800a936:	b510      	push	{r4, lr}
 800a938:	460c      	mov	r4, r1
 800a93a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a93e:	f002 f967 	bl	800cc10 <_lseek_r>
 800a942:	1c43      	adds	r3, r0, #1
 800a944:	89a3      	ldrh	r3, [r4, #12]
 800a946:	bf15      	itete	ne
 800a948:	6560      	strne	r0, [r4, #84]	; 0x54
 800a94a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a94e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a952:	81a3      	strheq	r3, [r4, #12]
 800a954:	bf18      	it	ne
 800a956:	81a3      	strhne	r3, [r4, #12]
 800a958:	bd10      	pop	{r4, pc}

0800a95a <__sclose>:
 800a95a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a95e:	f000 bf45 	b.w	800b7ec <_close_r>

0800a962 <sulp>:
 800a962:	b570      	push	{r4, r5, r6, lr}
 800a964:	4604      	mov	r4, r0
 800a966:	460d      	mov	r5, r1
 800a968:	ec45 4b10 	vmov	d0, r4, r5
 800a96c:	4616      	mov	r6, r2
 800a96e:	f002 fcfb 	bl	800d368 <__ulp>
 800a972:	ec51 0b10 	vmov	r0, r1, d0
 800a976:	b17e      	cbz	r6, 800a998 <sulp+0x36>
 800a978:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a97c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a980:	2b00      	cmp	r3, #0
 800a982:	dd09      	ble.n	800a998 <sulp+0x36>
 800a984:	051b      	lsls	r3, r3, #20
 800a986:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a98a:	2400      	movs	r4, #0
 800a98c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a990:	4622      	mov	r2, r4
 800a992:	462b      	mov	r3, r5
 800a994:	f7f5 fe68 	bl	8000668 <__aeabi_dmul>
 800a998:	bd70      	pop	{r4, r5, r6, pc}
 800a99a:	0000      	movs	r0, r0
 800a99c:	0000      	movs	r0, r0
	...

0800a9a0 <_strtod_l>:
 800a9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a4:	ed2d 8b02 	vpush	{d8}
 800a9a8:	b09d      	sub	sp, #116	; 0x74
 800a9aa:	461f      	mov	r7, r3
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	9318      	str	r3, [sp, #96]	; 0x60
 800a9b0:	4ba2      	ldr	r3, [pc, #648]	; (800ac3c <_strtod_l+0x29c>)
 800a9b2:	9213      	str	r2, [sp, #76]	; 0x4c
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	9305      	str	r3, [sp, #20]
 800a9b8:	4604      	mov	r4, r0
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	4688      	mov	r8, r1
 800a9be:	f7f5 fc39 	bl	8000234 <strlen>
 800a9c2:	f04f 0a00 	mov.w	sl, #0
 800a9c6:	4605      	mov	r5, r0
 800a9c8:	f04f 0b00 	mov.w	fp, #0
 800a9cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a9d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9d2:	781a      	ldrb	r2, [r3, #0]
 800a9d4:	2a2b      	cmp	r2, #43	; 0x2b
 800a9d6:	d04e      	beq.n	800aa76 <_strtod_l+0xd6>
 800a9d8:	d83b      	bhi.n	800aa52 <_strtod_l+0xb2>
 800a9da:	2a0d      	cmp	r2, #13
 800a9dc:	d834      	bhi.n	800aa48 <_strtod_l+0xa8>
 800a9de:	2a08      	cmp	r2, #8
 800a9e0:	d834      	bhi.n	800aa4c <_strtod_l+0xac>
 800a9e2:	2a00      	cmp	r2, #0
 800a9e4:	d03e      	beq.n	800aa64 <_strtod_l+0xc4>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	930a      	str	r3, [sp, #40]	; 0x28
 800a9ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a9ec:	7833      	ldrb	r3, [r6, #0]
 800a9ee:	2b30      	cmp	r3, #48	; 0x30
 800a9f0:	f040 80b0 	bne.w	800ab54 <_strtod_l+0x1b4>
 800a9f4:	7873      	ldrb	r3, [r6, #1]
 800a9f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a9fa:	2b58      	cmp	r3, #88	; 0x58
 800a9fc:	d168      	bne.n	800aad0 <_strtod_l+0x130>
 800a9fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa00:	9301      	str	r3, [sp, #4]
 800aa02:	ab18      	add	r3, sp, #96	; 0x60
 800aa04:	9702      	str	r7, [sp, #8]
 800aa06:	9300      	str	r3, [sp, #0]
 800aa08:	4a8d      	ldr	r2, [pc, #564]	; (800ac40 <_strtod_l+0x2a0>)
 800aa0a:	ab19      	add	r3, sp, #100	; 0x64
 800aa0c:	a917      	add	r1, sp, #92	; 0x5c
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f001 fdf2 	bl	800c5f8 <__gethex>
 800aa14:	f010 0707 	ands.w	r7, r0, #7
 800aa18:	4605      	mov	r5, r0
 800aa1a:	d005      	beq.n	800aa28 <_strtod_l+0x88>
 800aa1c:	2f06      	cmp	r7, #6
 800aa1e:	d12c      	bne.n	800aa7a <_strtod_l+0xda>
 800aa20:	3601      	adds	r6, #1
 800aa22:	2300      	movs	r3, #0
 800aa24:	9617      	str	r6, [sp, #92]	; 0x5c
 800aa26:	930a      	str	r3, [sp, #40]	; 0x28
 800aa28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f040 8590 	bne.w	800b550 <_strtod_l+0xbb0>
 800aa30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa32:	b1eb      	cbz	r3, 800aa70 <_strtod_l+0xd0>
 800aa34:	4652      	mov	r2, sl
 800aa36:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aa3a:	ec43 2b10 	vmov	d0, r2, r3
 800aa3e:	b01d      	add	sp, #116	; 0x74
 800aa40:	ecbd 8b02 	vpop	{d8}
 800aa44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa48:	2a20      	cmp	r2, #32
 800aa4a:	d1cc      	bne.n	800a9e6 <_strtod_l+0x46>
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	9317      	str	r3, [sp, #92]	; 0x5c
 800aa50:	e7be      	b.n	800a9d0 <_strtod_l+0x30>
 800aa52:	2a2d      	cmp	r2, #45	; 0x2d
 800aa54:	d1c7      	bne.n	800a9e6 <_strtod_l+0x46>
 800aa56:	2201      	movs	r2, #1
 800aa58:	920a      	str	r2, [sp, #40]	; 0x28
 800aa5a:	1c5a      	adds	r2, r3, #1
 800aa5c:	9217      	str	r2, [sp, #92]	; 0x5c
 800aa5e:	785b      	ldrb	r3, [r3, #1]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d1c2      	bne.n	800a9ea <_strtod_l+0x4a>
 800aa64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa66:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f040 856e 	bne.w	800b54c <_strtod_l+0xbac>
 800aa70:	4652      	mov	r2, sl
 800aa72:	465b      	mov	r3, fp
 800aa74:	e7e1      	b.n	800aa3a <_strtod_l+0x9a>
 800aa76:	2200      	movs	r2, #0
 800aa78:	e7ee      	b.n	800aa58 <_strtod_l+0xb8>
 800aa7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aa7c:	b13a      	cbz	r2, 800aa8e <_strtod_l+0xee>
 800aa7e:	2135      	movs	r1, #53	; 0x35
 800aa80:	a81a      	add	r0, sp, #104	; 0x68
 800aa82:	f002 fd7c 	bl	800d57e <__copybits>
 800aa86:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aa88:	4620      	mov	r0, r4
 800aa8a:	f002 f93b 	bl	800cd04 <_Bfree>
 800aa8e:	3f01      	subs	r7, #1
 800aa90:	2f04      	cmp	r7, #4
 800aa92:	d806      	bhi.n	800aaa2 <_strtod_l+0x102>
 800aa94:	e8df f007 	tbb	[pc, r7]
 800aa98:	1714030a 	.word	0x1714030a
 800aa9c:	0a          	.byte	0x0a
 800aa9d:	00          	.byte	0x00
 800aa9e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800aaa2:	0728      	lsls	r0, r5, #28
 800aaa4:	d5c0      	bpl.n	800aa28 <_strtod_l+0x88>
 800aaa6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800aaaa:	e7bd      	b.n	800aa28 <_strtod_l+0x88>
 800aaac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800aab0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aab2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800aab6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aaba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aabe:	e7f0      	b.n	800aaa2 <_strtod_l+0x102>
 800aac0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ac44 <_strtod_l+0x2a4>
 800aac4:	e7ed      	b.n	800aaa2 <_strtod_l+0x102>
 800aac6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800aaca:	f04f 3aff 	mov.w	sl, #4294967295
 800aace:	e7e8      	b.n	800aaa2 <_strtod_l+0x102>
 800aad0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aad2:	1c5a      	adds	r2, r3, #1
 800aad4:	9217      	str	r2, [sp, #92]	; 0x5c
 800aad6:	785b      	ldrb	r3, [r3, #1]
 800aad8:	2b30      	cmp	r3, #48	; 0x30
 800aada:	d0f9      	beq.n	800aad0 <_strtod_l+0x130>
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d0a3      	beq.n	800aa28 <_strtod_l+0x88>
 800aae0:	2301      	movs	r3, #1
 800aae2:	f04f 0900 	mov.w	r9, #0
 800aae6:	9304      	str	r3, [sp, #16]
 800aae8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aaea:	9308      	str	r3, [sp, #32]
 800aaec:	f8cd 901c 	str.w	r9, [sp, #28]
 800aaf0:	464f      	mov	r7, r9
 800aaf2:	220a      	movs	r2, #10
 800aaf4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800aaf6:	7806      	ldrb	r6, [r0, #0]
 800aaf8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800aafc:	b2d9      	uxtb	r1, r3
 800aafe:	2909      	cmp	r1, #9
 800ab00:	d92a      	bls.n	800ab58 <_strtod_l+0x1b8>
 800ab02:	9905      	ldr	r1, [sp, #20]
 800ab04:	462a      	mov	r2, r5
 800ab06:	f003 fcb3 	bl	800e470 <strncmp>
 800ab0a:	b398      	cbz	r0, 800ab74 <_strtod_l+0x1d4>
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	4632      	mov	r2, r6
 800ab10:	463d      	mov	r5, r7
 800ab12:	9005      	str	r0, [sp, #20]
 800ab14:	4603      	mov	r3, r0
 800ab16:	2a65      	cmp	r2, #101	; 0x65
 800ab18:	d001      	beq.n	800ab1e <_strtod_l+0x17e>
 800ab1a:	2a45      	cmp	r2, #69	; 0x45
 800ab1c:	d118      	bne.n	800ab50 <_strtod_l+0x1b0>
 800ab1e:	b91d      	cbnz	r5, 800ab28 <_strtod_l+0x188>
 800ab20:	9a04      	ldr	r2, [sp, #16]
 800ab22:	4302      	orrs	r2, r0
 800ab24:	d09e      	beq.n	800aa64 <_strtod_l+0xc4>
 800ab26:	2500      	movs	r5, #0
 800ab28:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ab2c:	f108 0201 	add.w	r2, r8, #1
 800ab30:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab32:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ab36:	2a2b      	cmp	r2, #43	; 0x2b
 800ab38:	d075      	beq.n	800ac26 <_strtod_l+0x286>
 800ab3a:	2a2d      	cmp	r2, #45	; 0x2d
 800ab3c:	d07b      	beq.n	800ac36 <_strtod_l+0x296>
 800ab3e:	f04f 0c00 	mov.w	ip, #0
 800ab42:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ab46:	2909      	cmp	r1, #9
 800ab48:	f240 8082 	bls.w	800ac50 <_strtod_l+0x2b0>
 800ab4c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ab50:	2600      	movs	r6, #0
 800ab52:	e09d      	b.n	800ac90 <_strtod_l+0x2f0>
 800ab54:	2300      	movs	r3, #0
 800ab56:	e7c4      	b.n	800aae2 <_strtod_l+0x142>
 800ab58:	2f08      	cmp	r7, #8
 800ab5a:	bfd8      	it	le
 800ab5c:	9907      	ldrle	r1, [sp, #28]
 800ab5e:	f100 0001 	add.w	r0, r0, #1
 800ab62:	bfda      	itte	le
 800ab64:	fb02 3301 	mlale	r3, r2, r1, r3
 800ab68:	9307      	strle	r3, [sp, #28]
 800ab6a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ab6e:	3701      	adds	r7, #1
 800ab70:	9017      	str	r0, [sp, #92]	; 0x5c
 800ab72:	e7bf      	b.n	800aaf4 <_strtod_l+0x154>
 800ab74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab76:	195a      	adds	r2, r3, r5
 800ab78:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab7a:	5d5a      	ldrb	r2, [r3, r5]
 800ab7c:	2f00      	cmp	r7, #0
 800ab7e:	d037      	beq.n	800abf0 <_strtod_l+0x250>
 800ab80:	9005      	str	r0, [sp, #20]
 800ab82:	463d      	mov	r5, r7
 800ab84:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ab88:	2b09      	cmp	r3, #9
 800ab8a:	d912      	bls.n	800abb2 <_strtod_l+0x212>
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e7c2      	b.n	800ab16 <_strtod_l+0x176>
 800ab90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab92:	1c5a      	adds	r2, r3, #1
 800ab94:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab96:	785a      	ldrb	r2, [r3, #1]
 800ab98:	3001      	adds	r0, #1
 800ab9a:	2a30      	cmp	r2, #48	; 0x30
 800ab9c:	d0f8      	beq.n	800ab90 <_strtod_l+0x1f0>
 800ab9e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800aba2:	2b08      	cmp	r3, #8
 800aba4:	f200 84d9 	bhi.w	800b55a <_strtod_l+0xbba>
 800aba8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abaa:	9005      	str	r0, [sp, #20]
 800abac:	2000      	movs	r0, #0
 800abae:	9308      	str	r3, [sp, #32]
 800abb0:	4605      	mov	r5, r0
 800abb2:	3a30      	subs	r2, #48	; 0x30
 800abb4:	f100 0301 	add.w	r3, r0, #1
 800abb8:	d014      	beq.n	800abe4 <_strtod_l+0x244>
 800abba:	9905      	ldr	r1, [sp, #20]
 800abbc:	4419      	add	r1, r3
 800abbe:	9105      	str	r1, [sp, #20]
 800abc0:	462b      	mov	r3, r5
 800abc2:	eb00 0e05 	add.w	lr, r0, r5
 800abc6:	210a      	movs	r1, #10
 800abc8:	4573      	cmp	r3, lr
 800abca:	d113      	bne.n	800abf4 <_strtod_l+0x254>
 800abcc:	182b      	adds	r3, r5, r0
 800abce:	2b08      	cmp	r3, #8
 800abd0:	f105 0501 	add.w	r5, r5, #1
 800abd4:	4405      	add	r5, r0
 800abd6:	dc1c      	bgt.n	800ac12 <_strtod_l+0x272>
 800abd8:	9907      	ldr	r1, [sp, #28]
 800abda:	230a      	movs	r3, #10
 800abdc:	fb03 2301 	mla	r3, r3, r1, r2
 800abe0:	9307      	str	r3, [sp, #28]
 800abe2:	2300      	movs	r3, #0
 800abe4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800abe6:	1c51      	adds	r1, r2, #1
 800abe8:	9117      	str	r1, [sp, #92]	; 0x5c
 800abea:	7852      	ldrb	r2, [r2, #1]
 800abec:	4618      	mov	r0, r3
 800abee:	e7c9      	b.n	800ab84 <_strtod_l+0x1e4>
 800abf0:	4638      	mov	r0, r7
 800abf2:	e7d2      	b.n	800ab9a <_strtod_l+0x1fa>
 800abf4:	2b08      	cmp	r3, #8
 800abf6:	dc04      	bgt.n	800ac02 <_strtod_l+0x262>
 800abf8:	9e07      	ldr	r6, [sp, #28]
 800abfa:	434e      	muls	r6, r1
 800abfc:	9607      	str	r6, [sp, #28]
 800abfe:	3301      	adds	r3, #1
 800ac00:	e7e2      	b.n	800abc8 <_strtod_l+0x228>
 800ac02:	f103 0c01 	add.w	ip, r3, #1
 800ac06:	f1bc 0f10 	cmp.w	ip, #16
 800ac0a:	bfd8      	it	le
 800ac0c:	fb01 f909 	mulle.w	r9, r1, r9
 800ac10:	e7f5      	b.n	800abfe <_strtod_l+0x25e>
 800ac12:	2d10      	cmp	r5, #16
 800ac14:	bfdc      	itt	le
 800ac16:	230a      	movle	r3, #10
 800ac18:	fb03 2909 	mlale	r9, r3, r9, r2
 800ac1c:	e7e1      	b.n	800abe2 <_strtod_l+0x242>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	9305      	str	r3, [sp, #20]
 800ac22:	2301      	movs	r3, #1
 800ac24:	e77c      	b.n	800ab20 <_strtod_l+0x180>
 800ac26:	f04f 0c00 	mov.w	ip, #0
 800ac2a:	f108 0202 	add.w	r2, r8, #2
 800ac2e:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac30:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ac34:	e785      	b.n	800ab42 <_strtod_l+0x1a2>
 800ac36:	f04f 0c01 	mov.w	ip, #1
 800ac3a:	e7f6      	b.n	800ac2a <_strtod_l+0x28a>
 800ac3c:	0800f478 	.word	0x0800f478
 800ac40:	0800f194 	.word	0x0800f194
 800ac44:	7ff00000 	.word	0x7ff00000
 800ac48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ac4a:	1c51      	adds	r1, r2, #1
 800ac4c:	9117      	str	r1, [sp, #92]	; 0x5c
 800ac4e:	7852      	ldrb	r2, [r2, #1]
 800ac50:	2a30      	cmp	r2, #48	; 0x30
 800ac52:	d0f9      	beq.n	800ac48 <_strtod_l+0x2a8>
 800ac54:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ac58:	2908      	cmp	r1, #8
 800ac5a:	f63f af79 	bhi.w	800ab50 <_strtod_l+0x1b0>
 800ac5e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ac62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ac64:	9206      	str	r2, [sp, #24]
 800ac66:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ac68:	1c51      	adds	r1, r2, #1
 800ac6a:	9117      	str	r1, [sp, #92]	; 0x5c
 800ac6c:	7852      	ldrb	r2, [r2, #1]
 800ac6e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ac72:	2e09      	cmp	r6, #9
 800ac74:	d937      	bls.n	800ace6 <_strtod_l+0x346>
 800ac76:	9e06      	ldr	r6, [sp, #24]
 800ac78:	1b89      	subs	r1, r1, r6
 800ac7a:	2908      	cmp	r1, #8
 800ac7c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ac80:	dc02      	bgt.n	800ac88 <_strtod_l+0x2e8>
 800ac82:	4576      	cmp	r6, lr
 800ac84:	bfa8      	it	ge
 800ac86:	4676      	movge	r6, lr
 800ac88:	f1bc 0f00 	cmp.w	ip, #0
 800ac8c:	d000      	beq.n	800ac90 <_strtod_l+0x2f0>
 800ac8e:	4276      	negs	r6, r6
 800ac90:	2d00      	cmp	r5, #0
 800ac92:	d14d      	bne.n	800ad30 <_strtod_l+0x390>
 800ac94:	9904      	ldr	r1, [sp, #16]
 800ac96:	4301      	orrs	r1, r0
 800ac98:	f47f aec6 	bne.w	800aa28 <_strtod_l+0x88>
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f47f aee1 	bne.w	800aa64 <_strtod_l+0xc4>
 800aca2:	2a69      	cmp	r2, #105	; 0x69
 800aca4:	d027      	beq.n	800acf6 <_strtod_l+0x356>
 800aca6:	dc24      	bgt.n	800acf2 <_strtod_l+0x352>
 800aca8:	2a49      	cmp	r2, #73	; 0x49
 800acaa:	d024      	beq.n	800acf6 <_strtod_l+0x356>
 800acac:	2a4e      	cmp	r2, #78	; 0x4e
 800acae:	f47f aed9 	bne.w	800aa64 <_strtod_l+0xc4>
 800acb2:	499f      	ldr	r1, [pc, #636]	; (800af30 <_strtod_l+0x590>)
 800acb4:	a817      	add	r0, sp, #92	; 0x5c
 800acb6:	f001 fef7 	bl	800caa8 <__match>
 800acba:	2800      	cmp	r0, #0
 800acbc:	f43f aed2 	beq.w	800aa64 <_strtod_l+0xc4>
 800acc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	2b28      	cmp	r3, #40	; 0x28
 800acc6:	d12d      	bne.n	800ad24 <_strtod_l+0x384>
 800acc8:	499a      	ldr	r1, [pc, #616]	; (800af34 <_strtod_l+0x594>)
 800acca:	aa1a      	add	r2, sp, #104	; 0x68
 800accc:	a817      	add	r0, sp, #92	; 0x5c
 800acce:	f001 feff 	bl	800cad0 <__hexnan>
 800acd2:	2805      	cmp	r0, #5
 800acd4:	d126      	bne.n	800ad24 <_strtod_l+0x384>
 800acd6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800acd8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800acdc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ace0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ace4:	e6a0      	b.n	800aa28 <_strtod_l+0x88>
 800ace6:	210a      	movs	r1, #10
 800ace8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800acec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800acf0:	e7b9      	b.n	800ac66 <_strtod_l+0x2c6>
 800acf2:	2a6e      	cmp	r2, #110	; 0x6e
 800acf4:	e7db      	b.n	800acae <_strtod_l+0x30e>
 800acf6:	4990      	ldr	r1, [pc, #576]	; (800af38 <_strtod_l+0x598>)
 800acf8:	a817      	add	r0, sp, #92	; 0x5c
 800acfa:	f001 fed5 	bl	800caa8 <__match>
 800acfe:	2800      	cmp	r0, #0
 800ad00:	f43f aeb0 	beq.w	800aa64 <_strtod_l+0xc4>
 800ad04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad06:	498d      	ldr	r1, [pc, #564]	; (800af3c <_strtod_l+0x59c>)
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	a817      	add	r0, sp, #92	; 0x5c
 800ad0c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ad0e:	f001 fecb 	bl	800caa8 <__match>
 800ad12:	b910      	cbnz	r0, 800ad1a <_strtod_l+0x37a>
 800ad14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad16:	3301      	adds	r3, #1
 800ad18:	9317      	str	r3, [sp, #92]	; 0x5c
 800ad1a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800af4c <_strtod_l+0x5ac>
 800ad1e:	f04f 0a00 	mov.w	sl, #0
 800ad22:	e681      	b.n	800aa28 <_strtod_l+0x88>
 800ad24:	4886      	ldr	r0, [pc, #536]	; (800af40 <_strtod_l+0x5a0>)
 800ad26:	f003 fb53 	bl	800e3d0 <nan>
 800ad2a:	ec5b ab10 	vmov	sl, fp, d0
 800ad2e:	e67b      	b.n	800aa28 <_strtod_l+0x88>
 800ad30:	9b05      	ldr	r3, [sp, #20]
 800ad32:	9807      	ldr	r0, [sp, #28]
 800ad34:	1af3      	subs	r3, r6, r3
 800ad36:	2f00      	cmp	r7, #0
 800ad38:	bf08      	it	eq
 800ad3a:	462f      	moveq	r7, r5
 800ad3c:	2d10      	cmp	r5, #16
 800ad3e:	9306      	str	r3, [sp, #24]
 800ad40:	46a8      	mov	r8, r5
 800ad42:	bfa8      	it	ge
 800ad44:	f04f 0810 	movge.w	r8, #16
 800ad48:	f7f5 fc14 	bl	8000574 <__aeabi_ui2d>
 800ad4c:	2d09      	cmp	r5, #9
 800ad4e:	4682      	mov	sl, r0
 800ad50:	468b      	mov	fp, r1
 800ad52:	dd13      	ble.n	800ad7c <_strtod_l+0x3dc>
 800ad54:	4b7b      	ldr	r3, [pc, #492]	; (800af44 <_strtod_l+0x5a4>)
 800ad56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ad5a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ad5e:	f7f5 fc83 	bl	8000668 <__aeabi_dmul>
 800ad62:	4682      	mov	sl, r0
 800ad64:	4648      	mov	r0, r9
 800ad66:	468b      	mov	fp, r1
 800ad68:	f7f5 fc04 	bl	8000574 <__aeabi_ui2d>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	460b      	mov	r3, r1
 800ad70:	4650      	mov	r0, sl
 800ad72:	4659      	mov	r1, fp
 800ad74:	f7f5 fac2 	bl	80002fc <__adddf3>
 800ad78:	4682      	mov	sl, r0
 800ad7a:	468b      	mov	fp, r1
 800ad7c:	2d0f      	cmp	r5, #15
 800ad7e:	dc38      	bgt.n	800adf2 <_strtod_l+0x452>
 800ad80:	9b06      	ldr	r3, [sp, #24]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f43f ae50 	beq.w	800aa28 <_strtod_l+0x88>
 800ad88:	dd24      	ble.n	800add4 <_strtod_l+0x434>
 800ad8a:	2b16      	cmp	r3, #22
 800ad8c:	dc0b      	bgt.n	800ada6 <_strtod_l+0x406>
 800ad8e:	496d      	ldr	r1, [pc, #436]	; (800af44 <_strtod_l+0x5a4>)
 800ad90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad98:	4652      	mov	r2, sl
 800ad9a:	465b      	mov	r3, fp
 800ad9c:	f7f5 fc64 	bl	8000668 <__aeabi_dmul>
 800ada0:	4682      	mov	sl, r0
 800ada2:	468b      	mov	fp, r1
 800ada4:	e640      	b.n	800aa28 <_strtod_l+0x88>
 800ada6:	9a06      	ldr	r2, [sp, #24]
 800ada8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800adac:	4293      	cmp	r3, r2
 800adae:	db20      	blt.n	800adf2 <_strtod_l+0x452>
 800adb0:	4c64      	ldr	r4, [pc, #400]	; (800af44 <_strtod_l+0x5a4>)
 800adb2:	f1c5 050f 	rsb	r5, r5, #15
 800adb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800adba:	4652      	mov	r2, sl
 800adbc:	465b      	mov	r3, fp
 800adbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adc2:	f7f5 fc51 	bl	8000668 <__aeabi_dmul>
 800adc6:	9b06      	ldr	r3, [sp, #24]
 800adc8:	1b5d      	subs	r5, r3, r5
 800adca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800adce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800add2:	e7e3      	b.n	800ad9c <_strtod_l+0x3fc>
 800add4:	9b06      	ldr	r3, [sp, #24]
 800add6:	3316      	adds	r3, #22
 800add8:	db0b      	blt.n	800adf2 <_strtod_l+0x452>
 800adda:	9b05      	ldr	r3, [sp, #20]
 800addc:	1b9e      	subs	r6, r3, r6
 800adde:	4b59      	ldr	r3, [pc, #356]	; (800af44 <_strtod_l+0x5a4>)
 800ade0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ade4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ade8:	4650      	mov	r0, sl
 800adea:	4659      	mov	r1, fp
 800adec:	f7f5 fd66 	bl	80008bc <__aeabi_ddiv>
 800adf0:	e7d6      	b.n	800ada0 <_strtod_l+0x400>
 800adf2:	9b06      	ldr	r3, [sp, #24]
 800adf4:	eba5 0808 	sub.w	r8, r5, r8
 800adf8:	4498      	add	r8, r3
 800adfa:	f1b8 0f00 	cmp.w	r8, #0
 800adfe:	dd74      	ble.n	800aeea <_strtod_l+0x54a>
 800ae00:	f018 030f 	ands.w	r3, r8, #15
 800ae04:	d00a      	beq.n	800ae1c <_strtod_l+0x47c>
 800ae06:	494f      	ldr	r1, [pc, #316]	; (800af44 <_strtod_l+0x5a4>)
 800ae08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae0c:	4652      	mov	r2, sl
 800ae0e:	465b      	mov	r3, fp
 800ae10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae14:	f7f5 fc28 	bl	8000668 <__aeabi_dmul>
 800ae18:	4682      	mov	sl, r0
 800ae1a:	468b      	mov	fp, r1
 800ae1c:	f038 080f 	bics.w	r8, r8, #15
 800ae20:	d04f      	beq.n	800aec2 <_strtod_l+0x522>
 800ae22:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ae26:	dd22      	ble.n	800ae6e <_strtod_l+0x4ce>
 800ae28:	2500      	movs	r5, #0
 800ae2a:	462e      	mov	r6, r5
 800ae2c:	9507      	str	r5, [sp, #28]
 800ae2e:	9505      	str	r5, [sp, #20]
 800ae30:	2322      	movs	r3, #34	; 0x22
 800ae32:	f8df b118 	ldr.w	fp, [pc, #280]	; 800af4c <_strtod_l+0x5ac>
 800ae36:	6023      	str	r3, [r4, #0]
 800ae38:	f04f 0a00 	mov.w	sl, #0
 800ae3c:	9b07      	ldr	r3, [sp, #28]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f43f adf2 	beq.w	800aa28 <_strtod_l+0x88>
 800ae44:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ae46:	4620      	mov	r0, r4
 800ae48:	f001 ff5c 	bl	800cd04 <_Bfree>
 800ae4c:	9905      	ldr	r1, [sp, #20]
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f001 ff58 	bl	800cd04 <_Bfree>
 800ae54:	4631      	mov	r1, r6
 800ae56:	4620      	mov	r0, r4
 800ae58:	f001 ff54 	bl	800cd04 <_Bfree>
 800ae5c:	9907      	ldr	r1, [sp, #28]
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f001 ff50 	bl	800cd04 <_Bfree>
 800ae64:	4629      	mov	r1, r5
 800ae66:	4620      	mov	r0, r4
 800ae68:	f001 ff4c 	bl	800cd04 <_Bfree>
 800ae6c:	e5dc      	b.n	800aa28 <_strtod_l+0x88>
 800ae6e:	4b36      	ldr	r3, [pc, #216]	; (800af48 <_strtod_l+0x5a8>)
 800ae70:	9304      	str	r3, [sp, #16]
 800ae72:	2300      	movs	r3, #0
 800ae74:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ae78:	4650      	mov	r0, sl
 800ae7a:	4659      	mov	r1, fp
 800ae7c:	4699      	mov	r9, r3
 800ae7e:	f1b8 0f01 	cmp.w	r8, #1
 800ae82:	dc21      	bgt.n	800aec8 <_strtod_l+0x528>
 800ae84:	b10b      	cbz	r3, 800ae8a <_strtod_l+0x4ea>
 800ae86:	4682      	mov	sl, r0
 800ae88:	468b      	mov	fp, r1
 800ae8a:	4b2f      	ldr	r3, [pc, #188]	; (800af48 <_strtod_l+0x5a8>)
 800ae8c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ae90:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ae94:	4652      	mov	r2, sl
 800ae96:	465b      	mov	r3, fp
 800ae98:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ae9c:	f7f5 fbe4 	bl	8000668 <__aeabi_dmul>
 800aea0:	4b2a      	ldr	r3, [pc, #168]	; (800af4c <_strtod_l+0x5ac>)
 800aea2:	460a      	mov	r2, r1
 800aea4:	400b      	ands	r3, r1
 800aea6:	492a      	ldr	r1, [pc, #168]	; (800af50 <_strtod_l+0x5b0>)
 800aea8:	428b      	cmp	r3, r1
 800aeaa:	4682      	mov	sl, r0
 800aeac:	d8bc      	bhi.n	800ae28 <_strtod_l+0x488>
 800aeae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aeb2:	428b      	cmp	r3, r1
 800aeb4:	bf86      	itte	hi
 800aeb6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800af54 <_strtod_l+0x5b4>
 800aeba:	f04f 3aff 	movhi.w	sl, #4294967295
 800aebe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800aec2:	2300      	movs	r3, #0
 800aec4:	9304      	str	r3, [sp, #16]
 800aec6:	e084      	b.n	800afd2 <_strtod_l+0x632>
 800aec8:	f018 0f01 	tst.w	r8, #1
 800aecc:	d005      	beq.n	800aeda <_strtod_l+0x53a>
 800aece:	9b04      	ldr	r3, [sp, #16]
 800aed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed4:	f7f5 fbc8 	bl	8000668 <__aeabi_dmul>
 800aed8:	2301      	movs	r3, #1
 800aeda:	9a04      	ldr	r2, [sp, #16]
 800aedc:	3208      	adds	r2, #8
 800aede:	f109 0901 	add.w	r9, r9, #1
 800aee2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aee6:	9204      	str	r2, [sp, #16]
 800aee8:	e7c9      	b.n	800ae7e <_strtod_l+0x4de>
 800aeea:	d0ea      	beq.n	800aec2 <_strtod_l+0x522>
 800aeec:	f1c8 0800 	rsb	r8, r8, #0
 800aef0:	f018 020f 	ands.w	r2, r8, #15
 800aef4:	d00a      	beq.n	800af0c <_strtod_l+0x56c>
 800aef6:	4b13      	ldr	r3, [pc, #76]	; (800af44 <_strtod_l+0x5a4>)
 800aef8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aefc:	4650      	mov	r0, sl
 800aefe:	4659      	mov	r1, fp
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	f7f5 fcda 	bl	80008bc <__aeabi_ddiv>
 800af08:	4682      	mov	sl, r0
 800af0a:	468b      	mov	fp, r1
 800af0c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800af10:	d0d7      	beq.n	800aec2 <_strtod_l+0x522>
 800af12:	f1b8 0f1f 	cmp.w	r8, #31
 800af16:	dd1f      	ble.n	800af58 <_strtod_l+0x5b8>
 800af18:	2500      	movs	r5, #0
 800af1a:	462e      	mov	r6, r5
 800af1c:	9507      	str	r5, [sp, #28]
 800af1e:	9505      	str	r5, [sp, #20]
 800af20:	2322      	movs	r3, #34	; 0x22
 800af22:	f04f 0a00 	mov.w	sl, #0
 800af26:	f04f 0b00 	mov.w	fp, #0
 800af2a:	6023      	str	r3, [r4, #0]
 800af2c:	e786      	b.n	800ae3c <_strtod_l+0x49c>
 800af2e:	bf00      	nop
 800af30:	0800f169 	.word	0x0800f169
 800af34:	0800f1a8 	.word	0x0800f1a8
 800af38:	0800f161 	.word	0x0800f161
 800af3c:	0800f39c 	.word	0x0800f39c
 800af40:	0800f297 	.word	0x0800f297
 800af44:	0800f510 	.word	0x0800f510
 800af48:	0800f4e8 	.word	0x0800f4e8
 800af4c:	7ff00000 	.word	0x7ff00000
 800af50:	7ca00000 	.word	0x7ca00000
 800af54:	7fefffff 	.word	0x7fefffff
 800af58:	f018 0310 	ands.w	r3, r8, #16
 800af5c:	bf18      	it	ne
 800af5e:	236a      	movne	r3, #106	; 0x6a
 800af60:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b310 <_strtod_l+0x970>
 800af64:	9304      	str	r3, [sp, #16]
 800af66:	4650      	mov	r0, sl
 800af68:	4659      	mov	r1, fp
 800af6a:	2300      	movs	r3, #0
 800af6c:	f018 0f01 	tst.w	r8, #1
 800af70:	d004      	beq.n	800af7c <_strtod_l+0x5dc>
 800af72:	e9d9 2300 	ldrd	r2, r3, [r9]
 800af76:	f7f5 fb77 	bl	8000668 <__aeabi_dmul>
 800af7a:	2301      	movs	r3, #1
 800af7c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800af80:	f109 0908 	add.w	r9, r9, #8
 800af84:	d1f2      	bne.n	800af6c <_strtod_l+0x5cc>
 800af86:	b10b      	cbz	r3, 800af8c <_strtod_l+0x5ec>
 800af88:	4682      	mov	sl, r0
 800af8a:	468b      	mov	fp, r1
 800af8c:	9b04      	ldr	r3, [sp, #16]
 800af8e:	b1c3      	cbz	r3, 800afc2 <_strtod_l+0x622>
 800af90:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800af94:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800af98:	2b00      	cmp	r3, #0
 800af9a:	4659      	mov	r1, fp
 800af9c:	dd11      	ble.n	800afc2 <_strtod_l+0x622>
 800af9e:	2b1f      	cmp	r3, #31
 800afa0:	f340 8124 	ble.w	800b1ec <_strtod_l+0x84c>
 800afa4:	2b34      	cmp	r3, #52	; 0x34
 800afa6:	bfde      	ittt	le
 800afa8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800afac:	f04f 33ff 	movle.w	r3, #4294967295
 800afb0:	fa03 f202 	lslle.w	r2, r3, r2
 800afb4:	f04f 0a00 	mov.w	sl, #0
 800afb8:	bfcc      	ite	gt
 800afba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800afbe:	ea02 0b01 	andle.w	fp, r2, r1
 800afc2:	2200      	movs	r2, #0
 800afc4:	2300      	movs	r3, #0
 800afc6:	4650      	mov	r0, sl
 800afc8:	4659      	mov	r1, fp
 800afca:	f7f5 fdb5 	bl	8000b38 <__aeabi_dcmpeq>
 800afce:	2800      	cmp	r0, #0
 800afd0:	d1a2      	bne.n	800af18 <_strtod_l+0x578>
 800afd2:	9b07      	ldr	r3, [sp, #28]
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	9908      	ldr	r1, [sp, #32]
 800afd8:	462b      	mov	r3, r5
 800afda:	463a      	mov	r2, r7
 800afdc:	4620      	mov	r0, r4
 800afde:	f001 fef9 	bl	800cdd4 <__s2b>
 800afe2:	9007      	str	r0, [sp, #28]
 800afe4:	2800      	cmp	r0, #0
 800afe6:	f43f af1f 	beq.w	800ae28 <_strtod_l+0x488>
 800afea:	9b05      	ldr	r3, [sp, #20]
 800afec:	1b9e      	subs	r6, r3, r6
 800afee:	9b06      	ldr	r3, [sp, #24]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	bfb4      	ite	lt
 800aff4:	4633      	movlt	r3, r6
 800aff6:	2300      	movge	r3, #0
 800aff8:	930c      	str	r3, [sp, #48]	; 0x30
 800affa:	9b06      	ldr	r3, [sp, #24]
 800affc:	2500      	movs	r5, #0
 800affe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b002:	9312      	str	r3, [sp, #72]	; 0x48
 800b004:	462e      	mov	r6, r5
 800b006:	9b07      	ldr	r3, [sp, #28]
 800b008:	4620      	mov	r0, r4
 800b00a:	6859      	ldr	r1, [r3, #4]
 800b00c:	f001 fe3a 	bl	800cc84 <_Balloc>
 800b010:	9005      	str	r0, [sp, #20]
 800b012:	2800      	cmp	r0, #0
 800b014:	f43f af0c 	beq.w	800ae30 <_strtod_l+0x490>
 800b018:	9b07      	ldr	r3, [sp, #28]
 800b01a:	691a      	ldr	r2, [r3, #16]
 800b01c:	3202      	adds	r2, #2
 800b01e:	f103 010c 	add.w	r1, r3, #12
 800b022:	0092      	lsls	r2, r2, #2
 800b024:	300c      	adds	r0, #12
 800b026:	f001 fe1f 	bl	800cc68 <memcpy>
 800b02a:	ec4b ab10 	vmov	d0, sl, fp
 800b02e:	aa1a      	add	r2, sp, #104	; 0x68
 800b030:	a919      	add	r1, sp, #100	; 0x64
 800b032:	4620      	mov	r0, r4
 800b034:	f002 fa14 	bl	800d460 <__d2b>
 800b038:	ec4b ab18 	vmov	d8, sl, fp
 800b03c:	9018      	str	r0, [sp, #96]	; 0x60
 800b03e:	2800      	cmp	r0, #0
 800b040:	f43f aef6 	beq.w	800ae30 <_strtod_l+0x490>
 800b044:	2101      	movs	r1, #1
 800b046:	4620      	mov	r0, r4
 800b048:	f001 ff5e 	bl	800cf08 <__i2b>
 800b04c:	4606      	mov	r6, r0
 800b04e:	2800      	cmp	r0, #0
 800b050:	f43f aeee 	beq.w	800ae30 <_strtod_l+0x490>
 800b054:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b056:	9904      	ldr	r1, [sp, #16]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	bfab      	itete	ge
 800b05c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b05e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b060:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b062:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b066:	bfac      	ite	ge
 800b068:	eb03 0902 	addge.w	r9, r3, r2
 800b06c:	1ad7      	sublt	r7, r2, r3
 800b06e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b070:	eba3 0801 	sub.w	r8, r3, r1
 800b074:	4490      	add	r8, r2
 800b076:	4ba1      	ldr	r3, [pc, #644]	; (800b2fc <_strtod_l+0x95c>)
 800b078:	f108 38ff 	add.w	r8, r8, #4294967295
 800b07c:	4598      	cmp	r8, r3
 800b07e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b082:	f280 80c7 	bge.w	800b214 <_strtod_l+0x874>
 800b086:	eba3 0308 	sub.w	r3, r3, r8
 800b08a:	2b1f      	cmp	r3, #31
 800b08c:	eba2 0203 	sub.w	r2, r2, r3
 800b090:	f04f 0101 	mov.w	r1, #1
 800b094:	f300 80b1 	bgt.w	800b1fa <_strtod_l+0x85a>
 800b098:	fa01 f303 	lsl.w	r3, r1, r3
 800b09c:	930d      	str	r3, [sp, #52]	; 0x34
 800b09e:	2300      	movs	r3, #0
 800b0a0:	9308      	str	r3, [sp, #32]
 800b0a2:	eb09 0802 	add.w	r8, r9, r2
 800b0a6:	9b04      	ldr	r3, [sp, #16]
 800b0a8:	45c1      	cmp	r9, r8
 800b0aa:	4417      	add	r7, r2
 800b0ac:	441f      	add	r7, r3
 800b0ae:	464b      	mov	r3, r9
 800b0b0:	bfa8      	it	ge
 800b0b2:	4643      	movge	r3, r8
 800b0b4:	42bb      	cmp	r3, r7
 800b0b6:	bfa8      	it	ge
 800b0b8:	463b      	movge	r3, r7
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	bfc2      	ittt	gt
 800b0be:	eba8 0803 	subgt.w	r8, r8, r3
 800b0c2:	1aff      	subgt	r7, r7, r3
 800b0c4:	eba9 0903 	subgt.w	r9, r9, r3
 800b0c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	dd17      	ble.n	800b0fe <_strtod_l+0x75e>
 800b0ce:	4631      	mov	r1, r6
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f001 ffd8 	bl	800d088 <__pow5mult>
 800b0d8:	4606      	mov	r6, r0
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	f43f aea8 	beq.w	800ae30 <_strtod_l+0x490>
 800b0e0:	4601      	mov	r1, r0
 800b0e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	f001 ff25 	bl	800cf34 <__multiply>
 800b0ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	f43f ae9f 	beq.w	800ae30 <_strtod_l+0x490>
 800b0f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f001 fe05 	bl	800cd04 <_Bfree>
 800b0fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0fc:	9318      	str	r3, [sp, #96]	; 0x60
 800b0fe:	f1b8 0f00 	cmp.w	r8, #0
 800b102:	f300 808c 	bgt.w	800b21e <_strtod_l+0x87e>
 800b106:	9b06      	ldr	r3, [sp, #24]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	dd08      	ble.n	800b11e <_strtod_l+0x77e>
 800b10c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b10e:	9905      	ldr	r1, [sp, #20]
 800b110:	4620      	mov	r0, r4
 800b112:	f001 ffb9 	bl	800d088 <__pow5mult>
 800b116:	9005      	str	r0, [sp, #20]
 800b118:	2800      	cmp	r0, #0
 800b11a:	f43f ae89 	beq.w	800ae30 <_strtod_l+0x490>
 800b11e:	2f00      	cmp	r7, #0
 800b120:	dd08      	ble.n	800b134 <_strtod_l+0x794>
 800b122:	9905      	ldr	r1, [sp, #20]
 800b124:	463a      	mov	r2, r7
 800b126:	4620      	mov	r0, r4
 800b128:	f002 f808 	bl	800d13c <__lshift>
 800b12c:	9005      	str	r0, [sp, #20]
 800b12e:	2800      	cmp	r0, #0
 800b130:	f43f ae7e 	beq.w	800ae30 <_strtod_l+0x490>
 800b134:	f1b9 0f00 	cmp.w	r9, #0
 800b138:	dd08      	ble.n	800b14c <_strtod_l+0x7ac>
 800b13a:	4631      	mov	r1, r6
 800b13c:	464a      	mov	r2, r9
 800b13e:	4620      	mov	r0, r4
 800b140:	f001 fffc 	bl	800d13c <__lshift>
 800b144:	4606      	mov	r6, r0
 800b146:	2800      	cmp	r0, #0
 800b148:	f43f ae72 	beq.w	800ae30 <_strtod_l+0x490>
 800b14c:	9a05      	ldr	r2, [sp, #20]
 800b14e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b150:	4620      	mov	r0, r4
 800b152:	f002 f87f 	bl	800d254 <__mdiff>
 800b156:	4605      	mov	r5, r0
 800b158:	2800      	cmp	r0, #0
 800b15a:	f43f ae69 	beq.w	800ae30 <_strtod_l+0x490>
 800b15e:	68c3      	ldr	r3, [r0, #12]
 800b160:	930b      	str	r3, [sp, #44]	; 0x2c
 800b162:	2300      	movs	r3, #0
 800b164:	60c3      	str	r3, [r0, #12]
 800b166:	4631      	mov	r1, r6
 800b168:	f002 f858 	bl	800d21c <__mcmp>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	da60      	bge.n	800b232 <_strtod_l+0x892>
 800b170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b172:	ea53 030a 	orrs.w	r3, r3, sl
 800b176:	f040 8082 	bne.w	800b27e <_strtod_l+0x8de>
 800b17a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d17d      	bne.n	800b27e <_strtod_l+0x8de>
 800b182:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b186:	0d1b      	lsrs	r3, r3, #20
 800b188:	051b      	lsls	r3, r3, #20
 800b18a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b18e:	d976      	bls.n	800b27e <_strtod_l+0x8de>
 800b190:	696b      	ldr	r3, [r5, #20]
 800b192:	b913      	cbnz	r3, 800b19a <_strtod_l+0x7fa>
 800b194:	692b      	ldr	r3, [r5, #16]
 800b196:	2b01      	cmp	r3, #1
 800b198:	dd71      	ble.n	800b27e <_strtod_l+0x8de>
 800b19a:	4629      	mov	r1, r5
 800b19c:	2201      	movs	r2, #1
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f001 ffcc 	bl	800d13c <__lshift>
 800b1a4:	4631      	mov	r1, r6
 800b1a6:	4605      	mov	r5, r0
 800b1a8:	f002 f838 	bl	800d21c <__mcmp>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	dd66      	ble.n	800b27e <_strtod_l+0x8de>
 800b1b0:	9904      	ldr	r1, [sp, #16]
 800b1b2:	4a53      	ldr	r2, [pc, #332]	; (800b300 <_strtod_l+0x960>)
 800b1b4:	465b      	mov	r3, fp
 800b1b6:	2900      	cmp	r1, #0
 800b1b8:	f000 8081 	beq.w	800b2be <_strtod_l+0x91e>
 800b1bc:	ea02 010b 	and.w	r1, r2, fp
 800b1c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b1c4:	dc7b      	bgt.n	800b2be <_strtod_l+0x91e>
 800b1c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b1ca:	f77f aea9 	ble.w	800af20 <_strtod_l+0x580>
 800b1ce:	4b4d      	ldr	r3, [pc, #308]	; (800b304 <_strtod_l+0x964>)
 800b1d0:	4650      	mov	r0, sl
 800b1d2:	4659      	mov	r1, fp
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f7f5 fa47 	bl	8000668 <__aeabi_dmul>
 800b1da:	460b      	mov	r3, r1
 800b1dc:	4303      	orrs	r3, r0
 800b1de:	bf08      	it	eq
 800b1e0:	2322      	moveq	r3, #34	; 0x22
 800b1e2:	4682      	mov	sl, r0
 800b1e4:	468b      	mov	fp, r1
 800b1e6:	bf08      	it	eq
 800b1e8:	6023      	streq	r3, [r4, #0]
 800b1ea:	e62b      	b.n	800ae44 <_strtod_l+0x4a4>
 800b1ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f4:	ea03 0a0a 	and.w	sl, r3, sl
 800b1f8:	e6e3      	b.n	800afc2 <_strtod_l+0x622>
 800b1fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b1fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b202:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b206:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b20a:	fa01 f308 	lsl.w	r3, r1, r8
 800b20e:	9308      	str	r3, [sp, #32]
 800b210:	910d      	str	r1, [sp, #52]	; 0x34
 800b212:	e746      	b.n	800b0a2 <_strtod_l+0x702>
 800b214:	2300      	movs	r3, #0
 800b216:	9308      	str	r3, [sp, #32]
 800b218:	2301      	movs	r3, #1
 800b21a:	930d      	str	r3, [sp, #52]	; 0x34
 800b21c:	e741      	b.n	800b0a2 <_strtod_l+0x702>
 800b21e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b220:	4642      	mov	r2, r8
 800b222:	4620      	mov	r0, r4
 800b224:	f001 ff8a 	bl	800d13c <__lshift>
 800b228:	9018      	str	r0, [sp, #96]	; 0x60
 800b22a:	2800      	cmp	r0, #0
 800b22c:	f47f af6b 	bne.w	800b106 <_strtod_l+0x766>
 800b230:	e5fe      	b.n	800ae30 <_strtod_l+0x490>
 800b232:	465f      	mov	r7, fp
 800b234:	d16e      	bne.n	800b314 <_strtod_l+0x974>
 800b236:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b238:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b23c:	b342      	cbz	r2, 800b290 <_strtod_l+0x8f0>
 800b23e:	4a32      	ldr	r2, [pc, #200]	; (800b308 <_strtod_l+0x968>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d128      	bne.n	800b296 <_strtod_l+0x8f6>
 800b244:	9b04      	ldr	r3, [sp, #16]
 800b246:	4651      	mov	r1, sl
 800b248:	b1eb      	cbz	r3, 800b286 <_strtod_l+0x8e6>
 800b24a:	4b2d      	ldr	r3, [pc, #180]	; (800b300 <_strtod_l+0x960>)
 800b24c:	403b      	ands	r3, r7
 800b24e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b252:	f04f 32ff 	mov.w	r2, #4294967295
 800b256:	d819      	bhi.n	800b28c <_strtod_l+0x8ec>
 800b258:	0d1b      	lsrs	r3, r3, #20
 800b25a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b25e:	fa02 f303 	lsl.w	r3, r2, r3
 800b262:	4299      	cmp	r1, r3
 800b264:	d117      	bne.n	800b296 <_strtod_l+0x8f6>
 800b266:	4b29      	ldr	r3, [pc, #164]	; (800b30c <_strtod_l+0x96c>)
 800b268:	429f      	cmp	r7, r3
 800b26a:	d102      	bne.n	800b272 <_strtod_l+0x8d2>
 800b26c:	3101      	adds	r1, #1
 800b26e:	f43f addf 	beq.w	800ae30 <_strtod_l+0x490>
 800b272:	4b23      	ldr	r3, [pc, #140]	; (800b300 <_strtod_l+0x960>)
 800b274:	403b      	ands	r3, r7
 800b276:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b27a:	f04f 0a00 	mov.w	sl, #0
 800b27e:	9b04      	ldr	r3, [sp, #16]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1a4      	bne.n	800b1ce <_strtod_l+0x82e>
 800b284:	e5de      	b.n	800ae44 <_strtod_l+0x4a4>
 800b286:	f04f 33ff 	mov.w	r3, #4294967295
 800b28a:	e7ea      	b.n	800b262 <_strtod_l+0x8c2>
 800b28c:	4613      	mov	r3, r2
 800b28e:	e7e8      	b.n	800b262 <_strtod_l+0x8c2>
 800b290:	ea53 030a 	orrs.w	r3, r3, sl
 800b294:	d08c      	beq.n	800b1b0 <_strtod_l+0x810>
 800b296:	9b08      	ldr	r3, [sp, #32]
 800b298:	b1db      	cbz	r3, 800b2d2 <_strtod_l+0x932>
 800b29a:	423b      	tst	r3, r7
 800b29c:	d0ef      	beq.n	800b27e <_strtod_l+0x8de>
 800b29e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2a0:	9a04      	ldr	r2, [sp, #16]
 800b2a2:	4650      	mov	r0, sl
 800b2a4:	4659      	mov	r1, fp
 800b2a6:	b1c3      	cbz	r3, 800b2da <_strtod_l+0x93a>
 800b2a8:	f7ff fb5b 	bl	800a962 <sulp>
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	ec51 0b18 	vmov	r0, r1, d8
 800b2b4:	f7f5 f822 	bl	80002fc <__adddf3>
 800b2b8:	4682      	mov	sl, r0
 800b2ba:	468b      	mov	fp, r1
 800b2bc:	e7df      	b.n	800b27e <_strtod_l+0x8de>
 800b2be:	4013      	ands	r3, r2
 800b2c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b2c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b2c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b2cc:	f04f 3aff 	mov.w	sl, #4294967295
 800b2d0:	e7d5      	b.n	800b27e <_strtod_l+0x8de>
 800b2d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2d4:	ea13 0f0a 	tst.w	r3, sl
 800b2d8:	e7e0      	b.n	800b29c <_strtod_l+0x8fc>
 800b2da:	f7ff fb42 	bl	800a962 <sulp>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	ec51 0b18 	vmov	r0, r1, d8
 800b2e6:	f7f5 f807 	bl	80002f8 <__aeabi_dsub>
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	4682      	mov	sl, r0
 800b2f0:	468b      	mov	fp, r1
 800b2f2:	f7f5 fc21 	bl	8000b38 <__aeabi_dcmpeq>
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	d0c1      	beq.n	800b27e <_strtod_l+0x8de>
 800b2fa:	e611      	b.n	800af20 <_strtod_l+0x580>
 800b2fc:	fffffc02 	.word	0xfffffc02
 800b300:	7ff00000 	.word	0x7ff00000
 800b304:	39500000 	.word	0x39500000
 800b308:	000fffff 	.word	0x000fffff
 800b30c:	7fefffff 	.word	0x7fefffff
 800b310:	0800f1c0 	.word	0x0800f1c0
 800b314:	4631      	mov	r1, r6
 800b316:	4628      	mov	r0, r5
 800b318:	f002 f8fe 	bl	800d518 <__ratio>
 800b31c:	ec59 8b10 	vmov	r8, r9, d0
 800b320:	ee10 0a10 	vmov	r0, s0
 800b324:	2200      	movs	r2, #0
 800b326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b32a:	4649      	mov	r1, r9
 800b32c:	f7f5 fc18 	bl	8000b60 <__aeabi_dcmple>
 800b330:	2800      	cmp	r0, #0
 800b332:	d07a      	beq.n	800b42a <_strtod_l+0xa8a>
 800b334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b336:	2b00      	cmp	r3, #0
 800b338:	d04a      	beq.n	800b3d0 <_strtod_l+0xa30>
 800b33a:	4b95      	ldr	r3, [pc, #596]	; (800b590 <_strtod_l+0xbf0>)
 800b33c:	2200      	movs	r2, #0
 800b33e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b342:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b590 <_strtod_l+0xbf0>
 800b346:	f04f 0800 	mov.w	r8, #0
 800b34a:	4b92      	ldr	r3, [pc, #584]	; (800b594 <_strtod_l+0xbf4>)
 800b34c:	403b      	ands	r3, r7
 800b34e:	930d      	str	r3, [sp, #52]	; 0x34
 800b350:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b352:	4b91      	ldr	r3, [pc, #580]	; (800b598 <_strtod_l+0xbf8>)
 800b354:	429a      	cmp	r2, r3
 800b356:	f040 80b0 	bne.w	800b4ba <_strtod_l+0xb1a>
 800b35a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b35e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b362:	ec4b ab10 	vmov	d0, sl, fp
 800b366:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b36a:	f001 fffd 	bl	800d368 <__ulp>
 800b36e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b372:	ec53 2b10 	vmov	r2, r3, d0
 800b376:	f7f5 f977 	bl	8000668 <__aeabi_dmul>
 800b37a:	4652      	mov	r2, sl
 800b37c:	465b      	mov	r3, fp
 800b37e:	f7f4 ffbd 	bl	80002fc <__adddf3>
 800b382:	460b      	mov	r3, r1
 800b384:	4983      	ldr	r1, [pc, #524]	; (800b594 <_strtod_l+0xbf4>)
 800b386:	4a85      	ldr	r2, [pc, #532]	; (800b59c <_strtod_l+0xbfc>)
 800b388:	4019      	ands	r1, r3
 800b38a:	4291      	cmp	r1, r2
 800b38c:	4682      	mov	sl, r0
 800b38e:	d960      	bls.n	800b452 <_strtod_l+0xab2>
 800b390:	ee18 3a90 	vmov	r3, s17
 800b394:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b398:	4293      	cmp	r3, r2
 800b39a:	d104      	bne.n	800b3a6 <_strtod_l+0xa06>
 800b39c:	ee18 3a10 	vmov	r3, s16
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	f43f ad45 	beq.w	800ae30 <_strtod_l+0x490>
 800b3a6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b5a8 <_strtod_l+0xc08>
 800b3aa:	f04f 3aff 	mov.w	sl, #4294967295
 800b3ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f001 fca7 	bl	800cd04 <_Bfree>
 800b3b6:	9905      	ldr	r1, [sp, #20]
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f001 fca3 	bl	800cd04 <_Bfree>
 800b3be:	4631      	mov	r1, r6
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f001 fc9f 	bl	800cd04 <_Bfree>
 800b3c6:	4629      	mov	r1, r5
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f001 fc9b 	bl	800cd04 <_Bfree>
 800b3ce:	e61a      	b.n	800b006 <_strtod_l+0x666>
 800b3d0:	f1ba 0f00 	cmp.w	sl, #0
 800b3d4:	d11b      	bne.n	800b40e <_strtod_l+0xa6e>
 800b3d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3da:	b9f3      	cbnz	r3, 800b41a <_strtod_l+0xa7a>
 800b3dc:	4b6c      	ldr	r3, [pc, #432]	; (800b590 <_strtod_l+0xbf0>)
 800b3de:	2200      	movs	r2, #0
 800b3e0:	4640      	mov	r0, r8
 800b3e2:	4649      	mov	r1, r9
 800b3e4:	f7f5 fbb2 	bl	8000b4c <__aeabi_dcmplt>
 800b3e8:	b9d0      	cbnz	r0, 800b420 <_strtod_l+0xa80>
 800b3ea:	4640      	mov	r0, r8
 800b3ec:	4649      	mov	r1, r9
 800b3ee:	4b6c      	ldr	r3, [pc, #432]	; (800b5a0 <_strtod_l+0xc00>)
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f7f5 f939 	bl	8000668 <__aeabi_dmul>
 800b3f6:	4680      	mov	r8, r0
 800b3f8:	4689      	mov	r9, r1
 800b3fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b3fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b402:	9315      	str	r3, [sp, #84]	; 0x54
 800b404:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b408:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b40c:	e79d      	b.n	800b34a <_strtod_l+0x9aa>
 800b40e:	f1ba 0f01 	cmp.w	sl, #1
 800b412:	d102      	bne.n	800b41a <_strtod_l+0xa7a>
 800b414:	2f00      	cmp	r7, #0
 800b416:	f43f ad83 	beq.w	800af20 <_strtod_l+0x580>
 800b41a:	4b62      	ldr	r3, [pc, #392]	; (800b5a4 <_strtod_l+0xc04>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	e78e      	b.n	800b33e <_strtod_l+0x99e>
 800b420:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b5a0 <_strtod_l+0xc00>
 800b424:	f04f 0800 	mov.w	r8, #0
 800b428:	e7e7      	b.n	800b3fa <_strtod_l+0xa5a>
 800b42a:	4b5d      	ldr	r3, [pc, #372]	; (800b5a0 <_strtod_l+0xc00>)
 800b42c:	4640      	mov	r0, r8
 800b42e:	4649      	mov	r1, r9
 800b430:	2200      	movs	r2, #0
 800b432:	f7f5 f919 	bl	8000668 <__aeabi_dmul>
 800b436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b438:	4680      	mov	r8, r0
 800b43a:	4689      	mov	r9, r1
 800b43c:	b933      	cbnz	r3, 800b44c <_strtod_l+0xaac>
 800b43e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b442:	900e      	str	r0, [sp, #56]	; 0x38
 800b444:	930f      	str	r3, [sp, #60]	; 0x3c
 800b446:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b44a:	e7dd      	b.n	800b408 <_strtod_l+0xa68>
 800b44c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b450:	e7f9      	b.n	800b446 <_strtod_l+0xaa6>
 800b452:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b456:	9b04      	ldr	r3, [sp, #16]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d1a8      	bne.n	800b3ae <_strtod_l+0xa0e>
 800b45c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b460:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b462:	0d1b      	lsrs	r3, r3, #20
 800b464:	051b      	lsls	r3, r3, #20
 800b466:	429a      	cmp	r2, r3
 800b468:	d1a1      	bne.n	800b3ae <_strtod_l+0xa0e>
 800b46a:	4640      	mov	r0, r8
 800b46c:	4649      	mov	r1, r9
 800b46e:	f7f5 fc5b 	bl	8000d28 <__aeabi_d2lz>
 800b472:	f7f5 f8cb 	bl	800060c <__aeabi_l2d>
 800b476:	4602      	mov	r2, r0
 800b478:	460b      	mov	r3, r1
 800b47a:	4640      	mov	r0, r8
 800b47c:	4649      	mov	r1, r9
 800b47e:	f7f4 ff3b 	bl	80002f8 <__aeabi_dsub>
 800b482:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b484:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b488:	ea43 030a 	orr.w	r3, r3, sl
 800b48c:	4313      	orrs	r3, r2
 800b48e:	4680      	mov	r8, r0
 800b490:	4689      	mov	r9, r1
 800b492:	d055      	beq.n	800b540 <_strtod_l+0xba0>
 800b494:	a336      	add	r3, pc, #216	; (adr r3, 800b570 <_strtod_l+0xbd0>)
 800b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49a:	f7f5 fb57 	bl	8000b4c <__aeabi_dcmplt>
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	f47f acd0 	bne.w	800ae44 <_strtod_l+0x4a4>
 800b4a4:	a334      	add	r3, pc, #208	; (adr r3, 800b578 <_strtod_l+0xbd8>)
 800b4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4aa:	4640      	mov	r0, r8
 800b4ac:	4649      	mov	r1, r9
 800b4ae:	f7f5 fb6b 	bl	8000b88 <__aeabi_dcmpgt>
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	f43f af7b 	beq.w	800b3ae <_strtod_l+0xa0e>
 800b4b8:	e4c4      	b.n	800ae44 <_strtod_l+0x4a4>
 800b4ba:	9b04      	ldr	r3, [sp, #16]
 800b4bc:	b333      	cbz	r3, 800b50c <_strtod_l+0xb6c>
 800b4be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4c0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b4c4:	d822      	bhi.n	800b50c <_strtod_l+0xb6c>
 800b4c6:	a32e      	add	r3, pc, #184	; (adr r3, 800b580 <_strtod_l+0xbe0>)
 800b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4cc:	4640      	mov	r0, r8
 800b4ce:	4649      	mov	r1, r9
 800b4d0:	f7f5 fb46 	bl	8000b60 <__aeabi_dcmple>
 800b4d4:	b1a0      	cbz	r0, 800b500 <_strtod_l+0xb60>
 800b4d6:	4649      	mov	r1, r9
 800b4d8:	4640      	mov	r0, r8
 800b4da:	f7f5 fb9d 	bl	8000c18 <__aeabi_d2uiz>
 800b4de:	2801      	cmp	r0, #1
 800b4e0:	bf38      	it	cc
 800b4e2:	2001      	movcc	r0, #1
 800b4e4:	f7f5 f846 	bl	8000574 <__aeabi_ui2d>
 800b4e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4ea:	4680      	mov	r8, r0
 800b4ec:	4689      	mov	r9, r1
 800b4ee:	bb23      	cbnz	r3, 800b53a <_strtod_l+0xb9a>
 800b4f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4f4:	9010      	str	r0, [sp, #64]	; 0x40
 800b4f6:	9311      	str	r3, [sp, #68]	; 0x44
 800b4f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b4fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b502:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b504:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b508:	1a9b      	subs	r3, r3, r2
 800b50a:	9309      	str	r3, [sp, #36]	; 0x24
 800b50c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b510:	eeb0 0a48 	vmov.f32	s0, s16
 800b514:	eef0 0a68 	vmov.f32	s1, s17
 800b518:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b51c:	f001 ff24 	bl	800d368 <__ulp>
 800b520:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b524:	ec53 2b10 	vmov	r2, r3, d0
 800b528:	f7f5 f89e 	bl	8000668 <__aeabi_dmul>
 800b52c:	ec53 2b18 	vmov	r2, r3, d8
 800b530:	f7f4 fee4 	bl	80002fc <__adddf3>
 800b534:	4682      	mov	sl, r0
 800b536:	468b      	mov	fp, r1
 800b538:	e78d      	b.n	800b456 <_strtod_l+0xab6>
 800b53a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b53e:	e7db      	b.n	800b4f8 <_strtod_l+0xb58>
 800b540:	a311      	add	r3, pc, #68	; (adr r3, 800b588 <_strtod_l+0xbe8>)
 800b542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b546:	f7f5 fb01 	bl	8000b4c <__aeabi_dcmplt>
 800b54a:	e7b2      	b.n	800b4b2 <_strtod_l+0xb12>
 800b54c:	2300      	movs	r3, #0
 800b54e:	930a      	str	r3, [sp, #40]	; 0x28
 800b550:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b552:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b554:	6013      	str	r3, [r2, #0]
 800b556:	f7ff ba6b 	b.w	800aa30 <_strtod_l+0x90>
 800b55a:	2a65      	cmp	r2, #101	; 0x65
 800b55c:	f43f ab5f 	beq.w	800ac1e <_strtod_l+0x27e>
 800b560:	2a45      	cmp	r2, #69	; 0x45
 800b562:	f43f ab5c 	beq.w	800ac1e <_strtod_l+0x27e>
 800b566:	2301      	movs	r3, #1
 800b568:	f7ff bb94 	b.w	800ac94 <_strtod_l+0x2f4>
 800b56c:	f3af 8000 	nop.w
 800b570:	94a03595 	.word	0x94a03595
 800b574:	3fdfffff 	.word	0x3fdfffff
 800b578:	35afe535 	.word	0x35afe535
 800b57c:	3fe00000 	.word	0x3fe00000
 800b580:	ffc00000 	.word	0xffc00000
 800b584:	41dfffff 	.word	0x41dfffff
 800b588:	94a03595 	.word	0x94a03595
 800b58c:	3fcfffff 	.word	0x3fcfffff
 800b590:	3ff00000 	.word	0x3ff00000
 800b594:	7ff00000 	.word	0x7ff00000
 800b598:	7fe00000 	.word	0x7fe00000
 800b59c:	7c9fffff 	.word	0x7c9fffff
 800b5a0:	3fe00000 	.word	0x3fe00000
 800b5a4:	bff00000 	.word	0xbff00000
 800b5a8:	7fefffff 	.word	0x7fefffff

0800b5ac <_strtod_r>:
 800b5ac:	4b01      	ldr	r3, [pc, #4]	; (800b5b4 <_strtod_r+0x8>)
 800b5ae:	f7ff b9f7 	b.w	800a9a0 <_strtod_l>
 800b5b2:	bf00      	nop
 800b5b4:	200000dc 	.word	0x200000dc

0800b5b8 <strtok>:
 800b5b8:	4b16      	ldr	r3, [pc, #88]	; (800b614 <strtok+0x5c>)
 800b5ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5bc:	681e      	ldr	r6, [r3, #0]
 800b5be:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b5c0:	4605      	mov	r5, r0
 800b5c2:	b9fc      	cbnz	r4, 800b604 <strtok+0x4c>
 800b5c4:	2050      	movs	r0, #80	; 0x50
 800b5c6:	9101      	str	r1, [sp, #4]
 800b5c8:	f001 fb34 	bl	800cc34 <malloc>
 800b5cc:	9901      	ldr	r1, [sp, #4]
 800b5ce:	65b0      	str	r0, [r6, #88]	; 0x58
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	b920      	cbnz	r0, 800b5de <strtok+0x26>
 800b5d4:	4b10      	ldr	r3, [pc, #64]	; (800b618 <strtok+0x60>)
 800b5d6:	4811      	ldr	r0, [pc, #68]	; (800b61c <strtok+0x64>)
 800b5d8:	2157      	movs	r1, #87	; 0x57
 800b5da:	f000 f8e9 	bl	800b7b0 <__assert_func>
 800b5de:	e9c0 4400 	strd	r4, r4, [r0]
 800b5e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b5e6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b5ea:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b5ee:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b5f2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b5f6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b5fa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b5fe:	6184      	str	r4, [r0, #24]
 800b600:	7704      	strb	r4, [r0, #28]
 800b602:	6244      	str	r4, [r0, #36]	; 0x24
 800b604:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b606:	2301      	movs	r3, #1
 800b608:	4628      	mov	r0, r5
 800b60a:	b002      	add	sp, #8
 800b60c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b610:	f000 b806 	b.w	800b620 <__strtok_r>
 800b614:	20000074 	.word	0x20000074
 800b618:	0800f1e8 	.word	0x0800f1e8
 800b61c:	0800f1ff 	.word	0x0800f1ff

0800b620 <__strtok_r>:
 800b620:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b622:	b908      	cbnz	r0, 800b628 <__strtok_r+0x8>
 800b624:	6810      	ldr	r0, [r2, #0]
 800b626:	b188      	cbz	r0, 800b64c <__strtok_r+0x2c>
 800b628:	4604      	mov	r4, r0
 800b62a:	4620      	mov	r0, r4
 800b62c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b630:	460f      	mov	r7, r1
 800b632:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b636:	b91e      	cbnz	r6, 800b640 <__strtok_r+0x20>
 800b638:	b965      	cbnz	r5, 800b654 <__strtok_r+0x34>
 800b63a:	6015      	str	r5, [r2, #0]
 800b63c:	4628      	mov	r0, r5
 800b63e:	e005      	b.n	800b64c <__strtok_r+0x2c>
 800b640:	42b5      	cmp	r5, r6
 800b642:	d1f6      	bne.n	800b632 <__strtok_r+0x12>
 800b644:	2b00      	cmp	r3, #0
 800b646:	d1f0      	bne.n	800b62a <__strtok_r+0xa>
 800b648:	6014      	str	r4, [r2, #0]
 800b64a:	7003      	strb	r3, [r0, #0]
 800b64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b64e:	461c      	mov	r4, r3
 800b650:	e00c      	b.n	800b66c <__strtok_r+0x4c>
 800b652:	b915      	cbnz	r5, 800b65a <__strtok_r+0x3a>
 800b654:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b658:	460e      	mov	r6, r1
 800b65a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b65e:	42ab      	cmp	r3, r5
 800b660:	d1f7      	bne.n	800b652 <__strtok_r+0x32>
 800b662:	2b00      	cmp	r3, #0
 800b664:	d0f3      	beq.n	800b64e <__strtok_r+0x2e>
 800b666:	2300      	movs	r3, #0
 800b668:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b66c:	6014      	str	r4, [r2, #0]
 800b66e:	e7ed      	b.n	800b64c <__strtok_r+0x2c>

0800b670 <_strtol_l.constprop.0>:
 800b670:	2b01      	cmp	r3, #1
 800b672:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b676:	d001      	beq.n	800b67c <_strtol_l.constprop.0+0xc>
 800b678:	2b24      	cmp	r3, #36	; 0x24
 800b67a:	d906      	bls.n	800b68a <_strtol_l.constprop.0+0x1a>
 800b67c:	f7fe fa2e 	bl	8009adc <__errno>
 800b680:	2316      	movs	r3, #22
 800b682:	6003      	str	r3, [r0, #0]
 800b684:	2000      	movs	r0, #0
 800b686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b68a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b770 <_strtol_l.constprop.0+0x100>
 800b68e:	460d      	mov	r5, r1
 800b690:	462e      	mov	r6, r5
 800b692:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b696:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b69a:	f017 0708 	ands.w	r7, r7, #8
 800b69e:	d1f7      	bne.n	800b690 <_strtol_l.constprop.0+0x20>
 800b6a0:	2c2d      	cmp	r4, #45	; 0x2d
 800b6a2:	d132      	bne.n	800b70a <_strtol_l.constprop.0+0x9a>
 800b6a4:	782c      	ldrb	r4, [r5, #0]
 800b6a6:	2701      	movs	r7, #1
 800b6a8:	1cb5      	adds	r5, r6, #2
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d05b      	beq.n	800b766 <_strtol_l.constprop.0+0xf6>
 800b6ae:	2b10      	cmp	r3, #16
 800b6b0:	d109      	bne.n	800b6c6 <_strtol_l.constprop.0+0x56>
 800b6b2:	2c30      	cmp	r4, #48	; 0x30
 800b6b4:	d107      	bne.n	800b6c6 <_strtol_l.constprop.0+0x56>
 800b6b6:	782c      	ldrb	r4, [r5, #0]
 800b6b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b6bc:	2c58      	cmp	r4, #88	; 0x58
 800b6be:	d14d      	bne.n	800b75c <_strtol_l.constprop.0+0xec>
 800b6c0:	786c      	ldrb	r4, [r5, #1]
 800b6c2:	2310      	movs	r3, #16
 800b6c4:	3502      	adds	r5, #2
 800b6c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b6ca:	f108 38ff 	add.w	r8, r8, #4294967295
 800b6ce:	f04f 0c00 	mov.w	ip, #0
 800b6d2:	fbb8 f9f3 	udiv	r9, r8, r3
 800b6d6:	4666      	mov	r6, ip
 800b6d8:	fb03 8a19 	mls	sl, r3, r9, r8
 800b6dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b6e0:	f1be 0f09 	cmp.w	lr, #9
 800b6e4:	d816      	bhi.n	800b714 <_strtol_l.constprop.0+0xa4>
 800b6e6:	4674      	mov	r4, lr
 800b6e8:	42a3      	cmp	r3, r4
 800b6ea:	dd24      	ble.n	800b736 <_strtol_l.constprop.0+0xc6>
 800b6ec:	f1bc 0f00 	cmp.w	ip, #0
 800b6f0:	db1e      	blt.n	800b730 <_strtol_l.constprop.0+0xc0>
 800b6f2:	45b1      	cmp	r9, r6
 800b6f4:	d31c      	bcc.n	800b730 <_strtol_l.constprop.0+0xc0>
 800b6f6:	d101      	bne.n	800b6fc <_strtol_l.constprop.0+0x8c>
 800b6f8:	45a2      	cmp	sl, r4
 800b6fa:	db19      	blt.n	800b730 <_strtol_l.constprop.0+0xc0>
 800b6fc:	fb06 4603 	mla	r6, r6, r3, r4
 800b700:	f04f 0c01 	mov.w	ip, #1
 800b704:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b708:	e7e8      	b.n	800b6dc <_strtol_l.constprop.0+0x6c>
 800b70a:	2c2b      	cmp	r4, #43	; 0x2b
 800b70c:	bf04      	itt	eq
 800b70e:	782c      	ldrbeq	r4, [r5, #0]
 800b710:	1cb5      	addeq	r5, r6, #2
 800b712:	e7ca      	b.n	800b6aa <_strtol_l.constprop.0+0x3a>
 800b714:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b718:	f1be 0f19 	cmp.w	lr, #25
 800b71c:	d801      	bhi.n	800b722 <_strtol_l.constprop.0+0xb2>
 800b71e:	3c37      	subs	r4, #55	; 0x37
 800b720:	e7e2      	b.n	800b6e8 <_strtol_l.constprop.0+0x78>
 800b722:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b726:	f1be 0f19 	cmp.w	lr, #25
 800b72a:	d804      	bhi.n	800b736 <_strtol_l.constprop.0+0xc6>
 800b72c:	3c57      	subs	r4, #87	; 0x57
 800b72e:	e7db      	b.n	800b6e8 <_strtol_l.constprop.0+0x78>
 800b730:	f04f 3cff 	mov.w	ip, #4294967295
 800b734:	e7e6      	b.n	800b704 <_strtol_l.constprop.0+0x94>
 800b736:	f1bc 0f00 	cmp.w	ip, #0
 800b73a:	da05      	bge.n	800b748 <_strtol_l.constprop.0+0xd8>
 800b73c:	2322      	movs	r3, #34	; 0x22
 800b73e:	6003      	str	r3, [r0, #0]
 800b740:	4646      	mov	r6, r8
 800b742:	b942      	cbnz	r2, 800b756 <_strtol_l.constprop.0+0xe6>
 800b744:	4630      	mov	r0, r6
 800b746:	e79e      	b.n	800b686 <_strtol_l.constprop.0+0x16>
 800b748:	b107      	cbz	r7, 800b74c <_strtol_l.constprop.0+0xdc>
 800b74a:	4276      	negs	r6, r6
 800b74c:	2a00      	cmp	r2, #0
 800b74e:	d0f9      	beq.n	800b744 <_strtol_l.constprop.0+0xd4>
 800b750:	f1bc 0f00 	cmp.w	ip, #0
 800b754:	d000      	beq.n	800b758 <_strtol_l.constprop.0+0xe8>
 800b756:	1e69      	subs	r1, r5, #1
 800b758:	6011      	str	r1, [r2, #0]
 800b75a:	e7f3      	b.n	800b744 <_strtol_l.constprop.0+0xd4>
 800b75c:	2430      	movs	r4, #48	; 0x30
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1b1      	bne.n	800b6c6 <_strtol_l.constprop.0+0x56>
 800b762:	2308      	movs	r3, #8
 800b764:	e7af      	b.n	800b6c6 <_strtol_l.constprop.0+0x56>
 800b766:	2c30      	cmp	r4, #48	; 0x30
 800b768:	d0a5      	beq.n	800b6b6 <_strtol_l.constprop.0+0x46>
 800b76a:	230a      	movs	r3, #10
 800b76c:	e7ab      	b.n	800b6c6 <_strtol_l.constprop.0+0x56>
 800b76e:	bf00      	nop
 800b770:	0800f299 	.word	0x0800f299

0800b774 <_strtol_r>:
 800b774:	f7ff bf7c 	b.w	800b670 <_strtol_l.constprop.0>

0800b778 <strtol>:
 800b778:	4613      	mov	r3, r2
 800b77a:	460a      	mov	r2, r1
 800b77c:	4601      	mov	r1, r0
 800b77e:	4802      	ldr	r0, [pc, #8]	; (800b788 <strtol+0x10>)
 800b780:	6800      	ldr	r0, [r0, #0]
 800b782:	f7ff bf75 	b.w	800b670 <_strtol_l.constprop.0>
 800b786:	bf00      	nop
 800b788:	20000074 	.word	0x20000074

0800b78c <_write_r>:
 800b78c:	b538      	push	{r3, r4, r5, lr}
 800b78e:	4d07      	ldr	r5, [pc, #28]	; (800b7ac <_write_r+0x20>)
 800b790:	4604      	mov	r4, r0
 800b792:	4608      	mov	r0, r1
 800b794:	4611      	mov	r1, r2
 800b796:	2200      	movs	r2, #0
 800b798:	602a      	str	r2, [r5, #0]
 800b79a:	461a      	mov	r2, r3
 800b79c:	f7f6 fb17 	bl	8001dce <_write>
 800b7a0:	1c43      	adds	r3, r0, #1
 800b7a2:	d102      	bne.n	800b7aa <_write_r+0x1e>
 800b7a4:	682b      	ldr	r3, [r5, #0]
 800b7a6:	b103      	cbz	r3, 800b7aa <_write_r+0x1e>
 800b7a8:	6023      	str	r3, [r4, #0]
 800b7aa:	bd38      	pop	{r3, r4, r5, pc}
 800b7ac:	20000518 	.word	0x20000518

0800b7b0 <__assert_func>:
 800b7b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7b2:	4614      	mov	r4, r2
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	4b09      	ldr	r3, [pc, #36]	; (800b7dc <__assert_func+0x2c>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4605      	mov	r5, r0
 800b7bc:	68d8      	ldr	r0, [r3, #12]
 800b7be:	b14c      	cbz	r4, 800b7d4 <__assert_func+0x24>
 800b7c0:	4b07      	ldr	r3, [pc, #28]	; (800b7e0 <__assert_func+0x30>)
 800b7c2:	9100      	str	r1, [sp, #0]
 800b7c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7c8:	4906      	ldr	r1, [pc, #24]	; (800b7e4 <__assert_func+0x34>)
 800b7ca:	462b      	mov	r3, r5
 800b7cc:	f000 fe9a 	bl	800c504 <fiprintf>
 800b7d0:	f002 ffde 	bl	800e790 <abort>
 800b7d4:	4b04      	ldr	r3, [pc, #16]	; (800b7e8 <__assert_func+0x38>)
 800b7d6:	461c      	mov	r4, r3
 800b7d8:	e7f3      	b.n	800b7c2 <__assert_func+0x12>
 800b7da:	bf00      	nop
 800b7dc:	20000074 	.word	0x20000074
 800b7e0:	0800f25c 	.word	0x0800f25c
 800b7e4:	0800f269 	.word	0x0800f269
 800b7e8:	0800f297 	.word	0x0800f297

0800b7ec <_close_r>:
 800b7ec:	b538      	push	{r3, r4, r5, lr}
 800b7ee:	4d06      	ldr	r5, [pc, #24]	; (800b808 <_close_r+0x1c>)
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	4608      	mov	r0, r1
 800b7f6:	602b      	str	r3, [r5, #0]
 800b7f8:	f7f6 fb05 	bl	8001e06 <_close>
 800b7fc:	1c43      	adds	r3, r0, #1
 800b7fe:	d102      	bne.n	800b806 <_close_r+0x1a>
 800b800:	682b      	ldr	r3, [r5, #0]
 800b802:	b103      	cbz	r3, 800b806 <_close_r+0x1a>
 800b804:	6023      	str	r3, [r4, #0]
 800b806:	bd38      	pop	{r3, r4, r5, pc}
 800b808:	20000518 	.word	0x20000518

0800b80c <quorem>:
 800b80c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b810:	6903      	ldr	r3, [r0, #16]
 800b812:	690c      	ldr	r4, [r1, #16]
 800b814:	42a3      	cmp	r3, r4
 800b816:	4607      	mov	r7, r0
 800b818:	f2c0 8081 	blt.w	800b91e <quorem+0x112>
 800b81c:	3c01      	subs	r4, #1
 800b81e:	f101 0814 	add.w	r8, r1, #20
 800b822:	f100 0514 	add.w	r5, r0, #20
 800b826:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b82a:	9301      	str	r3, [sp, #4]
 800b82c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b830:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b834:	3301      	adds	r3, #1
 800b836:	429a      	cmp	r2, r3
 800b838:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b83c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b840:	fbb2 f6f3 	udiv	r6, r2, r3
 800b844:	d331      	bcc.n	800b8aa <quorem+0x9e>
 800b846:	f04f 0e00 	mov.w	lr, #0
 800b84a:	4640      	mov	r0, r8
 800b84c:	46ac      	mov	ip, r5
 800b84e:	46f2      	mov	sl, lr
 800b850:	f850 2b04 	ldr.w	r2, [r0], #4
 800b854:	b293      	uxth	r3, r2
 800b856:	fb06 e303 	mla	r3, r6, r3, lr
 800b85a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b85e:	b29b      	uxth	r3, r3
 800b860:	ebaa 0303 	sub.w	r3, sl, r3
 800b864:	f8dc a000 	ldr.w	sl, [ip]
 800b868:	0c12      	lsrs	r2, r2, #16
 800b86a:	fa13 f38a 	uxtah	r3, r3, sl
 800b86e:	fb06 e202 	mla	r2, r6, r2, lr
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	9b00      	ldr	r3, [sp, #0]
 800b876:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b87a:	b292      	uxth	r2, r2
 800b87c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b880:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b884:	f8bd 3000 	ldrh.w	r3, [sp]
 800b888:	4581      	cmp	r9, r0
 800b88a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b88e:	f84c 3b04 	str.w	r3, [ip], #4
 800b892:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b896:	d2db      	bcs.n	800b850 <quorem+0x44>
 800b898:	f855 300b 	ldr.w	r3, [r5, fp]
 800b89c:	b92b      	cbnz	r3, 800b8aa <quorem+0x9e>
 800b89e:	9b01      	ldr	r3, [sp, #4]
 800b8a0:	3b04      	subs	r3, #4
 800b8a2:	429d      	cmp	r5, r3
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	d32e      	bcc.n	800b906 <quorem+0xfa>
 800b8a8:	613c      	str	r4, [r7, #16]
 800b8aa:	4638      	mov	r0, r7
 800b8ac:	f001 fcb6 	bl	800d21c <__mcmp>
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	db24      	blt.n	800b8fe <quorem+0xf2>
 800b8b4:	3601      	adds	r6, #1
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	f04f 0c00 	mov.w	ip, #0
 800b8bc:	f858 2b04 	ldr.w	r2, [r8], #4
 800b8c0:	f8d0 e000 	ldr.w	lr, [r0]
 800b8c4:	b293      	uxth	r3, r2
 800b8c6:	ebac 0303 	sub.w	r3, ip, r3
 800b8ca:	0c12      	lsrs	r2, r2, #16
 800b8cc:	fa13 f38e 	uxtah	r3, r3, lr
 800b8d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b8d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8de:	45c1      	cmp	r9, r8
 800b8e0:	f840 3b04 	str.w	r3, [r0], #4
 800b8e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b8e8:	d2e8      	bcs.n	800b8bc <quorem+0xb0>
 800b8ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8f2:	b922      	cbnz	r2, 800b8fe <quorem+0xf2>
 800b8f4:	3b04      	subs	r3, #4
 800b8f6:	429d      	cmp	r5, r3
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	d30a      	bcc.n	800b912 <quorem+0x106>
 800b8fc:	613c      	str	r4, [r7, #16]
 800b8fe:	4630      	mov	r0, r6
 800b900:	b003      	add	sp, #12
 800b902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b906:	6812      	ldr	r2, [r2, #0]
 800b908:	3b04      	subs	r3, #4
 800b90a:	2a00      	cmp	r2, #0
 800b90c:	d1cc      	bne.n	800b8a8 <quorem+0x9c>
 800b90e:	3c01      	subs	r4, #1
 800b910:	e7c7      	b.n	800b8a2 <quorem+0x96>
 800b912:	6812      	ldr	r2, [r2, #0]
 800b914:	3b04      	subs	r3, #4
 800b916:	2a00      	cmp	r2, #0
 800b918:	d1f0      	bne.n	800b8fc <quorem+0xf0>
 800b91a:	3c01      	subs	r4, #1
 800b91c:	e7eb      	b.n	800b8f6 <quorem+0xea>
 800b91e:	2000      	movs	r0, #0
 800b920:	e7ee      	b.n	800b900 <quorem+0xf4>
 800b922:	0000      	movs	r0, r0
 800b924:	0000      	movs	r0, r0
	...

0800b928 <_dtoa_r>:
 800b928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b92c:	ed2d 8b04 	vpush	{d8-d9}
 800b930:	ec57 6b10 	vmov	r6, r7, d0
 800b934:	b093      	sub	sp, #76	; 0x4c
 800b936:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b938:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b93c:	9106      	str	r1, [sp, #24]
 800b93e:	ee10 aa10 	vmov	sl, s0
 800b942:	4604      	mov	r4, r0
 800b944:	9209      	str	r2, [sp, #36]	; 0x24
 800b946:	930c      	str	r3, [sp, #48]	; 0x30
 800b948:	46bb      	mov	fp, r7
 800b94a:	b975      	cbnz	r5, 800b96a <_dtoa_r+0x42>
 800b94c:	2010      	movs	r0, #16
 800b94e:	f001 f971 	bl	800cc34 <malloc>
 800b952:	4602      	mov	r2, r0
 800b954:	6260      	str	r0, [r4, #36]	; 0x24
 800b956:	b920      	cbnz	r0, 800b962 <_dtoa_r+0x3a>
 800b958:	4ba7      	ldr	r3, [pc, #668]	; (800bbf8 <_dtoa_r+0x2d0>)
 800b95a:	21ea      	movs	r1, #234	; 0xea
 800b95c:	48a7      	ldr	r0, [pc, #668]	; (800bbfc <_dtoa_r+0x2d4>)
 800b95e:	f7ff ff27 	bl	800b7b0 <__assert_func>
 800b962:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b966:	6005      	str	r5, [r0, #0]
 800b968:	60c5      	str	r5, [r0, #12]
 800b96a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b96c:	6819      	ldr	r1, [r3, #0]
 800b96e:	b151      	cbz	r1, 800b986 <_dtoa_r+0x5e>
 800b970:	685a      	ldr	r2, [r3, #4]
 800b972:	604a      	str	r2, [r1, #4]
 800b974:	2301      	movs	r3, #1
 800b976:	4093      	lsls	r3, r2
 800b978:	608b      	str	r3, [r1, #8]
 800b97a:	4620      	mov	r0, r4
 800b97c:	f001 f9c2 	bl	800cd04 <_Bfree>
 800b980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b982:	2200      	movs	r2, #0
 800b984:	601a      	str	r2, [r3, #0]
 800b986:	1e3b      	subs	r3, r7, #0
 800b988:	bfaa      	itet	ge
 800b98a:	2300      	movge	r3, #0
 800b98c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b990:	f8c8 3000 	strge.w	r3, [r8]
 800b994:	4b9a      	ldr	r3, [pc, #616]	; (800bc00 <_dtoa_r+0x2d8>)
 800b996:	bfbc      	itt	lt
 800b998:	2201      	movlt	r2, #1
 800b99a:	f8c8 2000 	strlt.w	r2, [r8]
 800b99e:	ea33 030b 	bics.w	r3, r3, fp
 800b9a2:	d11b      	bne.n	800b9dc <_dtoa_r+0xb4>
 800b9a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9a6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b9aa:	6013      	str	r3, [r2, #0]
 800b9ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9b0:	4333      	orrs	r3, r6
 800b9b2:	f000 8592 	beq.w	800c4da <_dtoa_r+0xbb2>
 800b9b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9b8:	b963      	cbnz	r3, 800b9d4 <_dtoa_r+0xac>
 800b9ba:	4b92      	ldr	r3, [pc, #584]	; (800bc04 <_dtoa_r+0x2dc>)
 800b9bc:	e022      	b.n	800ba04 <_dtoa_r+0xdc>
 800b9be:	4b92      	ldr	r3, [pc, #584]	; (800bc08 <_dtoa_r+0x2e0>)
 800b9c0:	9301      	str	r3, [sp, #4]
 800b9c2:	3308      	adds	r3, #8
 800b9c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9c6:	6013      	str	r3, [r2, #0]
 800b9c8:	9801      	ldr	r0, [sp, #4]
 800b9ca:	b013      	add	sp, #76	; 0x4c
 800b9cc:	ecbd 8b04 	vpop	{d8-d9}
 800b9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d4:	4b8b      	ldr	r3, [pc, #556]	; (800bc04 <_dtoa_r+0x2dc>)
 800b9d6:	9301      	str	r3, [sp, #4]
 800b9d8:	3303      	adds	r3, #3
 800b9da:	e7f3      	b.n	800b9c4 <_dtoa_r+0x9c>
 800b9dc:	2200      	movs	r2, #0
 800b9de:	2300      	movs	r3, #0
 800b9e0:	4650      	mov	r0, sl
 800b9e2:	4659      	mov	r1, fp
 800b9e4:	f7f5 f8a8 	bl	8000b38 <__aeabi_dcmpeq>
 800b9e8:	ec4b ab19 	vmov	d9, sl, fp
 800b9ec:	4680      	mov	r8, r0
 800b9ee:	b158      	cbz	r0, 800ba08 <_dtoa_r+0xe0>
 800b9f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	6013      	str	r3, [r2, #0]
 800b9f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 856b 	beq.w	800c4d4 <_dtoa_r+0xbac>
 800b9fe:	4883      	ldr	r0, [pc, #524]	; (800bc0c <_dtoa_r+0x2e4>)
 800ba00:	6018      	str	r0, [r3, #0]
 800ba02:	1e43      	subs	r3, r0, #1
 800ba04:	9301      	str	r3, [sp, #4]
 800ba06:	e7df      	b.n	800b9c8 <_dtoa_r+0xa0>
 800ba08:	ec4b ab10 	vmov	d0, sl, fp
 800ba0c:	aa10      	add	r2, sp, #64	; 0x40
 800ba0e:	a911      	add	r1, sp, #68	; 0x44
 800ba10:	4620      	mov	r0, r4
 800ba12:	f001 fd25 	bl	800d460 <__d2b>
 800ba16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ba1a:	ee08 0a10 	vmov	s16, r0
 800ba1e:	2d00      	cmp	r5, #0
 800ba20:	f000 8084 	beq.w	800bb2c <_dtoa_r+0x204>
 800ba24:	ee19 3a90 	vmov	r3, s19
 800ba28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ba30:	4656      	mov	r6, sl
 800ba32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ba36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ba3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ba3e:	4b74      	ldr	r3, [pc, #464]	; (800bc10 <_dtoa_r+0x2e8>)
 800ba40:	2200      	movs	r2, #0
 800ba42:	4630      	mov	r0, r6
 800ba44:	4639      	mov	r1, r7
 800ba46:	f7f4 fc57 	bl	80002f8 <__aeabi_dsub>
 800ba4a:	a365      	add	r3, pc, #404	; (adr r3, 800bbe0 <_dtoa_r+0x2b8>)
 800ba4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba50:	f7f4 fe0a 	bl	8000668 <__aeabi_dmul>
 800ba54:	a364      	add	r3, pc, #400	; (adr r3, 800bbe8 <_dtoa_r+0x2c0>)
 800ba56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5a:	f7f4 fc4f 	bl	80002fc <__adddf3>
 800ba5e:	4606      	mov	r6, r0
 800ba60:	4628      	mov	r0, r5
 800ba62:	460f      	mov	r7, r1
 800ba64:	f7f4 fd96 	bl	8000594 <__aeabi_i2d>
 800ba68:	a361      	add	r3, pc, #388	; (adr r3, 800bbf0 <_dtoa_r+0x2c8>)
 800ba6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6e:	f7f4 fdfb 	bl	8000668 <__aeabi_dmul>
 800ba72:	4602      	mov	r2, r0
 800ba74:	460b      	mov	r3, r1
 800ba76:	4630      	mov	r0, r6
 800ba78:	4639      	mov	r1, r7
 800ba7a:	f7f4 fc3f 	bl	80002fc <__adddf3>
 800ba7e:	4606      	mov	r6, r0
 800ba80:	460f      	mov	r7, r1
 800ba82:	f7f5 f8a1 	bl	8000bc8 <__aeabi_d2iz>
 800ba86:	2200      	movs	r2, #0
 800ba88:	9000      	str	r0, [sp, #0]
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	4630      	mov	r0, r6
 800ba8e:	4639      	mov	r1, r7
 800ba90:	f7f5 f85c 	bl	8000b4c <__aeabi_dcmplt>
 800ba94:	b150      	cbz	r0, 800baac <_dtoa_r+0x184>
 800ba96:	9800      	ldr	r0, [sp, #0]
 800ba98:	f7f4 fd7c 	bl	8000594 <__aeabi_i2d>
 800ba9c:	4632      	mov	r2, r6
 800ba9e:	463b      	mov	r3, r7
 800baa0:	f7f5 f84a 	bl	8000b38 <__aeabi_dcmpeq>
 800baa4:	b910      	cbnz	r0, 800baac <_dtoa_r+0x184>
 800baa6:	9b00      	ldr	r3, [sp, #0]
 800baa8:	3b01      	subs	r3, #1
 800baaa:	9300      	str	r3, [sp, #0]
 800baac:	9b00      	ldr	r3, [sp, #0]
 800baae:	2b16      	cmp	r3, #22
 800bab0:	d85a      	bhi.n	800bb68 <_dtoa_r+0x240>
 800bab2:	9a00      	ldr	r2, [sp, #0]
 800bab4:	4b57      	ldr	r3, [pc, #348]	; (800bc14 <_dtoa_r+0x2ec>)
 800bab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babe:	ec51 0b19 	vmov	r0, r1, d9
 800bac2:	f7f5 f843 	bl	8000b4c <__aeabi_dcmplt>
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d050      	beq.n	800bb6c <_dtoa_r+0x244>
 800baca:	9b00      	ldr	r3, [sp, #0]
 800bacc:	3b01      	subs	r3, #1
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	2300      	movs	r3, #0
 800bad2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bad6:	1b5d      	subs	r5, r3, r5
 800bad8:	1e6b      	subs	r3, r5, #1
 800bada:	9305      	str	r3, [sp, #20]
 800badc:	bf45      	ittet	mi
 800bade:	f1c5 0301 	rsbmi	r3, r5, #1
 800bae2:	9304      	strmi	r3, [sp, #16]
 800bae4:	2300      	movpl	r3, #0
 800bae6:	2300      	movmi	r3, #0
 800bae8:	bf4c      	ite	mi
 800baea:	9305      	strmi	r3, [sp, #20]
 800baec:	9304      	strpl	r3, [sp, #16]
 800baee:	9b00      	ldr	r3, [sp, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	db3d      	blt.n	800bb70 <_dtoa_r+0x248>
 800baf4:	9b05      	ldr	r3, [sp, #20]
 800baf6:	9a00      	ldr	r2, [sp, #0]
 800baf8:	920a      	str	r2, [sp, #40]	; 0x28
 800bafa:	4413      	add	r3, r2
 800bafc:	9305      	str	r3, [sp, #20]
 800bafe:	2300      	movs	r3, #0
 800bb00:	9307      	str	r3, [sp, #28]
 800bb02:	9b06      	ldr	r3, [sp, #24]
 800bb04:	2b09      	cmp	r3, #9
 800bb06:	f200 8089 	bhi.w	800bc1c <_dtoa_r+0x2f4>
 800bb0a:	2b05      	cmp	r3, #5
 800bb0c:	bfc4      	itt	gt
 800bb0e:	3b04      	subgt	r3, #4
 800bb10:	9306      	strgt	r3, [sp, #24]
 800bb12:	9b06      	ldr	r3, [sp, #24]
 800bb14:	f1a3 0302 	sub.w	r3, r3, #2
 800bb18:	bfcc      	ite	gt
 800bb1a:	2500      	movgt	r5, #0
 800bb1c:	2501      	movle	r5, #1
 800bb1e:	2b03      	cmp	r3, #3
 800bb20:	f200 8087 	bhi.w	800bc32 <_dtoa_r+0x30a>
 800bb24:	e8df f003 	tbb	[pc, r3]
 800bb28:	59383a2d 	.word	0x59383a2d
 800bb2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bb30:	441d      	add	r5, r3
 800bb32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bb36:	2b20      	cmp	r3, #32
 800bb38:	bfc1      	itttt	gt
 800bb3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bb3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bb42:	fa0b f303 	lslgt.w	r3, fp, r3
 800bb46:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bb4a:	bfda      	itte	le
 800bb4c:	f1c3 0320 	rsble	r3, r3, #32
 800bb50:	fa06 f003 	lslle.w	r0, r6, r3
 800bb54:	4318      	orrgt	r0, r3
 800bb56:	f7f4 fd0d 	bl	8000574 <__aeabi_ui2d>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	4606      	mov	r6, r0
 800bb5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bb62:	3d01      	subs	r5, #1
 800bb64:	930e      	str	r3, [sp, #56]	; 0x38
 800bb66:	e76a      	b.n	800ba3e <_dtoa_r+0x116>
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e7b2      	b.n	800bad2 <_dtoa_r+0x1aa>
 800bb6c:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb6e:	e7b1      	b.n	800bad4 <_dtoa_r+0x1ac>
 800bb70:	9b04      	ldr	r3, [sp, #16]
 800bb72:	9a00      	ldr	r2, [sp, #0]
 800bb74:	1a9b      	subs	r3, r3, r2
 800bb76:	9304      	str	r3, [sp, #16]
 800bb78:	4253      	negs	r3, r2
 800bb7a:	9307      	str	r3, [sp, #28]
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	930a      	str	r3, [sp, #40]	; 0x28
 800bb80:	e7bf      	b.n	800bb02 <_dtoa_r+0x1da>
 800bb82:	2300      	movs	r3, #0
 800bb84:	9308      	str	r3, [sp, #32]
 800bb86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	dc55      	bgt.n	800bc38 <_dtoa_r+0x310>
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb92:	461a      	mov	r2, r3
 800bb94:	9209      	str	r2, [sp, #36]	; 0x24
 800bb96:	e00c      	b.n	800bbb2 <_dtoa_r+0x28a>
 800bb98:	2301      	movs	r3, #1
 800bb9a:	e7f3      	b.n	800bb84 <_dtoa_r+0x25c>
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bba0:	9308      	str	r3, [sp, #32]
 800bba2:	9b00      	ldr	r3, [sp, #0]
 800bba4:	4413      	add	r3, r2
 800bba6:	9302      	str	r3, [sp, #8]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	9303      	str	r3, [sp, #12]
 800bbae:	bfb8      	it	lt
 800bbb0:	2301      	movlt	r3, #1
 800bbb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	6042      	str	r2, [r0, #4]
 800bbb8:	2204      	movs	r2, #4
 800bbba:	f102 0614 	add.w	r6, r2, #20
 800bbbe:	429e      	cmp	r6, r3
 800bbc0:	6841      	ldr	r1, [r0, #4]
 800bbc2:	d93d      	bls.n	800bc40 <_dtoa_r+0x318>
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f001 f85d 	bl	800cc84 <_Balloc>
 800bbca:	9001      	str	r0, [sp, #4]
 800bbcc:	2800      	cmp	r0, #0
 800bbce:	d13b      	bne.n	800bc48 <_dtoa_r+0x320>
 800bbd0:	4b11      	ldr	r3, [pc, #68]	; (800bc18 <_dtoa_r+0x2f0>)
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bbd8:	e6c0      	b.n	800b95c <_dtoa_r+0x34>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e7df      	b.n	800bb9e <_dtoa_r+0x276>
 800bbde:	bf00      	nop
 800bbe0:	636f4361 	.word	0x636f4361
 800bbe4:	3fd287a7 	.word	0x3fd287a7
 800bbe8:	8b60c8b3 	.word	0x8b60c8b3
 800bbec:	3fc68a28 	.word	0x3fc68a28
 800bbf0:	509f79fb 	.word	0x509f79fb
 800bbf4:	3fd34413 	.word	0x3fd34413
 800bbf8:	0800f1e8 	.word	0x0800f1e8
 800bbfc:	0800f3a6 	.word	0x0800f3a6
 800bc00:	7ff00000 	.word	0x7ff00000
 800bc04:	0800f3a2 	.word	0x0800f3a2
 800bc08:	0800f399 	.word	0x0800f399
 800bc0c:	0800f5fa 	.word	0x0800f5fa
 800bc10:	3ff80000 	.word	0x3ff80000
 800bc14:	0800f510 	.word	0x0800f510
 800bc18:	0800f401 	.word	0x0800f401
 800bc1c:	2501      	movs	r5, #1
 800bc1e:	2300      	movs	r3, #0
 800bc20:	9306      	str	r3, [sp, #24]
 800bc22:	9508      	str	r5, [sp, #32]
 800bc24:	f04f 33ff 	mov.w	r3, #4294967295
 800bc28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	2312      	movs	r3, #18
 800bc30:	e7b0      	b.n	800bb94 <_dtoa_r+0x26c>
 800bc32:	2301      	movs	r3, #1
 800bc34:	9308      	str	r3, [sp, #32]
 800bc36:	e7f5      	b.n	800bc24 <_dtoa_r+0x2fc>
 800bc38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bc3e:	e7b8      	b.n	800bbb2 <_dtoa_r+0x28a>
 800bc40:	3101      	adds	r1, #1
 800bc42:	6041      	str	r1, [r0, #4]
 800bc44:	0052      	lsls	r2, r2, #1
 800bc46:	e7b8      	b.n	800bbba <_dtoa_r+0x292>
 800bc48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc4a:	9a01      	ldr	r2, [sp, #4]
 800bc4c:	601a      	str	r2, [r3, #0]
 800bc4e:	9b03      	ldr	r3, [sp, #12]
 800bc50:	2b0e      	cmp	r3, #14
 800bc52:	f200 809d 	bhi.w	800bd90 <_dtoa_r+0x468>
 800bc56:	2d00      	cmp	r5, #0
 800bc58:	f000 809a 	beq.w	800bd90 <_dtoa_r+0x468>
 800bc5c:	9b00      	ldr	r3, [sp, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	dd32      	ble.n	800bcc8 <_dtoa_r+0x3a0>
 800bc62:	4ab7      	ldr	r2, [pc, #732]	; (800bf40 <_dtoa_r+0x618>)
 800bc64:	f003 030f 	and.w	r3, r3, #15
 800bc68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bc6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc70:	9b00      	ldr	r3, [sp, #0]
 800bc72:	05d8      	lsls	r0, r3, #23
 800bc74:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bc78:	d516      	bpl.n	800bca8 <_dtoa_r+0x380>
 800bc7a:	4bb2      	ldr	r3, [pc, #712]	; (800bf44 <_dtoa_r+0x61c>)
 800bc7c:	ec51 0b19 	vmov	r0, r1, d9
 800bc80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc84:	f7f4 fe1a 	bl	80008bc <__aeabi_ddiv>
 800bc88:	f007 070f 	and.w	r7, r7, #15
 800bc8c:	4682      	mov	sl, r0
 800bc8e:	468b      	mov	fp, r1
 800bc90:	2503      	movs	r5, #3
 800bc92:	4eac      	ldr	r6, [pc, #688]	; (800bf44 <_dtoa_r+0x61c>)
 800bc94:	b957      	cbnz	r7, 800bcac <_dtoa_r+0x384>
 800bc96:	4642      	mov	r2, r8
 800bc98:	464b      	mov	r3, r9
 800bc9a:	4650      	mov	r0, sl
 800bc9c:	4659      	mov	r1, fp
 800bc9e:	f7f4 fe0d 	bl	80008bc <__aeabi_ddiv>
 800bca2:	4682      	mov	sl, r0
 800bca4:	468b      	mov	fp, r1
 800bca6:	e028      	b.n	800bcfa <_dtoa_r+0x3d2>
 800bca8:	2502      	movs	r5, #2
 800bcaa:	e7f2      	b.n	800bc92 <_dtoa_r+0x36a>
 800bcac:	07f9      	lsls	r1, r7, #31
 800bcae:	d508      	bpl.n	800bcc2 <_dtoa_r+0x39a>
 800bcb0:	4640      	mov	r0, r8
 800bcb2:	4649      	mov	r1, r9
 800bcb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bcb8:	f7f4 fcd6 	bl	8000668 <__aeabi_dmul>
 800bcbc:	3501      	adds	r5, #1
 800bcbe:	4680      	mov	r8, r0
 800bcc0:	4689      	mov	r9, r1
 800bcc2:	107f      	asrs	r7, r7, #1
 800bcc4:	3608      	adds	r6, #8
 800bcc6:	e7e5      	b.n	800bc94 <_dtoa_r+0x36c>
 800bcc8:	f000 809b 	beq.w	800be02 <_dtoa_r+0x4da>
 800bccc:	9b00      	ldr	r3, [sp, #0]
 800bcce:	4f9d      	ldr	r7, [pc, #628]	; (800bf44 <_dtoa_r+0x61c>)
 800bcd0:	425e      	negs	r6, r3
 800bcd2:	4b9b      	ldr	r3, [pc, #620]	; (800bf40 <_dtoa_r+0x618>)
 800bcd4:	f006 020f 	and.w	r2, r6, #15
 800bcd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce0:	ec51 0b19 	vmov	r0, r1, d9
 800bce4:	f7f4 fcc0 	bl	8000668 <__aeabi_dmul>
 800bce8:	1136      	asrs	r6, r6, #4
 800bcea:	4682      	mov	sl, r0
 800bcec:	468b      	mov	fp, r1
 800bcee:	2300      	movs	r3, #0
 800bcf0:	2502      	movs	r5, #2
 800bcf2:	2e00      	cmp	r6, #0
 800bcf4:	d17a      	bne.n	800bdec <_dtoa_r+0x4c4>
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d1d3      	bne.n	800bca2 <_dtoa_r+0x37a>
 800bcfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f000 8082 	beq.w	800be06 <_dtoa_r+0x4de>
 800bd02:	4b91      	ldr	r3, [pc, #580]	; (800bf48 <_dtoa_r+0x620>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	4650      	mov	r0, sl
 800bd08:	4659      	mov	r1, fp
 800bd0a:	f7f4 ff1f 	bl	8000b4c <__aeabi_dcmplt>
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	d079      	beq.n	800be06 <_dtoa_r+0x4de>
 800bd12:	9b03      	ldr	r3, [sp, #12]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d076      	beq.n	800be06 <_dtoa_r+0x4de>
 800bd18:	9b02      	ldr	r3, [sp, #8]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	dd36      	ble.n	800bd8c <_dtoa_r+0x464>
 800bd1e:	9b00      	ldr	r3, [sp, #0]
 800bd20:	4650      	mov	r0, sl
 800bd22:	4659      	mov	r1, fp
 800bd24:	1e5f      	subs	r7, r3, #1
 800bd26:	2200      	movs	r2, #0
 800bd28:	4b88      	ldr	r3, [pc, #544]	; (800bf4c <_dtoa_r+0x624>)
 800bd2a:	f7f4 fc9d 	bl	8000668 <__aeabi_dmul>
 800bd2e:	9e02      	ldr	r6, [sp, #8]
 800bd30:	4682      	mov	sl, r0
 800bd32:	468b      	mov	fp, r1
 800bd34:	3501      	adds	r5, #1
 800bd36:	4628      	mov	r0, r5
 800bd38:	f7f4 fc2c 	bl	8000594 <__aeabi_i2d>
 800bd3c:	4652      	mov	r2, sl
 800bd3e:	465b      	mov	r3, fp
 800bd40:	f7f4 fc92 	bl	8000668 <__aeabi_dmul>
 800bd44:	4b82      	ldr	r3, [pc, #520]	; (800bf50 <_dtoa_r+0x628>)
 800bd46:	2200      	movs	r2, #0
 800bd48:	f7f4 fad8 	bl	80002fc <__adddf3>
 800bd4c:	46d0      	mov	r8, sl
 800bd4e:	46d9      	mov	r9, fp
 800bd50:	4682      	mov	sl, r0
 800bd52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bd56:	2e00      	cmp	r6, #0
 800bd58:	d158      	bne.n	800be0c <_dtoa_r+0x4e4>
 800bd5a:	4b7e      	ldr	r3, [pc, #504]	; (800bf54 <_dtoa_r+0x62c>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	4640      	mov	r0, r8
 800bd60:	4649      	mov	r1, r9
 800bd62:	f7f4 fac9 	bl	80002f8 <__aeabi_dsub>
 800bd66:	4652      	mov	r2, sl
 800bd68:	465b      	mov	r3, fp
 800bd6a:	4680      	mov	r8, r0
 800bd6c:	4689      	mov	r9, r1
 800bd6e:	f7f4 ff0b 	bl	8000b88 <__aeabi_dcmpgt>
 800bd72:	2800      	cmp	r0, #0
 800bd74:	f040 8295 	bne.w	800c2a2 <_dtoa_r+0x97a>
 800bd78:	4652      	mov	r2, sl
 800bd7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bd7e:	4640      	mov	r0, r8
 800bd80:	4649      	mov	r1, r9
 800bd82:	f7f4 fee3 	bl	8000b4c <__aeabi_dcmplt>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	f040 8289 	bne.w	800c29e <_dtoa_r+0x976>
 800bd8c:	ec5b ab19 	vmov	sl, fp, d9
 800bd90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	f2c0 8148 	blt.w	800c028 <_dtoa_r+0x700>
 800bd98:	9a00      	ldr	r2, [sp, #0]
 800bd9a:	2a0e      	cmp	r2, #14
 800bd9c:	f300 8144 	bgt.w	800c028 <_dtoa_r+0x700>
 800bda0:	4b67      	ldr	r3, [pc, #412]	; (800bf40 <_dtoa_r+0x618>)
 800bda2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bda6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bdaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	f280 80d5 	bge.w	800bf5c <_dtoa_r+0x634>
 800bdb2:	9b03      	ldr	r3, [sp, #12]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f300 80d1 	bgt.w	800bf5c <_dtoa_r+0x634>
 800bdba:	f040 826f 	bne.w	800c29c <_dtoa_r+0x974>
 800bdbe:	4b65      	ldr	r3, [pc, #404]	; (800bf54 <_dtoa_r+0x62c>)
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	4640      	mov	r0, r8
 800bdc4:	4649      	mov	r1, r9
 800bdc6:	f7f4 fc4f 	bl	8000668 <__aeabi_dmul>
 800bdca:	4652      	mov	r2, sl
 800bdcc:	465b      	mov	r3, fp
 800bdce:	f7f4 fed1 	bl	8000b74 <__aeabi_dcmpge>
 800bdd2:	9e03      	ldr	r6, [sp, #12]
 800bdd4:	4637      	mov	r7, r6
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	f040 8245 	bne.w	800c266 <_dtoa_r+0x93e>
 800bddc:	9d01      	ldr	r5, [sp, #4]
 800bdde:	2331      	movs	r3, #49	; 0x31
 800bde0:	f805 3b01 	strb.w	r3, [r5], #1
 800bde4:	9b00      	ldr	r3, [sp, #0]
 800bde6:	3301      	adds	r3, #1
 800bde8:	9300      	str	r3, [sp, #0]
 800bdea:	e240      	b.n	800c26e <_dtoa_r+0x946>
 800bdec:	07f2      	lsls	r2, r6, #31
 800bdee:	d505      	bpl.n	800bdfc <_dtoa_r+0x4d4>
 800bdf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdf4:	f7f4 fc38 	bl	8000668 <__aeabi_dmul>
 800bdf8:	3501      	adds	r5, #1
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	1076      	asrs	r6, r6, #1
 800bdfe:	3708      	adds	r7, #8
 800be00:	e777      	b.n	800bcf2 <_dtoa_r+0x3ca>
 800be02:	2502      	movs	r5, #2
 800be04:	e779      	b.n	800bcfa <_dtoa_r+0x3d2>
 800be06:	9f00      	ldr	r7, [sp, #0]
 800be08:	9e03      	ldr	r6, [sp, #12]
 800be0a:	e794      	b.n	800bd36 <_dtoa_r+0x40e>
 800be0c:	9901      	ldr	r1, [sp, #4]
 800be0e:	4b4c      	ldr	r3, [pc, #304]	; (800bf40 <_dtoa_r+0x618>)
 800be10:	4431      	add	r1, r6
 800be12:	910d      	str	r1, [sp, #52]	; 0x34
 800be14:	9908      	ldr	r1, [sp, #32]
 800be16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be1e:	2900      	cmp	r1, #0
 800be20:	d043      	beq.n	800beaa <_dtoa_r+0x582>
 800be22:	494d      	ldr	r1, [pc, #308]	; (800bf58 <_dtoa_r+0x630>)
 800be24:	2000      	movs	r0, #0
 800be26:	f7f4 fd49 	bl	80008bc <__aeabi_ddiv>
 800be2a:	4652      	mov	r2, sl
 800be2c:	465b      	mov	r3, fp
 800be2e:	f7f4 fa63 	bl	80002f8 <__aeabi_dsub>
 800be32:	9d01      	ldr	r5, [sp, #4]
 800be34:	4682      	mov	sl, r0
 800be36:	468b      	mov	fp, r1
 800be38:	4649      	mov	r1, r9
 800be3a:	4640      	mov	r0, r8
 800be3c:	f7f4 fec4 	bl	8000bc8 <__aeabi_d2iz>
 800be40:	4606      	mov	r6, r0
 800be42:	f7f4 fba7 	bl	8000594 <__aeabi_i2d>
 800be46:	4602      	mov	r2, r0
 800be48:	460b      	mov	r3, r1
 800be4a:	4640      	mov	r0, r8
 800be4c:	4649      	mov	r1, r9
 800be4e:	f7f4 fa53 	bl	80002f8 <__aeabi_dsub>
 800be52:	3630      	adds	r6, #48	; 0x30
 800be54:	f805 6b01 	strb.w	r6, [r5], #1
 800be58:	4652      	mov	r2, sl
 800be5a:	465b      	mov	r3, fp
 800be5c:	4680      	mov	r8, r0
 800be5e:	4689      	mov	r9, r1
 800be60:	f7f4 fe74 	bl	8000b4c <__aeabi_dcmplt>
 800be64:	2800      	cmp	r0, #0
 800be66:	d163      	bne.n	800bf30 <_dtoa_r+0x608>
 800be68:	4642      	mov	r2, r8
 800be6a:	464b      	mov	r3, r9
 800be6c:	4936      	ldr	r1, [pc, #216]	; (800bf48 <_dtoa_r+0x620>)
 800be6e:	2000      	movs	r0, #0
 800be70:	f7f4 fa42 	bl	80002f8 <__aeabi_dsub>
 800be74:	4652      	mov	r2, sl
 800be76:	465b      	mov	r3, fp
 800be78:	f7f4 fe68 	bl	8000b4c <__aeabi_dcmplt>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	f040 80b5 	bne.w	800bfec <_dtoa_r+0x6c4>
 800be82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be84:	429d      	cmp	r5, r3
 800be86:	d081      	beq.n	800bd8c <_dtoa_r+0x464>
 800be88:	4b30      	ldr	r3, [pc, #192]	; (800bf4c <_dtoa_r+0x624>)
 800be8a:	2200      	movs	r2, #0
 800be8c:	4650      	mov	r0, sl
 800be8e:	4659      	mov	r1, fp
 800be90:	f7f4 fbea 	bl	8000668 <__aeabi_dmul>
 800be94:	4b2d      	ldr	r3, [pc, #180]	; (800bf4c <_dtoa_r+0x624>)
 800be96:	4682      	mov	sl, r0
 800be98:	468b      	mov	fp, r1
 800be9a:	4640      	mov	r0, r8
 800be9c:	4649      	mov	r1, r9
 800be9e:	2200      	movs	r2, #0
 800bea0:	f7f4 fbe2 	bl	8000668 <__aeabi_dmul>
 800bea4:	4680      	mov	r8, r0
 800bea6:	4689      	mov	r9, r1
 800bea8:	e7c6      	b.n	800be38 <_dtoa_r+0x510>
 800beaa:	4650      	mov	r0, sl
 800beac:	4659      	mov	r1, fp
 800beae:	f7f4 fbdb 	bl	8000668 <__aeabi_dmul>
 800beb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800beb4:	9d01      	ldr	r5, [sp, #4]
 800beb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800beb8:	4682      	mov	sl, r0
 800beba:	468b      	mov	fp, r1
 800bebc:	4649      	mov	r1, r9
 800bebe:	4640      	mov	r0, r8
 800bec0:	f7f4 fe82 	bl	8000bc8 <__aeabi_d2iz>
 800bec4:	4606      	mov	r6, r0
 800bec6:	f7f4 fb65 	bl	8000594 <__aeabi_i2d>
 800beca:	3630      	adds	r6, #48	; 0x30
 800becc:	4602      	mov	r2, r0
 800bece:	460b      	mov	r3, r1
 800bed0:	4640      	mov	r0, r8
 800bed2:	4649      	mov	r1, r9
 800bed4:	f7f4 fa10 	bl	80002f8 <__aeabi_dsub>
 800bed8:	f805 6b01 	strb.w	r6, [r5], #1
 800bedc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bede:	429d      	cmp	r5, r3
 800bee0:	4680      	mov	r8, r0
 800bee2:	4689      	mov	r9, r1
 800bee4:	f04f 0200 	mov.w	r2, #0
 800bee8:	d124      	bne.n	800bf34 <_dtoa_r+0x60c>
 800beea:	4b1b      	ldr	r3, [pc, #108]	; (800bf58 <_dtoa_r+0x630>)
 800beec:	4650      	mov	r0, sl
 800beee:	4659      	mov	r1, fp
 800bef0:	f7f4 fa04 	bl	80002fc <__adddf3>
 800bef4:	4602      	mov	r2, r0
 800bef6:	460b      	mov	r3, r1
 800bef8:	4640      	mov	r0, r8
 800befa:	4649      	mov	r1, r9
 800befc:	f7f4 fe44 	bl	8000b88 <__aeabi_dcmpgt>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	d173      	bne.n	800bfec <_dtoa_r+0x6c4>
 800bf04:	4652      	mov	r2, sl
 800bf06:	465b      	mov	r3, fp
 800bf08:	4913      	ldr	r1, [pc, #76]	; (800bf58 <_dtoa_r+0x630>)
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	f7f4 f9f4 	bl	80002f8 <__aeabi_dsub>
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	4640      	mov	r0, r8
 800bf16:	4649      	mov	r1, r9
 800bf18:	f7f4 fe18 	bl	8000b4c <__aeabi_dcmplt>
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	f43f af35 	beq.w	800bd8c <_dtoa_r+0x464>
 800bf22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bf24:	1e6b      	subs	r3, r5, #1
 800bf26:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf2c:	2b30      	cmp	r3, #48	; 0x30
 800bf2e:	d0f8      	beq.n	800bf22 <_dtoa_r+0x5fa>
 800bf30:	9700      	str	r7, [sp, #0]
 800bf32:	e049      	b.n	800bfc8 <_dtoa_r+0x6a0>
 800bf34:	4b05      	ldr	r3, [pc, #20]	; (800bf4c <_dtoa_r+0x624>)
 800bf36:	f7f4 fb97 	bl	8000668 <__aeabi_dmul>
 800bf3a:	4680      	mov	r8, r0
 800bf3c:	4689      	mov	r9, r1
 800bf3e:	e7bd      	b.n	800bebc <_dtoa_r+0x594>
 800bf40:	0800f510 	.word	0x0800f510
 800bf44:	0800f4e8 	.word	0x0800f4e8
 800bf48:	3ff00000 	.word	0x3ff00000
 800bf4c:	40240000 	.word	0x40240000
 800bf50:	401c0000 	.word	0x401c0000
 800bf54:	40140000 	.word	0x40140000
 800bf58:	3fe00000 	.word	0x3fe00000
 800bf5c:	9d01      	ldr	r5, [sp, #4]
 800bf5e:	4656      	mov	r6, sl
 800bf60:	465f      	mov	r7, fp
 800bf62:	4642      	mov	r2, r8
 800bf64:	464b      	mov	r3, r9
 800bf66:	4630      	mov	r0, r6
 800bf68:	4639      	mov	r1, r7
 800bf6a:	f7f4 fca7 	bl	80008bc <__aeabi_ddiv>
 800bf6e:	f7f4 fe2b 	bl	8000bc8 <__aeabi_d2iz>
 800bf72:	4682      	mov	sl, r0
 800bf74:	f7f4 fb0e 	bl	8000594 <__aeabi_i2d>
 800bf78:	4642      	mov	r2, r8
 800bf7a:	464b      	mov	r3, r9
 800bf7c:	f7f4 fb74 	bl	8000668 <__aeabi_dmul>
 800bf80:	4602      	mov	r2, r0
 800bf82:	460b      	mov	r3, r1
 800bf84:	4630      	mov	r0, r6
 800bf86:	4639      	mov	r1, r7
 800bf88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bf8c:	f7f4 f9b4 	bl	80002f8 <__aeabi_dsub>
 800bf90:	f805 6b01 	strb.w	r6, [r5], #1
 800bf94:	9e01      	ldr	r6, [sp, #4]
 800bf96:	9f03      	ldr	r7, [sp, #12]
 800bf98:	1bae      	subs	r6, r5, r6
 800bf9a:	42b7      	cmp	r7, r6
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	d135      	bne.n	800c00e <_dtoa_r+0x6e6>
 800bfa2:	f7f4 f9ab 	bl	80002fc <__adddf3>
 800bfa6:	4642      	mov	r2, r8
 800bfa8:	464b      	mov	r3, r9
 800bfaa:	4606      	mov	r6, r0
 800bfac:	460f      	mov	r7, r1
 800bfae:	f7f4 fdeb 	bl	8000b88 <__aeabi_dcmpgt>
 800bfb2:	b9d0      	cbnz	r0, 800bfea <_dtoa_r+0x6c2>
 800bfb4:	4642      	mov	r2, r8
 800bfb6:	464b      	mov	r3, r9
 800bfb8:	4630      	mov	r0, r6
 800bfba:	4639      	mov	r1, r7
 800bfbc:	f7f4 fdbc 	bl	8000b38 <__aeabi_dcmpeq>
 800bfc0:	b110      	cbz	r0, 800bfc8 <_dtoa_r+0x6a0>
 800bfc2:	f01a 0f01 	tst.w	sl, #1
 800bfc6:	d110      	bne.n	800bfea <_dtoa_r+0x6c2>
 800bfc8:	4620      	mov	r0, r4
 800bfca:	ee18 1a10 	vmov	r1, s16
 800bfce:	f000 fe99 	bl	800cd04 <_Bfree>
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	9800      	ldr	r0, [sp, #0]
 800bfd6:	702b      	strb	r3, [r5, #0]
 800bfd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfda:	3001      	adds	r0, #1
 800bfdc:	6018      	str	r0, [r3, #0]
 800bfde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f43f acf1 	beq.w	800b9c8 <_dtoa_r+0xa0>
 800bfe6:	601d      	str	r5, [r3, #0]
 800bfe8:	e4ee      	b.n	800b9c8 <_dtoa_r+0xa0>
 800bfea:	9f00      	ldr	r7, [sp, #0]
 800bfec:	462b      	mov	r3, r5
 800bfee:	461d      	mov	r5, r3
 800bff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bff4:	2a39      	cmp	r2, #57	; 0x39
 800bff6:	d106      	bne.n	800c006 <_dtoa_r+0x6de>
 800bff8:	9a01      	ldr	r2, [sp, #4]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d1f7      	bne.n	800bfee <_dtoa_r+0x6c6>
 800bffe:	9901      	ldr	r1, [sp, #4]
 800c000:	2230      	movs	r2, #48	; 0x30
 800c002:	3701      	adds	r7, #1
 800c004:	700a      	strb	r2, [r1, #0]
 800c006:	781a      	ldrb	r2, [r3, #0]
 800c008:	3201      	adds	r2, #1
 800c00a:	701a      	strb	r2, [r3, #0]
 800c00c:	e790      	b.n	800bf30 <_dtoa_r+0x608>
 800c00e:	4ba6      	ldr	r3, [pc, #664]	; (800c2a8 <_dtoa_r+0x980>)
 800c010:	2200      	movs	r2, #0
 800c012:	f7f4 fb29 	bl	8000668 <__aeabi_dmul>
 800c016:	2200      	movs	r2, #0
 800c018:	2300      	movs	r3, #0
 800c01a:	4606      	mov	r6, r0
 800c01c:	460f      	mov	r7, r1
 800c01e:	f7f4 fd8b 	bl	8000b38 <__aeabi_dcmpeq>
 800c022:	2800      	cmp	r0, #0
 800c024:	d09d      	beq.n	800bf62 <_dtoa_r+0x63a>
 800c026:	e7cf      	b.n	800bfc8 <_dtoa_r+0x6a0>
 800c028:	9a08      	ldr	r2, [sp, #32]
 800c02a:	2a00      	cmp	r2, #0
 800c02c:	f000 80d7 	beq.w	800c1de <_dtoa_r+0x8b6>
 800c030:	9a06      	ldr	r2, [sp, #24]
 800c032:	2a01      	cmp	r2, #1
 800c034:	f300 80ba 	bgt.w	800c1ac <_dtoa_r+0x884>
 800c038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c03a:	2a00      	cmp	r2, #0
 800c03c:	f000 80b2 	beq.w	800c1a4 <_dtoa_r+0x87c>
 800c040:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c044:	9e07      	ldr	r6, [sp, #28]
 800c046:	9d04      	ldr	r5, [sp, #16]
 800c048:	9a04      	ldr	r2, [sp, #16]
 800c04a:	441a      	add	r2, r3
 800c04c:	9204      	str	r2, [sp, #16]
 800c04e:	9a05      	ldr	r2, [sp, #20]
 800c050:	2101      	movs	r1, #1
 800c052:	441a      	add	r2, r3
 800c054:	4620      	mov	r0, r4
 800c056:	9205      	str	r2, [sp, #20]
 800c058:	f000 ff56 	bl	800cf08 <__i2b>
 800c05c:	4607      	mov	r7, r0
 800c05e:	2d00      	cmp	r5, #0
 800c060:	dd0c      	ble.n	800c07c <_dtoa_r+0x754>
 800c062:	9b05      	ldr	r3, [sp, #20]
 800c064:	2b00      	cmp	r3, #0
 800c066:	dd09      	ble.n	800c07c <_dtoa_r+0x754>
 800c068:	42ab      	cmp	r3, r5
 800c06a:	9a04      	ldr	r2, [sp, #16]
 800c06c:	bfa8      	it	ge
 800c06e:	462b      	movge	r3, r5
 800c070:	1ad2      	subs	r2, r2, r3
 800c072:	9204      	str	r2, [sp, #16]
 800c074:	9a05      	ldr	r2, [sp, #20]
 800c076:	1aed      	subs	r5, r5, r3
 800c078:	1ad3      	subs	r3, r2, r3
 800c07a:	9305      	str	r3, [sp, #20]
 800c07c:	9b07      	ldr	r3, [sp, #28]
 800c07e:	b31b      	cbz	r3, 800c0c8 <_dtoa_r+0x7a0>
 800c080:	9b08      	ldr	r3, [sp, #32]
 800c082:	2b00      	cmp	r3, #0
 800c084:	f000 80af 	beq.w	800c1e6 <_dtoa_r+0x8be>
 800c088:	2e00      	cmp	r6, #0
 800c08a:	dd13      	ble.n	800c0b4 <_dtoa_r+0x78c>
 800c08c:	4639      	mov	r1, r7
 800c08e:	4632      	mov	r2, r6
 800c090:	4620      	mov	r0, r4
 800c092:	f000 fff9 	bl	800d088 <__pow5mult>
 800c096:	ee18 2a10 	vmov	r2, s16
 800c09a:	4601      	mov	r1, r0
 800c09c:	4607      	mov	r7, r0
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f000 ff48 	bl	800cf34 <__multiply>
 800c0a4:	ee18 1a10 	vmov	r1, s16
 800c0a8:	4680      	mov	r8, r0
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f000 fe2a 	bl	800cd04 <_Bfree>
 800c0b0:	ee08 8a10 	vmov	s16, r8
 800c0b4:	9b07      	ldr	r3, [sp, #28]
 800c0b6:	1b9a      	subs	r2, r3, r6
 800c0b8:	d006      	beq.n	800c0c8 <_dtoa_r+0x7a0>
 800c0ba:	ee18 1a10 	vmov	r1, s16
 800c0be:	4620      	mov	r0, r4
 800c0c0:	f000 ffe2 	bl	800d088 <__pow5mult>
 800c0c4:	ee08 0a10 	vmov	s16, r0
 800c0c8:	2101      	movs	r1, #1
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	f000 ff1c 	bl	800cf08 <__i2b>
 800c0d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	4606      	mov	r6, r0
 800c0d6:	f340 8088 	ble.w	800c1ea <_dtoa_r+0x8c2>
 800c0da:	461a      	mov	r2, r3
 800c0dc:	4601      	mov	r1, r0
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f000 ffd2 	bl	800d088 <__pow5mult>
 800c0e4:	9b06      	ldr	r3, [sp, #24]
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	4606      	mov	r6, r0
 800c0ea:	f340 8081 	ble.w	800c1f0 <_dtoa_r+0x8c8>
 800c0ee:	f04f 0800 	mov.w	r8, #0
 800c0f2:	6933      	ldr	r3, [r6, #16]
 800c0f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c0f8:	6918      	ldr	r0, [r3, #16]
 800c0fa:	f000 feb5 	bl	800ce68 <__hi0bits>
 800c0fe:	f1c0 0020 	rsb	r0, r0, #32
 800c102:	9b05      	ldr	r3, [sp, #20]
 800c104:	4418      	add	r0, r3
 800c106:	f010 001f 	ands.w	r0, r0, #31
 800c10a:	f000 8092 	beq.w	800c232 <_dtoa_r+0x90a>
 800c10e:	f1c0 0320 	rsb	r3, r0, #32
 800c112:	2b04      	cmp	r3, #4
 800c114:	f340 808a 	ble.w	800c22c <_dtoa_r+0x904>
 800c118:	f1c0 001c 	rsb	r0, r0, #28
 800c11c:	9b04      	ldr	r3, [sp, #16]
 800c11e:	4403      	add	r3, r0
 800c120:	9304      	str	r3, [sp, #16]
 800c122:	9b05      	ldr	r3, [sp, #20]
 800c124:	4403      	add	r3, r0
 800c126:	4405      	add	r5, r0
 800c128:	9305      	str	r3, [sp, #20]
 800c12a:	9b04      	ldr	r3, [sp, #16]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	dd07      	ble.n	800c140 <_dtoa_r+0x818>
 800c130:	ee18 1a10 	vmov	r1, s16
 800c134:	461a      	mov	r2, r3
 800c136:	4620      	mov	r0, r4
 800c138:	f001 f800 	bl	800d13c <__lshift>
 800c13c:	ee08 0a10 	vmov	s16, r0
 800c140:	9b05      	ldr	r3, [sp, #20]
 800c142:	2b00      	cmp	r3, #0
 800c144:	dd05      	ble.n	800c152 <_dtoa_r+0x82a>
 800c146:	4631      	mov	r1, r6
 800c148:	461a      	mov	r2, r3
 800c14a:	4620      	mov	r0, r4
 800c14c:	f000 fff6 	bl	800d13c <__lshift>
 800c150:	4606      	mov	r6, r0
 800c152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c154:	2b00      	cmp	r3, #0
 800c156:	d06e      	beq.n	800c236 <_dtoa_r+0x90e>
 800c158:	ee18 0a10 	vmov	r0, s16
 800c15c:	4631      	mov	r1, r6
 800c15e:	f001 f85d 	bl	800d21c <__mcmp>
 800c162:	2800      	cmp	r0, #0
 800c164:	da67      	bge.n	800c236 <_dtoa_r+0x90e>
 800c166:	9b00      	ldr	r3, [sp, #0]
 800c168:	3b01      	subs	r3, #1
 800c16a:	ee18 1a10 	vmov	r1, s16
 800c16e:	9300      	str	r3, [sp, #0]
 800c170:	220a      	movs	r2, #10
 800c172:	2300      	movs	r3, #0
 800c174:	4620      	mov	r0, r4
 800c176:	f000 fde7 	bl	800cd48 <__multadd>
 800c17a:	9b08      	ldr	r3, [sp, #32]
 800c17c:	ee08 0a10 	vmov	s16, r0
 800c180:	2b00      	cmp	r3, #0
 800c182:	f000 81b1 	beq.w	800c4e8 <_dtoa_r+0xbc0>
 800c186:	2300      	movs	r3, #0
 800c188:	4639      	mov	r1, r7
 800c18a:	220a      	movs	r2, #10
 800c18c:	4620      	mov	r0, r4
 800c18e:	f000 fddb 	bl	800cd48 <__multadd>
 800c192:	9b02      	ldr	r3, [sp, #8]
 800c194:	2b00      	cmp	r3, #0
 800c196:	4607      	mov	r7, r0
 800c198:	f300 808e 	bgt.w	800c2b8 <_dtoa_r+0x990>
 800c19c:	9b06      	ldr	r3, [sp, #24]
 800c19e:	2b02      	cmp	r3, #2
 800c1a0:	dc51      	bgt.n	800c246 <_dtoa_r+0x91e>
 800c1a2:	e089      	b.n	800c2b8 <_dtoa_r+0x990>
 800c1a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c1aa:	e74b      	b.n	800c044 <_dtoa_r+0x71c>
 800c1ac:	9b03      	ldr	r3, [sp, #12]
 800c1ae:	1e5e      	subs	r6, r3, #1
 800c1b0:	9b07      	ldr	r3, [sp, #28]
 800c1b2:	42b3      	cmp	r3, r6
 800c1b4:	bfbf      	itttt	lt
 800c1b6:	9b07      	ldrlt	r3, [sp, #28]
 800c1b8:	9607      	strlt	r6, [sp, #28]
 800c1ba:	1af2      	sublt	r2, r6, r3
 800c1bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c1be:	bfb6      	itet	lt
 800c1c0:	189b      	addlt	r3, r3, r2
 800c1c2:	1b9e      	subge	r6, r3, r6
 800c1c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c1c6:	9b03      	ldr	r3, [sp, #12]
 800c1c8:	bfb8      	it	lt
 800c1ca:	2600      	movlt	r6, #0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	bfb7      	itett	lt
 800c1d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c1d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c1d8:	1a9d      	sublt	r5, r3, r2
 800c1da:	2300      	movlt	r3, #0
 800c1dc:	e734      	b.n	800c048 <_dtoa_r+0x720>
 800c1de:	9e07      	ldr	r6, [sp, #28]
 800c1e0:	9d04      	ldr	r5, [sp, #16]
 800c1e2:	9f08      	ldr	r7, [sp, #32]
 800c1e4:	e73b      	b.n	800c05e <_dtoa_r+0x736>
 800c1e6:	9a07      	ldr	r2, [sp, #28]
 800c1e8:	e767      	b.n	800c0ba <_dtoa_r+0x792>
 800c1ea:	9b06      	ldr	r3, [sp, #24]
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	dc18      	bgt.n	800c222 <_dtoa_r+0x8fa>
 800c1f0:	f1ba 0f00 	cmp.w	sl, #0
 800c1f4:	d115      	bne.n	800c222 <_dtoa_r+0x8fa>
 800c1f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1fa:	b993      	cbnz	r3, 800c222 <_dtoa_r+0x8fa>
 800c1fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c200:	0d1b      	lsrs	r3, r3, #20
 800c202:	051b      	lsls	r3, r3, #20
 800c204:	b183      	cbz	r3, 800c228 <_dtoa_r+0x900>
 800c206:	9b04      	ldr	r3, [sp, #16]
 800c208:	3301      	adds	r3, #1
 800c20a:	9304      	str	r3, [sp, #16]
 800c20c:	9b05      	ldr	r3, [sp, #20]
 800c20e:	3301      	adds	r3, #1
 800c210:	9305      	str	r3, [sp, #20]
 800c212:	f04f 0801 	mov.w	r8, #1
 800c216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f47f af6a 	bne.w	800c0f2 <_dtoa_r+0x7ca>
 800c21e:	2001      	movs	r0, #1
 800c220:	e76f      	b.n	800c102 <_dtoa_r+0x7da>
 800c222:	f04f 0800 	mov.w	r8, #0
 800c226:	e7f6      	b.n	800c216 <_dtoa_r+0x8ee>
 800c228:	4698      	mov	r8, r3
 800c22a:	e7f4      	b.n	800c216 <_dtoa_r+0x8ee>
 800c22c:	f43f af7d 	beq.w	800c12a <_dtoa_r+0x802>
 800c230:	4618      	mov	r0, r3
 800c232:	301c      	adds	r0, #28
 800c234:	e772      	b.n	800c11c <_dtoa_r+0x7f4>
 800c236:	9b03      	ldr	r3, [sp, #12]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	dc37      	bgt.n	800c2ac <_dtoa_r+0x984>
 800c23c:	9b06      	ldr	r3, [sp, #24]
 800c23e:	2b02      	cmp	r3, #2
 800c240:	dd34      	ble.n	800c2ac <_dtoa_r+0x984>
 800c242:	9b03      	ldr	r3, [sp, #12]
 800c244:	9302      	str	r3, [sp, #8]
 800c246:	9b02      	ldr	r3, [sp, #8]
 800c248:	b96b      	cbnz	r3, 800c266 <_dtoa_r+0x93e>
 800c24a:	4631      	mov	r1, r6
 800c24c:	2205      	movs	r2, #5
 800c24e:	4620      	mov	r0, r4
 800c250:	f000 fd7a 	bl	800cd48 <__multadd>
 800c254:	4601      	mov	r1, r0
 800c256:	4606      	mov	r6, r0
 800c258:	ee18 0a10 	vmov	r0, s16
 800c25c:	f000 ffde 	bl	800d21c <__mcmp>
 800c260:	2800      	cmp	r0, #0
 800c262:	f73f adbb 	bgt.w	800bddc <_dtoa_r+0x4b4>
 800c266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c268:	9d01      	ldr	r5, [sp, #4]
 800c26a:	43db      	mvns	r3, r3
 800c26c:	9300      	str	r3, [sp, #0]
 800c26e:	f04f 0800 	mov.w	r8, #0
 800c272:	4631      	mov	r1, r6
 800c274:	4620      	mov	r0, r4
 800c276:	f000 fd45 	bl	800cd04 <_Bfree>
 800c27a:	2f00      	cmp	r7, #0
 800c27c:	f43f aea4 	beq.w	800bfc8 <_dtoa_r+0x6a0>
 800c280:	f1b8 0f00 	cmp.w	r8, #0
 800c284:	d005      	beq.n	800c292 <_dtoa_r+0x96a>
 800c286:	45b8      	cmp	r8, r7
 800c288:	d003      	beq.n	800c292 <_dtoa_r+0x96a>
 800c28a:	4641      	mov	r1, r8
 800c28c:	4620      	mov	r0, r4
 800c28e:	f000 fd39 	bl	800cd04 <_Bfree>
 800c292:	4639      	mov	r1, r7
 800c294:	4620      	mov	r0, r4
 800c296:	f000 fd35 	bl	800cd04 <_Bfree>
 800c29a:	e695      	b.n	800bfc8 <_dtoa_r+0x6a0>
 800c29c:	2600      	movs	r6, #0
 800c29e:	4637      	mov	r7, r6
 800c2a0:	e7e1      	b.n	800c266 <_dtoa_r+0x93e>
 800c2a2:	9700      	str	r7, [sp, #0]
 800c2a4:	4637      	mov	r7, r6
 800c2a6:	e599      	b.n	800bddc <_dtoa_r+0x4b4>
 800c2a8:	40240000 	.word	0x40240000
 800c2ac:	9b08      	ldr	r3, [sp, #32]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f000 80ca 	beq.w	800c448 <_dtoa_r+0xb20>
 800c2b4:	9b03      	ldr	r3, [sp, #12]
 800c2b6:	9302      	str	r3, [sp, #8]
 800c2b8:	2d00      	cmp	r5, #0
 800c2ba:	dd05      	ble.n	800c2c8 <_dtoa_r+0x9a0>
 800c2bc:	4639      	mov	r1, r7
 800c2be:	462a      	mov	r2, r5
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f000 ff3b 	bl	800d13c <__lshift>
 800c2c6:	4607      	mov	r7, r0
 800c2c8:	f1b8 0f00 	cmp.w	r8, #0
 800c2cc:	d05b      	beq.n	800c386 <_dtoa_r+0xa5e>
 800c2ce:	6879      	ldr	r1, [r7, #4]
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f000 fcd7 	bl	800cc84 <_Balloc>
 800c2d6:	4605      	mov	r5, r0
 800c2d8:	b928      	cbnz	r0, 800c2e6 <_dtoa_r+0x9be>
 800c2da:	4b87      	ldr	r3, [pc, #540]	; (800c4f8 <_dtoa_r+0xbd0>)
 800c2dc:	4602      	mov	r2, r0
 800c2de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c2e2:	f7ff bb3b 	b.w	800b95c <_dtoa_r+0x34>
 800c2e6:	693a      	ldr	r2, [r7, #16]
 800c2e8:	3202      	adds	r2, #2
 800c2ea:	0092      	lsls	r2, r2, #2
 800c2ec:	f107 010c 	add.w	r1, r7, #12
 800c2f0:	300c      	adds	r0, #12
 800c2f2:	f000 fcb9 	bl	800cc68 <memcpy>
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	f000 ff1e 	bl	800d13c <__lshift>
 800c300:	9b01      	ldr	r3, [sp, #4]
 800c302:	f103 0901 	add.w	r9, r3, #1
 800c306:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c30a:	4413      	add	r3, r2
 800c30c:	9305      	str	r3, [sp, #20]
 800c30e:	f00a 0301 	and.w	r3, sl, #1
 800c312:	46b8      	mov	r8, r7
 800c314:	9304      	str	r3, [sp, #16]
 800c316:	4607      	mov	r7, r0
 800c318:	4631      	mov	r1, r6
 800c31a:	ee18 0a10 	vmov	r0, s16
 800c31e:	f7ff fa75 	bl	800b80c <quorem>
 800c322:	4641      	mov	r1, r8
 800c324:	9002      	str	r0, [sp, #8]
 800c326:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c32a:	ee18 0a10 	vmov	r0, s16
 800c32e:	f000 ff75 	bl	800d21c <__mcmp>
 800c332:	463a      	mov	r2, r7
 800c334:	9003      	str	r0, [sp, #12]
 800c336:	4631      	mov	r1, r6
 800c338:	4620      	mov	r0, r4
 800c33a:	f000 ff8b 	bl	800d254 <__mdiff>
 800c33e:	68c2      	ldr	r2, [r0, #12]
 800c340:	f109 3bff 	add.w	fp, r9, #4294967295
 800c344:	4605      	mov	r5, r0
 800c346:	bb02      	cbnz	r2, 800c38a <_dtoa_r+0xa62>
 800c348:	4601      	mov	r1, r0
 800c34a:	ee18 0a10 	vmov	r0, s16
 800c34e:	f000 ff65 	bl	800d21c <__mcmp>
 800c352:	4602      	mov	r2, r0
 800c354:	4629      	mov	r1, r5
 800c356:	4620      	mov	r0, r4
 800c358:	9207      	str	r2, [sp, #28]
 800c35a:	f000 fcd3 	bl	800cd04 <_Bfree>
 800c35e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c362:	ea43 0102 	orr.w	r1, r3, r2
 800c366:	9b04      	ldr	r3, [sp, #16]
 800c368:	430b      	orrs	r3, r1
 800c36a:	464d      	mov	r5, r9
 800c36c:	d10f      	bne.n	800c38e <_dtoa_r+0xa66>
 800c36e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c372:	d02a      	beq.n	800c3ca <_dtoa_r+0xaa2>
 800c374:	9b03      	ldr	r3, [sp, #12]
 800c376:	2b00      	cmp	r3, #0
 800c378:	dd02      	ble.n	800c380 <_dtoa_r+0xa58>
 800c37a:	9b02      	ldr	r3, [sp, #8]
 800c37c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c380:	f88b a000 	strb.w	sl, [fp]
 800c384:	e775      	b.n	800c272 <_dtoa_r+0x94a>
 800c386:	4638      	mov	r0, r7
 800c388:	e7ba      	b.n	800c300 <_dtoa_r+0x9d8>
 800c38a:	2201      	movs	r2, #1
 800c38c:	e7e2      	b.n	800c354 <_dtoa_r+0xa2c>
 800c38e:	9b03      	ldr	r3, [sp, #12]
 800c390:	2b00      	cmp	r3, #0
 800c392:	db04      	blt.n	800c39e <_dtoa_r+0xa76>
 800c394:	9906      	ldr	r1, [sp, #24]
 800c396:	430b      	orrs	r3, r1
 800c398:	9904      	ldr	r1, [sp, #16]
 800c39a:	430b      	orrs	r3, r1
 800c39c:	d122      	bne.n	800c3e4 <_dtoa_r+0xabc>
 800c39e:	2a00      	cmp	r2, #0
 800c3a0:	ddee      	ble.n	800c380 <_dtoa_r+0xa58>
 800c3a2:	ee18 1a10 	vmov	r1, s16
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f000 fec7 	bl	800d13c <__lshift>
 800c3ae:	4631      	mov	r1, r6
 800c3b0:	ee08 0a10 	vmov	s16, r0
 800c3b4:	f000 ff32 	bl	800d21c <__mcmp>
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	dc03      	bgt.n	800c3c4 <_dtoa_r+0xa9c>
 800c3bc:	d1e0      	bne.n	800c380 <_dtoa_r+0xa58>
 800c3be:	f01a 0f01 	tst.w	sl, #1
 800c3c2:	d0dd      	beq.n	800c380 <_dtoa_r+0xa58>
 800c3c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c3c8:	d1d7      	bne.n	800c37a <_dtoa_r+0xa52>
 800c3ca:	2339      	movs	r3, #57	; 0x39
 800c3cc:	f88b 3000 	strb.w	r3, [fp]
 800c3d0:	462b      	mov	r3, r5
 800c3d2:	461d      	mov	r5, r3
 800c3d4:	3b01      	subs	r3, #1
 800c3d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c3da:	2a39      	cmp	r2, #57	; 0x39
 800c3dc:	d071      	beq.n	800c4c2 <_dtoa_r+0xb9a>
 800c3de:	3201      	adds	r2, #1
 800c3e0:	701a      	strb	r2, [r3, #0]
 800c3e2:	e746      	b.n	800c272 <_dtoa_r+0x94a>
 800c3e4:	2a00      	cmp	r2, #0
 800c3e6:	dd07      	ble.n	800c3f8 <_dtoa_r+0xad0>
 800c3e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c3ec:	d0ed      	beq.n	800c3ca <_dtoa_r+0xaa2>
 800c3ee:	f10a 0301 	add.w	r3, sl, #1
 800c3f2:	f88b 3000 	strb.w	r3, [fp]
 800c3f6:	e73c      	b.n	800c272 <_dtoa_r+0x94a>
 800c3f8:	9b05      	ldr	r3, [sp, #20]
 800c3fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c3fe:	4599      	cmp	r9, r3
 800c400:	d047      	beq.n	800c492 <_dtoa_r+0xb6a>
 800c402:	ee18 1a10 	vmov	r1, s16
 800c406:	2300      	movs	r3, #0
 800c408:	220a      	movs	r2, #10
 800c40a:	4620      	mov	r0, r4
 800c40c:	f000 fc9c 	bl	800cd48 <__multadd>
 800c410:	45b8      	cmp	r8, r7
 800c412:	ee08 0a10 	vmov	s16, r0
 800c416:	f04f 0300 	mov.w	r3, #0
 800c41a:	f04f 020a 	mov.w	r2, #10
 800c41e:	4641      	mov	r1, r8
 800c420:	4620      	mov	r0, r4
 800c422:	d106      	bne.n	800c432 <_dtoa_r+0xb0a>
 800c424:	f000 fc90 	bl	800cd48 <__multadd>
 800c428:	4680      	mov	r8, r0
 800c42a:	4607      	mov	r7, r0
 800c42c:	f109 0901 	add.w	r9, r9, #1
 800c430:	e772      	b.n	800c318 <_dtoa_r+0x9f0>
 800c432:	f000 fc89 	bl	800cd48 <__multadd>
 800c436:	4639      	mov	r1, r7
 800c438:	4680      	mov	r8, r0
 800c43a:	2300      	movs	r3, #0
 800c43c:	220a      	movs	r2, #10
 800c43e:	4620      	mov	r0, r4
 800c440:	f000 fc82 	bl	800cd48 <__multadd>
 800c444:	4607      	mov	r7, r0
 800c446:	e7f1      	b.n	800c42c <_dtoa_r+0xb04>
 800c448:	9b03      	ldr	r3, [sp, #12]
 800c44a:	9302      	str	r3, [sp, #8]
 800c44c:	9d01      	ldr	r5, [sp, #4]
 800c44e:	ee18 0a10 	vmov	r0, s16
 800c452:	4631      	mov	r1, r6
 800c454:	f7ff f9da 	bl	800b80c <quorem>
 800c458:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c45c:	9b01      	ldr	r3, [sp, #4]
 800c45e:	f805 ab01 	strb.w	sl, [r5], #1
 800c462:	1aea      	subs	r2, r5, r3
 800c464:	9b02      	ldr	r3, [sp, #8]
 800c466:	4293      	cmp	r3, r2
 800c468:	dd09      	ble.n	800c47e <_dtoa_r+0xb56>
 800c46a:	ee18 1a10 	vmov	r1, s16
 800c46e:	2300      	movs	r3, #0
 800c470:	220a      	movs	r2, #10
 800c472:	4620      	mov	r0, r4
 800c474:	f000 fc68 	bl	800cd48 <__multadd>
 800c478:	ee08 0a10 	vmov	s16, r0
 800c47c:	e7e7      	b.n	800c44e <_dtoa_r+0xb26>
 800c47e:	9b02      	ldr	r3, [sp, #8]
 800c480:	2b00      	cmp	r3, #0
 800c482:	bfc8      	it	gt
 800c484:	461d      	movgt	r5, r3
 800c486:	9b01      	ldr	r3, [sp, #4]
 800c488:	bfd8      	it	le
 800c48a:	2501      	movle	r5, #1
 800c48c:	441d      	add	r5, r3
 800c48e:	f04f 0800 	mov.w	r8, #0
 800c492:	ee18 1a10 	vmov	r1, s16
 800c496:	2201      	movs	r2, #1
 800c498:	4620      	mov	r0, r4
 800c49a:	f000 fe4f 	bl	800d13c <__lshift>
 800c49e:	4631      	mov	r1, r6
 800c4a0:	ee08 0a10 	vmov	s16, r0
 800c4a4:	f000 feba 	bl	800d21c <__mcmp>
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	dc91      	bgt.n	800c3d0 <_dtoa_r+0xaa8>
 800c4ac:	d102      	bne.n	800c4b4 <_dtoa_r+0xb8c>
 800c4ae:	f01a 0f01 	tst.w	sl, #1
 800c4b2:	d18d      	bne.n	800c3d0 <_dtoa_r+0xaa8>
 800c4b4:	462b      	mov	r3, r5
 800c4b6:	461d      	mov	r5, r3
 800c4b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4bc:	2a30      	cmp	r2, #48	; 0x30
 800c4be:	d0fa      	beq.n	800c4b6 <_dtoa_r+0xb8e>
 800c4c0:	e6d7      	b.n	800c272 <_dtoa_r+0x94a>
 800c4c2:	9a01      	ldr	r2, [sp, #4]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d184      	bne.n	800c3d2 <_dtoa_r+0xaaa>
 800c4c8:	9b00      	ldr	r3, [sp, #0]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	9300      	str	r3, [sp, #0]
 800c4ce:	2331      	movs	r3, #49	; 0x31
 800c4d0:	7013      	strb	r3, [r2, #0]
 800c4d2:	e6ce      	b.n	800c272 <_dtoa_r+0x94a>
 800c4d4:	4b09      	ldr	r3, [pc, #36]	; (800c4fc <_dtoa_r+0xbd4>)
 800c4d6:	f7ff ba95 	b.w	800ba04 <_dtoa_r+0xdc>
 800c4da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f47f aa6e 	bne.w	800b9be <_dtoa_r+0x96>
 800c4e2:	4b07      	ldr	r3, [pc, #28]	; (800c500 <_dtoa_r+0xbd8>)
 800c4e4:	f7ff ba8e 	b.w	800ba04 <_dtoa_r+0xdc>
 800c4e8:	9b02      	ldr	r3, [sp, #8]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	dcae      	bgt.n	800c44c <_dtoa_r+0xb24>
 800c4ee:	9b06      	ldr	r3, [sp, #24]
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	f73f aea8 	bgt.w	800c246 <_dtoa_r+0x91e>
 800c4f6:	e7a9      	b.n	800c44c <_dtoa_r+0xb24>
 800c4f8:	0800f401 	.word	0x0800f401
 800c4fc:	0800f5f9 	.word	0x0800f5f9
 800c500:	0800f399 	.word	0x0800f399

0800c504 <fiprintf>:
 800c504:	b40e      	push	{r1, r2, r3}
 800c506:	b503      	push	{r0, r1, lr}
 800c508:	4601      	mov	r1, r0
 800c50a:	ab03      	add	r3, sp, #12
 800c50c:	4805      	ldr	r0, [pc, #20]	; (800c524 <fiprintf+0x20>)
 800c50e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c512:	6800      	ldr	r0, [r0, #0]
 800c514:	9301      	str	r3, [sp, #4]
 800c516:	f001 fcc5 	bl	800dea4 <_vfiprintf_r>
 800c51a:	b002      	add	sp, #8
 800c51c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c520:	b003      	add	sp, #12
 800c522:	4770      	bx	lr
 800c524:	20000074 	.word	0x20000074

0800c528 <rshift>:
 800c528:	6903      	ldr	r3, [r0, #16]
 800c52a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c52e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c532:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c536:	f100 0414 	add.w	r4, r0, #20
 800c53a:	dd45      	ble.n	800c5c8 <rshift+0xa0>
 800c53c:	f011 011f 	ands.w	r1, r1, #31
 800c540:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c544:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c548:	d10c      	bne.n	800c564 <rshift+0x3c>
 800c54a:	f100 0710 	add.w	r7, r0, #16
 800c54e:	4629      	mov	r1, r5
 800c550:	42b1      	cmp	r1, r6
 800c552:	d334      	bcc.n	800c5be <rshift+0x96>
 800c554:	1a9b      	subs	r3, r3, r2
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	1eea      	subs	r2, r5, #3
 800c55a:	4296      	cmp	r6, r2
 800c55c:	bf38      	it	cc
 800c55e:	2300      	movcc	r3, #0
 800c560:	4423      	add	r3, r4
 800c562:	e015      	b.n	800c590 <rshift+0x68>
 800c564:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c568:	f1c1 0820 	rsb	r8, r1, #32
 800c56c:	40cf      	lsrs	r7, r1
 800c56e:	f105 0e04 	add.w	lr, r5, #4
 800c572:	46a1      	mov	r9, r4
 800c574:	4576      	cmp	r6, lr
 800c576:	46f4      	mov	ip, lr
 800c578:	d815      	bhi.n	800c5a6 <rshift+0x7e>
 800c57a:	1a9a      	subs	r2, r3, r2
 800c57c:	0092      	lsls	r2, r2, #2
 800c57e:	3a04      	subs	r2, #4
 800c580:	3501      	adds	r5, #1
 800c582:	42ae      	cmp	r6, r5
 800c584:	bf38      	it	cc
 800c586:	2200      	movcc	r2, #0
 800c588:	18a3      	adds	r3, r4, r2
 800c58a:	50a7      	str	r7, [r4, r2]
 800c58c:	b107      	cbz	r7, 800c590 <rshift+0x68>
 800c58e:	3304      	adds	r3, #4
 800c590:	1b1a      	subs	r2, r3, r4
 800c592:	42a3      	cmp	r3, r4
 800c594:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c598:	bf08      	it	eq
 800c59a:	2300      	moveq	r3, #0
 800c59c:	6102      	str	r2, [r0, #16]
 800c59e:	bf08      	it	eq
 800c5a0:	6143      	streq	r3, [r0, #20]
 800c5a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5a6:	f8dc c000 	ldr.w	ip, [ip]
 800c5aa:	fa0c fc08 	lsl.w	ip, ip, r8
 800c5ae:	ea4c 0707 	orr.w	r7, ip, r7
 800c5b2:	f849 7b04 	str.w	r7, [r9], #4
 800c5b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c5ba:	40cf      	lsrs	r7, r1
 800c5bc:	e7da      	b.n	800c574 <rshift+0x4c>
 800c5be:	f851 cb04 	ldr.w	ip, [r1], #4
 800c5c2:	f847 cf04 	str.w	ip, [r7, #4]!
 800c5c6:	e7c3      	b.n	800c550 <rshift+0x28>
 800c5c8:	4623      	mov	r3, r4
 800c5ca:	e7e1      	b.n	800c590 <rshift+0x68>

0800c5cc <__hexdig_fun>:
 800c5cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c5d0:	2b09      	cmp	r3, #9
 800c5d2:	d802      	bhi.n	800c5da <__hexdig_fun+0xe>
 800c5d4:	3820      	subs	r0, #32
 800c5d6:	b2c0      	uxtb	r0, r0
 800c5d8:	4770      	bx	lr
 800c5da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c5de:	2b05      	cmp	r3, #5
 800c5e0:	d801      	bhi.n	800c5e6 <__hexdig_fun+0x1a>
 800c5e2:	3847      	subs	r0, #71	; 0x47
 800c5e4:	e7f7      	b.n	800c5d6 <__hexdig_fun+0xa>
 800c5e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c5ea:	2b05      	cmp	r3, #5
 800c5ec:	d801      	bhi.n	800c5f2 <__hexdig_fun+0x26>
 800c5ee:	3827      	subs	r0, #39	; 0x27
 800c5f0:	e7f1      	b.n	800c5d6 <__hexdig_fun+0xa>
 800c5f2:	2000      	movs	r0, #0
 800c5f4:	4770      	bx	lr
	...

0800c5f8 <__gethex>:
 800c5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fc:	ed2d 8b02 	vpush	{d8}
 800c600:	b089      	sub	sp, #36	; 0x24
 800c602:	ee08 0a10 	vmov	s16, r0
 800c606:	9304      	str	r3, [sp, #16]
 800c608:	4bb4      	ldr	r3, [pc, #720]	; (800c8dc <__gethex+0x2e4>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	9301      	str	r3, [sp, #4]
 800c60e:	4618      	mov	r0, r3
 800c610:	468b      	mov	fp, r1
 800c612:	4690      	mov	r8, r2
 800c614:	f7f3 fe0e 	bl	8000234 <strlen>
 800c618:	9b01      	ldr	r3, [sp, #4]
 800c61a:	f8db 2000 	ldr.w	r2, [fp]
 800c61e:	4403      	add	r3, r0
 800c620:	4682      	mov	sl, r0
 800c622:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c626:	9305      	str	r3, [sp, #20]
 800c628:	1c93      	adds	r3, r2, #2
 800c62a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c62e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c632:	32fe      	adds	r2, #254	; 0xfe
 800c634:	18d1      	adds	r1, r2, r3
 800c636:	461f      	mov	r7, r3
 800c638:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c63c:	9100      	str	r1, [sp, #0]
 800c63e:	2830      	cmp	r0, #48	; 0x30
 800c640:	d0f8      	beq.n	800c634 <__gethex+0x3c>
 800c642:	f7ff ffc3 	bl	800c5cc <__hexdig_fun>
 800c646:	4604      	mov	r4, r0
 800c648:	2800      	cmp	r0, #0
 800c64a:	d13a      	bne.n	800c6c2 <__gethex+0xca>
 800c64c:	9901      	ldr	r1, [sp, #4]
 800c64e:	4652      	mov	r2, sl
 800c650:	4638      	mov	r0, r7
 800c652:	f001 ff0d 	bl	800e470 <strncmp>
 800c656:	4605      	mov	r5, r0
 800c658:	2800      	cmp	r0, #0
 800c65a:	d168      	bne.n	800c72e <__gethex+0x136>
 800c65c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c660:	eb07 060a 	add.w	r6, r7, sl
 800c664:	f7ff ffb2 	bl	800c5cc <__hexdig_fun>
 800c668:	2800      	cmp	r0, #0
 800c66a:	d062      	beq.n	800c732 <__gethex+0x13a>
 800c66c:	4633      	mov	r3, r6
 800c66e:	7818      	ldrb	r0, [r3, #0]
 800c670:	2830      	cmp	r0, #48	; 0x30
 800c672:	461f      	mov	r7, r3
 800c674:	f103 0301 	add.w	r3, r3, #1
 800c678:	d0f9      	beq.n	800c66e <__gethex+0x76>
 800c67a:	f7ff ffa7 	bl	800c5cc <__hexdig_fun>
 800c67e:	2301      	movs	r3, #1
 800c680:	fab0 f480 	clz	r4, r0
 800c684:	0964      	lsrs	r4, r4, #5
 800c686:	4635      	mov	r5, r6
 800c688:	9300      	str	r3, [sp, #0]
 800c68a:	463a      	mov	r2, r7
 800c68c:	4616      	mov	r6, r2
 800c68e:	3201      	adds	r2, #1
 800c690:	7830      	ldrb	r0, [r6, #0]
 800c692:	f7ff ff9b 	bl	800c5cc <__hexdig_fun>
 800c696:	2800      	cmp	r0, #0
 800c698:	d1f8      	bne.n	800c68c <__gethex+0x94>
 800c69a:	9901      	ldr	r1, [sp, #4]
 800c69c:	4652      	mov	r2, sl
 800c69e:	4630      	mov	r0, r6
 800c6a0:	f001 fee6 	bl	800e470 <strncmp>
 800c6a4:	b980      	cbnz	r0, 800c6c8 <__gethex+0xd0>
 800c6a6:	b94d      	cbnz	r5, 800c6bc <__gethex+0xc4>
 800c6a8:	eb06 050a 	add.w	r5, r6, sl
 800c6ac:	462a      	mov	r2, r5
 800c6ae:	4616      	mov	r6, r2
 800c6b0:	3201      	adds	r2, #1
 800c6b2:	7830      	ldrb	r0, [r6, #0]
 800c6b4:	f7ff ff8a 	bl	800c5cc <__hexdig_fun>
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	d1f8      	bne.n	800c6ae <__gethex+0xb6>
 800c6bc:	1bad      	subs	r5, r5, r6
 800c6be:	00ad      	lsls	r5, r5, #2
 800c6c0:	e004      	b.n	800c6cc <__gethex+0xd4>
 800c6c2:	2400      	movs	r4, #0
 800c6c4:	4625      	mov	r5, r4
 800c6c6:	e7e0      	b.n	800c68a <__gethex+0x92>
 800c6c8:	2d00      	cmp	r5, #0
 800c6ca:	d1f7      	bne.n	800c6bc <__gethex+0xc4>
 800c6cc:	7833      	ldrb	r3, [r6, #0]
 800c6ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c6d2:	2b50      	cmp	r3, #80	; 0x50
 800c6d4:	d13b      	bne.n	800c74e <__gethex+0x156>
 800c6d6:	7873      	ldrb	r3, [r6, #1]
 800c6d8:	2b2b      	cmp	r3, #43	; 0x2b
 800c6da:	d02c      	beq.n	800c736 <__gethex+0x13e>
 800c6dc:	2b2d      	cmp	r3, #45	; 0x2d
 800c6de:	d02e      	beq.n	800c73e <__gethex+0x146>
 800c6e0:	1c71      	adds	r1, r6, #1
 800c6e2:	f04f 0900 	mov.w	r9, #0
 800c6e6:	7808      	ldrb	r0, [r1, #0]
 800c6e8:	f7ff ff70 	bl	800c5cc <__hexdig_fun>
 800c6ec:	1e43      	subs	r3, r0, #1
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	2b18      	cmp	r3, #24
 800c6f2:	d82c      	bhi.n	800c74e <__gethex+0x156>
 800c6f4:	f1a0 0210 	sub.w	r2, r0, #16
 800c6f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c6fc:	f7ff ff66 	bl	800c5cc <__hexdig_fun>
 800c700:	1e43      	subs	r3, r0, #1
 800c702:	b2db      	uxtb	r3, r3
 800c704:	2b18      	cmp	r3, #24
 800c706:	d91d      	bls.n	800c744 <__gethex+0x14c>
 800c708:	f1b9 0f00 	cmp.w	r9, #0
 800c70c:	d000      	beq.n	800c710 <__gethex+0x118>
 800c70e:	4252      	negs	r2, r2
 800c710:	4415      	add	r5, r2
 800c712:	f8cb 1000 	str.w	r1, [fp]
 800c716:	b1e4      	cbz	r4, 800c752 <__gethex+0x15a>
 800c718:	9b00      	ldr	r3, [sp, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	bf14      	ite	ne
 800c71e:	2700      	movne	r7, #0
 800c720:	2706      	moveq	r7, #6
 800c722:	4638      	mov	r0, r7
 800c724:	b009      	add	sp, #36	; 0x24
 800c726:	ecbd 8b02 	vpop	{d8}
 800c72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c72e:	463e      	mov	r6, r7
 800c730:	4625      	mov	r5, r4
 800c732:	2401      	movs	r4, #1
 800c734:	e7ca      	b.n	800c6cc <__gethex+0xd4>
 800c736:	f04f 0900 	mov.w	r9, #0
 800c73a:	1cb1      	adds	r1, r6, #2
 800c73c:	e7d3      	b.n	800c6e6 <__gethex+0xee>
 800c73e:	f04f 0901 	mov.w	r9, #1
 800c742:	e7fa      	b.n	800c73a <__gethex+0x142>
 800c744:	230a      	movs	r3, #10
 800c746:	fb03 0202 	mla	r2, r3, r2, r0
 800c74a:	3a10      	subs	r2, #16
 800c74c:	e7d4      	b.n	800c6f8 <__gethex+0x100>
 800c74e:	4631      	mov	r1, r6
 800c750:	e7df      	b.n	800c712 <__gethex+0x11a>
 800c752:	1bf3      	subs	r3, r6, r7
 800c754:	3b01      	subs	r3, #1
 800c756:	4621      	mov	r1, r4
 800c758:	2b07      	cmp	r3, #7
 800c75a:	dc0b      	bgt.n	800c774 <__gethex+0x17c>
 800c75c:	ee18 0a10 	vmov	r0, s16
 800c760:	f000 fa90 	bl	800cc84 <_Balloc>
 800c764:	4604      	mov	r4, r0
 800c766:	b940      	cbnz	r0, 800c77a <__gethex+0x182>
 800c768:	4b5d      	ldr	r3, [pc, #372]	; (800c8e0 <__gethex+0x2e8>)
 800c76a:	4602      	mov	r2, r0
 800c76c:	21de      	movs	r1, #222	; 0xde
 800c76e:	485d      	ldr	r0, [pc, #372]	; (800c8e4 <__gethex+0x2ec>)
 800c770:	f7ff f81e 	bl	800b7b0 <__assert_func>
 800c774:	3101      	adds	r1, #1
 800c776:	105b      	asrs	r3, r3, #1
 800c778:	e7ee      	b.n	800c758 <__gethex+0x160>
 800c77a:	f100 0914 	add.w	r9, r0, #20
 800c77e:	f04f 0b00 	mov.w	fp, #0
 800c782:	f1ca 0301 	rsb	r3, sl, #1
 800c786:	f8cd 9008 	str.w	r9, [sp, #8]
 800c78a:	f8cd b000 	str.w	fp, [sp]
 800c78e:	9306      	str	r3, [sp, #24]
 800c790:	42b7      	cmp	r7, r6
 800c792:	d340      	bcc.n	800c816 <__gethex+0x21e>
 800c794:	9802      	ldr	r0, [sp, #8]
 800c796:	9b00      	ldr	r3, [sp, #0]
 800c798:	f840 3b04 	str.w	r3, [r0], #4
 800c79c:	eba0 0009 	sub.w	r0, r0, r9
 800c7a0:	1080      	asrs	r0, r0, #2
 800c7a2:	0146      	lsls	r6, r0, #5
 800c7a4:	6120      	str	r0, [r4, #16]
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f000 fb5e 	bl	800ce68 <__hi0bits>
 800c7ac:	1a30      	subs	r0, r6, r0
 800c7ae:	f8d8 6000 	ldr.w	r6, [r8]
 800c7b2:	42b0      	cmp	r0, r6
 800c7b4:	dd63      	ble.n	800c87e <__gethex+0x286>
 800c7b6:	1b87      	subs	r7, r0, r6
 800c7b8:	4639      	mov	r1, r7
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	f000 ff02 	bl	800d5c4 <__any_on>
 800c7c0:	4682      	mov	sl, r0
 800c7c2:	b1a8      	cbz	r0, 800c7f0 <__gethex+0x1f8>
 800c7c4:	1e7b      	subs	r3, r7, #1
 800c7c6:	1159      	asrs	r1, r3, #5
 800c7c8:	f003 021f 	and.w	r2, r3, #31
 800c7cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c7d0:	f04f 0a01 	mov.w	sl, #1
 800c7d4:	fa0a f202 	lsl.w	r2, sl, r2
 800c7d8:	420a      	tst	r2, r1
 800c7da:	d009      	beq.n	800c7f0 <__gethex+0x1f8>
 800c7dc:	4553      	cmp	r3, sl
 800c7de:	dd05      	ble.n	800c7ec <__gethex+0x1f4>
 800c7e0:	1eb9      	subs	r1, r7, #2
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f000 feee 	bl	800d5c4 <__any_on>
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	d145      	bne.n	800c878 <__gethex+0x280>
 800c7ec:	f04f 0a02 	mov.w	sl, #2
 800c7f0:	4639      	mov	r1, r7
 800c7f2:	4620      	mov	r0, r4
 800c7f4:	f7ff fe98 	bl	800c528 <rshift>
 800c7f8:	443d      	add	r5, r7
 800c7fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7fe:	42ab      	cmp	r3, r5
 800c800:	da4c      	bge.n	800c89c <__gethex+0x2a4>
 800c802:	ee18 0a10 	vmov	r0, s16
 800c806:	4621      	mov	r1, r4
 800c808:	f000 fa7c 	bl	800cd04 <_Bfree>
 800c80c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c80e:	2300      	movs	r3, #0
 800c810:	6013      	str	r3, [r2, #0]
 800c812:	27a3      	movs	r7, #163	; 0xa3
 800c814:	e785      	b.n	800c722 <__gethex+0x12a>
 800c816:	1e73      	subs	r3, r6, #1
 800c818:	9a05      	ldr	r2, [sp, #20]
 800c81a:	9303      	str	r3, [sp, #12]
 800c81c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c820:	4293      	cmp	r3, r2
 800c822:	d019      	beq.n	800c858 <__gethex+0x260>
 800c824:	f1bb 0f20 	cmp.w	fp, #32
 800c828:	d107      	bne.n	800c83a <__gethex+0x242>
 800c82a:	9b02      	ldr	r3, [sp, #8]
 800c82c:	9a00      	ldr	r2, [sp, #0]
 800c82e:	f843 2b04 	str.w	r2, [r3], #4
 800c832:	9302      	str	r3, [sp, #8]
 800c834:	2300      	movs	r3, #0
 800c836:	9300      	str	r3, [sp, #0]
 800c838:	469b      	mov	fp, r3
 800c83a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c83e:	f7ff fec5 	bl	800c5cc <__hexdig_fun>
 800c842:	9b00      	ldr	r3, [sp, #0]
 800c844:	f000 000f 	and.w	r0, r0, #15
 800c848:	fa00 f00b 	lsl.w	r0, r0, fp
 800c84c:	4303      	orrs	r3, r0
 800c84e:	9300      	str	r3, [sp, #0]
 800c850:	f10b 0b04 	add.w	fp, fp, #4
 800c854:	9b03      	ldr	r3, [sp, #12]
 800c856:	e00d      	b.n	800c874 <__gethex+0x27c>
 800c858:	9b03      	ldr	r3, [sp, #12]
 800c85a:	9a06      	ldr	r2, [sp, #24]
 800c85c:	4413      	add	r3, r2
 800c85e:	42bb      	cmp	r3, r7
 800c860:	d3e0      	bcc.n	800c824 <__gethex+0x22c>
 800c862:	4618      	mov	r0, r3
 800c864:	9901      	ldr	r1, [sp, #4]
 800c866:	9307      	str	r3, [sp, #28]
 800c868:	4652      	mov	r2, sl
 800c86a:	f001 fe01 	bl	800e470 <strncmp>
 800c86e:	9b07      	ldr	r3, [sp, #28]
 800c870:	2800      	cmp	r0, #0
 800c872:	d1d7      	bne.n	800c824 <__gethex+0x22c>
 800c874:	461e      	mov	r6, r3
 800c876:	e78b      	b.n	800c790 <__gethex+0x198>
 800c878:	f04f 0a03 	mov.w	sl, #3
 800c87c:	e7b8      	b.n	800c7f0 <__gethex+0x1f8>
 800c87e:	da0a      	bge.n	800c896 <__gethex+0x29e>
 800c880:	1a37      	subs	r7, r6, r0
 800c882:	4621      	mov	r1, r4
 800c884:	ee18 0a10 	vmov	r0, s16
 800c888:	463a      	mov	r2, r7
 800c88a:	f000 fc57 	bl	800d13c <__lshift>
 800c88e:	1bed      	subs	r5, r5, r7
 800c890:	4604      	mov	r4, r0
 800c892:	f100 0914 	add.w	r9, r0, #20
 800c896:	f04f 0a00 	mov.w	sl, #0
 800c89a:	e7ae      	b.n	800c7fa <__gethex+0x202>
 800c89c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c8a0:	42a8      	cmp	r0, r5
 800c8a2:	dd72      	ble.n	800c98a <__gethex+0x392>
 800c8a4:	1b45      	subs	r5, r0, r5
 800c8a6:	42ae      	cmp	r6, r5
 800c8a8:	dc36      	bgt.n	800c918 <__gethex+0x320>
 800c8aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c8ae:	2b02      	cmp	r3, #2
 800c8b0:	d02a      	beq.n	800c908 <__gethex+0x310>
 800c8b2:	2b03      	cmp	r3, #3
 800c8b4:	d02c      	beq.n	800c910 <__gethex+0x318>
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d11c      	bne.n	800c8f4 <__gethex+0x2fc>
 800c8ba:	42ae      	cmp	r6, r5
 800c8bc:	d11a      	bne.n	800c8f4 <__gethex+0x2fc>
 800c8be:	2e01      	cmp	r6, #1
 800c8c0:	d112      	bne.n	800c8e8 <__gethex+0x2f0>
 800c8c2:	9a04      	ldr	r2, [sp, #16]
 800c8c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c8c8:	6013      	str	r3, [r2, #0]
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	6123      	str	r3, [r4, #16]
 800c8ce:	f8c9 3000 	str.w	r3, [r9]
 800c8d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c8d4:	2762      	movs	r7, #98	; 0x62
 800c8d6:	601c      	str	r4, [r3, #0]
 800c8d8:	e723      	b.n	800c722 <__gethex+0x12a>
 800c8da:	bf00      	nop
 800c8dc:	0800f478 	.word	0x0800f478
 800c8e0:	0800f401 	.word	0x0800f401
 800c8e4:	0800f412 	.word	0x0800f412
 800c8e8:	1e71      	subs	r1, r6, #1
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	f000 fe6a 	bl	800d5c4 <__any_on>
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	d1e6      	bne.n	800c8c2 <__gethex+0x2ca>
 800c8f4:	ee18 0a10 	vmov	r0, s16
 800c8f8:	4621      	mov	r1, r4
 800c8fa:	f000 fa03 	bl	800cd04 <_Bfree>
 800c8fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c900:	2300      	movs	r3, #0
 800c902:	6013      	str	r3, [r2, #0]
 800c904:	2750      	movs	r7, #80	; 0x50
 800c906:	e70c      	b.n	800c722 <__gethex+0x12a>
 800c908:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d1f2      	bne.n	800c8f4 <__gethex+0x2fc>
 800c90e:	e7d8      	b.n	800c8c2 <__gethex+0x2ca>
 800c910:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c912:	2b00      	cmp	r3, #0
 800c914:	d1d5      	bne.n	800c8c2 <__gethex+0x2ca>
 800c916:	e7ed      	b.n	800c8f4 <__gethex+0x2fc>
 800c918:	1e6f      	subs	r7, r5, #1
 800c91a:	f1ba 0f00 	cmp.w	sl, #0
 800c91e:	d131      	bne.n	800c984 <__gethex+0x38c>
 800c920:	b127      	cbz	r7, 800c92c <__gethex+0x334>
 800c922:	4639      	mov	r1, r7
 800c924:	4620      	mov	r0, r4
 800c926:	f000 fe4d 	bl	800d5c4 <__any_on>
 800c92a:	4682      	mov	sl, r0
 800c92c:	117b      	asrs	r3, r7, #5
 800c92e:	2101      	movs	r1, #1
 800c930:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c934:	f007 071f 	and.w	r7, r7, #31
 800c938:	fa01 f707 	lsl.w	r7, r1, r7
 800c93c:	421f      	tst	r7, r3
 800c93e:	4629      	mov	r1, r5
 800c940:	4620      	mov	r0, r4
 800c942:	bf18      	it	ne
 800c944:	f04a 0a02 	orrne.w	sl, sl, #2
 800c948:	1b76      	subs	r6, r6, r5
 800c94a:	f7ff fded 	bl	800c528 <rshift>
 800c94e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c952:	2702      	movs	r7, #2
 800c954:	f1ba 0f00 	cmp.w	sl, #0
 800c958:	d048      	beq.n	800c9ec <__gethex+0x3f4>
 800c95a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c95e:	2b02      	cmp	r3, #2
 800c960:	d015      	beq.n	800c98e <__gethex+0x396>
 800c962:	2b03      	cmp	r3, #3
 800c964:	d017      	beq.n	800c996 <__gethex+0x39e>
 800c966:	2b01      	cmp	r3, #1
 800c968:	d109      	bne.n	800c97e <__gethex+0x386>
 800c96a:	f01a 0f02 	tst.w	sl, #2
 800c96e:	d006      	beq.n	800c97e <__gethex+0x386>
 800c970:	f8d9 0000 	ldr.w	r0, [r9]
 800c974:	ea4a 0a00 	orr.w	sl, sl, r0
 800c978:	f01a 0f01 	tst.w	sl, #1
 800c97c:	d10e      	bne.n	800c99c <__gethex+0x3a4>
 800c97e:	f047 0710 	orr.w	r7, r7, #16
 800c982:	e033      	b.n	800c9ec <__gethex+0x3f4>
 800c984:	f04f 0a01 	mov.w	sl, #1
 800c988:	e7d0      	b.n	800c92c <__gethex+0x334>
 800c98a:	2701      	movs	r7, #1
 800c98c:	e7e2      	b.n	800c954 <__gethex+0x35c>
 800c98e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c990:	f1c3 0301 	rsb	r3, r3, #1
 800c994:	9315      	str	r3, [sp, #84]	; 0x54
 800c996:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d0f0      	beq.n	800c97e <__gethex+0x386>
 800c99c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c9a0:	f104 0314 	add.w	r3, r4, #20
 800c9a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c9a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c9ac:	f04f 0c00 	mov.w	ip, #0
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9b6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c9ba:	d01c      	beq.n	800c9f6 <__gethex+0x3fe>
 800c9bc:	3201      	adds	r2, #1
 800c9be:	6002      	str	r2, [r0, #0]
 800c9c0:	2f02      	cmp	r7, #2
 800c9c2:	f104 0314 	add.w	r3, r4, #20
 800c9c6:	d13f      	bne.n	800ca48 <__gethex+0x450>
 800c9c8:	f8d8 2000 	ldr.w	r2, [r8]
 800c9cc:	3a01      	subs	r2, #1
 800c9ce:	42b2      	cmp	r2, r6
 800c9d0:	d10a      	bne.n	800c9e8 <__gethex+0x3f0>
 800c9d2:	1171      	asrs	r1, r6, #5
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c9da:	f006 061f 	and.w	r6, r6, #31
 800c9de:	fa02 f606 	lsl.w	r6, r2, r6
 800c9e2:	421e      	tst	r6, r3
 800c9e4:	bf18      	it	ne
 800c9e6:	4617      	movne	r7, r2
 800c9e8:	f047 0720 	orr.w	r7, r7, #32
 800c9ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c9ee:	601c      	str	r4, [r3, #0]
 800c9f0:	9b04      	ldr	r3, [sp, #16]
 800c9f2:	601d      	str	r5, [r3, #0]
 800c9f4:	e695      	b.n	800c722 <__gethex+0x12a>
 800c9f6:	4299      	cmp	r1, r3
 800c9f8:	f843 cc04 	str.w	ip, [r3, #-4]
 800c9fc:	d8d8      	bhi.n	800c9b0 <__gethex+0x3b8>
 800c9fe:	68a3      	ldr	r3, [r4, #8]
 800ca00:	459b      	cmp	fp, r3
 800ca02:	db19      	blt.n	800ca38 <__gethex+0x440>
 800ca04:	6861      	ldr	r1, [r4, #4]
 800ca06:	ee18 0a10 	vmov	r0, s16
 800ca0a:	3101      	adds	r1, #1
 800ca0c:	f000 f93a 	bl	800cc84 <_Balloc>
 800ca10:	4681      	mov	r9, r0
 800ca12:	b918      	cbnz	r0, 800ca1c <__gethex+0x424>
 800ca14:	4b1a      	ldr	r3, [pc, #104]	; (800ca80 <__gethex+0x488>)
 800ca16:	4602      	mov	r2, r0
 800ca18:	2184      	movs	r1, #132	; 0x84
 800ca1a:	e6a8      	b.n	800c76e <__gethex+0x176>
 800ca1c:	6922      	ldr	r2, [r4, #16]
 800ca1e:	3202      	adds	r2, #2
 800ca20:	f104 010c 	add.w	r1, r4, #12
 800ca24:	0092      	lsls	r2, r2, #2
 800ca26:	300c      	adds	r0, #12
 800ca28:	f000 f91e 	bl	800cc68 <memcpy>
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	ee18 0a10 	vmov	r0, s16
 800ca32:	f000 f967 	bl	800cd04 <_Bfree>
 800ca36:	464c      	mov	r4, r9
 800ca38:	6923      	ldr	r3, [r4, #16]
 800ca3a:	1c5a      	adds	r2, r3, #1
 800ca3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ca40:	6122      	str	r2, [r4, #16]
 800ca42:	2201      	movs	r2, #1
 800ca44:	615a      	str	r2, [r3, #20]
 800ca46:	e7bb      	b.n	800c9c0 <__gethex+0x3c8>
 800ca48:	6922      	ldr	r2, [r4, #16]
 800ca4a:	455a      	cmp	r2, fp
 800ca4c:	dd0b      	ble.n	800ca66 <__gethex+0x46e>
 800ca4e:	2101      	movs	r1, #1
 800ca50:	4620      	mov	r0, r4
 800ca52:	f7ff fd69 	bl	800c528 <rshift>
 800ca56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca5a:	3501      	adds	r5, #1
 800ca5c:	42ab      	cmp	r3, r5
 800ca5e:	f6ff aed0 	blt.w	800c802 <__gethex+0x20a>
 800ca62:	2701      	movs	r7, #1
 800ca64:	e7c0      	b.n	800c9e8 <__gethex+0x3f0>
 800ca66:	f016 061f 	ands.w	r6, r6, #31
 800ca6a:	d0fa      	beq.n	800ca62 <__gethex+0x46a>
 800ca6c:	4453      	add	r3, sl
 800ca6e:	f1c6 0620 	rsb	r6, r6, #32
 800ca72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ca76:	f000 f9f7 	bl	800ce68 <__hi0bits>
 800ca7a:	42b0      	cmp	r0, r6
 800ca7c:	dbe7      	blt.n	800ca4e <__gethex+0x456>
 800ca7e:	e7f0      	b.n	800ca62 <__gethex+0x46a>
 800ca80:	0800f401 	.word	0x0800f401

0800ca84 <L_shift>:
 800ca84:	f1c2 0208 	rsb	r2, r2, #8
 800ca88:	0092      	lsls	r2, r2, #2
 800ca8a:	b570      	push	{r4, r5, r6, lr}
 800ca8c:	f1c2 0620 	rsb	r6, r2, #32
 800ca90:	6843      	ldr	r3, [r0, #4]
 800ca92:	6804      	ldr	r4, [r0, #0]
 800ca94:	fa03 f506 	lsl.w	r5, r3, r6
 800ca98:	432c      	orrs	r4, r5
 800ca9a:	40d3      	lsrs	r3, r2
 800ca9c:	6004      	str	r4, [r0, #0]
 800ca9e:	f840 3f04 	str.w	r3, [r0, #4]!
 800caa2:	4288      	cmp	r0, r1
 800caa4:	d3f4      	bcc.n	800ca90 <L_shift+0xc>
 800caa6:	bd70      	pop	{r4, r5, r6, pc}

0800caa8 <__match>:
 800caa8:	b530      	push	{r4, r5, lr}
 800caaa:	6803      	ldr	r3, [r0, #0]
 800caac:	3301      	adds	r3, #1
 800caae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cab2:	b914      	cbnz	r4, 800caba <__match+0x12>
 800cab4:	6003      	str	r3, [r0, #0]
 800cab6:	2001      	movs	r0, #1
 800cab8:	bd30      	pop	{r4, r5, pc}
 800caba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cabe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cac2:	2d19      	cmp	r5, #25
 800cac4:	bf98      	it	ls
 800cac6:	3220      	addls	r2, #32
 800cac8:	42a2      	cmp	r2, r4
 800caca:	d0f0      	beq.n	800caae <__match+0x6>
 800cacc:	2000      	movs	r0, #0
 800cace:	e7f3      	b.n	800cab8 <__match+0x10>

0800cad0 <__hexnan>:
 800cad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad4:	680b      	ldr	r3, [r1, #0]
 800cad6:	115e      	asrs	r6, r3, #5
 800cad8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cadc:	f013 031f 	ands.w	r3, r3, #31
 800cae0:	b087      	sub	sp, #28
 800cae2:	bf18      	it	ne
 800cae4:	3604      	addne	r6, #4
 800cae6:	2500      	movs	r5, #0
 800cae8:	1f37      	subs	r7, r6, #4
 800caea:	4690      	mov	r8, r2
 800caec:	6802      	ldr	r2, [r0, #0]
 800caee:	9301      	str	r3, [sp, #4]
 800caf0:	4682      	mov	sl, r0
 800caf2:	f846 5c04 	str.w	r5, [r6, #-4]
 800caf6:	46b9      	mov	r9, r7
 800caf8:	463c      	mov	r4, r7
 800cafa:	9502      	str	r5, [sp, #8]
 800cafc:	46ab      	mov	fp, r5
 800cafe:	7851      	ldrb	r1, [r2, #1]
 800cb00:	1c53      	adds	r3, r2, #1
 800cb02:	9303      	str	r3, [sp, #12]
 800cb04:	b341      	cbz	r1, 800cb58 <__hexnan+0x88>
 800cb06:	4608      	mov	r0, r1
 800cb08:	9205      	str	r2, [sp, #20]
 800cb0a:	9104      	str	r1, [sp, #16]
 800cb0c:	f7ff fd5e 	bl	800c5cc <__hexdig_fun>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d14f      	bne.n	800cbb4 <__hexnan+0xe4>
 800cb14:	9904      	ldr	r1, [sp, #16]
 800cb16:	9a05      	ldr	r2, [sp, #20]
 800cb18:	2920      	cmp	r1, #32
 800cb1a:	d818      	bhi.n	800cb4e <__hexnan+0x7e>
 800cb1c:	9b02      	ldr	r3, [sp, #8]
 800cb1e:	459b      	cmp	fp, r3
 800cb20:	dd13      	ble.n	800cb4a <__hexnan+0x7a>
 800cb22:	454c      	cmp	r4, r9
 800cb24:	d206      	bcs.n	800cb34 <__hexnan+0x64>
 800cb26:	2d07      	cmp	r5, #7
 800cb28:	dc04      	bgt.n	800cb34 <__hexnan+0x64>
 800cb2a:	462a      	mov	r2, r5
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f7ff ffa8 	bl	800ca84 <L_shift>
 800cb34:	4544      	cmp	r4, r8
 800cb36:	d950      	bls.n	800cbda <__hexnan+0x10a>
 800cb38:	2300      	movs	r3, #0
 800cb3a:	f1a4 0904 	sub.w	r9, r4, #4
 800cb3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb42:	f8cd b008 	str.w	fp, [sp, #8]
 800cb46:	464c      	mov	r4, r9
 800cb48:	461d      	mov	r5, r3
 800cb4a:	9a03      	ldr	r2, [sp, #12]
 800cb4c:	e7d7      	b.n	800cafe <__hexnan+0x2e>
 800cb4e:	2929      	cmp	r1, #41	; 0x29
 800cb50:	d156      	bne.n	800cc00 <__hexnan+0x130>
 800cb52:	3202      	adds	r2, #2
 800cb54:	f8ca 2000 	str.w	r2, [sl]
 800cb58:	f1bb 0f00 	cmp.w	fp, #0
 800cb5c:	d050      	beq.n	800cc00 <__hexnan+0x130>
 800cb5e:	454c      	cmp	r4, r9
 800cb60:	d206      	bcs.n	800cb70 <__hexnan+0xa0>
 800cb62:	2d07      	cmp	r5, #7
 800cb64:	dc04      	bgt.n	800cb70 <__hexnan+0xa0>
 800cb66:	462a      	mov	r2, r5
 800cb68:	4649      	mov	r1, r9
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	f7ff ff8a 	bl	800ca84 <L_shift>
 800cb70:	4544      	cmp	r4, r8
 800cb72:	d934      	bls.n	800cbde <__hexnan+0x10e>
 800cb74:	f1a8 0204 	sub.w	r2, r8, #4
 800cb78:	4623      	mov	r3, r4
 800cb7a:	f853 1b04 	ldr.w	r1, [r3], #4
 800cb7e:	f842 1f04 	str.w	r1, [r2, #4]!
 800cb82:	429f      	cmp	r7, r3
 800cb84:	d2f9      	bcs.n	800cb7a <__hexnan+0xaa>
 800cb86:	1b3b      	subs	r3, r7, r4
 800cb88:	f023 0303 	bic.w	r3, r3, #3
 800cb8c:	3304      	adds	r3, #4
 800cb8e:	3401      	adds	r4, #1
 800cb90:	3e03      	subs	r6, #3
 800cb92:	42b4      	cmp	r4, r6
 800cb94:	bf88      	it	hi
 800cb96:	2304      	movhi	r3, #4
 800cb98:	4443      	add	r3, r8
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	f843 2b04 	str.w	r2, [r3], #4
 800cba0:	429f      	cmp	r7, r3
 800cba2:	d2fb      	bcs.n	800cb9c <__hexnan+0xcc>
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	b91b      	cbnz	r3, 800cbb0 <__hexnan+0xe0>
 800cba8:	4547      	cmp	r7, r8
 800cbaa:	d127      	bne.n	800cbfc <__hexnan+0x12c>
 800cbac:	2301      	movs	r3, #1
 800cbae:	603b      	str	r3, [r7, #0]
 800cbb0:	2005      	movs	r0, #5
 800cbb2:	e026      	b.n	800cc02 <__hexnan+0x132>
 800cbb4:	3501      	adds	r5, #1
 800cbb6:	2d08      	cmp	r5, #8
 800cbb8:	f10b 0b01 	add.w	fp, fp, #1
 800cbbc:	dd06      	ble.n	800cbcc <__hexnan+0xfc>
 800cbbe:	4544      	cmp	r4, r8
 800cbc0:	d9c3      	bls.n	800cb4a <__hexnan+0x7a>
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbc8:	2501      	movs	r5, #1
 800cbca:	3c04      	subs	r4, #4
 800cbcc:	6822      	ldr	r2, [r4, #0]
 800cbce:	f000 000f 	and.w	r0, r0, #15
 800cbd2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cbd6:	6022      	str	r2, [r4, #0]
 800cbd8:	e7b7      	b.n	800cb4a <__hexnan+0x7a>
 800cbda:	2508      	movs	r5, #8
 800cbdc:	e7b5      	b.n	800cb4a <__hexnan+0x7a>
 800cbde:	9b01      	ldr	r3, [sp, #4]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d0df      	beq.n	800cba4 <__hexnan+0xd4>
 800cbe4:	f04f 32ff 	mov.w	r2, #4294967295
 800cbe8:	f1c3 0320 	rsb	r3, r3, #32
 800cbec:	fa22 f303 	lsr.w	r3, r2, r3
 800cbf0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cbf4:	401a      	ands	r2, r3
 800cbf6:	f846 2c04 	str.w	r2, [r6, #-4]
 800cbfa:	e7d3      	b.n	800cba4 <__hexnan+0xd4>
 800cbfc:	3f04      	subs	r7, #4
 800cbfe:	e7d1      	b.n	800cba4 <__hexnan+0xd4>
 800cc00:	2004      	movs	r0, #4
 800cc02:	b007      	add	sp, #28
 800cc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc08 <_localeconv_r>:
 800cc08:	4800      	ldr	r0, [pc, #0]	; (800cc0c <_localeconv_r+0x4>)
 800cc0a:	4770      	bx	lr
 800cc0c:	200001cc 	.word	0x200001cc

0800cc10 <_lseek_r>:
 800cc10:	b538      	push	{r3, r4, r5, lr}
 800cc12:	4d07      	ldr	r5, [pc, #28]	; (800cc30 <_lseek_r+0x20>)
 800cc14:	4604      	mov	r4, r0
 800cc16:	4608      	mov	r0, r1
 800cc18:	4611      	mov	r1, r2
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	602a      	str	r2, [r5, #0]
 800cc1e:	461a      	mov	r2, r3
 800cc20:	f7f5 f918 	bl	8001e54 <_lseek>
 800cc24:	1c43      	adds	r3, r0, #1
 800cc26:	d102      	bne.n	800cc2e <_lseek_r+0x1e>
 800cc28:	682b      	ldr	r3, [r5, #0]
 800cc2a:	b103      	cbz	r3, 800cc2e <_lseek_r+0x1e>
 800cc2c:	6023      	str	r3, [r4, #0]
 800cc2e:	bd38      	pop	{r3, r4, r5, pc}
 800cc30:	20000518 	.word	0x20000518

0800cc34 <malloc>:
 800cc34:	4b02      	ldr	r3, [pc, #8]	; (800cc40 <malloc+0xc>)
 800cc36:	4601      	mov	r1, r0
 800cc38:	6818      	ldr	r0, [r3, #0]
 800cc3a:	f000 bd67 	b.w	800d70c <_malloc_r>
 800cc3e:	bf00      	nop
 800cc40:	20000074 	.word	0x20000074

0800cc44 <__ascii_mbtowc>:
 800cc44:	b082      	sub	sp, #8
 800cc46:	b901      	cbnz	r1, 800cc4a <__ascii_mbtowc+0x6>
 800cc48:	a901      	add	r1, sp, #4
 800cc4a:	b142      	cbz	r2, 800cc5e <__ascii_mbtowc+0x1a>
 800cc4c:	b14b      	cbz	r3, 800cc62 <__ascii_mbtowc+0x1e>
 800cc4e:	7813      	ldrb	r3, [r2, #0]
 800cc50:	600b      	str	r3, [r1, #0]
 800cc52:	7812      	ldrb	r2, [r2, #0]
 800cc54:	1e10      	subs	r0, r2, #0
 800cc56:	bf18      	it	ne
 800cc58:	2001      	movne	r0, #1
 800cc5a:	b002      	add	sp, #8
 800cc5c:	4770      	bx	lr
 800cc5e:	4610      	mov	r0, r2
 800cc60:	e7fb      	b.n	800cc5a <__ascii_mbtowc+0x16>
 800cc62:	f06f 0001 	mvn.w	r0, #1
 800cc66:	e7f8      	b.n	800cc5a <__ascii_mbtowc+0x16>

0800cc68 <memcpy>:
 800cc68:	440a      	add	r2, r1
 800cc6a:	4291      	cmp	r1, r2
 800cc6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc70:	d100      	bne.n	800cc74 <memcpy+0xc>
 800cc72:	4770      	bx	lr
 800cc74:	b510      	push	{r4, lr}
 800cc76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc7e:	4291      	cmp	r1, r2
 800cc80:	d1f9      	bne.n	800cc76 <memcpy+0xe>
 800cc82:	bd10      	pop	{r4, pc}

0800cc84 <_Balloc>:
 800cc84:	b570      	push	{r4, r5, r6, lr}
 800cc86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc88:	4604      	mov	r4, r0
 800cc8a:	460d      	mov	r5, r1
 800cc8c:	b976      	cbnz	r6, 800ccac <_Balloc+0x28>
 800cc8e:	2010      	movs	r0, #16
 800cc90:	f7ff ffd0 	bl	800cc34 <malloc>
 800cc94:	4602      	mov	r2, r0
 800cc96:	6260      	str	r0, [r4, #36]	; 0x24
 800cc98:	b920      	cbnz	r0, 800cca4 <_Balloc+0x20>
 800cc9a:	4b18      	ldr	r3, [pc, #96]	; (800ccfc <_Balloc+0x78>)
 800cc9c:	4818      	ldr	r0, [pc, #96]	; (800cd00 <_Balloc+0x7c>)
 800cc9e:	2166      	movs	r1, #102	; 0x66
 800cca0:	f7fe fd86 	bl	800b7b0 <__assert_func>
 800cca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cca8:	6006      	str	r6, [r0, #0]
 800ccaa:	60c6      	str	r6, [r0, #12]
 800ccac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ccae:	68f3      	ldr	r3, [r6, #12]
 800ccb0:	b183      	cbz	r3, 800ccd4 <_Balloc+0x50>
 800ccb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ccba:	b9b8      	cbnz	r0, 800ccec <_Balloc+0x68>
 800ccbc:	2101      	movs	r1, #1
 800ccbe:	fa01 f605 	lsl.w	r6, r1, r5
 800ccc2:	1d72      	adds	r2, r6, #5
 800ccc4:	0092      	lsls	r2, r2, #2
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	f000 fc9d 	bl	800d606 <_calloc_r>
 800cccc:	b160      	cbz	r0, 800cce8 <_Balloc+0x64>
 800ccce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ccd2:	e00e      	b.n	800ccf2 <_Balloc+0x6e>
 800ccd4:	2221      	movs	r2, #33	; 0x21
 800ccd6:	2104      	movs	r1, #4
 800ccd8:	4620      	mov	r0, r4
 800ccda:	f000 fc94 	bl	800d606 <_calloc_r>
 800ccde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cce0:	60f0      	str	r0, [r6, #12]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1e4      	bne.n	800ccb2 <_Balloc+0x2e>
 800cce8:	2000      	movs	r0, #0
 800ccea:	bd70      	pop	{r4, r5, r6, pc}
 800ccec:	6802      	ldr	r2, [r0, #0]
 800ccee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ccf8:	e7f7      	b.n	800ccea <_Balloc+0x66>
 800ccfa:	bf00      	nop
 800ccfc:	0800f1e8 	.word	0x0800f1e8
 800cd00:	0800f48c 	.word	0x0800f48c

0800cd04 <_Bfree>:
 800cd04:	b570      	push	{r4, r5, r6, lr}
 800cd06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cd08:	4605      	mov	r5, r0
 800cd0a:	460c      	mov	r4, r1
 800cd0c:	b976      	cbnz	r6, 800cd2c <_Bfree+0x28>
 800cd0e:	2010      	movs	r0, #16
 800cd10:	f7ff ff90 	bl	800cc34 <malloc>
 800cd14:	4602      	mov	r2, r0
 800cd16:	6268      	str	r0, [r5, #36]	; 0x24
 800cd18:	b920      	cbnz	r0, 800cd24 <_Bfree+0x20>
 800cd1a:	4b09      	ldr	r3, [pc, #36]	; (800cd40 <_Bfree+0x3c>)
 800cd1c:	4809      	ldr	r0, [pc, #36]	; (800cd44 <_Bfree+0x40>)
 800cd1e:	218a      	movs	r1, #138	; 0x8a
 800cd20:	f7fe fd46 	bl	800b7b0 <__assert_func>
 800cd24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd28:	6006      	str	r6, [r0, #0]
 800cd2a:	60c6      	str	r6, [r0, #12]
 800cd2c:	b13c      	cbz	r4, 800cd3e <_Bfree+0x3a>
 800cd2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cd30:	6862      	ldr	r2, [r4, #4]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd38:	6021      	str	r1, [r4, #0]
 800cd3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd3e:	bd70      	pop	{r4, r5, r6, pc}
 800cd40:	0800f1e8 	.word	0x0800f1e8
 800cd44:	0800f48c 	.word	0x0800f48c

0800cd48 <__multadd>:
 800cd48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd4c:	690d      	ldr	r5, [r1, #16]
 800cd4e:	4607      	mov	r7, r0
 800cd50:	460c      	mov	r4, r1
 800cd52:	461e      	mov	r6, r3
 800cd54:	f101 0c14 	add.w	ip, r1, #20
 800cd58:	2000      	movs	r0, #0
 800cd5a:	f8dc 3000 	ldr.w	r3, [ip]
 800cd5e:	b299      	uxth	r1, r3
 800cd60:	fb02 6101 	mla	r1, r2, r1, r6
 800cd64:	0c1e      	lsrs	r6, r3, #16
 800cd66:	0c0b      	lsrs	r3, r1, #16
 800cd68:	fb02 3306 	mla	r3, r2, r6, r3
 800cd6c:	b289      	uxth	r1, r1
 800cd6e:	3001      	adds	r0, #1
 800cd70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd74:	4285      	cmp	r5, r0
 800cd76:	f84c 1b04 	str.w	r1, [ip], #4
 800cd7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd7e:	dcec      	bgt.n	800cd5a <__multadd+0x12>
 800cd80:	b30e      	cbz	r6, 800cdc6 <__multadd+0x7e>
 800cd82:	68a3      	ldr	r3, [r4, #8]
 800cd84:	42ab      	cmp	r3, r5
 800cd86:	dc19      	bgt.n	800cdbc <__multadd+0x74>
 800cd88:	6861      	ldr	r1, [r4, #4]
 800cd8a:	4638      	mov	r0, r7
 800cd8c:	3101      	adds	r1, #1
 800cd8e:	f7ff ff79 	bl	800cc84 <_Balloc>
 800cd92:	4680      	mov	r8, r0
 800cd94:	b928      	cbnz	r0, 800cda2 <__multadd+0x5a>
 800cd96:	4602      	mov	r2, r0
 800cd98:	4b0c      	ldr	r3, [pc, #48]	; (800cdcc <__multadd+0x84>)
 800cd9a:	480d      	ldr	r0, [pc, #52]	; (800cdd0 <__multadd+0x88>)
 800cd9c:	21b5      	movs	r1, #181	; 0xb5
 800cd9e:	f7fe fd07 	bl	800b7b0 <__assert_func>
 800cda2:	6922      	ldr	r2, [r4, #16]
 800cda4:	3202      	adds	r2, #2
 800cda6:	f104 010c 	add.w	r1, r4, #12
 800cdaa:	0092      	lsls	r2, r2, #2
 800cdac:	300c      	adds	r0, #12
 800cdae:	f7ff ff5b 	bl	800cc68 <memcpy>
 800cdb2:	4621      	mov	r1, r4
 800cdb4:	4638      	mov	r0, r7
 800cdb6:	f7ff ffa5 	bl	800cd04 <_Bfree>
 800cdba:	4644      	mov	r4, r8
 800cdbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cdc0:	3501      	adds	r5, #1
 800cdc2:	615e      	str	r6, [r3, #20]
 800cdc4:	6125      	str	r5, [r4, #16]
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdcc:	0800f401 	.word	0x0800f401
 800cdd0:	0800f48c 	.word	0x0800f48c

0800cdd4 <__s2b>:
 800cdd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdd8:	460c      	mov	r4, r1
 800cdda:	4615      	mov	r5, r2
 800cddc:	461f      	mov	r7, r3
 800cdde:	2209      	movs	r2, #9
 800cde0:	3308      	adds	r3, #8
 800cde2:	4606      	mov	r6, r0
 800cde4:	fb93 f3f2 	sdiv	r3, r3, r2
 800cde8:	2100      	movs	r1, #0
 800cdea:	2201      	movs	r2, #1
 800cdec:	429a      	cmp	r2, r3
 800cdee:	db09      	blt.n	800ce04 <__s2b+0x30>
 800cdf0:	4630      	mov	r0, r6
 800cdf2:	f7ff ff47 	bl	800cc84 <_Balloc>
 800cdf6:	b940      	cbnz	r0, 800ce0a <__s2b+0x36>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	4b19      	ldr	r3, [pc, #100]	; (800ce60 <__s2b+0x8c>)
 800cdfc:	4819      	ldr	r0, [pc, #100]	; (800ce64 <__s2b+0x90>)
 800cdfe:	21ce      	movs	r1, #206	; 0xce
 800ce00:	f7fe fcd6 	bl	800b7b0 <__assert_func>
 800ce04:	0052      	lsls	r2, r2, #1
 800ce06:	3101      	adds	r1, #1
 800ce08:	e7f0      	b.n	800cdec <__s2b+0x18>
 800ce0a:	9b08      	ldr	r3, [sp, #32]
 800ce0c:	6143      	str	r3, [r0, #20]
 800ce0e:	2d09      	cmp	r5, #9
 800ce10:	f04f 0301 	mov.w	r3, #1
 800ce14:	6103      	str	r3, [r0, #16]
 800ce16:	dd16      	ble.n	800ce46 <__s2b+0x72>
 800ce18:	f104 0909 	add.w	r9, r4, #9
 800ce1c:	46c8      	mov	r8, r9
 800ce1e:	442c      	add	r4, r5
 800ce20:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ce24:	4601      	mov	r1, r0
 800ce26:	3b30      	subs	r3, #48	; 0x30
 800ce28:	220a      	movs	r2, #10
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	f7ff ff8c 	bl	800cd48 <__multadd>
 800ce30:	45a0      	cmp	r8, r4
 800ce32:	d1f5      	bne.n	800ce20 <__s2b+0x4c>
 800ce34:	f1a5 0408 	sub.w	r4, r5, #8
 800ce38:	444c      	add	r4, r9
 800ce3a:	1b2d      	subs	r5, r5, r4
 800ce3c:	1963      	adds	r3, r4, r5
 800ce3e:	42bb      	cmp	r3, r7
 800ce40:	db04      	blt.n	800ce4c <__s2b+0x78>
 800ce42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce46:	340a      	adds	r4, #10
 800ce48:	2509      	movs	r5, #9
 800ce4a:	e7f6      	b.n	800ce3a <__s2b+0x66>
 800ce4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce50:	4601      	mov	r1, r0
 800ce52:	3b30      	subs	r3, #48	; 0x30
 800ce54:	220a      	movs	r2, #10
 800ce56:	4630      	mov	r0, r6
 800ce58:	f7ff ff76 	bl	800cd48 <__multadd>
 800ce5c:	e7ee      	b.n	800ce3c <__s2b+0x68>
 800ce5e:	bf00      	nop
 800ce60:	0800f401 	.word	0x0800f401
 800ce64:	0800f48c 	.word	0x0800f48c

0800ce68 <__hi0bits>:
 800ce68:	0c03      	lsrs	r3, r0, #16
 800ce6a:	041b      	lsls	r3, r3, #16
 800ce6c:	b9d3      	cbnz	r3, 800cea4 <__hi0bits+0x3c>
 800ce6e:	0400      	lsls	r0, r0, #16
 800ce70:	2310      	movs	r3, #16
 800ce72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ce76:	bf04      	itt	eq
 800ce78:	0200      	lsleq	r0, r0, #8
 800ce7a:	3308      	addeq	r3, #8
 800ce7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ce80:	bf04      	itt	eq
 800ce82:	0100      	lsleq	r0, r0, #4
 800ce84:	3304      	addeq	r3, #4
 800ce86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ce8a:	bf04      	itt	eq
 800ce8c:	0080      	lsleq	r0, r0, #2
 800ce8e:	3302      	addeq	r3, #2
 800ce90:	2800      	cmp	r0, #0
 800ce92:	db05      	blt.n	800cea0 <__hi0bits+0x38>
 800ce94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ce98:	f103 0301 	add.w	r3, r3, #1
 800ce9c:	bf08      	it	eq
 800ce9e:	2320      	moveq	r3, #32
 800cea0:	4618      	mov	r0, r3
 800cea2:	4770      	bx	lr
 800cea4:	2300      	movs	r3, #0
 800cea6:	e7e4      	b.n	800ce72 <__hi0bits+0xa>

0800cea8 <__lo0bits>:
 800cea8:	6803      	ldr	r3, [r0, #0]
 800ceaa:	f013 0207 	ands.w	r2, r3, #7
 800ceae:	4601      	mov	r1, r0
 800ceb0:	d00b      	beq.n	800ceca <__lo0bits+0x22>
 800ceb2:	07da      	lsls	r2, r3, #31
 800ceb4:	d423      	bmi.n	800cefe <__lo0bits+0x56>
 800ceb6:	0798      	lsls	r0, r3, #30
 800ceb8:	bf49      	itett	mi
 800ceba:	085b      	lsrmi	r3, r3, #1
 800cebc:	089b      	lsrpl	r3, r3, #2
 800cebe:	2001      	movmi	r0, #1
 800cec0:	600b      	strmi	r3, [r1, #0]
 800cec2:	bf5c      	itt	pl
 800cec4:	600b      	strpl	r3, [r1, #0]
 800cec6:	2002      	movpl	r0, #2
 800cec8:	4770      	bx	lr
 800ceca:	b298      	uxth	r0, r3
 800cecc:	b9a8      	cbnz	r0, 800cefa <__lo0bits+0x52>
 800cece:	0c1b      	lsrs	r3, r3, #16
 800ced0:	2010      	movs	r0, #16
 800ced2:	b2da      	uxtb	r2, r3
 800ced4:	b90a      	cbnz	r2, 800ceda <__lo0bits+0x32>
 800ced6:	3008      	adds	r0, #8
 800ced8:	0a1b      	lsrs	r3, r3, #8
 800ceda:	071a      	lsls	r2, r3, #28
 800cedc:	bf04      	itt	eq
 800cede:	091b      	lsreq	r3, r3, #4
 800cee0:	3004      	addeq	r0, #4
 800cee2:	079a      	lsls	r2, r3, #30
 800cee4:	bf04      	itt	eq
 800cee6:	089b      	lsreq	r3, r3, #2
 800cee8:	3002      	addeq	r0, #2
 800ceea:	07da      	lsls	r2, r3, #31
 800ceec:	d403      	bmi.n	800cef6 <__lo0bits+0x4e>
 800ceee:	085b      	lsrs	r3, r3, #1
 800cef0:	f100 0001 	add.w	r0, r0, #1
 800cef4:	d005      	beq.n	800cf02 <__lo0bits+0x5a>
 800cef6:	600b      	str	r3, [r1, #0]
 800cef8:	4770      	bx	lr
 800cefa:	4610      	mov	r0, r2
 800cefc:	e7e9      	b.n	800ced2 <__lo0bits+0x2a>
 800cefe:	2000      	movs	r0, #0
 800cf00:	4770      	bx	lr
 800cf02:	2020      	movs	r0, #32
 800cf04:	4770      	bx	lr
	...

0800cf08 <__i2b>:
 800cf08:	b510      	push	{r4, lr}
 800cf0a:	460c      	mov	r4, r1
 800cf0c:	2101      	movs	r1, #1
 800cf0e:	f7ff feb9 	bl	800cc84 <_Balloc>
 800cf12:	4602      	mov	r2, r0
 800cf14:	b928      	cbnz	r0, 800cf22 <__i2b+0x1a>
 800cf16:	4b05      	ldr	r3, [pc, #20]	; (800cf2c <__i2b+0x24>)
 800cf18:	4805      	ldr	r0, [pc, #20]	; (800cf30 <__i2b+0x28>)
 800cf1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cf1e:	f7fe fc47 	bl	800b7b0 <__assert_func>
 800cf22:	2301      	movs	r3, #1
 800cf24:	6144      	str	r4, [r0, #20]
 800cf26:	6103      	str	r3, [r0, #16]
 800cf28:	bd10      	pop	{r4, pc}
 800cf2a:	bf00      	nop
 800cf2c:	0800f401 	.word	0x0800f401
 800cf30:	0800f48c 	.word	0x0800f48c

0800cf34 <__multiply>:
 800cf34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf38:	4691      	mov	r9, r2
 800cf3a:	690a      	ldr	r2, [r1, #16]
 800cf3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	bfb8      	it	lt
 800cf44:	460b      	movlt	r3, r1
 800cf46:	460c      	mov	r4, r1
 800cf48:	bfbc      	itt	lt
 800cf4a:	464c      	movlt	r4, r9
 800cf4c:	4699      	movlt	r9, r3
 800cf4e:	6927      	ldr	r7, [r4, #16]
 800cf50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cf54:	68a3      	ldr	r3, [r4, #8]
 800cf56:	6861      	ldr	r1, [r4, #4]
 800cf58:	eb07 060a 	add.w	r6, r7, sl
 800cf5c:	42b3      	cmp	r3, r6
 800cf5e:	b085      	sub	sp, #20
 800cf60:	bfb8      	it	lt
 800cf62:	3101      	addlt	r1, #1
 800cf64:	f7ff fe8e 	bl	800cc84 <_Balloc>
 800cf68:	b930      	cbnz	r0, 800cf78 <__multiply+0x44>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	4b44      	ldr	r3, [pc, #272]	; (800d080 <__multiply+0x14c>)
 800cf6e:	4845      	ldr	r0, [pc, #276]	; (800d084 <__multiply+0x150>)
 800cf70:	f240 115d 	movw	r1, #349	; 0x15d
 800cf74:	f7fe fc1c 	bl	800b7b0 <__assert_func>
 800cf78:	f100 0514 	add.w	r5, r0, #20
 800cf7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cf80:	462b      	mov	r3, r5
 800cf82:	2200      	movs	r2, #0
 800cf84:	4543      	cmp	r3, r8
 800cf86:	d321      	bcc.n	800cfcc <__multiply+0x98>
 800cf88:	f104 0314 	add.w	r3, r4, #20
 800cf8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cf90:	f109 0314 	add.w	r3, r9, #20
 800cf94:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cf98:	9202      	str	r2, [sp, #8]
 800cf9a:	1b3a      	subs	r2, r7, r4
 800cf9c:	3a15      	subs	r2, #21
 800cf9e:	f022 0203 	bic.w	r2, r2, #3
 800cfa2:	3204      	adds	r2, #4
 800cfa4:	f104 0115 	add.w	r1, r4, #21
 800cfa8:	428f      	cmp	r7, r1
 800cfaa:	bf38      	it	cc
 800cfac:	2204      	movcc	r2, #4
 800cfae:	9201      	str	r2, [sp, #4]
 800cfb0:	9a02      	ldr	r2, [sp, #8]
 800cfb2:	9303      	str	r3, [sp, #12]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d80c      	bhi.n	800cfd2 <__multiply+0x9e>
 800cfb8:	2e00      	cmp	r6, #0
 800cfba:	dd03      	ble.n	800cfc4 <__multiply+0x90>
 800cfbc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d05a      	beq.n	800d07a <__multiply+0x146>
 800cfc4:	6106      	str	r6, [r0, #16]
 800cfc6:	b005      	add	sp, #20
 800cfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfcc:	f843 2b04 	str.w	r2, [r3], #4
 800cfd0:	e7d8      	b.n	800cf84 <__multiply+0x50>
 800cfd2:	f8b3 a000 	ldrh.w	sl, [r3]
 800cfd6:	f1ba 0f00 	cmp.w	sl, #0
 800cfda:	d024      	beq.n	800d026 <__multiply+0xf2>
 800cfdc:	f104 0e14 	add.w	lr, r4, #20
 800cfe0:	46a9      	mov	r9, r5
 800cfe2:	f04f 0c00 	mov.w	ip, #0
 800cfe6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cfea:	f8d9 1000 	ldr.w	r1, [r9]
 800cfee:	fa1f fb82 	uxth.w	fp, r2
 800cff2:	b289      	uxth	r1, r1
 800cff4:	fb0a 110b 	mla	r1, sl, fp, r1
 800cff8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cffc:	f8d9 2000 	ldr.w	r2, [r9]
 800d000:	4461      	add	r1, ip
 800d002:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d006:	fb0a c20b 	mla	r2, sl, fp, ip
 800d00a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d00e:	b289      	uxth	r1, r1
 800d010:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d014:	4577      	cmp	r7, lr
 800d016:	f849 1b04 	str.w	r1, [r9], #4
 800d01a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d01e:	d8e2      	bhi.n	800cfe6 <__multiply+0xb2>
 800d020:	9a01      	ldr	r2, [sp, #4]
 800d022:	f845 c002 	str.w	ip, [r5, r2]
 800d026:	9a03      	ldr	r2, [sp, #12]
 800d028:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d02c:	3304      	adds	r3, #4
 800d02e:	f1b9 0f00 	cmp.w	r9, #0
 800d032:	d020      	beq.n	800d076 <__multiply+0x142>
 800d034:	6829      	ldr	r1, [r5, #0]
 800d036:	f104 0c14 	add.w	ip, r4, #20
 800d03a:	46ae      	mov	lr, r5
 800d03c:	f04f 0a00 	mov.w	sl, #0
 800d040:	f8bc b000 	ldrh.w	fp, [ip]
 800d044:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d048:	fb09 220b 	mla	r2, r9, fp, r2
 800d04c:	4492      	add	sl, r2
 800d04e:	b289      	uxth	r1, r1
 800d050:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d054:	f84e 1b04 	str.w	r1, [lr], #4
 800d058:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d05c:	f8be 1000 	ldrh.w	r1, [lr]
 800d060:	0c12      	lsrs	r2, r2, #16
 800d062:	fb09 1102 	mla	r1, r9, r2, r1
 800d066:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d06a:	4567      	cmp	r7, ip
 800d06c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d070:	d8e6      	bhi.n	800d040 <__multiply+0x10c>
 800d072:	9a01      	ldr	r2, [sp, #4]
 800d074:	50a9      	str	r1, [r5, r2]
 800d076:	3504      	adds	r5, #4
 800d078:	e79a      	b.n	800cfb0 <__multiply+0x7c>
 800d07a:	3e01      	subs	r6, #1
 800d07c:	e79c      	b.n	800cfb8 <__multiply+0x84>
 800d07e:	bf00      	nop
 800d080:	0800f401 	.word	0x0800f401
 800d084:	0800f48c 	.word	0x0800f48c

0800d088 <__pow5mult>:
 800d088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d08c:	4615      	mov	r5, r2
 800d08e:	f012 0203 	ands.w	r2, r2, #3
 800d092:	4606      	mov	r6, r0
 800d094:	460f      	mov	r7, r1
 800d096:	d007      	beq.n	800d0a8 <__pow5mult+0x20>
 800d098:	4c25      	ldr	r4, [pc, #148]	; (800d130 <__pow5mult+0xa8>)
 800d09a:	3a01      	subs	r2, #1
 800d09c:	2300      	movs	r3, #0
 800d09e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d0a2:	f7ff fe51 	bl	800cd48 <__multadd>
 800d0a6:	4607      	mov	r7, r0
 800d0a8:	10ad      	asrs	r5, r5, #2
 800d0aa:	d03d      	beq.n	800d128 <__pow5mult+0xa0>
 800d0ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d0ae:	b97c      	cbnz	r4, 800d0d0 <__pow5mult+0x48>
 800d0b0:	2010      	movs	r0, #16
 800d0b2:	f7ff fdbf 	bl	800cc34 <malloc>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	6270      	str	r0, [r6, #36]	; 0x24
 800d0ba:	b928      	cbnz	r0, 800d0c8 <__pow5mult+0x40>
 800d0bc:	4b1d      	ldr	r3, [pc, #116]	; (800d134 <__pow5mult+0xac>)
 800d0be:	481e      	ldr	r0, [pc, #120]	; (800d138 <__pow5mult+0xb0>)
 800d0c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d0c4:	f7fe fb74 	bl	800b7b0 <__assert_func>
 800d0c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0cc:	6004      	str	r4, [r0, #0]
 800d0ce:	60c4      	str	r4, [r0, #12]
 800d0d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d0d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0d8:	b94c      	cbnz	r4, 800d0ee <__pow5mult+0x66>
 800d0da:	f240 2171 	movw	r1, #625	; 0x271
 800d0de:	4630      	mov	r0, r6
 800d0e0:	f7ff ff12 	bl	800cf08 <__i2b>
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	6003      	str	r3, [r0, #0]
 800d0ee:	f04f 0900 	mov.w	r9, #0
 800d0f2:	07eb      	lsls	r3, r5, #31
 800d0f4:	d50a      	bpl.n	800d10c <__pow5mult+0x84>
 800d0f6:	4639      	mov	r1, r7
 800d0f8:	4622      	mov	r2, r4
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	f7ff ff1a 	bl	800cf34 <__multiply>
 800d100:	4639      	mov	r1, r7
 800d102:	4680      	mov	r8, r0
 800d104:	4630      	mov	r0, r6
 800d106:	f7ff fdfd 	bl	800cd04 <_Bfree>
 800d10a:	4647      	mov	r7, r8
 800d10c:	106d      	asrs	r5, r5, #1
 800d10e:	d00b      	beq.n	800d128 <__pow5mult+0xa0>
 800d110:	6820      	ldr	r0, [r4, #0]
 800d112:	b938      	cbnz	r0, 800d124 <__pow5mult+0x9c>
 800d114:	4622      	mov	r2, r4
 800d116:	4621      	mov	r1, r4
 800d118:	4630      	mov	r0, r6
 800d11a:	f7ff ff0b 	bl	800cf34 <__multiply>
 800d11e:	6020      	str	r0, [r4, #0]
 800d120:	f8c0 9000 	str.w	r9, [r0]
 800d124:	4604      	mov	r4, r0
 800d126:	e7e4      	b.n	800d0f2 <__pow5mult+0x6a>
 800d128:	4638      	mov	r0, r7
 800d12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d12e:	bf00      	nop
 800d130:	0800f5d8 	.word	0x0800f5d8
 800d134:	0800f1e8 	.word	0x0800f1e8
 800d138:	0800f48c 	.word	0x0800f48c

0800d13c <__lshift>:
 800d13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d140:	460c      	mov	r4, r1
 800d142:	6849      	ldr	r1, [r1, #4]
 800d144:	6923      	ldr	r3, [r4, #16]
 800d146:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d14a:	68a3      	ldr	r3, [r4, #8]
 800d14c:	4607      	mov	r7, r0
 800d14e:	4691      	mov	r9, r2
 800d150:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d154:	f108 0601 	add.w	r6, r8, #1
 800d158:	42b3      	cmp	r3, r6
 800d15a:	db0b      	blt.n	800d174 <__lshift+0x38>
 800d15c:	4638      	mov	r0, r7
 800d15e:	f7ff fd91 	bl	800cc84 <_Balloc>
 800d162:	4605      	mov	r5, r0
 800d164:	b948      	cbnz	r0, 800d17a <__lshift+0x3e>
 800d166:	4602      	mov	r2, r0
 800d168:	4b2a      	ldr	r3, [pc, #168]	; (800d214 <__lshift+0xd8>)
 800d16a:	482b      	ldr	r0, [pc, #172]	; (800d218 <__lshift+0xdc>)
 800d16c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d170:	f7fe fb1e 	bl	800b7b0 <__assert_func>
 800d174:	3101      	adds	r1, #1
 800d176:	005b      	lsls	r3, r3, #1
 800d178:	e7ee      	b.n	800d158 <__lshift+0x1c>
 800d17a:	2300      	movs	r3, #0
 800d17c:	f100 0114 	add.w	r1, r0, #20
 800d180:	f100 0210 	add.w	r2, r0, #16
 800d184:	4618      	mov	r0, r3
 800d186:	4553      	cmp	r3, sl
 800d188:	db37      	blt.n	800d1fa <__lshift+0xbe>
 800d18a:	6920      	ldr	r0, [r4, #16]
 800d18c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d190:	f104 0314 	add.w	r3, r4, #20
 800d194:	f019 091f 	ands.w	r9, r9, #31
 800d198:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d19c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d1a0:	d02f      	beq.n	800d202 <__lshift+0xc6>
 800d1a2:	f1c9 0e20 	rsb	lr, r9, #32
 800d1a6:	468a      	mov	sl, r1
 800d1a8:	f04f 0c00 	mov.w	ip, #0
 800d1ac:	681a      	ldr	r2, [r3, #0]
 800d1ae:	fa02 f209 	lsl.w	r2, r2, r9
 800d1b2:	ea42 020c 	orr.w	r2, r2, ip
 800d1b6:	f84a 2b04 	str.w	r2, [sl], #4
 800d1ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1be:	4298      	cmp	r0, r3
 800d1c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d1c4:	d8f2      	bhi.n	800d1ac <__lshift+0x70>
 800d1c6:	1b03      	subs	r3, r0, r4
 800d1c8:	3b15      	subs	r3, #21
 800d1ca:	f023 0303 	bic.w	r3, r3, #3
 800d1ce:	3304      	adds	r3, #4
 800d1d0:	f104 0215 	add.w	r2, r4, #21
 800d1d4:	4290      	cmp	r0, r2
 800d1d6:	bf38      	it	cc
 800d1d8:	2304      	movcc	r3, #4
 800d1da:	f841 c003 	str.w	ip, [r1, r3]
 800d1de:	f1bc 0f00 	cmp.w	ip, #0
 800d1e2:	d001      	beq.n	800d1e8 <__lshift+0xac>
 800d1e4:	f108 0602 	add.w	r6, r8, #2
 800d1e8:	3e01      	subs	r6, #1
 800d1ea:	4638      	mov	r0, r7
 800d1ec:	612e      	str	r6, [r5, #16]
 800d1ee:	4621      	mov	r1, r4
 800d1f0:	f7ff fd88 	bl	800cd04 <_Bfree>
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1fe:	3301      	adds	r3, #1
 800d200:	e7c1      	b.n	800d186 <__lshift+0x4a>
 800d202:	3904      	subs	r1, #4
 800d204:	f853 2b04 	ldr.w	r2, [r3], #4
 800d208:	f841 2f04 	str.w	r2, [r1, #4]!
 800d20c:	4298      	cmp	r0, r3
 800d20e:	d8f9      	bhi.n	800d204 <__lshift+0xc8>
 800d210:	e7ea      	b.n	800d1e8 <__lshift+0xac>
 800d212:	bf00      	nop
 800d214:	0800f401 	.word	0x0800f401
 800d218:	0800f48c 	.word	0x0800f48c

0800d21c <__mcmp>:
 800d21c:	b530      	push	{r4, r5, lr}
 800d21e:	6902      	ldr	r2, [r0, #16]
 800d220:	690c      	ldr	r4, [r1, #16]
 800d222:	1b12      	subs	r2, r2, r4
 800d224:	d10e      	bne.n	800d244 <__mcmp+0x28>
 800d226:	f100 0314 	add.w	r3, r0, #20
 800d22a:	3114      	adds	r1, #20
 800d22c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d230:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d234:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d238:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d23c:	42a5      	cmp	r5, r4
 800d23e:	d003      	beq.n	800d248 <__mcmp+0x2c>
 800d240:	d305      	bcc.n	800d24e <__mcmp+0x32>
 800d242:	2201      	movs	r2, #1
 800d244:	4610      	mov	r0, r2
 800d246:	bd30      	pop	{r4, r5, pc}
 800d248:	4283      	cmp	r3, r0
 800d24a:	d3f3      	bcc.n	800d234 <__mcmp+0x18>
 800d24c:	e7fa      	b.n	800d244 <__mcmp+0x28>
 800d24e:	f04f 32ff 	mov.w	r2, #4294967295
 800d252:	e7f7      	b.n	800d244 <__mcmp+0x28>

0800d254 <__mdiff>:
 800d254:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d258:	460c      	mov	r4, r1
 800d25a:	4606      	mov	r6, r0
 800d25c:	4611      	mov	r1, r2
 800d25e:	4620      	mov	r0, r4
 800d260:	4690      	mov	r8, r2
 800d262:	f7ff ffdb 	bl	800d21c <__mcmp>
 800d266:	1e05      	subs	r5, r0, #0
 800d268:	d110      	bne.n	800d28c <__mdiff+0x38>
 800d26a:	4629      	mov	r1, r5
 800d26c:	4630      	mov	r0, r6
 800d26e:	f7ff fd09 	bl	800cc84 <_Balloc>
 800d272:	b930      	cbnz	r0, 800d282 <__mdiff+0x2e>
 800d274:	4b3a      	ldr	r3, [pc, #232]	; (800d360 <__mdiff+0x10c>)
 800d276:	4602      	mov	r2, r0
 800d278:	f240 2132 	movw	r1, #562	; 0x232
 800d27c:	4839      	ldr	r0, [pc, #228]	; (800d364 <__mdiff+0x110>)
 800d27e:	f7fe fa97 	bl	800b7b0 <__assert_func>
 800d282:	2301      	movs	r3, #1
 800d284:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d28c:	bfa4      	itt	ge
 800d28e:	4643      	movge	r3, r8
 800d290:	46a0      	movge	r8, r4
 800d292:	4630      	mov	r0, r6
 800d294:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d298:	bfa6      	itte	ge
 800d29a:	461c      	movge	r4, r3
 800d29c:	2500      	movge	r5, #0
 800d29e:	2501      	movlt	r5, #1
 800d2a0:	f7ff fcf0 	bl	800cc84 <_Balloc>
 800d2a4:	b920      	cbnz	r0, 800d2b0 <__mdiff+0x5c>
 800d2a6:	4b2e      	ldr	r3, [pc, #184]	; (800d360 <__mdiff+0x10c>)
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d2ae:	e7e5      	b.n	800d27c <__mdiff+0x28>
 800d2b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d2b4:	6926      	ldr	r6, [r4, #16]
 800d2b6:	60c5      	str	r5, [r0, #12]
 800d2b8:	f104 0914 	add.w	r9, r4, #20
 800d2bc:	f108 0514 	add.w	r5, r8, #20
 800d2c0:	f100 0e14 	add.w	lr, r0, #20
 800d2c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d2c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d2cc:	f108 0210 	add.w	r2, r8, #16
 800d2d0:	46f2      	mov	sl, lr
 800d2d2:	2100      	movs	r1, #0
 800d2d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d2d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d2dc:	fa1f f883 	uxth.w	r8, r3
 800d2e0:	fa11 f18b 	uxtah	r1, r1, fp
 800d2e4:	0c1b      	lsrs	r3, r3, #16
 800d2e6:	eba1 0808 	sub.w	r8, r1, r8
 800d2ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d2ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d2f2:	fa1f f888 	uxth.w	r8, r8
 800d2f6:	1419      	asrs	r1, r3, #16
 800d2f8:	454e      	cmp	r6, r9
 800d2fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d2fe:	f84a 3b04 	str.w	r3, [sl], #4
 800d302:	d8e7      	bhi.n	800d2d4 <__mdiff+0x80>
 800d304:	1b33      	subs	r3, r6, r4
 800d306:	3b15      	subs	r3, #21
 800d308:	f023 0303 	bic.w	r3, r3, #3
 800d30c:	3304      	adds	r3, #4
 800d30e:	3415      	adds	r4, #21
 800d310:	42a6      	cmp	r6, r4
 800d312:	bf38      	it	cc
 800d314:	2304      	movcc	r3, #4
 800d316:	441d      	add	r5, r3
 800d318:	4473      	add	r3, lr
 800d31a:	469e      	mov	lr, r3
 800d31c:	462e      	mov	r6, r5
 800d31e:	4566      	cmp	r6, ip
 800d320:	d30e      	bcc.n	800d340 <__mdiff+0xec>
 800d322:	f10c 0203 	add.w	r2, ip, #3
 800d326:	1b52      	subs	r2, r2, r5
 800d328:	f022 0203 	bic.w	r2, r2, #3
 800d32c:	3d03      	subs	r5, #3
 800d32e:	45ac      	cmp	ip, r5
 800d330:	bf38      	it	cc
 800d332:	2200      	movcc	r2, #0
 800d334:	441a      	add	r2, r3
 800d336:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d33a:	b17b      	cbz	r3, 800d35c <__mdiff+0x108>
 800d33c:	6107      	str	r7, [r0, #16]
 800d33e:	e7a3      	b.n	800d288 <__mdiff+0x34>
 800d340:	f856 8b04 	ldr.w	r8, [r6], #4
 800d344:	fa11 f288 	uxtah	r2, r1, r8
 800d348:	1414      	asrs	r4, r2, #16
 800d34a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d34e:	b292      	uxth	r2, r2
 800d350:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d354:	f84e 2b04 	str.w	r2, [lr], #4
 800d358:	1421      	asrs	r1, r4, #16
 800d35a:	e7e0      	b.n	800d31e <__mdiff+0xca>
 800d35c:	3f01      	subs	r7, #1
 800d35e:	e7ea      	b.n	800d336 <__mdiff+0xe2>
 800d360:	0800f401 	.word	0x0800f401
 800d364:	0800f48c 	.word	0x0800f48c

0800d368 <__ulp>:
 800d368:	b082      	sub	sp, #8
 800d36a:	ed8d 0b00 	vstr	d0, [sp]
 800d36e:	9b01      	ldr	r3, [sp, #4]
 800d370:	4912      	ldr	r1, [pc, #72]	; (800d3bc <__ulp+0x54>)
 800d372:	4019      	ands	r1, r3
 800d374:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d378:	2900      	cmp	r1, #0
 800d37a:	dd05      	ble.n	800d388 <__ulp+0x20>
 800d37c:	2200      	movs	r2, #0
 800d37e:	460b      	mov	r3, r1
 800d380:	ec43 2b10 	vmov	d0, r2, r3
 800d384:	b002      	add	sp, #8
 800d386:	4770      	bx	lr
 800d388:	4249      	negs	r1, r1
 800d38a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d38e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d392:	f04f 0200 	mov.w	r2, #0
 800d396:	f04f 0300 	mov.w	r3, #0
 800d39a:	da04      	bge.n	800d3a6 <__ulp+0x3e>
 800d39c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d3a0:	fa41 f300 	asr.w	r3, r1, r0
 800d3a4:	e7ec      	b.n	800d380 <__ulp+0x18>
 800d3a6:	f1a0 0114 	sub.w	r1, r0, #20
 800d3aa:	291e      	cmp	r1, #30
 800d3ac:	bfda      	itte	le
 800d3ae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d3b2:	fa20 f101 	lsrle.w	r1, r0, r1
 800d3b6:	2101      	movgt	r1, #1
 800d3b8:	460a      	mov	r2, r1
 800d3ba:	e7e1      	b.n	800d380 <__ulp+0x18>
 800d3bc:	7ff00000 	.word	0x7ff00000

0800d3c0 <__b2d>:
 800d3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3c2:	6905      	ldr	r5, [r0, #16]
 800d3c4:	f100 0714 	add.w	r7, r0, #20
 800d3c8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d3cc:	1f2e      	subs	r6, r5, #4
 800d3ce:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	f7ff fd48 	bl	800ce68 <__hi0bits>
 800d3d8:	f1c0 0320 	rsb	r3, r0, #32
 800d3dc:	280a      	cmp	r0, #10
 800d3de:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d45c <__b2d+0x9c>
 800d3e2:	600b      	str	r3, [r1, #0]
 800d3e4:	dc14      	bgt.n	800d410 <__b2d+0x50>
 800d3e6:	f1c0 0e0b 	rsb	lr, r0, #11
 800d3ea:	fa24 f10e 	lsr.w	r1, r4, lr
 800d3ee:	42b7      	cmp	r7, r6
 800d3f0:	ea41 030c 	orr.w	r3, r1, ip
 800d3f4:	bf34      	ite	cc
 800d3f6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d3fa:	2100      	movcs	r1, #0
 800d3fc:	3015      	adds	r0, #21
 800d3fe:	fa04 f000 	lsl.w	r0, r4, r0
 800d402:	fa21 f10e 	lsr.w	r1, r1, lr
 800d406:	ea40 0201 	orr.w	r2, r0, r1
 800d40a:	ec43 2b10 	vmov	d0, r2, r3
 800d40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d410:	42b7      	cmp	r7, r6
 800d412:	bf3a      	itte	cc
 800d414:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d418:	f1a5 0608 	subcc.w	r6, r5, #8
 800d41c:	2100      	movcs	r1, #0
 800d41e:	380b      	subs	r0, #11
 800d420:	d017      	beq.n	800d452 <__b2d+0x92>
 800d422:	f1c0 0c20 	rsb	ip, r0, #32
 800d426:	fa04 f500 	lsl.w	r5, r4, r0
 800d42a:	42be      	cmp	r6, r7
 800d42c:	fa21 f40c 	lsr.w	r4, r1, ip
 800d430:	ea45 0504 	orr.w	r5, r5, r4
 800d434:	bf8c      	ite	hi
 800d436:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d43a:	2400      	movls	r4, #0
 800d43c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d440:	fa01 f000 	lsl.w	r0, r1, r0
 800d444:	fa24 f40c 	lsr.w	r4, r4, ip
 800d448:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d44c:	ea40 0204 	orr.w	r2, r0, r4
 800d450:	e7db      	b.n	800d40a <__b2d+0x4a>
 800d452:	ea44 030c 	orr.w	r3, r4, ip
 800d456:	460a      	mov	r2, r1
 800d458:	e7d7      	b.n	800d40a <__b2d+0x4a>
 800d45a:	bf00      	nop
 800d45c:	3ff00000 	.word	0x3ff00000

0800d460 <__d2b>:
 800d460:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d464:	4689      	mov	r9, r1
 800d466:	2101      	movs	r1, #1
 800d468:	ec57 6b10 	vmov	r6, r7, d0
 800d46c:	4690      	mov	r8, r2
 800d46e:	f7ff fc09 	bl	800cc84 <_Balloc>
 800d472:	4604      	mov	r4, r0
 800d474:	b930      	cbnz	r0, 800d484 <__d2b+0x24>
 800d476:	4602      	mov	r2, r0
 800d478:	4b25      	ldr	r3, [pc, #148]	; (800d510 <__d2b+0xb0>)
 800d47a:	4826      	ldr	r0, [pc, #152]	; (800d514 <__d2b+0xb4>)
 800d47c:	f240 310a 	movw	r1, #778	; 0x30a
 800d480:	f7fe f996 	bl	800b7b0 <__assert_func>
 800d484:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d488:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d48c:	bb35      	cbnz	r5, 800d4dc <__d2b+0x7c>
 800d48e:	2e00      	cmp	r6, #0
 800d490:	9301      	str	r3, [sp, #4]
 800d492:	d028      	beq.n	800d4e6 <__d2b+0x86>
 800d494:	4668      	mov	r0, sp
 800d496:	9600      	str	r6, [sp, #0]
 800d498:	f7ff fd06 	bl	800cea8 <__lo0bits>
 800d49c:	9900      	ldr	r1, [sp, #0]
 800d49e:	b300      	cbz	r0, 800d4e2 <__d2b+0x82>
 800d4a0:	9a01      	ldr	r2, [sp, #4]
 800d4a2:	f1c0 0320 	rsb	r3, r0, #32
 800d4a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d4aa:	430b      	orrs	r3, r1
 800d4ac:	40c2      	lsrs	r2, r0
 800d4ae:	6163      	str	r3, [r4, #20]
 800d4b0:	9201      	str	r2, [sp, #4]
 800d4b2:	9b01      	ldr	r3, [sp, #4]
 800d4b4:	61a3      	str	r3, [r4, #24]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	bf14      	ite	ne
 800d4ba:	2202      	movne	r2, #2
 800d4bc:	2201      	moveq	r2, #1
 800d4be:	6122      	str	r2, [r4, #16]
 800d4c0:	b1d5      	cbz	r5, 800d4f8 <__d2b+0x98>
 800d4c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d4c6:	4405      	add	r5, r0
 800d4c8:	f8c9 5000 	str.w	r5, [r9]
 800d4cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d4d0:	f8c8 0000 	str.w	r0, [r8]
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	b003      	add	sp, #12
 800d4d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4e0:	e7d5      	b.n	800d48e <__d2b+0x2e>
 800d4e2:	6161      	str	r1, [r4, #20]
 800d4e4:	e7e5      	b.n	800d4b2 <__d2b+0x52>
 800d4e6:	a801      	add	r0, sp, #4
 800d4e8:	f7ff fcde 	bl	800cea8 <__lo0bits>
 800d4ec:	9b01      	ldr	r3, [sp, #4]
 800d4ee:	6163      	str	r3, [r4, #20]
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	6122      	str	r2, [r4, #16]
 800d4f4:	3020      	adds	r0, #32
 800d4f6:	e7e3      	b.n	800d4c0 <__d2b+0x60>
 800d4f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d500:	f8c9 0000 	str.w	r0, [r9]
 800d504:	6918      	ldr	r0, [r3, #16]
 800d506:	f7ff fcaf 	bl	800ce68 <__hi0bits>
 800d50a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d50e:	e7df      	b.n	800d4d0 <__d2b+0x70>
 800d510:	0800f401 	.word	0x0800f401
 800d514:	0800f48c 	.word	0x0800f48c

0800d518 <__ratio>:
 800d518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d51c:	4688      	mov	r8, r1
 800d51e:	4669      	mov	r1, sp
 800d520:	4681      	mov	r9, r0
 800d522:	f7ff ff4d 	bl	800d3c0 <__b2d>
 800d526:	a901      	add	r1, sp, #4
 800d528:	4640      	mov	r0, r8
 800d52a:	ec55 4b10 	vmov	r4, r5, d0
 800d52e:	f7ff ff47 	bl	800d3c0 <__b2d>
 800d532:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d536:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d53a:	eba3 0c02 	sub.w	ip, r3, r2
 800d53e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d542:	1a9b      	subs	r3, r3, r2
 800d544:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d548:	ec51 0b10 	vmov	r0, r1, d0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	bfd6      	itet	le
 800d550:	460a      	movle	r2, r1
 800d552:	462a      	movgt	r2, r5
 800d554:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d558:	468b      	mov	fp, r1
 800d55a:	462f      	mov	r7, r5
 800d55c:	bfd4      	ite	le
 800d55e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d562:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d566:	4620      	mov	r0, r4
 800d568:	ee10 2a10 	vmov	r2, s0
 800d56c:	465b      	mov	r3, fp
 800d56e:	4639      	mov	r1, r7
 800d570:	f7f3 f9a4 	bl	80008bc <__aeabi_ddiv>
 800d574:	ec41 0b10 	vmov	d0, r0, r1
 800d578:	b003      	add	sp, #12
 800d57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d57e <__copybits>:
 800d57e:	3901      	subs	r1, #1
 800d580:	b570      	push	{r4, r5, r6, lr}
 800d582:	1149      	asrs	r1, r1, #5
 800d584:	6914      	ldr	r4, [r2, #16]
 800d586:	3101      	adds	r1, #1
 800d588:	f102 0314 	add.w	r3, r2, #20
 800d58c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d590:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d594:	1f05      	subs	r5, r0, #4
 800d596:	42a3      	cmp	r3, r4
 800d598:	d30c      	bcc.n	800d5b4 <__copybits+0x36>
 800d59a:	1aa3      	subs	r3, r4, r2
 800d59c:	3b11      	subs	r3, #17
 800d59e:	f023 0303 	bic.w	r3, r3, #3
 800d5a2:	3211      	adds	r2, #17
 800d5a4:	42a2      	cmp	r2, r4
 800d5a6:	bf88      	it	hi
 800d5a8:	2300      	movhi	r3, #0
 800d5aa:	4418      	add	r0, r3
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	4288      	cmp	r0, r1
 800d5b0:	d305      	bcc.n	800d5be <__copybits+0x40>
 800d5b2:	bd70      	pop	{r4, r5, r6, pc}
 800d5b4:	f853 6b04 	ldr.w	r6, [r3], #4
 800d5b8:	f845 6f04 	str.w	r6, [r5, #4]!
 800d5bc:	e7eb      	b.n	800d596 <__copybits+0x18>
 800d5be:	f840 3b04 	str.w	r3, [r0], #4
 800d5c2:	e7f4      	b.n	800d5ae <__copybits+0x30>

0800d5c4 <__any_on>:
 800d5c4:	f100 0214 	add.w	r2, r0, #20
 800d5c8:	6900      	ldr	r0, [r0, #16]
 800d5ca:	114b      	asrs	r3, r1, #5
 800d5cc:	4298      	cmp	r0, r3
 800d5ce:	b510      	push	{r4, lr}
 800d5d0:	db11      	blt.n	800d5f6 <__any_on+0x32>
 800d5d2:	dd0a      	ble.n	800d5ea <__any_on+0x26>
 800d5d4:	f011 011f 	ands.w	r1, r1, #31
 800d5d8:	d007      	beq.n	800d5ea <__any_on+0x26>
 800d5da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d5de:	fa24 f001 	lsr.w	r0, r4, r1
 800d5e2:	fa00 f101 	lsl.w	r1, r0, r1
 800d5e6:	428c      	cmp	r4, r1
 800d5e8:	d10b      	bne.n	800d602 <__any_on+0x3e>
 800d5ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d803      	bhi.n	800d5fa <__any_on+0x36>
 800d5f2:	2000      	movs	r0, #0
 800d5f4:	bd10      	pop	{r4, pc}
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	e7f7      	b.n	800d5ea <__any_on+0x26>
 800d5fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d5fe:	2900      	cmp	r1, #0
 800d600:	d0f5      	beq.n	800d5ee <__any_on+0x2a>
 800d602:	2001      	movs	r0, #1
 800d604:	e7f6      	b.n	800d5f4 <__any_on+0x30>

0800d606 <_calloc_r>:
 800d606:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d608:	fba1 2402 	umull	r2, r4, r1, r2
 800d60c:	b94c      	cbnz	r4, 800d622 <_calloc_r+0x1c>
 800d60e:	4611      	mov	r1, r2
 800d610:	9201      	str	r2, [sp, #4]
 800d612:	f000 f87b 	bl	800d70c <_malloc_r>
 800d616:	9a01      	ldr	r2, [sp, #4]
 800d618:	4605      	mov	r5, r0
 800d61a:	b930      	cbnz	r0, 800d62a <_calloc_r+0x24>
 800d61c:	4628      	mov	r0, r5
 800d61e:	b003      	add	sp, #12
 800d620:	bd30      	pop	{r4, r5, pc}
 800d622:	220c      	movs	r2, #12
 800d624:	6002      	str	r2, [r0, #0]
 800d626:	2500      	movs	r5, #0
 800d628:	e7f8      	b.n	800d61c <_calloc_r+0x16>
 800d62a:	4621      	mov	r1, r4
 800d62c:	f7fc fa80 	bl	8009b30 <memset>
 800d630:	e7f4      	b.n	800d61c <_calloc_r+0x16>
	...

0800d634 <_free_r>:
 800d634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d636:	2900      	cmp	r1, #0
 800d638:	d044      	beq.n	800d6c4 <_free_r+0x90>
 800d63a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d63e:	9001      	str	r0, [sp, #4]
 800d640:	2b00      	cmp	r3, #0
 800d642:	f1a1 0404 	sub.w	r4, r1, #4
 800d646:	bfb8      	it	lt
 800d648:	18e4      	addlt	r4, r4, r3
 800d64a:	f001 fae3 	bl	800ec14 <__malloc_lock>
 800d64e:	4a1e      	ldr	r2, [pc, #120]	; (800d6c8 <_free_r+0x94>)
 800d650:	9801      	ldr	r0, [sp, #4]
 800d652:	6813      	ldr	r3, [r2, #0]
 800d654:	b933      	cbnz	r3, 800d664 <_free_r+0x30>
 800d656:	6063      	str	r3, [r4, #4]
 800d658:	6014      	str	r4, [r2, #0]
 800d65a:	b003      	add	sp, #12
 800d65c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d660:	f001 bade 	b.w	800ec20 <__malloc_unlock>
 800d664:	42a3      	cmp	r3, r4
 800d666:	d908      	bls.n	800d67a <_free_r+0x46>
 800d668:	6825      	ldr	r5, [r4, #0]
 800d66a:	1961      	adds	r1, r4, r5
 800d66c:	428b      	cmp	r3, r1
 800d66e:	bf01      	itttt	eq
 800d670:	6819      	ldreq	r1, [r3, #0]
 800d672:	685b      	ldreq	r3, [r3, #4]
 800d674:	1949      	addeq	r1, r1, r5
 800d676:	6021      	streq	r1, [r4, #0]
 800d678:	e7ed      	b.n	800d656 <_free_r+0x22>
 800d67a:	461a      	mov	r2, r3
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	b10b      	cbz	r3, 800d684 <_free_r+0x50>
 800d680:	42a3      	cmp	r3, r4
 800d682:	d9fa      	bls.n	800d67a <_free_r+0x46>
 800d684:	6811      	ldr	r1, [r2, #0]
 800d686:	1855      	adds	r5, r2, r1
 800d688:	42a5      	cmp	r5, r4
 800d68a:	d10b      	bne.n	800d6a4 <_free_r+0x70>
 800d68c:	6824      	ldr	r4, [r4, #0]
 800d68e:	4421      	add	r1, r4
 800d690:	1854      	adds	r4, r2, r1
 800d692:	42a3      	cmp	r3, r4
 800d694:	6011      	str	r1, [r2, #0]
 800d696:	d1e0      	bne.n	800d65a <_free_r+0x26>
 800d698:	681c      	ldr	r4, [r3, #0]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	6053      	str	r3, [r2, #4]
 800d69e:	4421      	add	r1, r4
 800d6a0:	6011      	str	r1, [r2, #0]
 800d6a2:	e7da      	b.n	800d65a <_free_r+0x26>
 800d6a4:	d902      	bls.n	800d6ac <_free_r+0x78>
 800d6a6:	230c      	movs	r3, #12
 800d6a8:	6003      	str	r3, [r0, #0]
 800d6aa:	e7d6      	b.n	800d65a <_free_r+0x26>
 800d6ac:	6825      	ldr	r5, [r4, #0]
 800d6ae:	1961      	adds	r1, r4, r5
 800d6b0:	428b      	cmp	r3, r1
 800d6b2:	bf04      	itt	eq
 800d6b4:	6819      	ldreq	r1, [r3, #0]
 800d6b6:	685b      	ldreq	r3, [r3, #4]
 800d6b8:	6063      	str	r3, [r4, #4]
 800d6ba:	bf04      	itt	eq
 800d6bc:	1949      	addeq	r1, r1, r5
 800d6be:	6021      	streq	r1, [r4, #0]
 800d6c0:	6054      	str	r4, [r2, #4]
 800d6c2:	e7ca      	b.n	800d65a <_free_r+0x26>
 800d6c4:	b003      	add	sp, #12
 800d6c6:	bd30      	pop	{r4, r5, pc}
 800d6c8:	20000510 	.word	0x20000510

0800d6cc <sbrk_aligned>:
 800d6cc:	b570      	push	{r4, r5, r6, lr}
 800d6ce:	4e0e      	ldr	r6, [pc, #56]	; (800d708 <sbrk_aligned+0x3c>)
 800d6d0:	460c      	mov	r4, r1
 800d6d2:	6831      	ldr	r1, [r6, #0]
 800d6d4:	4605      	mov	r5, r0
 800d6d6:	b911      	cbnz	r1, 800d6de <sbrk_aligned+0x12>
 800d6d8:	f000 fe82 	bl	800e3e0 <_sbrk_r>
 800d6dc:	6030      	str	r0, [r6, #0]
 800d6de:	4621      	mov	r1, r4
 800d6e0:	4628      	mov	r0, r5
 800d6e2:	f000 fe7d 	bl	800e3e0 <_sbrk_r>
 800d6e6:	1c43      	adds	r3, r0, #1
 800d6e8:	d00a      	beq.n	800d700 <sbrk_aligned+0x34>
 800d6ea:	1cc4      	adds	r4, r0, #3
 800d6ec:	f024 0403 	bic.w	r4, r4, #3
 800d6f0:	42a0      	cmp	r0, r4
 800d6f2:	d007      	beq.n	800d704 <sbrk_aligned+0x38>
 800d6f4:	1a21      	subs	r1, r4, r0
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	f000 fe72 	bl	800e3e0 <_sbrk_r>
 800d6fc:	3001      	adds	r0, #1
 800d6fe:	d101      	bne.n	800d704 <sbrk_aligned+0x38>
 800d700:	f04f 34ff 	mov.w	r4, #4294967295
 800d704:	4620      	mov	r0, r4
 800d706:	bd70      	pop	{r4, r5, r6, pc}
 800d708:	20000514 	.word	0x20000514

0800d70c <_malloc_r>:
 800d70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d710:	1ccd      	adds	r5, r1, #3
 800d712:	f025 0503 	bic.w	r5, r5, #3
 800d716:	3508      	adds	r5, #8
 800d718:	2d0c      	cmp	r5, #12
 800d71a:	bf38      	it	cc
 800d71c:	250c      	movcc	r5, #12
 800d71e:	2d00      	cmp	r5, #0
 800d720:	4607      	mov	r7, r0
 800d722:	db01      	blt.n	800d728 <_malloc_r+0x1c>
 800d724:	42a9      	cmp	r1, r5
 800d726:	d905      	bls.n	800d734 <_malloc_r+0x28>
 800d728:	230c      	movs	r3, #12
 800d72a:	603b      	str	r3, [r7, #0]
 800d72c:	2600      	movs	r6, #0
 800d72e:	4630      	mov	r0, r6
 800d730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d734:	4e2e      	ldr	r6, [pc, #184]	; (800d7f0 <_malloc_r+0xe4>)
 800d736:	f001 fa6d 	bl	800ec14 <__malloc_lock>
 800d73a:	6833      	ldr	r3, [r6, #0]
 800d73c:	461c      	mov	r4, r3
 800d73e:	bb34      	cbnz	r4, 800d78e <_malloc_r+0x82>
 800d740:	4629      	mov	r1, r5
 800d742:	4638      	mov	r0, r7
 800d744:	f7ff ffc2 	bl	800d6cc <sbrk_aligned>
 800d748:	1c43      	adds	r3, r0, #1
 800d74a:	4604      	mov	r4, r0
 800d74c:	d14d      	bne.n	800d7ea <_malloc_r+0xde>
 800d74e:	6834      	ldr	r4, [r6, #0]
 800d750:	4626      	mov	r6, r4
 800d752:	2e00      	cmp	r6, #0
 800d754:	d140      	bne.n	800d7d8 <_malloc_r+0xcc>
 800d756:	6823      	ldr	r3, [r4, #0]
 800d758:	4631      	mov	r1, r6
 800d75a:	4638      	mov	r0, r7
 800d75c:	eb04 0803 	add.w	r8, r4, r3
 800d760:	f000 fe3e 	bl	800e3e0 <_sbrk_r>
 800d764:	4580      	cmp	r8, r0
 800d766:	d13a      	bne.n	800d7de <_malloc_r+0xd2>
 800d768:	6821      	ldr	r1, [r4, #0]
 800d76a:	3503      	adds	r5, #3
 800d76c:	1a6d      	subs	r5, r5, r1
 800d76e:	f025 0503 	bic.w	r5, r5, #3
 800d772:	3508      	adds	r5, #8
 800d774:	2d0c      	cmp	r5, #12
 800d776:	bf38      	it	cc
 800d778:	250c      	movcc	r5, #12
 800d77a:	4629      	mov	r1, r5
 800d77c:	4638      	mov	r0, r7
 800d77e:	f7ff ffa5 	bl	800d6cc <sbrk_aligned>
 800d782:	3001      	adds	r0, #1
 800d784:	d02b      	beq.n	800d7de <_malloc_r+0xd2>
 800d786:	6823      	ldr	r3, [r4, #0]
 800d788:	442b      	add	r3, r5
 800d78a:	6023      	str	r3, [r4, #0]
 800d78c:	e00e      	b.n	800d7ac <_malloc_r+0xa0>
 800d78e:	6822      	ldr	r2, [r4, #0]
 800d790:	1b52      	subs	r2, r2, r5
 800d792:	d41e      	bmi.n	800d7d2 <_malloc_r+0xc6>
 800d794:	2a0b      	cmp	r2, #11
 800d796:	d916      	bls.n	800d7c6 <_malloc_r+0xba>
 800d798:	1961      	adds	r1, r4, r5
 800d79a:	42a3      	cmp	r3, r4
 800d79c:	6025      	str	r5, [r4, #0]
 800d79e:	bf18      	it	ne
 800d7a0:	6059      	strne	r1, [r3, #4]
 800d7a2:	6863      	ldr	r3, [r4, #4]
 800d7a4:	bf08      	it	eq
 800d7a6:	6031      	streq	r1, [r6, #0]
 800d7a8:	5162      	str	r2, [r4, r5]
 800d7aa:	604b      	str	r3, [r1, #4]
 800d7ac:	4638      	mov	r0, r7
 800d7ae:	f104 060b 	add.w	r6, r4, #11
 800d7b2:	f001 fa35 	bl	800ec20 <__malloc_unlock>
 800d7b6:	f026 0607 	bic.w	r6, r6, #7
 800d7ba:	1d23      	adds	r3, r4, #4
 800d7bc:	1af2      	subs	r2, r6, r3
 800d7be:	d0b6      	beq.n	800d72e <_malloc_r+0x22>
 800d7c0:	1b9b      	subs	r3, r3, r6
 800d7c2:	50a3      	str	r3, [r4, r2]
 800d7c4:	e7b3      	b.n	800d72e <_malloc_r+0x22>
 800d7c6:	6862      	ldr	r2, [r4, #4]
 800d7c8:	42a3      	cmp	r3, r4
 800d7ca:	bf0c      	ite	eq
 800d7cc:	6032      	streq	r2, [r6, #0]
 800d7ce:	605a      	strne	r2, [r3, #4]
 800d7d0:	e7ec      	b.n	800d7ac <_malloc_r+0xa0>
 800d7d2:	4623      	mov	r3, r4
 800d7d4:	6864      	ldr	r4, [r4, #4]
 800d7d6:	e7b2      	b.n	800d73e <_malloc_r+0x32>
 800d7d8:	4634      	mov	r4, r6
 800d7da:	6876      	ldr	r6, [r6, #4]
 800d7dc:	e7b9      	b.n	800d752 <_malloc_r+0x46>
 800d7de:	230c      	movs	r3, #12
 800d7e0:	603b      	str	r3, [r7, #0]
 800d7e2:	4638      	mov	r0, r7
 800d7e4:	f001 fa1c 	bl	800ec20 <__malloc_unlock>
 800d7e8:	e7a1      	b.n	800d72e <_malloc_r+0x22>
 800d7ea:	6025      	str	r5, [r4, #0]
 800d7ec:	e7de      	b.n	800d7ac <_malloc_r+0xa0>
 800d7ee:	bf00      	nop
 800d7f0:	20000510 	.word	0x20000510

0800d7f4 <__ssputs_r>:
 800d7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7f8:	688e      	ldr	r6, [r1, #8]
 800d7fa:	429e      	cmp	r6, r3
 800d7fc:	4682      	mov	sl, r0
 800d7fe:	460c      	mov	r4, r1
 800d800:	4690      	mov	r8, r2
 800d802:	461f      	mov	r7, r3
 800d804:	d838      	bhi.n	800d878 <__ssputs_r+0x84>
 800d806:	898a      	ldrh	r2, [r1, #12]
 800d808:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d80c:	d032      	beq.n	800d874 <__ssputs_r+0x80>
 800d80e:	6825      	ldr	r5, [r4, #0]
 800d810:	6909      	ldr	r1, [r1, #16]
 800d812:	eba5 0901 	sub.w	r9, r5, r1
 800d816:	6965      	ldr	r5, [r4, #20]
 800d818:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d81c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d820:	3301      	adds	r3, #1
 800d822:	444b      	add	r3, r9
 800d824:	106d      	asrs	r5, r5, #1
 800d826:	429d      	cmp	r5, r3
 800d828:	bf38      	it	cc
 800d82a:	461d      	movcc	r5, r3
 800d82c:	0553      	lsls	r3, r2, #21
 800d82e:	d531      	bpl.n	800d894 <__ssputs_r+0xa0>
 800d830:	4629      	mov	r1, r5
 800d832:	f7ff ff6b 	bl	800d70c <_malloc_r>
 800d836:	4606      	mov	r6, r0
 800d838:	b950      	cbnz	r0, 800d850 <__ssputs_r+0x5c>
 800d83a:	230c      	movs	r3, #12
 800d83c:	f8ca 3000 	str.w	r3, [sl]
 800d840:	89a3      	ldrh	r3, [r4, #12]
 800d842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d846:	81a3      	strh	r3, [r4, #12]
 800d848:	f04f 30ff 	mov.w	r0, #4294967295
 800d84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d850:	6921      	ldr	r1, [r4, #16]
 800d852:	464a      	mov	r2, r9
 800d854:	f7ff fa08 	bl	800cc68 <memcpy>
 800d858:	89a3      	ldrh	r3, [r4, #12]
 800d85a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d85e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d862:	81a3      	strh	r3, [r4, #12]
 800d864:	6126      	str	r6, [r4, #16]
 800d866:	6165      	str	r5, [r4, #20]
 800d868:	444e      	add	r6, r9
 800d86a:	eba5 0509 	sub.w	r5, r5, r9
 800d86e:	6026      	str	r6, [r4, #0]
 800d870:	60a5      	str	r5, [r4, #8]
 800d872:	463e      	mov	r6, r7
 800d874:	42be      	cmp	r6, r7
 800d876:	d900      	bls.n	800d87a <__ssputs_r+0x86>
 800d878:	463e      	mov	r6, r7
 800d87a:	6820      	ldr	r0, [r4, #0]
 800d87c:	4632      	mov	r2, r6
 800d87e:	4641      	mov	r1, r8
 800d880:	f001 f9ae 	bl	800ebe0 <memmove>
 800d884:	68a3      	ldr	r3, [r4, #8]
 800d886:	1b9b      	subs	r3, r3, r6
 800d888:	60a3      	str	r3, [r4, #8]
 800d88a:	6823      	ldr	r3, [r4, #0]
 800d88c:	4433      	add	r3, r6
 800d88e:	6023      	str	r3, [r4, #0]
 800d890:	2000      	movs	r0, #0
 800d892:	e7db      	b.n	800d84c <__ssputs_r+0x58>
 800d894:	462a      	mov	r2, r5
 800d896:	f001 f9c9 	bl	800ec2c <_realloc_r>
 800d89a:	4606      	mov	r6, r0
 800d89c:	2800      	cmp	r0, #0
 800d89e:	d1e1      	bne.n	800d864 <__ssputs_r+0x70>
 800d8a0:	6921      	ldr	r1, [r4, #16]
 800d8a2:	4650      	mov	r0, sl
 800d8a4:	f7ff fec6 	bl	800d634 <_free_r>
 800d8a8:	e7c7      	b.n	800d83a <__ssputs_r+0x46>
	...

0800d8ac <_svfiprintf_r>:
 800d8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b0:	4698      	mov	r8, r3
 800d8b2:	898b      	ldrh	r3, [r1, #12]
 800d8b4:	061b      	lsls	r3, r3, #24
 800d8b6:	b09d      	sub	sp, #116	; 0x74
 800d8b8:	4607      	mov	r7, r0
 800d8ba:	460d      	mov	r5, r1
 800d8bc:	4614      	mov	r4, r2
 800d8be:	d50e      	bpl.n	800d8de <_svfiprintf_r+0x32>
 800d8c0:	690b      	ldr	r3, [r1, #16]
 800d8c2:	b963      	cbnz	r3, 800d8de <_svfiprintf_r+0x32>
 800d8c4:	2140      	movs	r1, #64	; 0x40
 800d8c6:	f7ff ff21 	bl	800d70c <_malloc_r>
 800d8ca:	6028      	str	r0, [r5, #0]
 800d8cc:	6128      	str	r0, [r5, #16]
 800d8ce:	b920      	cbnz	r0, 800d8da <_svfiprintf_r+0x2e>
 800d8d0:	230c      	movs	r3, #12
 800d8d2:	603b      	str	r3, [r7, #0]
 800d8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8d8:	e0d1      	b.n	800da7e <_svfiprintf_r+0x1d2>
 800d8da:	2340      	movs	r3, #64	; 0x40
 800d8dc:	616b      	str	r3, [r5, #20]
 800d8de:	2300      	movs	r3, #0
 800d8e0:	9309      	str	r3, [sp, #36]	; 0x24
 800d8e2:	2320      	movs	r3, #32
 800d8e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d8e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8ec:	2330      	movs	r3, #48	; 0x30
 800d8ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800da98 <_svfiprintf_r+0x1ec>
 800d8f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8f6:	f04f 0901 	mov.w	r9, #1
 800d8fa:	4623      	mov	r3, r4
 800d8fc:	469a      	mov	sl, r3
 800d8fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d902:	b10a      	cbz	r2, 800d908 <_svfiprintf_r+0x5c>
 800d904:	2a25      	cmp	r2, #37	; 0x25
 800d906:	d1f9      	bne.n	800d8fc <_svfiprintf_r+0x50>
 800d908:	ebba 0b04 	subs.w	fp, sl, r4
 800d90c:	d00b      	beq.n	800d926 <_svfiprintf_r+0x7a>
 800d90e:	465b      	mov	r3, fp
 800d910:	4622      	mov	r2, r4
 800d912:	4629      	mov	r1, r5
 800d914:	4638      	mov	r0, r7
 800d916:	f7ff ff6d 	bl	800d7f4 <__ssputs_r>
 800d91a:	3001      	adds	r0, #1
 800d91c:	f000 80aa 	beq.w	800da74 <_svfiprintf_r+0x1c8>
 800d920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d922:	445a      	add	r2, fp
 800d924:	9209      	str	r2, [sp, #36]	; 0x24
 800d926:	f89a 3000 	ldrb.w	r3, [sl]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	f000 80a2 	beq.w	800da74 <_svfiprintf_r+0x1c8>
 800d930:	2300      	movs	r3, #0
 800d932:	f04f 32ff 	mov.w	r2, #4294967295
 800d936:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d93a:	f10a 0a01 	add.w	sl, sl, #1
 800d93e:	9304      	str	r3, [sp, #16]
 800d940:	9307      	str	r3, [sp, #28]
 800d942:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d946:	931a      	str	r3, [sp, #104]	; 0x68
 800d948:	4654      	mov	r4, sl
 800d94a:	2205      	movs	r2, #5
 800d94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d950:	4851      	ldr	r0, [pc, #324]	; (800da98 <_svfiprintf_r+0x1ec>)
 800d952:	f7f2 fc7d 	bl	8000250 <memchr>
 800d956:	9a04      	ldr	r2, [sp, #16]
 800d958:	b9d8      	cbnz	r0, 800d992 <_svfiprintf_r+0xe6>
 800d95a:	06d0      	lsls	r0, r2, #27
 800d95c:	bf44      	itt	mi
 800d95e:	2320      	movmi	r3, #32
 800d960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d964:	0711      	lsls	r1, r2, #28
 800d966:	bf44      	itt	mi
 800d968:	232b      	movmi	r3, #43	; 0x2b
 800d96a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d96e:	f89a 3000 	ldrb.w	r3, [sl]
 800d972:	2b2a      	cmp	r3, #42	; 0x2a
 800d974:	d015      	beq.n	800d9a2 <_svfiprintf_r+0xf6>
 800d976:	9a07      	ldr	r2, [sp, #28]
 800d978:	4654      	mov	r4, sl
 800d97a:	2000      	movs	r0, #0
 800d97c:	f04f 0c0a 	mov.w	ip, #10
 800d980:	4621      	mov	r1, r4
 800d982:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d986:	3b30      	subs	r3, #48	; 0x30
 800d988:	2b09      	cmp	r3, #9
 800d98a:	d94e      	bls.n	800da2a <_svfiprintf_r+0x17e>
 800d98c:	b1b0      	cbz	r0, 800d9bc <_svfiprintf_r+0x110>
 800d98e:	9207      	str	r2, [sp, #28]
 800d990:	e014      	b.n	800d9bc <_svfiprintf_r+0x110>
 800d992:	eba0 0308 	sub.w	r3, r0, r8
 800d996:	fa09 f303 	lsl.w	r3, r9, r3
 800d99a:	4313      	orrs	r3, r2
 800d99c:	9304      	str	r3, [sp, #16]
 800d99e:	46a2      	mov	sl, r4
 800d9a0:	e7d2      	b.n	800d948 <_svfiprintf_r+0x9c>
 800d9a2:	9b03      	ldr	r3, [sp, #12]
 800d9a4:	1d19      	adds	r1, r3, #4
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	9103      	str	r1, [sp, #12]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	bfbb      	ittet	lt
 800d9ae:	425b      	neglt	r3, r3
 800d9b0:	f042 0202 	orrlt.w	r2, r2, #2
 800d9b4:	9307      	strge	r3, [sp, #28]
 800d9b6:	9307      	strlt	r3, [sp, #28]
 800d9b8:	bfb8      	it	lt
 800d9ba:	9204      	strlt	r2, [sp, #16]
 800d9bc:	7823      	ldrb	r3, [r4, #0]
 800d9be:	2b2e      	cmp	r3, #46	; 0x2e
 800d9c0:	d10c      	bne.n	800d9dc <_svfiprintf_r+0x130>
 800d9c2:	7863      	ldrb	r3, [r4, #1]
 800d9c4:	2b2a      	cmp	r3, #42	; 0x2a
 800d9c6:	d135      	bne.n	800da34 <_svfiprintf_r+0x188>
 800d9c8:	9b03      	ldr	r3, [sp, #12]
 800d9ca:	1d1a      	adds	r2, r3, #4
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	9203      	str	r2, [sp, #12]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	bfb8      	it	lt
 800d9d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d9d8:	3402      	adds	r4, #2
 800d9da:	9305      	str	r3, [sp, #20]
 800d9dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800daa8 <_svfiprintf_r+0x1fc>
 800d9e0:	7821      	ldrb	r1, [r4, #0]
 800d9e2:	2203      	movs	r2, #3
 800d9e4:	4650      	mov	r0, sl
 800d9e6:	f7f2 fc33 	bl	8000250 <memchr>
 800d9ea:	b140      	cbz	r0, 800d9fe <_svfiprintf_r+0x152>
 800d9ec:	2340      	movs	r3, #64	; 0x40
 800d9ee:	eba0 000a 	sub.w	r0, r0, sl
 800d9f2:	fa03 f000 	lsl.w	r0, r3, r0
 800d9f6:	9b04      	ldr	r3, [sp, #16]
 800d9f8:	4303      	orrs	r3, r0
 800d9fa:	3401      	adds	r4, #1
 800d9fc:	9304      	str	r3, [sp, #16]
 800d9fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da02:	4826      	ldr	r0, [pc, #152]	; (800da9c <_svfiprintf_r+0x1f0>)
 800da04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da08:	2206      	movs	r2, #6
 800da0a:	f7f2 fc21 	bl	8000250 <memchr>
 800da0e:	2800      	cmp	r0, #0
 800da10:	d038      	beq.n	800da84 <_svfiprintf_r+0x1d8>
 800da12:	4b23      	ldr	r3, [pc, #140]	; (800daa0 <_svfiprintf_r+0x1f4>)
 800da14:	bb1b      	cbnz	r3, 800da5e <_svfiprintf_r+0x1b2>
 800da16:	9b03      	ldr	r3, [sp, #12]
 800da18:	3307      	adds	r3, #7
 800da1a:	f023 0307 	bic.w	r3, r3, #7
 800da1e:	3308      	adds	r3, #8
 800da20:	9303      	str	r3, [sp, #12]
 800da22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da24:	4433      	add	r3, r6
 800da26:	9309      	str	r3, [sp, #36]	; 0x24
 800da28:	e767      	b.n	800d8fa <_svfiprintf_r+0x4e>
 800da2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800da2e:	460c      	mov	r4, r1
 800da30:	2001      	movs	r0, #1
 800da32:	e7a5      	b.n	800d980 <_svfiprintf_r+0xd4>
 800da34:	2300      	movs	r3, #0
 800da36:	3401      	adds	r4, #1
 800da38:	9305      	str	r3, [sp, #20]
 800da3a:	4619      	mov	r1, r3
 800da3c:	f04f 0c0a 	mov.w	ip, #10
 800da40:	4620      	mov	r0, r4
 800da42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da46:	3a30      	subs	r2, #48	; 0x30
 800da48:	2a09      	cmp	r2, #9
 800da4a:	d903      	bls.n	800da54 <_svfiprintf_r+0x1a8>
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d0c5      	beq.n	800d9dc <_svfiprintf_r+0x130>
 800da50:	9105      	str	r1, [sp, #20]
 800da52:	e7c3      	b.n	800d9dc <_svfiprintf_r+0x130>
 800da54:	fb0c 2101 	mla	r1, ip, r1, r2
 800da58:	4604      	mov	r4, r0
 800da5a:	2301      	movs	r3, #1
 800da5c:	e7f0      	b.n	800da40 <_svfiprintf_r+0x194>
 800da5e:	ab03      	add	r3, sp, #12
 800da60:	9300      	str	r3, [sp, #0]
 800da62:	462a      	mov	r2, r5
 800da64:	4b0f      	ldr	r3, [pc, #60]	; (800daa4 <_svfiprintf_r+0x1f8>)
 800da66:	a904      	add	r1, sp, #16
 800da68:	4638      	mov	r0, r7
 800da6a:	f7fc f909 	bl	8009c80 <_printf_float>
 800da6e:	1c42      	adds	r2, r0, #1
 800da70:	4606      	mov	r6, r0
 800da72:	d1d6      	bne.n	800da22 <_svfiprintf_r+0x176>
 800da74:	89ab      	ldrh	r3, [r5, #12]
 800da76:	065b      	lsls	r3, r3, #25
 800da78:	f53f af2c 	bmi.w	800d8d4 <_svfiprintf_r+0x28>
 800da7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da7e:	b01d      	add	sp, #116	; 0x74
 800da80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da84:	ab03      	add	r3, sp, #12
 800da86:	9300      	str	r3, [sp, #0]
 800da88:	462a      	mov	r2, r5
 800da8a:	4b06      	ldr	r3, [pc, #24]	; (800daa4 <_svfiprintf_r+0x1f8>)
 800da8c:	a904      	add	r1, sp, #16
 800da8e:	4638      	mov	r0, r7
 800da90:	f7fc fb9a 	bl	800a1c8 <_printf_i>
 800da94:	e7eb      	b.n	800da6e <_svfiprintf_r+0x1c2>
 800da96:	bf00      	nop
 800da98:	0800f5e4 	.word	0x0800f5e4
 800da9c:	0800f5ee 	.word	0x0800f5ee
 800daa0:	08009c81 	.word	0x08009c81
 800daa4:	0800d7f5 	.word	0x0800d7f5
 800daa8:	0800f5ea 	.word	0x0800f5ea

0800daac <_sungetc_r>:
 800daac:	b538      	push	{r3, r4, r5, lr}
 800daae:	1c4b      	adds	r3, r1, #1
 800dab0:	4614      	mov	r4, r2
 800dab2:	d103      	bne.n	800dabc <_sungetc_r+0x10>
 800dab4:	f04f 35ff 	mov.w	r5, #4294967295
 800dab8:	4628      	mov	r0, r5
 800daba:	bd38      	pop	{r3, r4, r5, pc}
 800dabc:	8993      	ldrh	r3, [r2, #12]
 800dabe:	f023 0320 	bic.w	r3, r3, #32
 800dac2:	8193      	strh	r3, [r2, #12]
 800dac4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dac6:	6852      	ldr	r2, [r2, #4]
 800dac8:	b2cd      	uxtb	r5, r1
 800daca:	b18b      	cbz	r3, 800daf0 <_sungetc_r+0x44>
 800dacc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dace:	4293      	cmp	r3, r2
 800dad0:	dd08      	ble.n	800dae4 <_sungetc_r+0x38>
 800dad2:	6823      	ldr	r3, [r4, #0]
 800dad4:	1e5a      	subs	r2, r3, #1
 800dad6:	6022      	str	r2, [r4, #0]
 800dad8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800dadc:	6863      	ldr	r3, [r4, #4]
 800dade:	3301      	adds	r3, #1
 800dae0:	6063      	str	r3, [r4, #4]
 800dae2:	e7e9      	b.n	800dab8 <_sungetc_r+0xc>
 800dae4:	4621      	mov	r1, r4
 800dae6:	f000 fd4b 	bl	800e580 <__submore>
 800daea:	2800      	cmp	r0, #0
 800daec:	d0f1      	beq.n	800dad2 <_sungetc_r+0x26>
 800daee:	e7e1      	b.n	800dab4 <_sungetc_r+0x8>
 800daf0:	6921      	ldr	r1, [r4, #16]
 800daf2:	6823      	ldr	r3, [r4, #0]
 800daf4:	b151      	cbz	r1, 800db0c <_sungetc_r+0x60>
 800daf6:	4299      	cmp	r1, r3
 800daf8:	d208      	bcs.n	800db0c <_sungetc_r+0x60>
 800dafa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800dafe:	42a9      	cmp	r1, r5
 800db00:	d104      	bne.n	800db0c <_sungetc_r+0x60>
 800db02:	3b01      	subs	r3, #1
 800db04:	3201      	adds	r2, #1
 800db06:	6023      	str	r3, [r4, #0]
 800db08:	6062      	str	r2, [r4, #4]
 800db0a:	e7d5      	b.n	800dab8 <_sungetc_r+0xc>
 800db0c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800db10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db14:	6363      	str	r3, [r4, #52]	; 0x34
 800db16:	2303      	movs	r3, #3
 800db18:	63a3      	str	r3, [r4, #56]	; 0x38
 800db1a:	4623      	mov	r3, r4
 800db1c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800db20:	6023      	str	r3, [r4, #0]
 800db22:	2301      	movs	r3, #1
 800db24:	e7dc      	b.n	800dae0 <_sungetc_r+0x34>

0800db26 <__ssrefill_r>:
 800db26:	b510      	push	{r4, lr}
 800db28:	460c      	mov	r4, r1
 800db2a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800db2c:	b169      	cbz	r1, 800db4a <__ssrefill_r+0x24>
 800db2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db32:	4299      	cmp	r1, r3
 800db34:	d001      	beq.n	800db3a <__ssrefill_r+0x14>
 800db36:	f7ff fd7d 	bl	800d634 <_free_r>
 800db3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800db3c:	6063      	str	r3, [r4, #4]
 800db3e:	2000      	movs	r0, #0
 800db40:	6360      	str	r0, [r4, #52]	; 0x34
 800db42:	b113      	cbz	r3, 800db4a <__ssrefill_r+0x24>
 800db44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800db46:	6023      	str	r3, [r4, #0]
 800db48:	bd10      	pop	{r4, pc}
 800db4a:	6923      	ldr	r3, [r4, #16]
 800db4c:	6023      	str	r3, [r4, #0]
 800db4e:	2300      	movs	r3, #0
 800db50:	6063      	str	r3, [r4, #4]
 800db52:	89a3      	ldrh	r3, [r4, #12]
 800db54:	f043 0320 	orr.w	r3, r3, #32
 800db58:	81a3      	strh	r3, [r4, #12]
 800db5a:	f04f 30ff 	mov.w	r0, #4294967295
 800db5e:	e7f3      	b.n	800db48 <__ssrefill_r+0x22>

0800db60 <__ssvfiscanf_r>:
 800db60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db64:	460c      	mov	r4, r1
 800db66:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800db6a:	2100      	movs	r1, #0
 800db6c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800db70:	49a6      	ldr	r1, [pc, #664]	; (800de0c <__ssvfiscanf_r+0x2ac>)
 800db72:	91a0      	str	r1, [sp, #640]	; 0x280
 800db74:	f10d 0804 	add.w	r8, sp, #4
 800db78:	49a5      	ldr	r1, [pc, #660]	; (800de10 <__ssvfiscanf_r+0x2b0>)
 800db7a:	4fa6      	ldr	r7, [pc, #664]	; (800de14 <__ssvfiscanf_r+0x2b4>)
 800db7c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800de18 <__ssvfiscanf_r+0x2b8>
 800db80:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800db84:	4606      	mov	r6, r0
 800db86:	91a1      	str	r1, [sp, #644]	; 0x284
 800db88:	9300      	str	r3, [sp, #0]
 800db8a:	7813      	ldrb	r3, [r2, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	f000 815a 	beq.w	800de46 <__ssvfiscanf_r+0x2e6>
 800db92:	5dd9      	ldrb	r1, [r3, r7]
 800db94:	f011 0108 	ands.w	r1, r1, #8
 800db98:	f102 0501 	add.w	r5, r2, #1
 800db9c:	d019      	beq.n	800dbd2 <__ssvfiscanf_r+0x72>
 800db9e:	6863      	ldr	r3, [r4, #4]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	dd0f      	ble.n	800dbc4 <__ssvfiscanf_r+0x64>
 800dba4:	6823      	ldr	r3, [r4, #0]
 800dba6:	781a      	ldrb	r2, [r3, #0]
 800dba8:	5cba      	ldrb	r2, [r7, r2]
 800dbaa:	0712      	lsls	r2, r2, #28
 800dbac:	d401      	bmi.n	800dbb2 <__ssvfiscanf_r+0x52>
 800dbae:	462a      	mov	r2, r5
 800dbb0:	e7eb      	b.n	800db8a <__ssvfiscanf_r+0x2a>
 800dbb2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800dbb4:	3201      	adds	r2, #1
 800dbb6:	9245      	str	r2, [sp, #276]	; 0x114
 800dbb8:	6862      	ldr	r2, [r4, #4]
 800dbba:	3301      	adds	r3, #1
 800dbbc:	3a01      	subs	r2, #1
 800dbbe:	6062      	str	r2, [r4, #4]
 800dbc0:	6023      	str	r3, [r4, #0]
 800dbc2:	e7ec      	b.n	800db9e <__ssvfiscanf_r+0x3e>
 800dbc4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dbc6:	4621      	mov	r1, r4
 800dbc8:	4630      	mov	r0, r6
 800dbca:	4798      	blx	r3
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	d0e9      	beq.n	800dba4 <__ssvfiscanf_r+0x44>
 800dbd0:	e7ed      	b.n	800dbae <__ssvfiscanf_r+0x4e>
 800dbd2:	2b25      	cmp	r3, #37	; 0x25
 800dbd4:	d012      	beq.n	800dbfc <__ssvfiscanf_r+0x9c>
 800dbd6:	469a      	mov	sl, r3
 800dbd8:	6863      	ldr	r3, [r4, #4]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	f340 8091 	ble.w	800dd02 <__ssvfiscanf_r+0x1a2>
 800dbe0:	6822      	ldr	r2, [r4, #0]
 800dbe2:	7813      	ldrb	r3, [r2, #0]
 800dbe4:	4553      	cmp	r3, sl
 800dbe6:	f040 812e 	bne.w	800de46 <__ssvfiscanf_r+0x2e6>
 800dbea:	6863      	ldr	r3, [r4, #4]
 800dbec:	3b01      	subs	r3, #1
 800dbee:	6063      	str	r3, [r4, #4]
 800dbf0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800dbf2:	3201      	adds	r2, #1
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	6022      	str	r2, [r4, #0]
 800dbf8:	9345      	str	r3, [sp, #276]	; 0x114
 800dbfa:	e7d8      	b.n	800dbae <__ssvfiscanf_r+0x4e>
 800dbfc:	9141      	str	r1, [sp, #260]	; 0x104
 800dbfe:	9143      	str	r1, [sp, #268]	; 0x10c
 800dc00:	7853      	ldrb	r3, [r2, #1]
 800dc02:	2b2a      	cmp	r3, #42	; 0x2a
 800dc04:	bf02      	ittt	eq
 800dc06:	2310      	moveq	r3, #16
 800dc08:	1c95      	addeq	r5, r2, #2
 800dc0a:	9341      	streq	r3, [sp, #260]	; 0x104
 800dc0c:	220a      	movs	r2, #10
 800dc0e:	46aa      	mov	sl, r5
 800dc10:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800dc14:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800dc18:	2b09      	cmp	r3, #9
 800dc1a:	d91d      	bls.n	800dc58 <__ssvfiscanf_r+0xf8>
 800dc1c:	487e      	ldr	r0, [pc, #504]	; (800de18 <__ssvfiscanf_r+0x2b8>)
 800dc1e:	2203      	movs	r2, #3
 800dc20:	f7f2 fb16 	bl	8000250 <memchr>
 800dc24:	b140      	cbz	r0, 800dc38 <__ssvfiscanf_r+0xd8>
 800dc26:	2301      	movs	r3, #1
 800dc28:	eba0 0009 	sub.w	r0, r0, r9
 800dc2c:	fa03 f000 	lsl.w	r0, r3, r0
 800dc30:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dc32:	4318      	orrs	r0, r3
 800dc34:	9041      	str	r0, [sp, #260]	; 0x104
 800dc36:	4655      	mov	r5, sl
 800dc38:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dc3c:	2b78      	cmp	r3, #120	; 0x78
 800dc3e:	d806      	bhi.n	800dc4e <__ssvfiscanf_r+0xee>
 800dc40:	2b57      	cmp	r3, #87	; 0x57
 800dc42:	d810      	bhi.n	800dc66 <__ssvfiscanf_r+0x106>
 800dc44:	2b25      	cmp	r3, #37	; 0x25
 800dc46:	d0c6      	beq.n	800dbd6 <__ssvfiscanf_r+0x76>
 800dc48:	d856      	bhi.n	800dcf8 <__ssvfiscanf_r+0x198>
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d064      	beq.n	800dd18 <__ssvfiscanf_r+0x1b8>
 800dc4e:	2303      	movs	r3, #3
 800dc50:	9347      	str	r3, [sp, #284]	; 0x11c
 800dc52:	230a      	movs	r3, #10
 800dc54:	9342      	str	r3, [sp, #264]	; 0x108
 800dc56:	e071      	b.n	800dd3c <__ssvfiscanf_r+0x1dc>
 800dc58:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800dc5a:	fb02 1103 	mla	r1, r2, r3, r1
 800dc5e:	3930      	subs	r1, #48	; 0x30
 800dc60:	9143      	str	r1, [sp, #268]	; 0x10c
 800dc62:	4655      	mov	r5, sl
 800dc64:	e7d3      	b.n	800dc0e <__ssvfiscanf_r+0xae>
 800dc66:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800dc6a:	2a20      	cmp	r2, #32
 800dc6c:	d8ef      	bhi.n	800dc4e <__ssvfiscanf_r+0xee>
 800dc6e:	a101      	add	r1, pc, #4	; (adr r1, 800dc74 <__ssvfiscanf_r+0x114>)
 800dc70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dc74:	0800dd27 	.word	0x0800dd27
 800dc78:	0800dc4f 	.word	0x0800dc4f
 800dc7c:	0800dc4f 	.word	0x0800dc4f
 800dc80:	0800dd85 	.word	0x0800dd85
 800dc84:	0800dc4f 	.word	0x0800dc4f
 800dc88:	0800dc4f 	.word	0x0800dc4f
 800dc8c:	0800dc4f 	.word	0x0800dc4f
 800dc90:	0800dc4f 	.word	0x0800dc4f
 800dc94:	0800dc4f 	.word	0x0800dc4f
 800dc98:	0800dc4f 	.word	0x0800dc4f
 800dc9c:	0800dc4f 	.word	0x0800dc4f
 800dca0:	0800dd9b 	.word	0x0800dd9b
 800dca4:	0800dd71 	.word	0x0800dd71
 800dca8:	0800dcff 	.word	0x0800dcff
 800dcac:	0800dcff 	.word	0x0800dcff
 800dcb0:	0800dcff 	.word	0x0800dcff
 800dcb4:	0800dc4f 	.word	0x0800dc4f
 800dcb8:	0800dd75 	.word	0x0800dd75
 800dcbc:	0800dc4f 	.word	0x0800dc4f
 800dcc0:	0800dc4f 	.word	0x0800dc4f
 800dcc4:	0800dc4f 	.word	0x0800dc4f
 800dcc8:	0800dc4f 	.word	0x0800dc4f
 800dccc:	0800ddab 	.word	0x0800ddab
 800dcd0:	0800dd7d 	.word	0x0800dd7d
 800dcd4:	0800dd1f 	.word	0x0800dd1f
 800dcd8:	0800dc4f 	.word	0x0800dc4f
 800dcdc:	0800dc4f 	.word	0x0800dc4f
 800dce0:	0800dda7 	.word	0x0800dda7
 800dce4:	0800dc4f 	.word	0x0800dc4f
 800dce8:	0800dd71 	.word	0x0800dd71
 800dcec:	0800dc4f 	.word	0x0800dc4f
 800dcf0:	0800dc4f 	.word	0x0800dc4f
 800dcf4:	0800dd27 	.word	0x0800dd27
 800dcf8:	3b45      	subs	r3, #69	; 0x45
 800dcfa:	2b02      	cmp	r3, #2
 800dcfc:	d8a7      	bhi.n	800dc4e <__ssvfiscanf_r+0xee>
 800dcfe:	2305      	movs	r3, #5
 800dd00:	e01b      	b.n	800dd3a <__ssvfiscanf_r+0x1da>
 800dd02:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dd04:	4621      	mov	r1, r4
 800dd06:	4630      	mov	r0, r6
 800dd08:	4798      	blx	r3
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	f43f af68 	beq.w	800dbe0 <__ssvfiscanf_r+0x80>
 800dd10:	9844      	ldr	r0, [sp, #272]	; 0x110
 800dd12:	2800      	cmp	r0, #0
 800dd14:	f040 808d 	bne.w	800de32 <__ssvfiscanf_r+0x2d2>
 800dd18:	f04f 30ff 	mov.w	r0, #4294967295
 800dd1c:	e08f      	b.n	800de3e <__ssvfiscanf_r+0x2de>
 800dd1e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800dd20:	f042 0220 	orr.w	r2, r2, #32
 800dd24:	9241      	str	r2, [sp, #260]	; 0x104
 800dd26:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800dd28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd2c:	9241      	str	r2, [sp, #260]	; 0x104
 800dd2e:	2210      	movs	r2, #16
 800dd30:	2b6f      	cmp	r3, #111	; 0x6f
 800dd32:	9242      	str	r2, [sp, #264]	; 0x108
 800dd34:	bf34      	ite	cc
 800dd36:	2303      	movcc	r3, #3
 800dd38:	2304      	movcs	r3, #4
 800dd3a:	9347      	str	r3, [sp, #284]	; 0x11c
 800dd3c:	6863      	ldr	r3, [r4, #4]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	dd42      	ble.n	800ddc8 <__ssvfiscanf_r+0x268>
 800dd42:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dd44:	0659      	lsls	r1, r3, #25
 800dd46:	d404      	bmi.n	800dd52 <__ssvfiscanf_r+0x1f2>
 800dd48:	6823      	ldr	r3, [r4, #0]
 800dd4a:	781a      	ldrb	r2, [r3, #0]
 800dd4c:	5cba      	ldrb	r2, [r7, r2]
 800dd4e:	0712      	lsls	r2, r2, #28
 800dd50:	d441      	bmi.n	800ddd6 <__ssvfiscanf_r+0x276>
 800dd52:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800dd54:	2b02      	cmp	r3, #2
 800dd56:	dc50      	bgt.n	800ddfa <__ssvfiscanf_r+0x29a>
 800dd58:	466b      	mov	r3, sp
 800dd5a:	4622      	mov	r2, r4
 800dd5c:	a941      	add	r1, sp, #260	; 0x104
 800dd5e:	4630      	mov	r0, r6
 800dd60:	f000 f9d0 	bl	800e104 <_scanf_chars>
 800dd64:	2801      	cmp	r0, #1
 800dd66:	d06e      	beq.n	800de46 <__ssvfiscanf_r+0x2e6>
 800dd68:	2802      	cmp	r0, #2
 800dd6a:	f47f af20 	bne.w	800dbae <__ssvfiscanf_r+0x4e>
 800dd6e:	e7cf      	b.n	800dd10 <__ssvfiscanf_r+0x1b0>
 800dd70:	220a      	movs	r2, #10
 800dd72:	e7dd      	b.n	800dd30 <__ssvfiscanf_r+0x1d0>
 800dd74:	2300      	movs	r3, #0
 800dd76:	9342      	str	r3, [sp, #264]	; 0x108
 800dd78:	2303      	movs	r3, #3
 800dd7a:	e7de      	b.n	800dd3a <__ssvfiscanf_r+0x1da>
 800dd7c:	2308      	movs	r3, #8
 800dd7e:	9342      	str	r3, [sp, #264]	; 0x108
 800dd80:	2304      	movs	r3, #4
 800dd82:	e7da      	b.n	800dd3a <__ssvfiscanf_r+0x1da>
 800dd84:	4629      	mov	r1, r5
 800dd86:	4640      	mov	r0, r8
 800dd88:	f000 fb3a 	bl	800e400 <__sccl>
 800dd8c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dd8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd92:	9341      	str	r3, [sp, #260]	; 0x104
 800dd94:	4605      	mov	r5, r0
 800dd96:	2301      	movs	r3, #1
 800dd98:	e7cf      	b.n	800dd3a <__ssvfiscanf_r+0x1da>
 800dd9a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dd9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dda0:	9341      	str	r3, [sp, #260]	; 0x104
 800dda2:	2300      	movs	r3, #0
 800dda4:	e7c9      	b.n	800dd3a <__ssvfiscanf_r+0x1da>
 800dda6:	2302      	movs	r3, #2
 800dda8:	e7c7      	b.n	800dd3a <__ssvfiscanf_r+0x1da>
 800ddaa:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ddac:	06c3      	lsls	r3, r0, #27
 800ddae:	f53f aefe 	bmi.w	800dbae <__ssvfiscanf_r+0x4e>
 800ddb2:	9b00      	ldr	r3, [sp, #0]
 800ddb4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ddb6:	1d19      	adds	r1, r3, #4
 800ddb8:	9100      	str	r1, [sp, #0]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	f010 0f01 	tst.w	r0, #1
 800ddc0:	bf14      	ite	ne
 800ddc2:	801a      	strhne	r2, [r3, #0]
 800ddc4:	601a      	streq	r2, [r3, #0]
 800ddc6:	e6f2      	b.n	800dbae <__ssvfiscanf_r+0x4e>
 800ddc8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ddca:	4621      	mov	r1, r4
 800ddcc:	4630      	mov	r0, r6
 800ddce:	4798      	blx	r3
 800ddd0:	2800      	cmp	r0, #0
 800ddd2:	d0b6      	beq.n	800dd42 <__ssvfiscanf_r+0x1e2>
 800ddd4:	e79c      	b.n	800dd10 <__ssvfiscanf_r+0x1b0>
 800ddd6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ddd8:	3201      	adds	r2, #1
 800ddda:	9245      	str	r2, [sp, #276]	; 0x114
 800dddc:	6862      	ldr	r2, [r4, #4]
 800ddde:	3a01      	subs	r2, #1
 800dde0:	2a00      	cmp	r2, #0
 800dde2:	6062      	str	r2, [r4, #4]
 800dde4:	dd02      	ble.n	800ddec <__ssvfiscanf_r+0x28c>
 800dde6:	3301      	adds	r3, #1
 800dde8:	6023      	str	r3, [r4, #0]
 800ddea:	e7ad      	b.n	800dd48 <__ssvfiscanf_r+0x1e8>
 800ddec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ddee:	4621      	mov	r1, r4
 800ddf0:	4630      	mov	r0, r6
 800ddf2:	4798      	blx	r3
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	d0a7      	beq.n	800dd48 <__ssvfiscanf_r+0x1e8>
 800ddf8:	e78a      	b.n	800dd10 <__ssvfiscanf_r+0x1b0>
 800ddfa:	2b04      	cmp	r3, #4
 800ddfc:	dc0e      	bgt.n	800de1c <__ssvfiscanf_r+0x2bc>
 800ddfe:	466b      	mov	r3, sp
 800de00:	4622      	mov	r2, r4
 800de02:	a941      	add	r1, sp, #260	; 0x104
 800de04:	4630      	mov	r0, r6
 800de06:	f000 f9d7 	bl	800e1b8 <_scanf_i>
 800de0a:	e7ab      	b.n	800dd64 <__ssvfiscanf_r+0x204>
 800de0c:	0800daad 	.word	0x0800daad
 800de10:	0800db27 	.word	0x0800db27
 800de14:	0800f299 	.word	0x0800f299
 800de18:	0800f5ea 	.word	0x0800f5ea
 800de1c:	4b0b      	ldr	r3, [pc, #44]	; (800de4c <__ssvfiscanf_r+0x2ec>)
 800de1e:	2b00      	cmp	r3, #0
 800de20:	f43f aec5 	beq.w	800dbae <__ssvfiscanf_r+0x4e>
 800de24:	466b      	mov	r3, sp
 800de26:	4622      	mov	r2, r4
 800de28:	a941      	add	r1, sp, #260	; 0x104
 800de2a:	4630      	mov	r0, r6
 800de2c:	f7fc faf2 	bl	800a414 <_scanf_float>
 800de30:	e798      	b.n	800dd64 <__ssvfiscanf_r+0x204>
 800de32:	89a3      	ldrh	r3, [r4, #12]
 800de34:	f013 0f40 	tst.w	r3, #64	; 0x40
 800de38:	bf18      	it	ne
 800de3a:	f04f 30ff 	movne.w	r0, #4294967295
 800de3e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800de42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de46:	9844      	ldr	r0, [sp, #272]	; 0x110
 800de48:	e7f9      	b.n	800de3e <__ssvfiscanf_r+0x2de>
 800de4a:	bf00      	nop
 800de4c:	0800a415 	.word	0x0800a415

0800de50 <__sfputc_r>:
 800de50:	6893      	ldr	r3, [r2, #8]
 800de52:	3b01      	subs	r3, #1
 800de54:	2b00      	cmp	r3, #0
 800de56:	b410      	push	{r4}
 800de58:	6093      	str	r3, [r2, #8]
 800de5a:	da08      	bge.n	800de6e <__sfputc_r+0x1e>
 800de5c:	6994      	ldr	r4, [r2, #24]
 800de5e:	42a3      	cmp	r3, r4
 800de60:	db01      	blt.n	800de66 <__sfputc_r+0x16>
 800de62:	290a      	cmp	r1, #10
 800de64:	d103      	bne.n	800de6e <__sfputc_r+0x1e>
 800de66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de6a:	f000 bbc3 	b.w	800e5f4 <__swbuf_r>
 800de6e:	6813      	ldr	r3, [r2, #0]
 800de70:	1c58      	adds	r0, r3, #1
 800de72:	6010      	str	r0, [r2, #0]
 800de74:	7019      	strb	r1, [r3, #0]
 800de76:	4608      	mov	r0, r1
 800de78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de7c:	4770      	bx	lr

0800de7e <__sfputs_r>:
 800de7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de80:	4606      	mov	r6, r0
 800de82:	460f      	mov	r7, r1
 800de84:	4614      	mov	r4, r2
 800de86:	18d5      	adds	r5, r2, r3
 800de88:	42ac      	cmp	r4, r5
 800de8a:	d101      	bne.n	800de90 <__sfputs_r+0x12>
 800de8c:	2000      	movs	r0, #0
 800de8e:	e007      	b.n	800dea0 <__sfputs_r+0x22>
 800de90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de94:	463a      	mov	r2, r7
 800de96:	4630      	mov	r0, r6
 800de98:	f7ff ffda 	bl	800de50 <__sfputc_r>
 800de9c:	1c43      	adds	r3, r0, #1
 800de9e:	d1f3      	bne.n	800de88 <__sfputs_r+0xa>
 800dea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dea4 <_vfiprintf_r>:
 800dea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea8:	460d      	mov	r5, r1
 800deaa:	b09d      	sub	sp, #116	; 0x74
 800deac:	4614      	mov	r4, r2
 800deae:	4698      	mov	r8, r3
 800deb0:	4606      	mov	r6, r0
 800deb2:	b118      	cbz	r0, 800debc <_vfiprintf_r+0x18>
 800deb4:	6983      	ldr	r3, [r0, #24]
 800deb6:	b90b      	cbnz	r3, 800debc <_vfiprintf_r+0x18>
 800deb8:	f000 fd8c 	bl	800e9d4 <__sinit>
 800debc:	4b89      	ldr	r3, [pc, #548]	; (800e0e4 <_vfiprintf_r+0x240>)
 800debe:	429d      	cmp	r5, r3
 800dec0:	d11b      	bne.n	800defa <_vfiprintf_r+0x56>
 800dec2:	6875      	ldr	r5, [r6, #4]
 800dec4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dec6:	07d9      	lsls	r1, r3, #31
 800dec8:	d405      	bmi.n	800ded6 <_vfiprintf_r+0x32>
 800deca:	89ab      	ldrh	r3, [r5, #12]
 800decc:	059a      	lsls	r2, r3, #22
 800dece:	d402      	bmi.n	800ded6 <_vfiprintf_r+0x32>
 800ded0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ded2:	f000 fe1d 	bl	800eb10 <__retarget_lock_acquire_recursive>
 800ded6:	89ab      	ldrh	r3, [r5, #12]
 800ded8:	071b      	lsls	r3, r3, #28
 800deda:	d501      	bpl.n	800dee0 <_vfiprintf_r+0x3c>
 800dedc:	692b      	ldr	r3, [r5, #16]
 800dede:	b9eb      	cbnz	r3, 800df1c <_vfiprintf_r+0x78>
 800dee0:	4629      	mov	r1, r5
 800dee2:	4630      	mov	r0, r6
 800dee4:	f000 fbe6 	bl	800e6b4 <__swsetup_r>
 800dee8:	b1c0      	cbz	r0, 800df1c <_vfiprintf_r+0x78>
 800deea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800deec:	07dc      	lsls	r4, r3, #31
 800deee:	d50e      	bpl.n	800df0e <_vfiprintf_r+0x6a>
 800def0:	f04f 30ff 	mov.w	r0, #4294967295
 800def4:	b01d      	add	sp, #116	; 0x74
 800def6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800defa:	4b7b      	ldr	r3, [pc, #492]	; (800e0e8 <_vfiprintf_r+0x244>)
 800defc:	429d      	cmp	r5, r3
 800defe:	d101      	bne.n	800df04 <_vfiprintf_r+0x60>
 800df00:	68b5      	ldr	r5, [r6, #8]
 800df02:	e7df      	b.n	800dec4 <_vfiprintf_r+0x20>
 800df04:	4b79      	ldr	r3, [pc, #484]	; (800e0ec <_vfiprintf_r+0x248>)
 800df06:	429d      	cmp	r5, r3
 800df08:	bf08      	it	eq
 800df0a:	68f5      	ldreq	r5, [r6, #12]
 800df0c:	e7da      	b.n	800dec4 <_vfiprintf_r+0x20>
 800df0e:	89ab      	ldrh	r3, [r5, #12]
 800df10:	0598      	lsls	r0, r3, #22
 800df12:	d4ed      	bmi.n	800def0 <_vfiprintf_r+0x4c>
 800df14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df16:	f000 fdfc 	bl	800eb12 <__retarget_lock_release_recursive>
 800df1a:	e7e9      	b.n	800def0 <_vfiprintf_r+0x4c>
 800df1c:	2300      	movs	r3, #0
 800df1e:	9309      	str	r3, [sp, #36]	; 0x24
 800df20:	2320      	movs	r3, #32
 800df22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df26:	f8cd 800c 	str.w	r8, [sp, #12]
 800df2a:	2330      	movs	r3, #48	; 0x30
 800df2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e0f0 <_vfiprintf_r+0x24c>
 800df30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df34:	f04f 0901 	mov.w	r9, #1
 800df38:	4623      	mov	r3, r4
 800df3a:	469a      	mov	sl, r3
 800df3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df40:	b10a      	cbz	r2, 800df46 <_vfiprintf_r+0xa2>
 800df42:	2a25      	cmp	r2, #37	; 0x25
 800df44:	d1f9      	bne.n	800df3a <_vfiprintf_r+0x96>
 800df46:	ebba 0b04 	subs.w	fp, sl, r4
 800df4a:	d00b      	beq.n	800df64 <_vfiprintf_r+0xc0>
 800df4c:	465b      	mov	r3, fp
 800df4e:	4622      	mov	r2, r4
 800df50:	4629      	mov	r1, r5
 800df52:	4630      	mov	r0, r6
 800df54:	f7ff ff93 	bl	800de7e <__sfputs_r>
 800df58:	3001      	adds	r0, #1
 800df5a:	f000 80aa 	beq.w	800e0b2 <_vfiprintf_r+0x20e>
 800df5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df60:	445a      	add	r2, fp
 800df62:	9209      	str	r2, [sp, #36]	; 0x24
 800df64:	f89a 3000 	ldrb.w	r3, [sl]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	f000 80a2 	beq.w	800e0b2 <_vfiprintf_r+0x20e>
 800df6e:	2300      	movs	r3, #0
 800df70:	f04f 32ff 	mov.w	r2, #4294967295
 800df74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df78:	f10a 0a01 	add.w	sl, sl, #1
 800df7c:	9304      	str	r3, [sp, #16]
 800df7e:	9307      	str	r3, [sp, #28]
 800df80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df84:	931a      	str	r3, [sp, #104]	; 0x68
 800df86:	4654      	mov	r4, sl
 800df88:	2205      	movs	r2, #5
 800df8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df8e:	4858      	ldr	r0, [pc, #352]	; (800e0f0 <_vfiprintf_r+0x24c>)
 800df90:	f7f2 f95e 	bl	8000250 <memchr>
 800df94:	9a04      	ldr	r2, [sp, #16]
 800df96:	b9d8      	cbnz	r0, 800dfd0 <_vfiprintf_r+0x12c>
 800df98:	06d1      	lsls	r1, r2, #27
 800df9a:	bf44      	itt	mi
 800df9c:	2320      	movmi	r3, #32
 800df9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dfa2:	0713      	lsls	r3, r2, #28
 800dfa4:	bf44      	itt	mi
 800dfa6:	232b      	movmi	r3, #43	; 0x2b
 800dfa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dfac:	f89a 3000 	ldrb.w	r3, [sl]
 800dfb0:	2b2a      	cmp	r3, #42	; 0x2a
 800dfb2:	d015      	beq.n	800dfe0 <_vfiprintf_r+0x13c>
 800dfb4:	9a07      	ldr	r2, [sp, #28]
 800dfb6:	4654      	mov	r4, sl
 800dfb8:	2000      	movs	r0, #0
 800dfba:	f04f 0c0a 	mov.w	ip, #10
 800dfbe:	4621      	mov	r1, r4
 800dfc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfc4:	3b30      	subs	r3, #48	; 0x30
 800dfc6:	2b09      	cmp	r3, #9
 800dfc8:	d94e      	bls.n	800e068 <_vfiprintf_r+0x1c4>
 800dfca:	b1b0      	cbz	r0, 800dffa <_vfiprintf_r+0x156>
 800dfcc:	9207      	str	r2, [sp, #28]
 800dfce:	e014      	b.n	800dffa <_vfiprintf_r+0x156>
 800dfd0:	eba0 0308 	sub.w	r3, r0, r8
 800dfd4:	fa09 f303 	lsl.w	r3, r9, r3
 800dfd8:	4313      	orrs	r3, r2
 800dfda:	9304      	str	r3, [sp, #16]
 800dfdc:	46a2      	mov	sl, r4
 800dfde:	e7d2      	b.n	800df86 <_vfiprintf_r+0xe2>
 800dfe0:	9b03      	ldr	r3, [sp, #12]
 800dfe2:	1d19      	adds	r1, r3, #4
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	9103      	str	r1, [sp, #12]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	bfbb      	ittet	lt
 800dfec:	425b      	neglt	r3, r3
 800dfee:	f042 0202 	orrlt.w	r2, r2, #2
 800dff2:	9307      	strge	r3, [sp, #28]
 800dff4:	9307      	strlt	r3, [sp, #28]
 800dff6:	bfb8      	it	lt
 800dff8:	9204      	strlt	r2, [sp, #16]
 800dffa:	7823      	ldrb	r3, [r4, #0]
 800dffc:	2b2e      	cmp	r3, #46	; 0x2e
 800dffe:	d10c      	bne.n	800e01a <_vfiprintf_r+0x176>
 800e000:	7863      	ldrb	r3, [r4, #1]
 800e002:	2b2a      	cmp	r3, #42	; 0x2a
 800e004:	d135      	bne.n	800e072 <_vfiprintf_r+0x1ce>
 800e006:	9b03      	ldr	r3, [sp, #12]
 800e008:	1d1a      	adds	r2, r3, #4
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	9203      	str	r2, [sp, #12]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	bfb8      	it	lt
 800e012:	f04f 33ff 	movlt.w	r3, #4294967295
 800e016:	3402      	adds	r4, #2
 800e018:	9305      	str	r3, [sp, #20]
 800e01a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e100 <_vfiprintf_r+0x25c>
 800e01e:	7821      	ldrb	r1, [r4, #0]
 800e020:	2203      	movs	r2, #3
 800e022:	4650      	mov	r0, sl
 800e024:	f7f2 f914 	bl	8000250 <memchr>
 800e028:	b140      	cbz	r0, 800e03c <_vfiprintf_r+0x198>
 800e02a:	2340      	movs	r3, #64	; 0x40
 800e02c:	eba0 000a 	sub.w	r0, r0, sl
 800e030:	fa03 f000 	lsl.w	r0, r3, r0
 800e034:	9b04      	ldr	r3, [sp, #16]
 800e036:	4303      	orrs	r3, r0
 800e038:	3401      	adds	r4, #1
 800e03a:	9304      	str	r3, [sp, #16]
 800e03c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e040:	482c      	ldr	r0, [pc, #176]	; (800e0f4 <_vfiprintf_r+0x250>)
 800e042:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e046:	2206      	movs	r2, #6
 800e048:	f7f2 f902 	bl	8000250 <memchr>
 800e04c:	2800      	cmp	r0, #0
 800e04e:	d03f      	beq.n	800e0d0 <_vfiprintf_r+0x22c>
 800e050:	4b29      	ldr	r3, [pc, #164]	; (800e0f8 <_vfiprintf_r+0x254>)
 800e052:	bb1b      	cbnz	r3, 800e09c <_vfiprintf_r+0x1f8>
 800e054:	9b03      	ldr	r3, [sp, #12]
 800e056:	3307      	adds	r3, #7
 800e058:	f023 0307 	bic.w	r3, r3, #7
 800e05c:	3308      	adds	r3, #8
 800e05e:	9303      	str	r3, [sp, #12]
 800e060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e062:	443b      	add	r3, r7
 800e064:	9309      	str	r3, [sp, #36]	; 0x24
 800e066:	e767      	b.n	800df38 <_vfiprintf_r+0x94>
 800e068:	fb0c 3202 	mla	r2, ip, r2, r3
 800e06c:	460c      	mov	r4, r1
 800e06e:	2001      	movs	r0, #1
 800e070:	e7a5      	b.n	800dfbe <_vfiprintf_r+0x11a>
 800e072:	2300      	movs	r3, #0
 800e074:	3401      	adds	r4, #1
 800e076:	9305      	str	r3, [sp, #20]
 800e078:	4619      	mov	r1, r3
 800e07a:	f04f 0c0a 	mov.w	ip, #10
 800e07e:	4620      	mov	r0, r4
 800e080:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e084:	3a30      	subs	r2, #48	; 0x30
 800e086:	2a09      	cmp	r2, #9
 800e088:	d903      	bls.n	800e092 <_vfiprintf_r+0x1ee>
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d0c5      	beq.n	800e01a <_vfiprintf_r+0x176>
 800e08e:	9105      	str	r1, [sp, #20]
 800e090:	e7c3      	b.n	800e01a <_vfiprintf_r+0x176>
 800e092:	fb0c 2101 	mla	r1, ip, r1, r2
 800e096:	4604      	mov	r4, r0
 800e098:	2301      	movs	r3, #1
 800e09a:	e7f0      	b.n	800e07e <_vfiprintf_r+0x1da>
 800e09c:	ab03      	add	r3, sp, #12
 800e09e:	9300      	str	r3, [sp, #0]
 800e0a0:	462a      	mov	r2, r5
 800e0a2:	4b16      	ldr	r3, [pc, #88]	; (800e0fc <_vfiprintf_r+0x258>)
 800e0a4:	a904      	add	r1, sp, #16
 800e0a6:	4630      	mov	r0, r6
 800e0a8:	f7fb fdea 	bl	8009c80 <_printf_float>
 800e0ac:	4607      	mov	r7, r0
 800e0ae:	1c78      	adds	r0, r7, #1
 800e0b0:	d1d6      	bne.n	800e060 <_vfiprintf_r+0x1bc>
 800e0b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0b4:	07d9      	lsls	r1, r3, #31
 800e0b6:	d405      	bmi.n	800e0c4 <_vfiprintf_r+0x220>
 800e0b8:	89ab      	ldrh	r3, [r5, #12]
 800e0ba:	059a      	lsls	r2, r3, #22
 800e0bc:	d402      	bmi.n	800e0c4 <_vfiprintf_r+0x220>
 800e0be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0c0:	f000 fd27 	bl	800eb12 <__retarget_lock_release_recursive>
 800e0c4:	89ab      	ldrh	r3, [r5, #12]
 800e0c6:	065b      	lsls	r3, r3, #25
 800e0c8:	f53f af12 	bmi.w	800def0 <_vfiprintf_r+0x4c>
 800e0cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0ce:	e711      	b.n	800def4 <_vfiprintf_r+0x50>
 800e0d0:	ab03      	add	r3, sp, #12
 800e0d2:	9300      	str	r3, [sp, #0]
 800e0d4:	462a      	mov	r2, r5
 800e0d6:	4b09      	ldr	r3, [pc, #36]	; (800e0fc <_vfiprintf_r+0x258>)
 800e0d8:	a904      	add	r1, sp, #16
 800e0da:	4630      	mov	r0, r6
 800e0dc:	f7fc f874 	bl	800a1c8 <_printf_i>
 800e0e0:	e7e4      	b.n	800e0ac <_vfiprintf_r+0x208>
 800e0e2:	bf00      	nop
 800e0e4:	0800f630 	.word	0x0800f630
 800e0e8:	0800f650 	.word	0x0800f650
 800e0ec:	0800f610 	.word	0x0800f610
 800e0f0:	0800f5e4 	.word	0x0800f5e4
 800e0f4:	0800f5ee 	.word	0x0800f5ee
 800e0f8:	08009c81 	.word	0x08009c81
 800e0fc:	0800de7f 	.word	0x0800de7f
 800e100:	0800f5ea 	.word	0x0800f5ea

0800e104 <_scanf_chars>:
 800e104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e108:	4615      	mov	r5, r2
 800e10a:	688a      	ldr	r2, [r1, #8]
 800e10c:	4680      	mov	r8, r0
 800e10e:	460c      	mov	r4, r1
 800e110:	b932      	cbnz	r2, 800e120 <_scanf_chars+0x1c>
 800e112:	698a      	ldr	r2, [r1, #24]
 800e114:	2a00      	cmp	r2, #0
 800e116:	bf0c      	ite	eq
 800e118:	2201      	moveq	r2, #1
 800e11a:	f04f 32ff 	movne.w	r2, #4294967295
 800e11e:	608a      	str	r2, [r1, #8]
 800e120:	6822      	ldr	r2, [r4, #0]
 800e122:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e1b4 <_scanf_chars+0xb0>
 800e126:	06d1      	lsls	r1, r2, #27
 800e128:	bf5f      	itttt	pl
 800e12a:	681a      	ldrpl	r2, [r3, #0]
 800e12c:	1d11      	addpl	r1, r2, #4
 800e12e:	6019      	strpl	r1, [r3, #0]
 800e130:	6816      	ldrpl	r6, [r2, #0]
 800e132:	2700      	movs	r7, #0
 800e134:	69a0      	ldr	r0, [r4, #24]
 800e136:	b188      	cbz	r0, 800e15c <_scanf_chars+0x58>
 800e138:	2801      	cmp	r0, #1
 800e13a:	d107      	bne.n	800e14c <_scanf_chars+0x48>
 800e13c:	682a      	ldr	r2, [r5, #0]
 800e13e:	7811      	ldrb	r1, [r2, #0]
 800e140:	6962      	ldr	r2, [r4, #20]
 800e142:	5c52      	ldrb	r2, [r2, r1]
 800e144:	b952      	cbnz	r2, 800e15c <_scanf_chars+0x58>
 800e146:	2f00      	cmp	r7, #0
 800e148:	d031      	beq.n	800e1ae <_scanf_chars+0xaa>
 800e14a:	e022      	b.n	800e192 <_scanf_chars+0x8e>
 800e14c:	2802      	cmp	r0, #2
 800e14e:	d120      	bne.n	800e192 <_scanf_chars+0x8e>
 800e150:	682b      	ldr	r3, [r5, #0]
 800e152:	781b      	ldrb	r3, [r3, #0]
 800e154:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e158:	071b      	lsls	r3, r3, #28
 800e15a:	d41a      	bmi.n	800e192 <_scanf_chars+0x8e>
 800e15c:	6823      	ldr	r3, [r4, #0]
 800e15e:	06da      	lsls	r2, r3, #27
 800e160:	bf5e      	ittt	pl
 800e162:	682b      	ldrpl	r3, [r5, #0]
 800e164:	781b      	ldrbpl	r3, [r3, #0]
 800e166:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e16a:	682a      	ldr	r2, [r5, #0]
 800e16c:	686b      	ldr	r3, [r5, #4]
 800e16e:	3201      	adds	r2, #1
 800e170:	602a      	str	r2, [r5, #0]
 800e172:	68a2      	ldr	r2, [r4, #8]
 800e174:	3b01      	subs	r3, #1
 800e176:	3a01      	subs	r2, #1
 800e178:	606b      	str	r3, [r5, #4]
 800e17a:	3701      	adds	r7, #1
 800e17c:	60a2      	str	r2, [r4, #8]
 800e17e:	b142      	cbz	r2, 800e192 <_scanf_chars+0x8e>
 800e180:	2b00      	cmp	r3, #0
 800e182:	dcd7      	bgt.n	800e134 <_scanf_chars+0x30>
 800e184:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e188:	4629      	mov	r1, r5
 800e18a:	4640      	mov	r0, r8
 800e18c:	4798      	blx	r3
 800e18e:	2800      	cmp	r0, #0
 800e190:	d0d0      	beq.n	800e134 <_scanf_chars+0x30>
 800e192:	6823      	ldr	r3, [r4, #0]
 800e194:	f013 0310 	ands.w	r3, r3, #16
 800e198:	d105      	bne.n	800e1a6 <_scanf_chars+0xa2>
 800e19a:	68e2      	ldr	r2, [r4, #12]
 800e19c:	3201      	adds	r2, #1
 800e19e:	60e2      	str	r2, [r4, #12]
 800e1a0:	69a2      	ldr	r2, [r4, #24]
 800e1a2:	b102      	cbz	r2, 800e1a6 <_scanf_chars+0xa2>
 800e1a4:	7033      	strb	r3, [r6, #0]
 800e1a6:	6923      	ldr	r3, [r4, #16]
 800e1a8:	443b      	add	r3, r7
 800e1aa:	6123      	str	r3, [r4, #16]
 800e1ac:	2000      	movs	r0, #0
 800e1ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1b2:	bf00      	nop
 800e1b4:	0800f299 	.word	0x0800f299

0800e1b8 <_scanf_i>:
 800e1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1bc:	4698      	mov	r8, r3
 800e1be:	4b76      	ldr	r3, [pc, #472]	; (800e398 <_scanf_i+0x1e0>)
 800e1c0:	460c      	mov	r4, r1
 800e1c2:	4682      	mov	sl, r0
 800e1c4:	4616      	mov	r6, r2
 800e1c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e1ca:	b087      	sub	sp, #28
 800e1cc:	ab03      	add	r3, sp, #12
 800e1ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e1d2:	4b72      	ldr	r3, [pc, #456]	; (800e39c <_scanf_i+0x1e4>)
 800e1d4:	69a1      	ldr	r1, [r4, #24]
 800e1d6:	4a72      	ldr	r2, [pc, #456]	; (800e3a0 <_scanf_i+0x1e8>)
 800e1d8:	2903      	cmp	r1, #3
 800e1da:	bf18      	it	ne
 800e1dc:	461a      	movne	r2, r3
 800e1de:	68a3      	ldr	r3, [r4, #8]
 800e1e0:	9201      	str	r2, [sp, #4]
 800e1e2:	1e5a      	subs	r2, r3, #1
 800e1e4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e1e8:	bf88      	it	hi
 800e1ea:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e1ee:	4627      	mov	r7, r4
 800e1f0:	bf82      	ittt	hi
 800e1f2:	eb03 0905 	addhi.w	r9, r3, r5
 800e1f6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e1fa:	60a3      	strhi	r3, [r4, #8]
 800e1fc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e200:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e204:	bf98      	it	ls
 800e206:	f04f 0900 	movls.w	r9, #0
 800e20a:	6023      	str	r3, [r4, #0]
 800e20c:	463d      	mov	r5, r7
 800e20e:	f04f 0b00 	mov.w	fp, #0
 800e212:	6831      	ldr	r1, [r6, #0]
 800e214:	ab03      	add	r3, sp, #12
 800e216:	7809      	ldrb	r1, [r1, #0]
 800e218:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e21c:	2202      	movs	r2, #2
 800e21e:	f7f2 f817 	bl	8000250 <memchr>
 800e222:	b328      	cbz	r0, 800e270 <_scanf_i+0xb8>
 800e224:	f1bb 0f01 	cmp.w	fp, #1
 800e228:	d159      	bne.n	800e2de <_scanf_i+0x126>
 800e22a:	6862      	ldr	r2, [r4, #4]
 800e22c:	b92a      	cbnz	r2, 800e23a <_scanf_i+0x82>
 800e22e:	6822      	ldr	r2, [r4, #0]
 800e230:	2308      	movs	r3, #8
 800e232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e236:	6063      	str	r3, [r4, #4]
 800e238:	6022      	str	r2, [r4, #0]
 800e23a:	6822      	ldr	r2, [r4, #0]
 800e23c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e240:	6022      	str	r2, [r4, #0]
 800e242:	68a2      	ldr	r2, [r4, #8]
 800e244:	1e51      	subs	r1, r2, #1
 800e246:	60a1      	str	r1, [r4, #8]
 800e248:	b192      	cbz	r2, 800e270 <_scanf_i+0xb8>
 800e24a:	6832      	ldr	r2, [r6, #0]
 800e24c:	1c51      	adds	r1, r2, #1
 800e24e:	6031      	str	r1, [r6, #0]
 800e250:	7812      	ldrb	r2, [r2, #0]
 800e252:	f805 2b01 	strb.w	r2, [r5], #1
 800e256:	6872      	ldr	r2, [r6, #4]
 800e258:	3a01      	subs	r2, #1
 800e25a:	2a00      	cmp	r2, #0
 800e25c:	6072      	str	r2, [r6, #4]
 800e25e:	dc07      	bgt.n	800e270 <_scanf_i+0xb8>
 800e260:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e264:	4631      	mov	r1, r6
 800e266:	4650      	mov	r0, sl
 800e268:	4790      	blx	r2
 800e26a:	2800      	cmp	r0, #0
 800e26c:	f040 8085 	bne.w	800e37a <_scanf_i+0x1c2>
 800e270:	f10b 0b01 	add.w	fp, fp, #1
 800e274:	f1bb 0f03 	cmp.w	fp, #3
 800e278:	d1cb      	bne.n	800e212 <_scanf_i+0x5a>
 800e27a:	6863      	ldr	r3, [r4, #4]
 800e27c:	b90b      	cbnz	r3, 800e282 <_scanf_i+0xca>
 800e27e:	230a      	movs	r3, #10
 800e280:	6063      	str	r3, [r4, #4]
 800e282:	6863      	ldr	r3, [r4, #4]
 800e284:	4947      	ldr	r1, [pc, #284]	; (800e3a4 <_scanf_i+0x1ec>)
 800e286:	6960      	ldr	r0, [r4, #20]
 800e288:	1ac9      	subs	r1, r1, r3
 800e28a:	f000 f8b9 	bl	800e400 <__sccl>
 800e28e:	f04f 0b00 	mov.w	fp, #0
 800e292:	68a3      	ldr	r3, [r4, #8]
 800e294:	6822      	ldr	r2, [r4, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d03d      	beq.n	800e316 <_scanf_i+0x15e>
 800e29a:	6831      	ldr	r1, [r6, #0]
 800e29c:	6960      	ldr	r0, [r4, #20]
 800e29e:	f891 c000 	ldrb.w	ip, [r1]
 800e2a2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d035      	beq.n	800e316 <_scanf_i+0x15e>
 800e2aa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e2ae:	d124      	bne.n	800e2fa <_scanf_i+0x142>
 800e2b0:	0510      	lsls	r0, r2, #20
 800e2b2:	d522      	bpl.n	800e2fa <_scanf_i+0x142>
 800e2b4:	f10b 0b01 	add.w	fp, fp, #1
 800e2b8:	f1b9 0f00 	cmp.w	r9, #0
 800e2bc:	d003      	beq.n	800e2c6 <_scanf_i+0x10e>
 800e2be:	3301      	adds	r3, #1
 800e2c0:	f109 39ff 	add.w	r9, r9, #4294967295
 800e2c4:	60a3      	str	r3, [r4, #8]
 800e2c6:	6873      	ldr	r3, [r6, #4]
 800e2c8:	3b01      	subs	r3, #1
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	6073      	str	r3, [r6, #4]
 800e2ce:	dd1b      	ble.n	800e308 <_scanf_i+0x150>
 800e2d0:	6833      	ldr	r3, [r6, #0]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	6033      	str	r3, [r6, #0]
 800e2d6:	68a3      	ldr	r3, [r4, #8]
 800e2d8:	3b01      	subs	r3, #1
 800e2da:	60a3      	str	r3, [r4, #8]
 800e2dc:	e7d9      	b.n	800e292 <_scanf_i+0xda>
 800e2de:	f1bb 0f02 	cmp.w	fp, #2
 800e2e2:	d1ae      	bne.n	800e242 <_scanf_i+0x8a>
 800e2e4:	6822      	ldr	r2, [r4, #0]
 800e2e6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e2ea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e2ee:	d1bf      	bne.n	800e270 <_scanf_i+0xb8>
 800e2f0:	2310      	movs	r3, #16
 800e2f2:	6063      	str	r3, [r4, #4]
 800e2f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e2f8:	e7a2      	b.n	800e240 <_scanf_i+0x88>
 800e2fa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e2fe:	6022      	str	r2, [r4, #0]
 800e300:	780b      	ldrb	r3, [r1, #0]
 800e302:	f805 3b01 	strb.w	r3, [r5], #1
 800e306:	e7de      	b.n	800e2c6 <_scanf_i+0x10e>
 800e308:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e30c:	4631      	mov	r1, r6
 800e30e:	4650      	mov	r0, sl
 800e310:	4798      	blx	r3
 800e312:	2800      	cmp	r0, #0
 800e314:	d0df      	beq.n	800e2d6 <_scanf_i+0x11e>
 800e316:	6823      	ldr	r3, [r4, #0]
 800e318:	05db      	lsls	r3, r3, #23
 800e31a:	d50d      	bpl.n	800e338 <_scanf_i+0x180>
 800e31c:	42bd      	cmp	r5, r7
 800e31e:	d909      	bls.n	800e334 <_scanf_i+0x17c>
 800e320:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e324:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e328:	4632      	mov	r2, r6
 800e32a:	4650      	mov	r0, sl
 800e32c:	4798      	blx	r3
 800e32e:	f105 39ff 	add.w	r9, r5, #4294967295
 800e332:	464d      	mov	r5, r9
 800e334:	42bd      	cmp	r5, r7
 800e336:	d02d      	beq.n	800e394 <_scanf_i+0x1dc>
 800e338:	6822      	ldr	r2, [r4, #0]
 800e33a:	f012 0210 	ands.w	r2, r2, #16
 800e33e:	d113      	bne.n	800e368 <_scanf_i+0x1b0>
 800e340:	702a      	strb	r2, [r5, #0]
 800e342:	6863      	ldr	r3, [r4, #4]
 800e344:	9e01      	ldr	r6, [sp, #4]
 800e346:	4639      	mov	r1, r7
 800e348:	4650      	mov	r0, sl
 800e34a:	47b0      	blx	r6
 800e34c:	6821      	ldr	r1, [r4, #0]
 800e34e:	f8d8 3000 	ldr.w	r3, [r8]
 800e352:	f011 0f20 	tst.w	r1, #32
 800e356:	d013      	beq.n	800e380 <_scanf_i+0x1c8>
 800e358:	1d1a      	adds	r2, r3, #4
 800e35a:	f8c8 2000 	str.w	r2, [r8]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	6018      	str	r0, [r3, #0]
 800e362:	68e3      	ldr	r3, [r4, #12]
 800e364:	3301      	adds	r3, #1
 800e366:	60e3      	str	r3, [r4, #12]
 800e368:	1bed      	subs	r5, r5, r7
 800e36a:	44ab      	add	fp, r5
 800e36c:	6925      	ldr	r5, [r4, #16]
 800e36e:	445d      	add	r5, fp
 800e370:	6125      	str	r5, [r4, #16]
 800e372:	2000      	movs	r0, #0
 800e374:	b007      	add	sp, #28
 800e376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e37a:	f04f 0b00 	mov.w	fp, #0
 800e37e:	e7ca      	b.n	800e316 <_scanf_i+0x15e>
 800e380:	1d1a      	adds	r2, r3, #4
 800e382:	f8c8 2000 	str.w	r2, [r8]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	f011 0f01 	tst.w	r1, #1
 800e38c:	bf14      	ite	ne
 800e38e:	8018      	strhne	r0, [r3, #0]
 800e390:	6018      	streq	r0, [r3, #0]
 800e392:	e7e6      	b.n	800e362 <_scanf_i+0x1aa>
 800e394:	2001      	movs	r0, #1
 800e396:	e7ed      	b.n	800e374 <_scanf_i+0x1bc>
 800e398:	0800ee28 	.word	0x0800ee28
 800e39c:	0800e57d 	.word	0x0800e57d
 800e3a0:	0800b775 	.word	0x0800b775
 800e3a4:	0800f60e 	.word	0x0800f60e

0800e3a8 <_read_r>:
 800e3a8:	b538      	push	{r3, r4, r5, lr}
 800e3aa:	4d07      	ldr	r5, [pc, #28]	; (800e3c8 <_read_r+0x20>)
 800e3ac:	4604      	mov	r4, r0
 800e3ae:	4608      	mov	r0, r1
 800e3b0:	4611      	mov	r1, r2
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	602a      	str	r2, [r5, #0]
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	f7f3 fcec 	bl	8001d94 <_read>
 800e3bc:	1c43      	adds	r3, r0, #1
 800e3be:	d102      	bne.n	800e3c6 <_read_r+0x1e>
 800e3c0:	682b      	ldr	r3, [r5, #0]
 800e3c2:	b103      	cbz	r3, 800e3c6 <_read_r+0x1e>
 800e3c4:	6023      	str	r3, [r4, #0]
 800e3c6:	bd38      	pop	{r3, r4, r5, pc}
 800e3c8:	20000518 	.word	0x20000518
 800e3cc:	00000000 	.word	0x00000000

0800e3d0 <nan>:
 800e3d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e3d8 <nan+0x8>
 800e3d4:	4770      	bx	lr
 800e3d6:	bf00      	nop
 800e3d8:	00000000 	.word	0x00000000
 800e3dc:	7ff80000 	.word	0x7ff80000

0800e3e0 <_sbrk_r>:
 800e3e0:	b538      	push	{r3, r4, r5, lr}
 800e3e2:	4d06      	ldr	r5, [pc, #24]	; (800e3fc <_sbrk_r+0x1c>)
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	4604      	mov	r4, r0
 800e3e8:	4608      	mov	r0, r1
 800e3ea:	602b      	str	r3, [r5, #0]
 800e3ec:	f7f3 fd40 	bl	8001e70 <_sbrk>
 800e3f0:	1c43      	adds	r3, r0, #1
 800e3f2:	d102      	bne.n	800e3fa <_sbrk_r+0x1a>
 800e3f4:	682b      	ldr	r3, [r5, #0]
 800e3f6:	b103      	cbz	r3, 800e3fa <_sbrk_r+0x1a>
 800e3f8:	6023      	str	r3, [r4, #0]
 800e3fa:	bd38      	pop	{r3, r4, r5, pc}
 800e3fc:	20000518 	.word	0x20000518

0800e400 <__sccl>:
 800e400:	b570      	push	{r4, r5, r6, lr}
 800e402:	780b      	ldrb	r3, [r1, #0]
 800e404:	4604      	mov	r4, r0
 800e406:	2b5e      	cmp	r3, #94	; 0x5e
 800e408:	bf0b      	itete	eq
 800e40a:	784b      	ldrbeq	r3, [r1, #1]
 800e40c:	1c48      	addne	r0, r1, #1
 800e40e:	1c88      	addeq	r0, r1, #2
 800e410:	2200      	movne	r2, #0
 800e412:	bf08      	it	eq
 800e414:	2201      	moveq	r2, #1
 800e416:	1e61      	subs	r1, r4, #1
 800e418:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e41c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800e420:	42a9      	cmp	r1, r5
 800e422:	d1fb      	bne.n	800e41c <__sccl+0x1c>
 800e424:	b90b      	cbnz	r3, 800e42a <__sccl+0x2a>
 800e426:	3801      	subs	r0, #1
 800e428:	bd70      	pop	{r4, r5, r6, pc}
 800e42a:	f082 0201 	eor.w	r2, r2, #1
 800e42e:	54e2      	strb	r2, [r4, r3]
 800e430:	4605      	mov	r5, r0
 800e432:	4628      	mov	r0, r5
 800e434:	f810 1b01 	ldrb.w	r1, [r0], #1
 800e438:	292d      	cmp	r1, #45	; 0x2d
 800e43a:	d006      	beq.n	800e44a <__sccl+0x4a>
 800e43c:	295d      	cmp	r1, #93	; 0x5d
 800e43e:	d0f3      	beq.n	800e428 <__sccl+0x28>
 800e440:	b909      	cbnz	r1, 800e446 <__sccl+0x46>
 800e442:	4628      	mov	r0, r5
 800e444:	e7f0      	b.n	800e428 <__sccl+0x28>
 800e446:	460b      	mov	r3, r1
 800e448:	e7f1      	b.n	800e42e <__sccl+0x2e>
 800e44a:	786e      	ldrb	r6, [r5, #1]
 800e44c:	2e5d      	cmp	r6, #93	; 0x5d
 800e44e:	d0fa      	beq.n	800e446 <__sccl+0x46>
 800e450:	42b3      	cmp	r3, r6
 800e452:	dcf8      	bgt.n	800e446 <__sccl+0x46>
 800e454:	3502      	adds	r5, #2
 800e456:	4619      	mov	r1, r3
 800e458:	3101      	adds	r1, #1
 800e45a:	428e      	cmp	r6, r1
 800e45c:	5462      	strb	r2, [r4, r1]
 800e45e:	dcfb      	bgt.n	800e458 <__sccl+0x58>
 800e460:	1af1      	subs	r1, r6, r3
 800e462:	3901      	subs	r1, #1
 800e464:	1c58      	adds	r0, r3, #1
 800e466:	42b3      	cmp	r3, r6
 800e468:	bfa8      	it	ge
 800e46a:	2100      	movge	r1, #0
 800e46c:	1843      	adds	r3, r0, r1
 800e46e:	e7e0      	b.n	800e432 <__sccl+0x32>

0800e470 <strncmp>:
 800e470:	b510      	push	{r4, lr}
 800e472:	b17a      	cbz	r2, 800e494 <strncmp+0x24>
 800e474:	4603      	mov	r3, r0
 800e476:	3901      	subs	r1, #1
 800e478:	1884      	adds	r4, r0, r2
 800e47a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e47e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e482:	4290      	cmp	r0, r2
 800e484:	d101      	bne.n	800e48a <strncmp+0x1a>
 800e486:	42a3      	cmp	r3, r4
 800e488:	d101      	bne.n	800e48e <strncmp+0x1e>
 800e48a:	1a80      	subs	r0, r0, r2
 800e48c:	bd10      	pop	{r4, pc}
 800e48e:	2800      	cmp	r0, #0
 800e490:	d1f3      	bne.n	800e47a <strncmp+0xa>
 800e492:	e7fa      	b.n	800e48a <strncmp+0x1a>
 800e494:	4610      	mov	r0, r2
 800e496:	e7f9      	b.n	800e48c <strncmp+0x1c>

0800e498 <_strtoul_l.constprop.0>:
 800e498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e49c:	4f36      	ldr	r7, [pc, #216]	; (800e578 <_strtoul_l.constprop.0+0xe0>)
 800e49e:	4686      	mov	lr, r0
 800e4a0:	460d      	mov	r5, r1
 800e4a2:	4628      	mov	r0, r5
 800e4a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e4a8:	5de6      	ldrb	r6, [r4, r7]
 800e4aa:	f016 0608 	ands.w	r6, r6, #8
 800e4ae:	d1f8      	bne.n	800e4a2 <_strtoul_l.constprop.0+0xa>
 800e4b0:	2c2d      	cmp	r4, #45	; 0x2d
 800e4b2:	d12f      	bne.n	800e514 <_strtoul_l.constprop.0+0x7c>
 800e4b4:	782c      	ldrb	r4, [r5, #0]
 800e4b6:	2601      	movs	r6, #1
 800e4b8:	1c85      	adds	r5, r0, #2
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d057      	beq.n	800e56e <_strtoul_l.constprop.0+0xd6>
 800e4be:	2b10      	cmp	r3, #16
 800e4c0:	d109      	bne.n	800e4d6 <_strtoul_l.constprop.0+0x3e>
 800e4c2:	2c30      	cmp	r4, #48	; 0x30
 800e4c4:	d107      	bne.n	800e4d6 <_strtoul_l.constprop.0+0x3e>
 800e4c6:	7828      	ldrb	r0, [r5, #0]
 800e4c8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e4cc:	2858      	cmp	r0, #88	; 0x58
 800e4ce:	d149      	bne.n	800e564 <_strtoul_l.constprop.0+0xcc>
 800e4d0:	786c      	ldrb	r4, [r5, #1]
 800e4d2:	2310      	movs	r3, #16
 800e4d4:	3502      	adds	r5, #2
 800e4d6:	f04f 38ff 	mov.w	r8, #4294967295
 800e4da:	2700      	movs	r7, #0
 800e4dc:	fbb8 f8f3 	udiv	r8, r8, r3
 800e4e0:	fb03 f908 	mul.w	r9, r3, r8
 800e4e4:	ea6f 0909 	mvn.w	r9, r9
 800e4e8:	4638      	mov	r0, r7
 800e4ea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e4ee:	f1bc 0f09 	cmp.w	ip, #9
 800e4f2:	d814      	bhi.n	800e51e <_strtoul_l.constprop.0+0x86>
 800e4f4:	4664      	mov	r4, ip
 800e4f6:	42a3      	cmp	r3, r4
 800e4f8:	dd22      	ble.n	800e540 <_strtoul_l.constprop.0+0xa8>
 800e4fa:	2f00      	cmp	r7, #0
 800e4fc:	db1d      	blt.n	800e53a <_strtoul_l.constprop.0+0xa2>
 800e4fe:	4580      	cmp	r8, r0
 800e500:	d31b      	bcc.n	800e53a <_strtoul_l.constprop.0+0xa2>
 800e502:	d101      	bne.n	800e508 <_strtoul_l.constprop.0+0x70>
 800e504:	45a1      	cmp	r9, r4
 800e506:	db18      	blt.n	800e53a <_strtoul_l.constprop.0+0xa2>
 800e508:	fb00 4003 	mla	r0, r0, r3, r4
 800e50c:	2701      	movs	r7, #1
 800e50e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e512:	e7ea      	b.n	800e4ea <_strtoul_l.constprop.0+0x52>
 800e514:	2c2b      	cmp	r4, #43	; 0x2b
 800e516:	bf04      	itt	eq
 800e518:	782c      	ldrbeq	r4, [r5, #0]
 800e51a:	1c85      	addeq	r5, r0, #2
 800e51c:	e7cd      	b.n	800e4ba <_strtoul_l.constprop.0+0x22>
 800e51e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e522:	f1bc 0f19 	cmp.w	ip, #25
 800e526:	d801      	bhi.n	800e52c <_strtoul_l.constprop.0+0x94>
 800e528:	3c37      	subs	r4, #55	; 0x37
 800e52a:	e7e4      	b.n	800e4f6 <_strtoul_l.constprop.0+0x5e>
 800e52c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e530:	f1bc 0f19 	cmp.w	ip, #25
 800e534:	d804      	bhi.n	800e540 <_strtoul_l.constprop.0+0xa8>
 800e536:	3c57      	subs	r4, #87	; 0x57
 800e538:	e7dd      	b.n	800e4f6 <_strtoul_l.constprop.0+0x5e>
 800e53a:	f04f 37ff 	mov.w	r7, #4294967295
 800e53e:	e7e6      	b.n	800e50e <_strtoul_l.constprop.0+0x76>
 800e540:	2f00      	cmp	r7, #0
 800e542:	da07      	bge.n	800e554 <_strtoul_l.constprop.0+0xbc>
 800e544:	2322      	movs	r3, #34	; 0x22
 800e546:	f8ce 3000 	str.w	r3, [lr]
 800e54a:	f04f 30ff 	mov.w	r0, #4294967295
 800e54e:	b932      	cbnz	r2, 800e55e <_strtoul_l.constprop.0+0xc6>
 800e550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e554:	b106      	cbz	r6, 800e558 <_strtoul_l.constprop.0+0xc0>
 800e556:	4240      	negs	r0, r0
 800e558:	2a00      	cmp	r2, #0
 800e55a:	d0f9      	beq.n	800e550 <_strtoul_l.constprop.0+0xb8>
 800e55c:	b107      	cbz	r7, 800e560 <_strtoul_l.constprop.0+0xc8>
 800e55e:	1e69      	subs	r1, r5, #1
 800e560:	6011      	str	r1, [r2, #0]
 800e562:	e7f5      	b.n	800e550 <_strtoul_l.constprop.0+0xb8>
 800e564:	2430      	movs	r4, #48	; 0x30
 800e566:	2b00      	cmp	r3, #0
 800e568:	d1b5      	bne.n	800e4d6 <_strtoul_l.constprop.0+0x3e>
 800e56a:	2308      	movs	r3, #8
 800e56c:	e7b3      	b.n	800e4d6 <_strtoul_l.constprop.0+0x3e>
 800e56e:	2c30      	cmp	r4, #48	; 0x30
 800e570:	d0a9      	beq.n	800e4c6 <_strtoul_l.constprop.0+0x2e>
 800e572:	230a      	movs	r3, #10
 800e574:	e7af      	b.n	800e4d6 <_strtoul_l.constprop.0+0x3e>
 800e576:	bf00      	nop
 800e578:	0800f299 	.word	0x0800f299

0800e57c <_strtoul_r>:
 800e57c:	f7ff bf8c 	b.w	800e498 <_strtoul_l.constprop.0>

0800e580 <__submore>:
 800e580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e584:	460c      	mov	r4, r1
 800e586:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e588:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e58c:	4299      	cmp	r1, r3
 800e58e:	d11d      	bne.n	800e5cc <__submore+0x4c>
 800e590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e594:	f7ff f8ba 	bl	800d70c <_malloc_r>
 800e598:	b918      	cbnz	r0, 800e5a2 <__submore+0x22>
 800e59a:	f04f 30ff 	mov.w	r0, #4294967295
 800e59e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5a6:	63a3      	str	r3, [r4, #56]	; 0x38
 800e5a8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e5ac:	6360      	str	r0, [r4, #52]	; 0x34
 800e5ae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e5b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e5b6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800e5ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e5be:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800e5c2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e5c6:	6020      	str	r0, [r4, #0]
 800e5c8:	2000      	movs	r0, #0
 800e5ca:	e7e8      	b.n	800e59e <__submore+0x1e>
 800e5cc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e5ce:	0077      	lsls	r7, r6, #1
 800e5d0:	463a      	mov	r2, r7
 800e5d2:	f000 fb2b 	bl	800ec2c <_realloc_r>
 800e5d6:	4605      	mov	r5, r0
 800e5d8:	2800      	cmp	r0, #0
 800e5da:	d0de      	beq.n	800e59a <__submore+0x1a>
 800e5dc:	eb00 0806 	add.w	r8, r0, r6
 800e5e0:	4601      	mov	r1, r0
 800e5e2:	4632      	mov	r2, r6
 800e5e4:	4640      	mov	r0, r8
 800e5e6:	f7fe fb3f 	bl	800cc68 <memcpy>
 800e5ea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e5ee:	f8c4 8000 	str.w	r8, [r4]
 800e5f2:	e7e9      	b.n	800e5c8 <__submore+0x48>

0800e5f4 <__swbuf_r>:
 800e5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5f6:	460e      	mov	r6, r1
 800e5f8:	4614      	mov	r4, r2
 800e5fa:	4605      	mov	r5, r0
 800e5fc:	b118      	cbz	r0, 800e606 <__swbuf_r+0x12>
 800e5fe:	6983      	ldr	r3, [r0, #24]
 800e600:	b90b      	cbnz	r3, 800e606 <__swbuf_r+0x12>
 800e602:	f000 f9e7 	bl	800e9d4 <__sinit>
 800e606:	4b21      	ldr	r3, [pc, #132]	; (800e68c <__swbuf_r+0x98>)
 800e608:	429c      	cmp	r4, r3
 800e60a:	d12b      	bne.n	800e664 <__swbuf_r+0x70>
 800e60c:	686c      	ldr	r4, [r5, #4]
 800e60e:	69a3      	ldr	r3, [r4, #24]
 800e610:	60a3      	str	r3, [r4, #8]
 800e612:	89a3      	ldrh	r3, [r4, #12]
 800e614:	071a      	lsls	r2, r3, #28
 800e616:	d52f      	bpl.n	800e678 <__swbuf_r+0x84>
 800e618:	6923      	ldr	r3, [r4, #16]
 800e61a:	b36b      	cbz	r3, 800e678 <__swbuf_r+0x84>
 800e61c:	6923      	ldr	r3, [r4, #16]
 800e61e:	6820      	ldr	r0, [r4, #0]
 800e620:	1ac0      	subs	r0, r0, r3
 800e622:	6963      	ldr	r3, [r4, #20]
 800e624:	b2f6      	uxtb	r6, r6
 800e626:	4283      	cmp	r3, r0
 800e628:	4637      	mov	r7, r6
 800e62a:	dc04      	bgt.n	800e636 <__swbuf_r+0x42>
 800e62c:	4621      	mov	r1, r4
 800e62e:	4628      	mov	r0, r5
 800e630:	f000 f93c 	bl	800e8ac <_fflush_r>
 800e634:	bb30      	cbnz	r0, 800e684 <__swbuf_r+0x90>
 800e636:	68a3      	ldr	r3, [r4, #8]
 800e638:	3b01      	subs	r3, #1
 800e63a:	60a3      	str	r3, [r4, #8]
 800e63c:	6823      	ldr	r3, [r4, #0]
 800e63e:	1c5a      	adds	r2, r3, #1
 800e640:	6022      	str	r2, [r4, #0]
 800e642:	701e      	strb	r6, [r3, #0]
 800e644:	6963      	ldr	r3, [r4, #20]
 800e646:	3001      	adds	r0, #1
 800e648:	4283      	cmp	r3, r0
 800e64a:	d004      	beq.n	800e656 <__swbuf_r+0x62>
 800e64c:	89a3      	ldrh	r3, [r4, #12]
 800e64e:	07db      	lsls	r3, r3, #31
 800e650:	d506      	bpl.n	800e660 <__swbuf_r+0x6c>
 800e652:	2e0a      	cmp	r6, #10
 800e654:	d104      	bne.n	800e660 <__swbuf_r+0x6c>
 800e656:	4621      	mov	r1, r4
 800e658:	4628      	mov	r0, r5
 800e65a:	f000 f927 	bl	800e8ac <_fflush_r>
 800e65e:	b988      	cbnz	r0, 800e684 <__swbuf_r+0x90>
 800e660:	4638      	mov	r0, r7
 800e662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e664:	4b0a      	ldr	r3, [pc, #40]	; (800e690 <__swbuf_r+0x9c>)
 800e666:	429c      	cmp	r4, r3
 800e668:	d101      	bne.n	800e66e <__swbuf_r+0x7a>
 800e66a:	68ac      	ldr	r4, [r5, #8]
 800e66c:	e7cf      	b.n	800e60e <__swbuf_r+0x1a>
 800e66e:	4b09      	ldr	r3, [pc, #36]	; (800e694 <__swbuf_r+0xa0>)
 800e670:	429c      	cmp	r4, r3
 800e672:	bf08      	it	eq
 800e674:	68ec      	ldreq	r4, [r5, #12]
 800e676:	e7ca      	b.n	800e60e <__swbuf_r+0x1a>
 800e678:	4621      	mov	r1, r4
 800e67a:	4628      	mov	r0, r5
 800e67c:	f000 f81a 	bl	800e6b4 <__swsetup_r>
 800e680:	2800      	cmp	r0, #0
 800e682:	d0cb      	beq.n	800e61c <__swbuf_r+0x28>
 800e684:	f04f 37ff 	mov.w	r7, #4294967295
 800e688:	e7ea      	b.n	800e660 <__swbuf_r+0x6c>
 800e68a:	bf00      	nop
 800e68c:	0800f630 	.word	0x0800f630
 800e690:	0800f650 	.word	0x0800f650
 800e694:	0800f610 	.word	0x0800f610

0800e698 <__ascii_wctomb>:
 800e698:	b149      	cbz	r1, 800e6ae <__ascii_wctomb+0x16>
 800e69a:	2aff      	cmp	r2, #255	; 0xff
 800e69c:	bf85      	ittet	hi
 800e69e:	238a      	movhi	r3, #138	; 0x8a
 800e6a0:	6003      	strhi	r3, [r0, #0]
 800e6a2:	700a      	strbls	r2, [r1, #0]
 800e6a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800e6a8:	bf98      	it	ls
 800e6aa:	2001      	movls	r0, #1
 800e6ac:	4770      	bx	lr
 800e6ae:	4608      	mov	r0, r1
 800e6b0:	4770      	bx	lr
	...

0800e6b4 <__swsetup_r>:
 800e6b4:	4b32      	ldr	r3, [pc, #200]	; (800e780 <__swsetup_r+0xcc>)
 800e6b6:	b570      	push	{r4, r5, r6, lr}
 800e6b8:	681d      	ldr	r5, [r3, #0]
 800e6ba:	4606      	mov	r6, r0
 800e6bc:	460c      	mov	r4, r1
 800e6be:	b125      	cbz	r5, 800e6ca <__swsetup_r+0x16>
 800e6c0:	69ab      	ldr	r3, [r5, #24]
 800e6c2:	b913      	cbnz	r3, 800e6ca <__swsetup_r+0x16>
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	f000 f985 	bl	800e9d4 <__sinit>
 800e6ca:	4b2e      	ldr	r3, [pc, #184]	; (800e784 <__swsetup_r+0xd0>)
 800e6cc:	429c      	cmp	r4, r3
 800e6ce:	d10f      	bne.n	800e6f0 <__swsetup_r+0x3c>
 800e6d0:	686c      	ldr	r4, [r5, #4]
 800e6d2:	89a3      	ldrh	r3, [r4, #12]
 800e6d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6d8:	0719      	lsls	r1, r3, #28
 800e6da:	d42c      	bmi.n	800e736 <__swsetup_r+0x82>
 800e6dc:	06dd      	lsls	r5, r3, #27
 800e6de:	d411      	bmi.n	800e704 <__swsetup_r+0x50>
 800e6e0:	2309      	movs	r3, #9
 800e6e2:	6033      	str	r3, [r6, #0]
 800e6e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e6e8:	81a3      	strh	r3, [r4, #12]
 800e6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ee:	e03e      	b.n	800e76e <__swsetup_r+0xba>
 800e6f0:	4b25      	ldr	r3, [pc, #148]	; (800e788 <__swsetup_r+0xd4>)
 800e6f2:	429c      	cmp	r4, r3
 800e6f4:	d101      	bne.n	800e6fa <__swsetup_r+0x46>
 800e6f6:	68ac      	ldr	r4, [r5, #8]
 800e6f8:	e7eb      	b.n	800e6d2 <__swsetup_r+0x1e>
 800e6fa:	4b24      	ldr	r3, [pc, #144]	; (800e78c <__swsetup_r+0xd8>)
 800e6fc:	429c      	cmp	r4, r3
 800e6fe:	bf08      	it	eq
 800e700:	68ec      	ldreq	r4, [r5, #12]
 800e702:	e7e6      	b.n	800e6d2 <__swsetup_r+0x1e>
 800e704:	0758      	lsls	r0, r3, #29
 800e706:	d512      	bpl.n	800e72e <__swsetup_r+0x7a>
 800e708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e70a:	b141      	cbz	r1, 800e71e <__swsetup_r+0x6a>
 800e70c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e710:	4299      	cmp	r1, r3
 800e712:	d002      	beq.n	800e71a <__swsetup_r+0x66>
 800e714:	4630      	mov	r0, r6
 800e716:	f7fe ff8d 	bl	800d634 <_free_r>
 800e71a:	2300      	movs	r3, #0
 800e71c:	6363      	str	r3, [r4, #52]	; 0x34
 800e71e:	89a3      	ldrh	r3, [r4, #12]
 800e720:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e724:	81a3      	strh	r3, [r4, #12]
 800e726:	2300      	movs	r3, #0
 800e728:	6063      	str	r3, [r4, #4]
 800e72a:	6923      	ldr	r3, [r4, #16]
 800e72c:	6023      	str	r3, [r4, #0]
 800e72e:	89a3      	ldrh	r3, [r4, #12]
 800e730:	f043 0308 	orr.w	r3, r3, #8
 800e734:	81a3      	strh	r3, [r4, #12]
 800e736:	6923      	ldr	r3, [r4, #16]
 800e738:	b94b      	cbnz	r3, 800e74e <__swsetup_r+0x9a>
 800e73a:	89a3      	ldrh	r3, [r4, #12]
 800e73c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e744:	d003      	beq.n	800e74e <__swsetup_r+0x9a>
 800e746:	4621      	mov	r1, r4
 800e748:	4630      	mov	r0, r6
 800e74a:	f000 fa09 	bl	800eb60 <__smakebuf_r>
 800e74e:	89a0      	ldrh	r0, [r4, #12]
 800e750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e754:	f010 0301 	ands.w	r3, r0, #1
 800e758:	d00a      	beq.n	800e770 <__swsetup_r+0xbc>
 800e75a:	2300      	movs	r3, #0
 800e75c:	60a3      	str	r3, [r4, #8]
 800e75e:	6963      	ldr	r3, [r4, #20]
 800e760:	425b      	negs	r3, r3
 800e762:	61a3      	str	r3, [r4, #24]
 800e764:	6923      	ldr	r3, [r4, #16]
 800e766:	b943      	cbnz	r3, 800e77a <__swsetup_r+0xc6>
 800e768:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e76c:	d1ba      	bne.n	800e6e4 <__swsetup_r+0x30>
 800e76e:	bd70      	pop	{r4, r5, r6, pc}
 800e770:	0781      	lsls	r1, r0, #30
 800e772:	bf58      	it	pl
 800e774:	6963      	ldrpl	r3, [r4, #20]
 800e776:	60a3      	str	r3, [r4, #8]
 800e778:	e7f4      	b.n	800e764 <__swsetup_r+0xb0>
 800e77a:	2000      	movs	r0, #0
 800e77c:	e7f7      	b.n	800e76e <__swsetup_r+0xba>
 800e77e:	bf00      	nop
 800e780:	20000074 	.word	0x20000074
 800e784:	0800f630 	.word	0x0800f630
 800e788:	0800f650 	.word	0x0800f650
 800e78c:	0800f610 	.word	0x0800f610

0800e790 <abort>:
 800e790:	b508      	push	{r3, lr}
 800e792:	2006      	movs	r0, #6
 800e794:	f000 faa2 	bl	800ecdc <raise>
 800e798:	2001      	movs	r0, #1
 800e79a:	f7f3 faf1 	bl	8001d80 <_exit>
	...

0800e7a0 <__sflush_r>:
 800e7a0:	898a      	ldrh	r2, [r1, #12]
 800e7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7a6:	4605      	mov	r5, r0
 800e7a8:	0710      	lsls	r0, r2, #28
 800e7aa:	460c      	mov	r4, r1
 800e7ac:	d458      	bmi.n	800e860 <__sflush_r+0xc0>
 800e7ae:	684b      	ldr	r3, [r1, #4]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	dc05      	bgt.n	800e7c0 <__sflush_r+0x20>
 800e7b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	dc02      	bgt.n	800e7c0 <__sflush_r+0x20>
 800e7ba:	2000      	movs	r0, #0
 800e7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7c2:	2e00      	cmp	r6, #0
 800e7c4:	d0f9      	beq.n	800e7ba <__sflush_r+0x1a>
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e7cc:	682f      	ldr	r7, [r5, #0]
 800e7ce:	602b      	str	r3, [r5, #0]
 800e7d0:	d032      	beq.n	800e838 <__sflush_r+0x98>
 800e7d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e7d4:	89a3      	ldrh	r3, [r4, #12]
 800e7d6:	075a      	lsls	r2, r3, #29
 800e7d8:	d505      	bpl.n	800e7e6 <__sflush_r+0x46>
 800e7da:	6863      	ldr	r3, [r4, #4]
 800e7dc:	1ac0      	subs	r0, r0, r3
 800e7de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e7e0:	b10b      	cbz	r3, 800e7e6 <__sflush_r+0x46>
 800e7e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e7e4:	1ac0      	subs	r0, r0, r3
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7ec:	6a21      	ldr	r1, [r4, #32]
 800e7ee:	4628      	mov	r0, r5
 800e7f0:	47b0      	blx	r6
 800e7f2:	1c43      	adds	r3, r0, #1
 800e7f4:	89a3      	ldrh	r3, [r4, #12]
 800e7f6:	d106      	bne.n	800e806 <__sflush_r+0x66>
 800e7f8:	6829      	ldr	r1, [r5, #0]
 800e7fa:	291d      	cmp	r1, #29
 800e7fc:	d82c      	bhi.n	800e858 <__sflush_r+0xb8>
 800e7fe:	4a2a      	ldr	r2, [pc, #168]	; (800e8a8 <__sflush_r+0x108>)
 800e800:	40ca      	lsrs	r2, r1
 800e802:	07d6      	lsls	r6, r2, #31
 800e804:	d528      	bpl.n	800e858 <__sflush_r+0xb8>
 800e806:	2200      	movs	r2, #0
 800e808:	6062      	str	r2, [r4, #4]
 800e80a:	04d9      	lsls	r1, r3, #19
 800e80c:	6922      	ldr	r2, [r4, #16]
 800e80e:	6022      	str	r2, [r4, #0]
 800e810:	d504      	bpl.n	800e81c <__sflush_r+0x7c>
 800e812:	1c42      	adds	r2, r0, #1
 800e814:	d101      	bne.n	800e81a <__sflush_r+0x7a>
 800e816:	682b      	ldr	r3, [r5, #0]
 800e818:	b903      	cbnz	r3, 800e81c <__sflush_r+0x7c>
 800e81a:	6560      	str	r0, [r4, #84]	; 0x54
 800e81c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e81e:	602f      	str	r7, [r5, #0]
 800e820:	2900      	cmp	r1, #0
 800e822:	d0ca      	beq.n	800e7ba <__sflush_r+0x1a>
 800e824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e828:	4299      	cmp	r1, r3
 800e82a:	d002      	beq.n	800e832 <__sflush_r+0x92>
 800e82c:	4628      	mov	r0, r5
 800e82e:	f7fe ff01 	bl	800d634 <_free_r>
 800e832:	2000      	movs	r0, #0
 800e834:	6360      	str	r0, [r4, #52]	; 0x34
 800e836:	e7c1      	b.n	800e7bc <__sflush_r+0x1c>
 800e838:	6a21      	ldr	r1, [r4, #32]
 800e83a:	2301      	movs	r3, #1
 800e83c:	4628      	mov	r0, r5
 800e83e:	47b0      	blx	r6
 800e840:	1c41      	adds	r1, r0, #1
 800e842:	d1c7      	bne.n	800e7d4 <__sflush_r+0x34>
 800e844:	682b      	ldr	r3, [r5, #0]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d0c4      	beq.n	800e7d4 <__sflush_r+0x34>
 800e84a:	2b1d      	cmp	r3, #29
 800e84c:	d001      	beq.n	800e852 <__sflush_r+0xb2>
 800e84e:	2b16      	cmp	r3, #22
 800e850:	d101      	bne.n	800e856 <__sflush_r+0xb6>
 800e852:	602f      	str	r7, [r5, #0]
 800e854:	e7b1      	b.n	800e7ba <__sflush_r+0x1a>
 800e856:	89a3      	ldrh	r3, [r4, #12]
 800e858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e85c:	81a3      	strh	r3, [r4, #12]
 800e85e:	e7ad      	b.n	800e7bc <__sflush_r+0x1c>
 800e860:	690f      	ldr	r7, [r1, #16]
 800e862:	2f00      	cmp	r7, #0
 800e864:	d0a9      	beq.n	800e7ba <__sflush_r+0x1a>
 800e866:	0793      	lsls	r3, r2, #30
 800e868:	680e      	ldr	r6, [r1, #0]
 800e86a:	bf08      	it	eq
 800e86c:	694b      	ldreq	r3, [r1, #20]
 800e86e:	600f      	str	r7, [r1, #0]
 800e870:	bf18      	it	ne
 800e872:	2300      	movne	r3, #0
 800e874:	eba6 0807 	sub.w	r8, r6, r7
 800e878:	608b      	str	r3, [r1, #8]
 800e87a:	f1b8 0f00 	cmp.w	r8, #0
 800e87e:	dd9c      	ble.n	800e7ba <__sflush_r+0x1a>
 800e880:	6a21      	ldr	r1, [r4, #32]
 800e882:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e884:	4643      	mov	r3, r8
 800e886:	463a      	mov	r2, r7
 800e888:	4628      	mov	r0, r5
 800e88a:	47b0      	blx	r6
 800e88c:	2800      	cmp	r0, #0
 800e88e:	dc06      	bgt.n	800e89e <__sflush_r+0xfe>
 800e890:	89a3      	ldrh	r3, [r4, #12]
 800e892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e896:	81a3      	strh	r3, [r4, #12]
 800e898:	f04f 30ff 	mov.w	r0, #4294967295
 800e89c:	e78e      	b.n	800e7bc <__sflush_r+0x1c>
 800e89e:	4407      	add	r7, r0
 800e8a0:	eba8 0800 	sub.w	r8, r8, r0
 800e8a4:	e7e9      	b.n	800e87a <__sflush_r+0xda>
 800e8a6:	bf00      	nop
 800e8a8:	20400001 	.word	0x20400001

0800e8ac <_fflush_r>:
 800e8ac:	b538      	push	{r3, r4, r5, lr}
 800e8ae:	690b      	ldr	r3, [r1, #16]
 800e8b0:	4605      	mov	r5, r0
 800e8b2:	460c      	mov	r4, r1
 800e8b4:	b913      	cbnz	r3, 800e8bc <_fflush_r+0x10>
 800e8b6:	2500      	movs	r5, #0
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	bd38      	pop	{r3, r4, r5, pc}
 800e8bc:	b118      	cbz	r0, 800e8c6 <_fflush_r+0x1a>
 800e8be:	6983      	ldr	r3, [r0, #24]
 800e8c0:	b90b      	cbnz	r3, 800e8c6 <_fflush_r+0x1a>
 800e8c2:	f000 f887 	bl	800e9d4 <__sinit>
 800e8c6:	4b14      	ldr	r3, [pc, #80]	; (800e918 <_fflush_r+0x6c>)
 800e8c8:	429c      	cmp	r4, r3
 800e8ca:	d11b      	bne.n	800e904 <_fflush_r+0x58>
 800e8cc:	686c      	ldr	r4, [r5, #4]
 800e8ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d0ef      	beq.n	800e8b6 <_fflush_r+0xa>
 800e8d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e8d8:	07d0      	lsls	r0, r2, #31
 800e8da:	d404      	bmi.n	800e8e6 <_fflush_r+0x3a>
 800e8dc:	0599      	lsls	r1, r3, #22
 800e8de:	d402      	bmi.n	800e8e6 <_fflush_r+0x3a>
 800e8e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8e2:	f000 f915 	bl	800eb10 <__retarget_lock_acquire_recursive>
 800e8e6:	4628      	mov	r0, r5
 800e8e8:	4621      	mov	r1, r4
 800e8ea:	f7ff ff59 	bl	800e7a0 <__sflush_r>
 800e8ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8f0:	07da      	lsls	r2, r3, #31
 800e8f2:	4605      	mov	r5, r0
 800e8f4:	d4e0      	bmi.n	800e8b8 <_fflush_r+0xc>
 800e8f6:	89a3      	ldrh	r3, [r4, #12]
 800e8f8:	059b      	lsls	r3, r3, #22
 800e8fa:	d4dd      	bmi.n	800e8b8 <_fflush_r+0xc>
 800e8fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8fe:	f000 f908 	bl	800eb12 <__retarget_lock_release_recursive>
 800e902:	e7d9      	b.n	800e8b8 <_fflush_r+0xc>
 800e904:	4b05      	ldr	r3, [pc, #20]	; (800e91c <_fflush_r+0x70>)
 800e906:	429c      	cmp	r4, r3
 800e908:	d101      	bne.n	800e90e <_fflush_r+0x62>
 800e90a:	68ac      	ldr	r4, [r5, #8]
 800e90c:	e7df      	b.n	800e8ce <_fflush_r+0x22>
 800e90e:	4b04      	ldr	r3, [pc, #16]	; (800e920 <_fflush_r+0x74>)
 800e910:	429c      	cmp	r4, r3
 800e912:	bf08      	it	eq
 800e914:	68ec      	ldreq	r4, [r5, #12]
 800e916:	e7da      	b.n	800e8ce <_fflush_r+0x22>
 800e918:	0800f630 	.word	0x0800f630
 800e91c:	0800f650 	.word	0x0800f650
 800e920:	0800f610 	.word	0x0800f610

0800e924 <std>:
 800e924:	2300      	movs	r3, #0
 800e926:	b510      	push	{r4, lr}
 800e928:	4604      	mov	r4, r0
 800e92a:	e9c0 3300 	strd	r3, r3, [r0]
 800e92e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e932:	6083      	str	r3, [r0, #8]
 800e934:	8181      	strh	r1, [r0, #12]
 800e936:	6643      	str	r3, [r0, #100]	; 0x64
 800e938:	81c2      	strh	r2, [r0, #14]
 800e93a:	6183      	str	r3, [r0, #24]
 800e93c:	4619      	mov	r1, r3
 800e93e:	2208      	movs	r2, #8
 800e940:	305c      	adds	r0, #92	; 0x5c
 800e942:	f7fb f8f5 	bl	8009b30 <memset>
 800e946:	4b05      	ldr	r3, [pc, #20]	; (800e95c <std+0x38>)
 800e948:	6263      	str	r3, [r4, #36]	; 0x24
 800e94a:	4b05      	ldr	r3, [pc, #20]	; (800e960 <std+0x3c>)
 800e94c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e94e:	4b05      	ldr	r3, [pc, #20]	; (800e964 <std+0x40>)
 800e950:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e952:	4b05      	ldr	r3, [pc, #20]	; (800e968 <std+0x44>)
 800e954:	6224      	str	r4, [r4, #32]
 800e956:	6323      	str	r3, [r4, #48]	; 0x30
 800e958:	bd10      	pop	{r4, pc}
 800e95a:	bf00      	nop
 800e95c:	0800a8d9 	.word	0x0800a8d9
 800e960:	0800a8ff 	.word	0x0800a8ff
 800e964:	0800a937 	.word	0x0800a937
 800e968:	0800a95b 	.word	0x0800a95b

0800e96c <_cleanup_r>:
 800e96c:	4901      	ldr	r1, [pc, #4]	; (800e974 <_cleanup_r+0x8>)
 800e96e:	f000 b8af 	b.w	800ead0 <_fwalk_reent>
 800e972:	bf00      	nop
 800e974:	0800e8ad 	.word	0x0800e8ad

0800e978 <__sfmoreglue>:
 800e978:	b570      	push	{r4, r5, r6, lr}
 800e97a:	2268      	movs	r2, #104	; 0x68
 800e97c:	1e4d      	subs	r5, r1, #1
 800e97e:	4355      	muls	r5, r2
 800e980:	460e      	mov	r6, r1
 800e982:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e986:	f7fe fec1 	bl	800d70c <_malloc_r>
 800e98a:	4604      	mov	r4, r0
 800e98c:	b140      	cbz	r0, 800e9a0 <__sfmoreglue+0x28>
 800e98e:	2100      	movs	r1, #0
 800e990:	e9c0 1600 	strd	r1, r6, [r0]
 800e994:	300c      	adds	r0, #12
 800e996:	60a0      	str	r0, [r4, #8]
 800e998:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e99c:	f7fb f8c8 	bl	8009b30 <memset>
 800e9a0:	4620      	mov	r0, r4
 800e9a2:	bd70      	pop	{r4, r5, r6, pc}

0800e9a4 <__sfp_lock_acquire>:
 800e9a4:	4801      	ldr	r0, [pc, #4]	; (800e9ac <__sfp_lock_acquire+0x8>)
 800e9a6:	f000 b8b3 	b.w	800eb10 <__retarget_lock_acquire_recursive>
 800e9aa:	bf00      	nop
 800e9ac:	2000051d 	.word	0x2000051d

0800e9b0 <__sfp_lock_release>:
 800e9b0:	4801      	ldr	r0, [pc, #4]	; (800e9b8 <__sfp_lock_release+0x8>)
 800e9b2:	f000 b8ae 	b.w	800eb12 <__retarget_lock_release_recursive>
 800e9b6:	bf00      	nop
 800e9b8:	2000051d 	.word	0x2000051d

0800e9bc <__sinit_lock_acquire>:
 800e9bc:	4801      	ldr	r0, [pc, #4]	; (800e9c4 <__sinit_lock_acquire+0x8>)
 800e9be:	f000 b8a7 	b.w	800eb10 <__retarget_lock_acquire_recursive>
 800e9c2:	bf00      	nop
 800e9c4:	2000051e 	.word	0x2000051e

0800e9c8 <__sinit_lock_release>:
 800e9c8:	4801      	ldr	r0, [pc, #4]	; (800e9d0 <__sinit_lock_release+0x8>)
 800e9ca:	f000 b8a2 	b.w	800eb12 <__retarget_lock_release_recursive>
 800e9ce:	bf00      	nop
 800e9d0:	2000051e 	.word	0x2000051e

0800e9d4 <__sinit>:
 800e9d4:	b510      	push	{r4, lr}
 800e9d6:	4604      	mov	r4, r0
 800e9d8:	f7ff fff0 	bl	800e9bc <__sinit_lock_acquire>
 800e9dc:	69a3      	ldr	r3, [r4, #24]
 800e9de:	b11b      	cbz	r3, 800e9e8 <__sinit+0x14>
 800e9e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9e4:	f7ff bff0 	b.w	800e9c8 <__sinit_lock_release>
 800e9e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e9ec:	6523      	str	r3, [r4, #80]	; 0x50
 800e9ee:	4b13      	ldr	r3, [pc, #76]	; (800ea3c <__sinit+0x68>)
 800e9f0:	4a13      	ldr	r2, [pc, #76]	; (800ea40 <__sinit+0x6c>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e9f6:	42a3      	cmp	r3, r4
 800e9f8:	bf04      	itt	eq
 800e9fa:	2301      	moveq	r3, #1
 800e9fc:	61a3      	streq	r3, [r4, #24]
 800e9fe:	4620      	mov	r0, r4
 800ea00:	f000 f820 	bl	800ea44 <__sfp>
 800ea04:	6060      	str	r0, [r4, #4]
 800ea06:	4620      	mov	r0, r4
 800ea08:	f000 f81c 	bl	800ea44 <__sfp>
 800ea0c:	60a0      	str	r0, [r4, #8]
 800ea0e:	4620      	mov	r0, r4
 800ea10:	f000 f818 	bl	800ea44 <__sfp>
 800ea14:	2200      	movs	r2, #0
 800ea16:	60e0      	str	r0, [r4, #12]
 800ea18:	2104      	movs	r1, #4
 800ea1a:	6860      	ldr	r0, [r4, #4]
 800ea1c:	f7ff ff82 	bl	800e924 <std>
 800ea20:	68a0      	ldr	r0, [r4, #8]
 800ea22:	2201      	movs	r2, #1
 800ea24:	2109      	movs	r1, #9
 800ea26:	f7ff ff7d 	bl	800e924 <std>
 800ea2a:	68e0      	ldr	r0, [r4, #12]
 800ea2c:	2202      	movs	r2, #2
 800ea2e:	2112      	movs	r1, #18
 800ea30:	f7ff ff78 	bl	800e924 <std>
 800ea34:	2301      	movs	r3, #1
 800ea36:	61a3      	str	r3, [r4, #24]
 800ea38:	e7d2      	b.n	800e9e0 <__sinit+0xc>
 800ea3a:	bf00      	nop
 800ea3c:	0800f158 	.word	0x0800f158
 800ea40:	0800e96d 	.word	0x0800e96d

0800ea44 <__sfp>:
 800ea44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea46:	4607      	mov	r7, r0
 800ea48:	f7ff ffac 	bl	800e9a4 <__sfp_lock_acquire>
 800ea4c:	4b1e      	ldr	r3, [pc, #120]	; (800eac8 <__sfp+0x84>)
 800ea4e:	681e      	ldr	r6, [r3, #0]
 800ea50:	69b3      	ldr	r3, [r6, #24]
 800ea52:	b913      	cbnz	r3, 800ea5a <__sfp+0x16>
 800ea54:	4630      	mov	r0, r6
 800ea56:	f7ff ffbd 	bl	800e9d4 <__sinit>
 800ea5a:	3648      	adds	r6, #72	; 0x48
 800ea5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ea60:	3b01      	subs	r3, #1
 800ea62:	d503      	bpl.n	800ea6c <__sfp+0x28>
 800ea64:	6833      	ldr	r3, [r6, #0]
 800ea66:	b30b      	cbz	r3, 800eaac <__sfp+0x68>
 800ea68:	6836      	ldr	r6, [r6, #0]
 800ea6a:	e7f7      	b.n	800ea5c <__sfp+0x18>
 800ea6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ea70:	b9d5      	cbnz	r5, 800eaa8 <__sfp+0x64>
 800ea72:	4b16      	ldr	r3, [pc, #88]	; (800eacc <__sfp+0x88>)
 800ea74:	60e3      	str	r3, [r4, #12]
 800ea76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ea7a:	6665      	str	r5, [r4, #100]	; 0x64
 800ea7c:	f000 f847 	bl	800eb0e <__retarget_lock_init_recursive>
 800ea80:	f7ff ff96 	bl	800e9b0 <__sfp_lock_release>
 800ea84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ea88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ea8c:	6025      	str	r5, [r4, #0]
 800ea8e:	61a5      	str	r5, [r4, #24]
 800ea90:	2208      	movs	r2, #8
 800ea92:	4629      	mov	r1, r5
 800ea94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ea98:	f7fb f84a 	bl	8009b30 <memset>
 800ea9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eaa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaa8:	3468      	adds	r4, #104	; 0x68
 800eaaa:	e7d9      	b.n	800ea60 <__sfp+0x1c>
 800eaac:	2104      	movs	r1, #4
 800eaae:	4638      	mov	r0, r7
 800eab0:	f7ff ff62 	bl	800e978 <__sfmoreglue>
 800eab4:	4604      	mov	r4, r0
 800eab6:	6030      	str	r0, [r6, #0]
 800eab8:	2800      	cmp	r0, #0
 800eaba:	d1d5      	bne.n	800ea68 <__sfp+0x24>
 800eabc:	f7ff ff78 	bl	800e9b0 <__sfp_lock_release>
 800eac0:	230c      	movs	r3, #12
 800eac2:	603b      	str	r3, [r7, #0]
 800eac4:	e7ee      	b.n	800eaa4 <__sfp+0x60>
 800eac6:	bf00      	nop
 800eac8:	0800f158 	.word	0x0800f158
 800eacc:	ffff0001 	.word	0xffff0001

0800ead0 <_fwalk_reent>:
 800ead0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ead4:	4606      	mov	r6, r0
 800ead6:	4688      	mov	r8, r1
 800ead8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eadc:	2700      	movs	r7, #0
 800eade:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eae2:	f1b9 0901 	subs.w	r9, r9, #1
 800eae6:	d505      	bpl.n	800eaf4 <_fwalk_reent+0x24>
 800eae8:	6824      	ldr	r4, [r4, #0]
 800eaea:	2c00      	cmp	r4, #0
 800eaec:	d1f7      	bne.n	800eade <_fwalk_reent+0xe>
 800eaee:	4638      	mov	r0, r7
 800eaf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eaf4:	89ab      	ldrh	r3, [r5, #12]
 800eaf6:	2b01      	cmp	r3, #1
 800eaf8:	d907      	bls.n	800eb0a <_fwalk_reent+0x3a>
 800eafa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eafe:	3301      	adds	r3, #1
 800eb00:	d003      	beq.n	800eb0a <_fwalk_reent+0x3a>
 800eb02:	4629      	mov	r1, r5
 800eb04:	4630      	mov	r0, r6
 800eb06:	47c0      	blx	r8
 800eb08:	4307      	orrs	r7, r0
 800eb0a:	3568      	adds	r5, #104	; 0x68
 800eb0c:	e7e9      	b.n	800eae2 <_fwalk_reent+0x12>

0800eb0e <__retarget_lock_init_recursive>:
 800eb0e:	4770      	bx	lr

0800eb10 <__retarget_lock_acquire_recursive>:
 800eb10:	4770      	bx	lr

0800eb12 <__retarget_lock_release_recursive>:
 800eb12:	4770      	bx	lr

0800eb14 <__swhatbuf_r>:
 800eb14:	b570      	push	{r4, r5, r6, lr}
 800eb16:	460e      	mov	r6, r1
 800eb18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb1c:	2900      	cmp	r1, #0
 800eb1e:	b096      	sub	sp, #88	; 0x58
 800eb20:	4614      	mov	r4, r2
 800eb22:	461d      	mov	r5, r3
 800eb24:	da08      	bge.n	800eb38 <__swhatbuf_r+0x24>
 800eb26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	602a      	str	r2, [r5, #0]
 800eb2e:	061a      	lsls	r2, r3, #24
 800eb30:	d410      	bmi.n	800eb54 <__swhatbuf_r+0x40>
 800eb32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb36:	e00e      	b.n	800eb56 <__swhatbuf_r+0x42>
 800eb38:	466a      	mov	r2, sp
 800eb3a:	f000 f8eb 	bl	800ed14 <_fstat_r>
 800eb3e:	2800      	cmp	r0, #0
 800eb40:	dbf1      	blt.n	800eb26 <__swhatbuf_r+0x12>
 800eb42:	9a01      	ldr	r2, [sp, #4]
 800eb44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eb48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eb4c:	425a      	negs	r2, r3
 800eb4e:	415a      	adcs	r2, r3
 800eb50:	602a      	str	r2, [r5, #0]
 800eb52:	e7ee      	b.n	800eb32 <__swhatbuf_r+0x1e>
 800eb54:	2340      	movs	r3, #64	; 0x40
 800eb56:	2000      	movs	r0, #0
 800eb58:	6023      	str	r3, [r4, #0]
 800eb5a:	b016      	add	sp, #88	; 0x58
 800eb5c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eb60 <__smakebuf_r>:
 800eb60:	898b      	ldrh	r3, [r1, #12]
 800eb62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb64:	079d      	lsls	r5, r3, #30
 800eb66:	4606      	mov	r6, r0
 800eb68:	460c      	mov	r4, r1
 800eb6a:	d507      	bpl.n	800eb7c <__smakebuf_r+0x1c>
 800eb6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eb70:	6023      	str	r3, [r4, #0]
 800eb72:	6123      	str	r3, [r4, #16]
 800eb74:	2301      	movs	r3, #1
 800eb76:	6163      	str	r3, [r4, #20]
 800eb78:	b002      	add	sp, #8
 800eb7a:	bd70      	pop	{r4, r5, r6, pc}
 800eb7c:	ab01      	add	r3, sp, #4
 800eb7e:	466a      	mov	r2, sp
 800eb80:	f7ff ffc8 	bl	800eb14 <__swhatbuf_r>
 800eb84:	9900      	ldr	r1, [sp, #0]
 800eb86:	4605      	mov	r5, r0
 800eb88:	4630      	mov	r0, r6
 800eb8a:	f7fe fdbf 	bl	800d70c <_malloc_r>
 800eb8e:	b948      	cbnz	r0, 800eba4 <__smakebuf_r+0x44>
 800eb90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb94:	059a      	lsls	r2, r3, #22
 800eb96:	d4ef      	bmi.n	800eb78 <__smakebuf_r+0x18>
 800eb98:	f023 0303 	bic.w	r3, r3, #3
 800eb9c:	f043 0302 	orr.w	r3, r3, #2
 800eba0:	81a3      	strh	r3, [r4, #12]
 800eba2:	e7e3      	b.n	800eb6c <__smakebuf_r+0xc>
 800eba4:	4b0d      	ldr	r3, [pc, #52]	; (800ebdc <__smakebuf_r+0x7c>)
 800eba6:	62b3      	str	r3, [r6, #40]	; 0x28
 800eba8:	89a3      	ldrh	r3, [r4, #12]
 800ebaa:	6020      	str	r0, [r4, #0]
 800ebac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebb0:	81a3      	strh	r3, [r4, #12]
 800ebb2:	9b00      	ldr	r3, [sp, #0]
 800ebb4:	6163      	str	r3, [r4, #20]
 800ebb6:	9b01      	ldr	r3, [sp, #4]
 800ebb8:	6120      	str	r0, [r4, #16]
 800ebba:	b15b      	cbz	r3, 800ebd4 <__smakebuf_r+0x74>
 800ebbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebc0:	4630      	mov	r0, r6
 800ebc2:	f000 f8b9 	bl	800ed38 <_isatty_r>
 800ebc6:	b128      	cbz	r0, 800ebd4 <__smakebuf_r+0x74>
 800ebc8:	89a3      	ldrh	r3, [r4, #12]
 800ebca:	f023 0303 	bic.w	r3, r3, #3
 800ebce:	f043 0301 	orr.w	r3, r3, #1
 800ebd2:	81a3      	strh	r3, [r4, #12]
 800ebd4:	89a0      	ldrh	r0, [r4, #12]
 800ebd6:	4305      	orrs	r5, r0
 800ebd8:	81a5      	strh	r5, [r4, #12]
 800ebda:	e7cd      	b.n	800eb78 <__smakebuf_r+0x18>
 800ebdc:	0800e96d 	.word	0x0800e96d

0800ebe0 <memmove>:
 800ebe0:	4288      	cmp	r0, r1
 800ebe2:	b510      	push	{r4, lr}
 800ebe4:	eb01 0402 	add.w	r4, r1, r2
 800ebe8:	d902      	bls.n	800ebf0 <memmove+0x10>
 800ebea:	4284      	cmp	r4, r0
 800ebec:	4623      	mov	r3, r4
 800ebee:	d807      	bhi.n	800ec00 <memmove+0x20>
 800ebf0:	1e43      	subs	r3, r0, #1
 800ebf2:	42a1      	cmp	r1, r4
 800ebf4:	d008      	beq.n	800ec08 <memmove+0x28>
 800ebf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebfe:	e7f8      	b.n	800ebf2 <memmove+0x12>
 800ec00:	4402      	add	r2, r0
 800ec02:	4601      	mov	r1, r0
 800ec04:	428a      	cmp	r2, r1
 800ec06:	d100      	bne.n	800ec0a <memmove+0x2a>
 800ec08:	bd10      	pop	{r4, pc}
 800ec0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec12:	e7f7      	b.n	800ec04 <memmove+0x24>

0800ec14 <__malloc_lock>:
 800ec14:	4801      	ldr	r0, [pc, #4]	; (800ec1c <__malloc_lock+0x8>)
 800ec16:	f7ff bf7b 	b.w	800eb10 <__retarget_lock_acquire_recursive>
 800ec1a:	bf00      	nop
 800ec1c:	2000051c 	.word	0x2000051c

0800ec20 <__malloc_unlock>:
 800ec20:	4801      	ldr	r0, [pc, #4]	; (800ec28 <__malloc_unlock+0x8>)
 800ec22:	f7ff bf76 	b.w	800eb12 <__retarget_lock_release_recursive>
 800ec26:	bf00      	nop
 800ec28:	2000051c 	.word	0x2000051c

0800ec2c <_realloc_r>:
 800ec2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec30:	4680      	mov	r8, r0
 800ec32:	4614      	mov	r4, r2
 800ec34:	460e      	mov	r6, r1
 800ec36:	b921      	cbnz	r1, 800ec42 <_realloc_r+0x16>
 800ec38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec3c:	4611      	mov	r1, r2
 800ec3e:	f7fe bd65 	b.w	800d70c <_malloc_r>
 800ec42:	b92a      	cbnz	r2, 800ec50 <_realloc_r+0x24>
 800ec44:	f7fe fcf6 	bl	800d634 <_free_r>
 800ec48:	4625      	mov	r5, r4
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec50:	f000 f882 	bl	800ed58 <_malloc_usable_size_r>
 800ec54:	4284      	cmp	r4, r0
 800ec56:	4607      	mov	r7, r0
 800ec58:	d802      	bhi.n	800ec60 <_realloc_r+0x34>
 800ec5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ec5e:	d812      	bhi.n	800ec86 <_realloc_r+0x5a>
 800ec60:	4621      	mov	r1, r4
 800ec62:	4640      	mov	r0, r8
 800ec64:	f7fe fd52 	bl	800d70c <_malloc_r>
 800ec68:	4605      	mov	r5, r0
 800ec6a:	2800      	cmp	r0, #0
 800ec6c:	d0ed      	beq.n	800ec4a <_realloc_r+0x1e>
 800ec6e:	42bc      	cmp	r4, r7
 800ec70:	4622      	mov	r2, r4
 800ec72:	4631      	mov	r1, r6
 800ec74:	bf28      	it	cs
 800ec76:	463a      	movcs	r2, r7
 800ec78:	f7fd fff6 	bl	800cc68 <memcpy>
 800ec7c:	4631      	mov	r1, r6
 800ec7e:	4640      	mov	r0, r8
 800ec80:	f7fe fcd8 	bl	800d634 <_free_r>
 800ec84:	e7e1      	b.n	800ec4a <_realloc_r+0x1e>
 800ec86:	4635      	mov	r5, r6
 800ec88:	e7df      	b.n	800ec4a <_realloc_r+0x1e>

0800ec8a <_raise_r>:
 800ec8a:	291f      	cmp	r1, #31
 800ec8c:	b538      	push	{r3, r4, r5, lr}
 800ec8e:	4604      	mov	r4, r0
 800ec90:	460d      	mov	r5, r1
 800ec92:	d904      	bls.n	800ec9e <_raise_r+0x14>
 800ec94:	2316      	movs	r3, #22
 800ec96:	6003      	str	r3, [r0, #0]
 800ec98:	f04f 30ff 	mov.w	r0, #4294967295
 800ec9c:	bd38      	pop	{r3, r4, r5, pc}
 800ec9e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eca0:	b112      	cbz	r2, 800eca8 <_raise_r+0x1e>
 800eca2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eca6:	b94b      	cbnz	r3, 800ecbc <_raise_r+0x32>
 800eca8:	4620      	mov	r0, r4
 800ecaa:	f000 f831 	bl	800ed10 <_getpid_r>
 800ecae:	462a      	mov	r2, r5
 800ecb0:	4601      	mov	r1, r0
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecb8:	f000 b818 	b.w	800ecec <_kill_r>
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d00a      	beq.n	800ecd6 <_raise_r+0x4c>
 800ecc0:	1c59      	adds	r1, r3, #1
 800ecc2:	d103      	bne.n	800eccc <_raise_r+0x42>
 800ecc4:	2316      	movs	r3, #22
 800ecc6:	6003      	str	r3, [r0, #0]
 800ecc8:	2001      	movs	r0, #1
 800ecca:	e7e7      	b.n	800ec9c <_raise_r+0x12>
 800eccc:	2400      	movs	r4, #0
 800ecce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ecd2:	4628      	mov	r0, r5
 800ecd4:	4798      	blx	r3
 800ecd6:	2000      	movs	r0, #0
 800ecd8:	e7e0      	b.n	800ec9c <_raise_r+0x12>
	...

0800ecdc <raise>:
 800ecdc:	4b02      	ldr	r3, [pc, #8]	; (800ece8 <raise+0xc>)
 800ecde:	4601      	mov	r1, r0
 800ece0:	6818      	ldr	r0, [r3, #0]
 800ece2:	f7ff bfd2 	b.w	800ec8a <_raise_r>
 800ece6:	bf00      	nop
 800ece8:	20000074 	.word	0x20000074

0800ecec <_kill_r>:
 800ecec:	b538      	push	{r3, r4, r5, lr}
 800ecee:	4d07      	ldr	r5, [pc, #28]	; (800ed0c <_kill_r+0x20>)
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	4604      	mov	r4, r0
 800ecf4:	4608      	mov	r0, r1
 800ecf6:	4611      	mov	r1, r2
 800ecf8:	602b      	str	r3, [r5, #0]
 800ecfa:	f7f3 f831 	bl	8001d60 <_kill>
 800ecfe:	1c43      	adds	r3, r0, #1
 800ed00:	d102      	bne.n	800ed08 <_kill_r+0x1c>
 800ed02:	682b      	ldr	r3, [r5, #0]
 800ed04:	b103      	cbz	r3, 800ed08 <_kill_r+0x1c>
 800ed06:	6023      	str	r3, [r4, #0]
 800ed08:	bd38      	pop	{r3, r4, r5, pc}
 800ed0a:	bf00      	nop
 800ed0c:	20000518 	.word	0x20000518

0800ed10 <_getpid_r>:
 800ed10:	f7f3 b81e 	b.w	8001d50 <_getpid>

0800ed14 <_fstat_r>:
 800ed14:	b538      	push	{r3, r4, r5, lr}
 800ed16:	4d07      	ldr	r5, [pc, #28]	; (800ed34 <_fstat_r+0x20>)
 800ed18:	2300      	movs	r3, #0
 800ed1a:	4604      	mov	r4, r0
 800ed1c:	4608      	mov	r0, r1
 800ed1e:	4611      	mov	r1, r2
 800ed20:	602b      	str	r3, [r5, #0]
 800ed22:	f7f3 f87c 	bl	8001e1e <_fstat>
 800ed26:	1c43      	adds	r3, r0, #1
 800ed28:	d102      	bne.n	800ed30 <_fstat_r+0x1c>
 800ed2a:	682b      	ldr	r3, [r5, #0]
 800ed2c:	b103      	cbz	r3, 800ed30 <_fstat_r+0x1c>
 800ed2e:	6023      	str	r3, [r4, #0]
 800ed30:	bd38      	pop	{r3, r4, r5, pc}
 800ed32:	bf00      	nop
 800ed34:	20000518 	.word	0x20000518

0800ed38 <_isatty_r>:
 800ed38:	b538      	push	{r3, r4, r5, lr}
 800ed3a:	4d06      	ldr	r5, [pc, #24]	; (800ed54 <_isatty_r+0x1c>)
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	4604      	mov	r4, r0
 800ed40:	4608      	mov	r0, r1
 800ed42:	602b      	str	r3, [r5, #0]
 800ed44:	f7f3 f87b 	bl	8001e3e <_isatty>
 800ed48:	1c43      	adds	r3, r0, #1
 800ed4a:	d102      	bne.n	800ed52 <_isatty_r+0x1a>
 800ed4c:	682b      	ldr	r3, [r5, #0]
 800ed4e:	b103      	cbz	r3, 800ed52 <_isatty_r+0x1a>
 800ed50:	6023      	str	r3, [r4, #0]
 800ed52:	bd38      	pop	{r3, r4, r5, pc}
 800ed54:	20000518 	.word	0x20000518

0800ed58 <_malloc_usable_size_r>:
 800ed58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed5c:	1f18      	subs	r0, r3, #4
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	bfbc      	itt	lt
 800ed62:	580b      	ldrlt	r3, [r1, r0]
 800ed64:	18c0      	addlt	r0, r0, r3
 800ed66:	4770      	bx	lr

0800ed68 <_init>:
 800ed68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed6a:	bf00      	nop
 800ed6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed6e:	bc08      	pop	{r3}
 800ed70:	469e      	mov	lr, r3
 800ed72:	4770      	bx	lr

0800ed74 <_fini>:
 800ed74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed76:	bf00      	nop
 800ed78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed7a:	bc08      	pop	{r3}
 800ed7c:	469e      	mov	lr, r3
 800ed7e:	4770      	bx	lr
